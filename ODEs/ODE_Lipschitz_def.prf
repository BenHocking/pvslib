(ODE_Lipschitz_def
 (IMP_ODE_def_TCC1 0
  (IMP_ODE_def_TCC1-1 nil 3795301246
   ("" (expand "nonempty?" 1)
    (("" (lemma "non_empty")
      (("" (expand "nonempty?" -1) (("" (propax) nil nil)) nil)) nil))
    nil)
   ((non_empty formula-decl nil ODE_Lipschitz_def nil)
    (nonempty? const-decl "bool" sets nil))
   nil
   (IMP_ODE_def assuming "ODE_def[ODE_Lipschitz_def.d].ODE_def"
    "non_empty: ASSUMPTION sets[real].nonempty?(ODE_def.d)")))
 (IMP_ODE_def_TCC2 0
  (IMP_ODE_def_TCC2-1 nil 3795301246
   ("" (lemma "connected") (("" (propax) nil nil)) nil)
   ((connected formula-decl nil ODE_Lipschitz_def nil)) nil
   (IMP_ODE_def assuming "ODE_def[ODE_Lipschitz_def.d].ODE_def"
    "connected: ASSUMPTION deriv_domain_def[(ODE_def.d)].connected?")))
 (IMP_ODE_def_TCC3 0
  (IMP_ODE_def_TCC3-1 nil 3795301246
   ("" (lemma "not_one_element") (("" (propax) nil nil)) nil)
   ((not_one_element formula-decl nil ODE_Lipschitz_def nil)) nil
   (IMP_ODE_def assuming "ODE_def[ODE_Lipschitz_def.d].ODE_def"
    "not_one_element: ASSUMPTION deriv_domain_def[(ODE_def.d)].not_one_element?")))
 (Lip_d?_TCC1 0
  (Lip_d?_TCC1-2 nil 3787587345
   ("" (skeep)
    (("" (typepred "f(t,y1)" "f(t,y2)" "f(t,y1)-f(t,y2)")
      (("" (assert) nil nil)) nil))
    nil)
   ((- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (Vector type-eq-decl nil matrices matrices)
    (od_f type-eq-decl nil ODE_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (d formal-const-decl "[real -> bool]" ODE_Lipschitz_def nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis))
   nil
   (Lip_d? subtype
    "(matrices.-)(ODE_Lipschitz_def.f(ODE_Lipschitz_def.t, ODE_Lipschitz_def.y1), ODE_Lipschitz_def.f(ODE_Lipschitz_def.t, ODE_Lipschitz_def.y2))"
    "(list_adt[real].cons?)"))
  (Lip_d?_TCC1-1 nil 3787587317 ("" (subtype-tcc) nil nil) nil nil
   (Lip_d? subtype
    "(matrices.-)(ODE_Lipschitz_def.f(ODE_Lipschitz_def.t, ODE_Lipschitz_def.y1), ODE_Lipschitz_def.f(ODE_Lipschitz_def.t, ODE_Lipschitz_def.y2))"
    "(list_adt[real].cons?)")))
 (Lip_d?_TCC2 0
  (Lip_d?_TCC2-2 nil 3787587361
   ("" (skeep)
    (("" (typepred "y1-y2" "y1" "y2") (("" (assert) nil nil)) nil))
    nil)
   ((posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (VectorN type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vector type-eq-decl nil matrices matrices)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis))
   nil
   (Lip_d? subtype
    "(matrices.-)(ODE_Lipschitz_def.y1, ODE_Lipschitz_def.y2)"
    "(list_adt[real].cons?)"))
  (Lip_d?_TCC2-1 nil 3787587317 ("" (subtype-tcc) nil nil) nil nil
   (Lip_d? subtype
    "(matrices.-)(ODE_Lipschitz_def.y1, ODE_Lipschitz_def.y2)"
    "(list_adt[real].cons?)")))
 (Lip_norm_od_f 0
  (Lip_norm_od_f-2 nil 3787587385
   ("" (skeep)
    (("" (split 1)
      (("1" (flatten)
        (("1" (expand "Lip_d?" -1)
          (("1" (expand "Lip_d_E?" 1)
            (("1" (inst 1 "norm_2(n)")
              (("1" (inst -1 "norm_2(n)") nil nil)) nil))
            nil))
          nil))
        nil)
       ("2" (flatten)
        (("2" (expand "Lip_d_E?" -1)
          (("2" (expand "Lip_d?" 1 1)
            (("2" (skeep)
              (("2" (skeep -1)
                (("2" (skeep)
                  (("2" (lemma "equiv_norm[n]")
                    (("2" (inst -1 "n1" "n1!1")
                      (("2" (expand "equiv?" -1)
                        (("2" (skeep -1)
                          (("2" (inst 1 "(c2*L)/c1")
                            (("2" (skeep)
                              (("2"
                                (inst -2 "t" "y1" "y2")
                                (("2"
                                  (inst-cp -1 "f(t,y1)-f(t,y2)")
                                  (("1"
                                    (inst -1 "y1-y2")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (div-by -3 "c1")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (div-by -5 "c1")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (mult-by -2 "L")
                                                  (("1"
                                                    (div-by -1 "c1")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (typepred "y1-y2" "y1" "y2")
                                      (("2"
                                        (hide -1 -3 -5)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (expand "max" -1 1)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (typepred
                                     "(f(t, y1) - f(t, y2))"
                                     "f(t,y1)"
                                     "f(t,y2)")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (expand "max" -2)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Lip_d? const-decl "bool" ODE_Lipschitz_def nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (norm? const-decl "bool" norms mv_analysis)
    (norm_2 const-decl "(norm?(m))" norms mv_analysis)
    (Lip_d_E? const-decl "bool" ODE_Lipschitz_def nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis)
    (Vector type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (n skolem-const-decl "posnat" ODE_Lipschitz_def nil)
    (od_f type-eq-decl nil ODE_def nil)
    (f skolem-const-decl "od_f[d](n)" ODE_Lipschitz_def nil)
    (t skolem-const-decl "(d)" ODE_Lipschitz_def nil)
    (y1 skolem-const-decl "VectorN(n)" ODE_Lipschitz_def nil)
    (y2 skolem-const-decl "VectorN(n)" ODE_Lipschitz_def nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (both_sides_div_pos_le1 formula-decl nil real_props nil)
    (times_div_cancel1 formula-decl nil extra_real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (both_sides_times_pos_le1_imp formula-decl nil extra_real_props
     nil)
    (d formal-const-decl "[real -> bool]" ODE_Lipschitz_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices matrices)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (equiv? const-decl "bool" norms_equiv mv_analysis)
    (equiv_norm formula-decl nil norms_equiv mv_analysis))
   nil)
  (Lip_norm_od_f-1 nil 3787585976
   ("" (skeep)
    (("" (split 1)
      (("1" (flatten)
        (("1" (expand "Lip_D?" -1)
          (("1" (expand "Lip_D_E?" 1)
            (("1" (inst 1 "norm_2(n)")
              (("1" (inst -1 "norm_2(n)") nil nil)) nil))
            nil))
          nil))
        nil)
       ("2" (flatten)
        (("2" (expand "Lip_D_E?" -1)
          (("2" (expand "Lip_D?" 1 1)
            (("2" (skeep)
              (("2" (skeep -1)
                (("2" (skeep)
                  (("2" (lemma "equiv_norm[n]")
                    (("2" (inst -1 "n1" "n1!1")
                      (("2" (expand "equiv?" -1)
                        (("2" (skeep -1)
                          (("2" (inst 1 "(c2*L)/c1")
                            (("2" (skeep)
                              (("2"
                                (inst -2 "t" "y1" "y2")
                                (("2"
                                  (inst-cp -1 "f(t,y1)-f(t,y2)")
                                  (("1"
                                    (inst -1 "y1-y2")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (div-by -3 "c1")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (div-by -5 "c1")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (mult-by -2 "L")
                                                  (("1"
                                                    (div-by -1 "c1")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (typepred "y1-y2" "y1" "y2")
                                      (("2"
                                        (hide -1 -3 -5)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (expand "max" -1 1)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (typepred
                                     "(f(t, y1) - f(t, y2))"
                                     "f(t,y1)"
                                     "f(t,y2)")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (expand "max" -2)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (norm? const-decl "bool" norms mv_analysis)
    (norm_2 const-decl "(norm?(m))" norms mv_analysis)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (Vector type-eq-decl nil matrices matrices)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (both_sides_div_pos_le1 formula-decl nil real_props nil)
    (times_div_cancel1 formula-decl nil extra_real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (both_sides_times_pos_le1_imp formula-decl nil extra_real_props
     nil)
    (VectorN type-eq-decl nil matrices matrices)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (equiv? const-decl "bool" norms_equiv mv_analysis)
    (equiv_norm formula-decl nil norms_equiv mv_analysis))
   shostak))
 (Lip_entry?_TCC1 0
  (Lip_entry?_TCC1-1 nil 3791627479 ("" (subtype-tcc) nil nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (d formal-const-decl "[real -> bool]" ODE_Lipschitz_def nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices matrices)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (Lip_entry? subtype "ODE_Lipschitz_def.i"
    "below[length[real](f(t, y1))]")))
 (Lip_entry?_TCC2 0
  (Lip_entry?_TCC2-1 nil 3791627479 ("" (subtype-tcc) nil nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (d formal-const-decl "[real -> bool]" ODE_Lipschitz_def nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices matrices)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (Lip_entry? subtype "ODE_Lipschitz_def.i"
    "below[length[real](f(t, y2))]")))
 (Lip_entry?_TCC3 0
  (Lip_entry?_TCC3-1 nil 3791627479
   ("" (skeep)
    (("" (typepred "y1-y2" "y1" "y2") (("" (assert) nil nil)) nil))
    nil)
   ((posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (VectorN type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vector type-eq-decl nil matrices matrices)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis))
   nil
   (Lip_entry? subtype
    "(matrices.-)(ODE_Lipschitz_def.y1, ODE_Lipschitz_def.y2)"
    "(list_adt[real].cons?)")))
 (Lip_entry_c_TCC1 0
  (Lip_entry_c_TCC1-1 nil 3791640073 ("" (subtype-tcc) nil nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (d formal-const-decl "[real -> bool]" ODE_Lipschitz_def nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices matrices)
    (Lip_entry? const-decl "bool" ODE_Lipschitz_def nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (norm_inf const-decl "[(cons?) -> nonneg_real]" norms mv_analysis)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (sub const-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (norm_inf const-decl "(norm?(m))" norms mv_analysis))
   nil
   (Lip_entry_c subtype "ODE_Lipschitz_def.i"
    "below[length[real](f(t, y1))]")))
 (Lip_entry_c_TCC2 0
  (Lip_entry_c_TCC2-1 nil 3791640073 ("" (subtype-tcc) nil nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (d formal-const-decl "[real -> bool]" ODE_Lipschitz_def nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices matrices)
    (Lip_entry? const-decl "bool" ODE_Lipschitz_def nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (norm_inf const-decl "[(cons?) -> nonneg_real]" norms mv_analysis)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (sub const-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (norm_inf const-decl "(norm?(m))" norms mv_analysis))
   nil
   (Lip_entry_c subtype "ODE_Lipschitz_def.i"
    "below[length[real](f(t, y2))]")))
 (Lip_entry_c_TCC3 0
  (Lip_entry_c_TCC3-1 nil 3791640073
   ("" (skeep*)
    (("" (typepred "y1-y2" "y1" "y2") (("" (assert) nil nil)) nil))
    nil)
   ((posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (VectorN type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vector type-eq-decl nil matrices matrices)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis))
   nil
   (Lip_entry_c subtype
    "(matrices.-)(ODE_Lipschitz_def.y1, ODE_Lipschitz_def.y2)"
    "(list_adt[real].cons?)")))
 (Lip_entry_c_TCC4 0
  (Lip_entry_c_TCC5-1 nil 3791640073
   (""
    (inst 1
     "LAMBDA(n,m:posnat): LAMBDA(f: (Lip_entry?(n,m))): choose( {L: nnreal |
                           FORALL (i: below(n), t: (d),
                                   y1, y2: VectorN(m)):
                             abs(nth[real](f(t, y1), i) -
                                  nth[real](f(t, y2), i))
                              <= L * norm_inf(m)(y1 - y2)})")
    (("1" (induct "n")
      (("1" (assert) nil nil) ("2" (assert) nil nil)
       ("3" (skeep)
        (("3" (case "j=0")
          (("1" (assert)
            (("1" (skeep)
              (("1" (expand "nonempty?" 1)
                (("1" (expand "empty?" -4)
                  (("1" (typepred "f")
                    (("1" (expand "Lip_entry?" -1)
                      (("1" (hide -3)
                        (("1" (inst -1 "0")
                          (("1" (skeep)
                            (("1" (inst -4 "L")
                              (("1"
                                (expand "member" 1)
                                (("1"
                                  (skeep)
                                  (("1"
                                    (typepred "i")
                                    (("1"
                                      (case "NOT i=0")
                                      (("1" (assert) nil nil)
                                       ("2"
                                        (replace -1)
                                        (("2"
                                          (expand "nth")
                                          (("2"
                                            (inst -3 "t" "y1" "y2")
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (assert)
            (("2" (skeep)
              (("2" (expand "nonempty?" 2)
                (("2" (expand "empty?" -3)
                  (("2" (typepred "f")
                    (("2"
                      (inst -2 "m"
                       "LAMBDA(t:(d), y:VectorN(m)): cdr(f(t,y))")
                      (("1" (assert)
                        (("1" (expand "nonempty?" -2)
                          (("1" (expand "empty?" 2)
                            (("1" (skeep)
                              (("1"
                                (expand "member " -2)
                                (("1"
                                  (expand "Lip_entry?" -1)
                                  (("1"
                                    (inst -1 "0")
                                    (("1"
                                      (skeep)
                                      (("1"
                                        (inst -4 "max(x,L)")
                                        (("1"
                                          (skeep)
                                          (("1"
                                            (case "i=0")
                                            (("1"
                                              (inst -2 "t" "y1" "y2")
                                              (("1"
                                                (replace -1)
                                                (("1"
                                                  (expand "max" 2 1)
                                                  (("1"
                                                    (lift-if 2)
                                                    (("1"
                                                      (split 2)
                                                      (("1"
                                                        (flatten)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        (("2"
                                                          (flatten)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (case
                                                               "x=L")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (case
                                                                 "x>L")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (case
                                                                     " L * norm_inf(m)(y1 - y2) <= x * norm_inf(m)(y1-y2)")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (case
                                                                       "norm_inf(m)(y1 - y2) =0")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil)
                                                                       ("2"
                                                                        (div-by
                                                                         2
                                                                         "norm_inf(m)(y1 - y2)")
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (inst
                                               -2
                                               "i-1"
                                               "t"
                                               "y1"
                                               "y2")
                                              (("1"
                                                (inst -1 "t" "y1" "y2")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand "nth" 3 1)
                                                    (("1"
                                                      (expand
                                                       "nth"
                                                       3
                                                       2)
                                                      (("1"
                                                        (expand
                                                         "max"
                                                         3)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (lift-if 3)
                                                            (("1"
                                                              (split 3)
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (case
                                                                     "x * norm_inf(m)(y1 - y2) <= L * norm_inf(m)(y1 - y2)")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (case
                                                                       "norm_inf(m)(y1 - y2) =0")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil)
                                                                       ("2"
                                                                        (div-by
                                                                         2
                                                                         "norm_inf(m)(y1 - y2)")
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (flatten)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide -2 -3)
                        (("2" (expand "Lip_entry?")
                          (("2" (skeep)
                            (("2" (inst -1 "i+1")
                              (("2"
                                (skeep)
                                (("2"
                                  (inst 1 "L")
                                  (("2"
                                    (skeep)
                                    (("2"
                                      (expand "nth" -1)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (inst -1 "t_1" "y1" "y2")
                                          nil
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("3" (assert)
                        (("3" (skeep)
                          (("3" (typepred "f(t,y)")
                            (("3" (assert)
                              (("3"
                                (expand "length" -2)
                                (("3" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("4" (assert)
                        (("4" (skeep)
                          (("4" (assert)
                            (("4" (typepred "f(t,y)")
                              (("4" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("4" (hide 2)
        (("4" (skeep)
          (("4" (skeep)
            (("4" (typepred "y1-y2" "y1" "y2") (("4" (assert) nil nil))
              nil))
            nil))
          nil))
        nil)
       ("5" (hide 2)
        (("5" (skeep) (("5" (skeep) (("5" (assert) nil nil)) nil))
          nil))
        nil)
       ("6" (hide 2)
        (("6" (skeep) (("6" (skeep) (("6" (assert) nil nil)) nil))
          nil))
        nil))
      nil)
     ("2" (skeep)
      (("2" (typepred "y1-y2" "y1" "y2") (("2" (assert) nil nil)) nil))
      nil)
     ("3" (skeep) (("3" (assert) nil nil)) nil)
     ("4" (skeep) (("4" (assert) nil nil)) nil))
    nil)
   ((IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (empty? const-decl "bool" sets nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis)
    (member const-decl "bool" sets nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (m skolem-const-decl "posnat" ODE_Lipschitz_def nil)
    (j skolem-const-decl "nat" ODE_Lipschitz_def nil)
    (f skolem-const-decl "(Lip_entry?(j + 1, m))" ODE_Lipschitz_def
     nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (i skolem-const-decl "below(1 + j)" ODE_Lipschitz_def nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (times_div_cancel2 formula-decl nil extra_real_props nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (both_sides_div_pos_le1 formula-decl nil real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nonneg_real_max application-judgement
     "{z: nonneg_real | z >= x AND z >= y}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (choose const-decl "(p)" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (Vector type-eq-decl nil matrices matrices)
    (norm_inf const-decl "(norm?(m))" norms mv_analysis)
    (norm? const-decl "bool" norms mv_analysis)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (Lip_entry? const-decl "bool" ODE_Lipschitz_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (d formal-const-decl "[real -> bool]" ODE_Lipschitz_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil))
   nil
   (Lip_entry_c existence ""
    "[d1: [posnat, posnat] -> [f: (ODE_Lipschitz_def.Lip_entry?(d1`1, d1`2)) -> {L: real_types.nnreal | FORALL (i: naturalnumbers.below(d1`1), t: (ODE_Lipschitz_def.d), y1, y2: matrices.VectorN(d1`2)): reals.<=(real_defs.abs((number_fields.-)(list_props[real].nth(f(t, y1), i), list_props[real].nth(f(t, y2), i))), number_fields.*(L, norms.norm_inf(d1`2)((matrices.-)(y1, y2))))}]]")))
 (Lip_entry_equiv 0
  (Lip_entry_equiv-1 nil 3791627681
   ("" (skeep)
    (("" (split 1)
      (("1" (flatten)
        (("1" (expand "Lip_d?" -1)
          (("1" (expand "Lip_entry?" 1)
            (("1" (skeep)
              (("1" (inst -1 "norm_inf(n)")
                (("1" (skeep)
                  (("1" (inst 1 "L")
                    (("1" (skeep)
                      (("1" (inst -1 "t" "y1" "y2")
                        (("1" (lemma "norm_inf_nth_ineq")
                          (("1" (inst -1 "f(t, y1) - f(t, y2)" "i")
                            (("1" (assert)
                              (("1"
                                (case
                                 "nth(f(t, y1), i) - nth(f(t, y2), i) = nth(f(t, y1) - f(t, y2), i)")
                                (("1"
                                  (assert)
                                  (("1"
                                    (replace -1)
                                    (("1"
                                      (replace -1 -2 rl)
                                      (("1"
                                        (replace -1 1 rl)
                                        (("1"
                                          (expand "norm_inf" -3)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "norm_inf" 1)
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide 2)
                                  (("2"
                                    (lemma "nth_sum")
                                    (("2"
                                      (inst
                                       -1
                                       "f(t,y1)"
                                       "scal(-1,f(t,y2))")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (split -1)
                                          (("1"
                                            (inst -1 "i")
                                            (("1"
                                              (lemma "nth_dist")
                                              (("1"
                                                (inst
                                                 -1
                                                 "f(t,y2)"
                                                 "-1"
                                                 "i")
                                                (("1"
                                                  (expand "*" -1)
                                                  (("1"
                                                    (replace -1)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand "-" 1)
                                                        (("1"
                                                          (expand
                                                           "sub"
                                                           1)
                                                          (("1"
                                                            (expand
                                                             "+")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide 2)
                                            (("2"
                                              (typepred
                                               "scal(-1,f(t,y2))")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (typepred "scal(-1,f(t,y2))")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert)
                              (("2"
                                (hide -1 2)
                                (("2"
                                  (typepred
                                   "f(t,y1)"
                                   "f(t,y2)"
                                   "f(t,y1)-f(t,y2)")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (flatten)
        (("2" (assert)
          (("2" (expand "Lip_entry?" -1)
            (("2" (lemma "Lip_norm_od_f")
              (("2" (inst -1 "n" "f")
                (("2" (assert)
                  (("2" (hide 2)
                    (("2" (expand "Lip_d_E?" 1)
                      (("2" (inst 1 "norm_inf(n)")
                        (("2" (inst 1 "Lip_entry_c(n,n)(f)")
                          (("2" (skeep)
                            (("2" (typepred "Lip_entry_c(n, n)(f)")
                              (("2"
                                (hide -3)
                                (("2"
                                  (lemma "norm_inf_nth")
                                  (("2"
                                    (inst -1 "f(t,y1)-f(t,y2)")
                                    (("2"
                                      (skeep)
                                      (("2"
                                        (inst -3 "i" "t" "y1" "y2")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "norm_inf" 1 1)
                                            (("1"
                                              (replace -1 1)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (case
                                                   "nth(f(t, y1) - f(t, y2), i) = nth(f(t, y1), i) - nth(f(t, y2), i)")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (hide 2)
                                                    (("2"
                                                      (lemma "nth_sum")
                                                      (("2"
                                                        (lemma
                                                         "nth_dist")
                                                        (("2"
                                                          (inst
                                                           -2
                                                           "f(t,y1)"
                                                           "scal(-1,f(t,y2))")
                                                          (("1"
                                                            (split -2)
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "i")
                                                              (("1"
                                                                (inst
                                                                 -2
                                                                 "f(t,y2)"
                                                                 "-1"
                                                                 "i")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (expand
                                                                     "-")
                                                                    (("1"
                                                                      (expand
                                                                       "sub")
                                                                      (("1"
                                                                        (expand
                                                                         "+")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (replace
                                                                             -1)
                                                                            (("1"
                                                                              (expand
                                                                               "*"
                                                                               -2)
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide 2)
                                                              (("2"
                                                                (hide
                                                                 -)
                                                                (("2"
                                                                  (typepred
                                                                   "scal(-1,f(t,y2))")
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (typepred
                                                             "scal(-1,f(t,y2))")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (assert)
                                          (("2"
                                            (typepred "i")
                                            (("2"
                                              (typepred
                                               "f(t,y1)"
                                               "f(t,y2)"
                                               "f(t,y1)-f(t,y2)")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (replace -2)
                                                  (("2"
                                                    (replace -4)
                                                    (("2"
                                                      (expand "max" -6)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Lip_d? const-decl "bool" ODE_Lipschitz_def nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis)
    (norm_inf_nth_ineq formula-decl nil norms mv_analysis)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (scal def-decl "VectorN(length(v2))" matrices matrices)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (nth_dist formula-decl nil vector_arithmetic mv_analysis)
    (* const-decl "VectorN(length(v2))" matrices matrices)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (sub const-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nth_sum formula-decl nil vector_arithmetic mv_analysis)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (n skolem-const-decl "posnat" ODE_Lipschitz_def nil)
    (below type-eq-decl nil naturalnumbers nil)
    (i skolem-const-decl "below(n)" ODE_Lipschitz_def nil)
    (Vector type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (od_f type-eq-decl nil ODE_def nil)
    (f skolem-const-decl "od_f[d](n)" ODE_Lipschitz_def nil)
    (t skolem-const-decl "(d)" ODE_Lipschitz_def nil)
    (y1 skolem-const-decl "VectorN(n)" ODE_Lipschitz_def nil)
    (y2 skolem-const-decl "VectorN(n)" ODE_Lipschitz_def nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (d formal-const-decl "[real -> bool]" ODE_Lipschitz_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices matrices)
    (norm_inf const-decl "(norm?(m))" norms mv_analysis)
    (norm? const-decl "bool" norms mv_analysis)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (Lip_entry? const-decl "bool" ODE_Lipschitz_def nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (Lip_norm_od_f formula-decl nil ODE_Lipschitz_def nil)
    (Lip_d_E? const-decl "bool" ODE_Lipschitz_def nil)
    (nnreal type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Lip_entry_c const-decl "{L: nnreal |
   FORALL (i: below(n), t: (d), y1, y2: VectorN(m)):
     abs(nth(f(t, y1), i) - nth(f(t, y2), i)) <= L * norm_inf(m)(y1 - y2)}"
     ODE_Lipschitz_def nil)
    (norm_inf_nth formula-decl nil norms mv_analysis)
    (i skolem-const-decl "below(length(f(t, y1) - f(t, y2)))"
       ODE_Lipschitz_def nil)
    (y2 skolem-const-decl "VectorN(n)" ODE_Lipschitz_def nil)
    (y1 skolem-const-decl "VectorN(n)" ODE_Lipschitz_def nil)
    (t skolem-const-decl "(d)" ODE_Lipschitz_def nil))
   shostak))
 (Lip_c_TCC1 0
  (Lip_c_TCC1-1 nil 3788695206
   ("" (skeep)
    (("" (typepred "f(t,y1)- f(t,y2)" "f(t,y1)" "f(t,y2)")
      (("" (replace -4) (("" (replace -6) (("" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((Lip_d? const-decl "bool" ODE_Lipschitz_def nil)
    (od_f type-eq-decl nil ODE_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (d formal-const-decl "[real -> bool]" ODE_Lipschitz_def nil)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (VectorN type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vector type-eq-decl nil matrices matrices)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (posint_max application-judgement "{k: posint | i <= k AND j <= k}"
     real_defs nil)
    (posrat_max application-judgement "{s: posrat | s >= q AND s >= r}"
     real_defs nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis))
   nil
   (Lip_c subtype
    "(matrices.-)(ODE_Lipschitz_def.f(ODE_Lipschitz_def.t, ODE_Lipschitz_def.y1), ODE_Lipschitz_def.f(ODE_Lipschitz_def.t, ODE_Lipschitz_def.y2))"
    "(list_adt[real].cons?)")))
 (Lip_c_TCC2 0
  (Lip_c_TCC2-1 nil 3788695206
   ("" (skeep)
    (("" (typepred "y1-y2" "y1" "y2") (("" (assert) nil nil)) nil))
    nil)
   ((posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (VectorN type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vector type-eq-decl nil matrices matrices)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis))
   nil
   (Lip_c subtype
    "(matrices.-)(ODE_Lipschitz_def.y1, ODE_Lipschitz_def.y2)"
    "(list_adt[real].cons?)")))
 (Lip_c_TCC3 0
  (Lip_c_TCC3-1 nil 3788695206
   (""
    (inst 1
     "LAMBDA(n:posnat): LAMBDA(f:(Lip_d?(n))): choose({L: nnreal|  FORALL(t:(d), y1,y2:VectorN(n)):
           norm_inf(n)(f(t,y1)-f(t,y2)) <= L* norm_inf(n)(y1-y2)})")
    (("1" (skeep 1)
      (("1" (expand "nonempty?" 1)
        (("1" (expand "empty?" -1)
          (("1" (typepred "f")
            (("1" (expand "Lip_d?" -1)
              (("1" (inst -1 "norm_inf(n)")
                (("1" (skeep -1)
                  (("1" (inst -2 "L")
                    (("1" (expand "member" 1) (("1" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skeep)
      (("2" (typepred "y1-y2" "y1" "y2") (("2" (assert) nil nil)) nil))
      nil)
     ("3" (skeep)
      (("3" (typepred "f(t,y1)-f(t,y2)" "f(t,y1)" "f(t,y2)")
        (("3" (assert) nil nil)) nil))
      nil))
    nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (empty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (choose const-decl "(p)" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (Vector type-eq-decl nil matrices matrices)
    (norm_inf const-decl "(norm?(m))" norms mv_analysis)
    (norm? const-decl "bool" norms mv_analysis)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (<= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (Lip_d? const-decl "bool" ODE_Lipschitz_def nil)
    (od_f type-eq-decl nil ODE_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (d formal-const-decl "[real -> bool]" ODE_Lipschitz_def nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil))
   nil
   (Lip_c existence ""
    "[n: integers.posnat -> [f: (ODE_Lipschitz_def.Lip_d?(n)) -> {L: real_types.nnreal | FORALL (t: (ODE_Lipschitz_def.d), y1, y2: matrices.VectorN(n)): reals.<=(norms.norm_inf(n)((matrices.-)(f(t, y1), f(t, y2))), number_fields.*(L, norms.norm_inf(n)((matrices.-)(y1, y2))))}]]"))))

