ODE_Lipschitz_def  [ d :[ real -> bool ] ]  % Welcome
% d - domain of the functions r2v
		: THEORY

%Created by                     JTS
%	 	           Jan 2020
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%| This defines Global Lipschitz  |%
%| in the second variable for	  |%
%| functions related to first	  |%
%| order ODE	       		  |%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%Last Updated	           Jan 2020

%-----     %
  BEGIN
%     -----%

%-------------------------------------------------------------------------
%% Assume that the domain is nonempty, connected, and has more than
%  one element.
%-------------------------------------------------------------------------

  ASSUMING
  
    IMPORTING analysis@deriv_domain_def[(d)]
      non_empty : ASSUMPTION nonempty?(d)
      connected : ASSUMPTION connected?[(d)]
      not_one_element : ASSUMPTION not_one_element?[(d)]
    
   ENDASSUMING

%-------------------------------------------------------------------------
%% Importing ode_def to have the definition of functions related to
%  first order ODEs
%-------------------------------------------------------------------------

 IMPORTING ODE_def[d]

%-------------------------------------------------------------------------
%% Define globally Lipchitz on (d)
%-------------------------------------------------------------------------

 Lip_d?(n:posnat)(f:od_f(n)): bool =
   FORALL(n1:(norm?(n))):
     EXISTS(L:{LL:real |  LL>=0}):
       FORALL(t:(d), y1,y2:VectorN(n)):
          n1(f(t,y1) - f(t,y2)) <= L * n1(y1 - y2)

 Lip_d_E?(n:posnat)(f:od_f(n)): bool =
   EXISTS(n1:(norm?(n))):
     EXISTS(L:{LL:real |  LL>=0}):
       FORALL(t:(d), y1,y2:VectorN(n)):
          n1(f(t,y1) - f(t,y2)) <= L * n1(y1 - y2) 

%-------------------------------------------------------------------------
%% Lipchitz is invariant across norms
%-------------------------------------------------------------------------

 Lip_norm_od_f: LEMMA
   FORALL(n:posnat, f:od_f(n)):
     Lip_d?(n)(f) IFF Lip_d_E?(n)(f)

%-------------------------------------------------------------------------
%% Define entrywise Lipchitz
%-------------------------------------------------------------------------

 Lip_entry?(n:posnat, m:posnat)(f:[[(d),VectorN(m)] -> VectorN(n)]): bool =
   FORALL(i:below(n)):
     EXISTS(L:{LL:real | LL>=0}):
       FORALL(t:(d), y1,y2:VectorN(m)):
       abs(nth(f(t,y1),i) - nth(f(t,y2),i)) <= L * norm_inf(m)(y1 - y2)

 Lip_entry_c(n:posnat, m:posnat)(f:(Lip_entry?(n,m))):
   {L: nnreal | FORALL(i:below(n), t:(d), y1, y2:VectorN(m)):
       abs(nth(f(t,y1),i) - nth(f(t,y2),i)) <= L * norm_inf(m)(y1 - y2)}

%-------------------------------------------------------------------------
%% Entrywise Lipchitz is the same as Lipchitz
%-------------------------------------------------------------------------

 Lip_entry_equiv: LEMMA
   FORALL(n:posnat,f:od_f(n)):
   Lip_d?(n)(f) IFF Lip_entry?(n,n)(f)

%-------------------------------------------------------------------------
%% Define the Lipshitz constant for a Lipchitz function
%-------------------------------------------------------------------------

 Lip_c(n:posnat)(f:(Lip_d?(n))):
  {L: nnreal |  FORALL(t:(d), y1, y2:VectorN(n)):
    norm_inf(n)(f(t, y1) - f(t, y2)) <=
    L * norm_inf(n)(y1 - y2)}

  %~~~       END   ~~~%
  END ODE_Lipschitz_def
