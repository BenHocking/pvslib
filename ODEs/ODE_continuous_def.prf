(ODE_continuous_def
 (IMP_ODE_Lipschitz_def_TCC1 0
  (IMP_ODE_Lipschitz_def_TCC1-1 nil 3789482075
   ("" (lemma "non_empty") (("" (propax) nil nil)) nil)
   ((non_empty formula-decl nil ODE_continuous_def nil)) nil
   (IMP_ODE_Lipschitz_def assuming
    "ODE_Lipschitz_def[ODE_continuous_def.d].ODE_Lipschitz_def"
    "non_empty: ASSUMPTION sets[real].nonempty?(ODE_Lipschitz_def.d)")))
 (IMP_ODE_Lipschitz_def_TCC2 0
  (IMP_ODE_Lipschitz_def_TCC2-1 nil 3789482075
   ("" (lemma "connected") (("" (propax) nil nil)) nil)
   ((connected formula-decl nil ODE_continuous_def nil)) nil
   (IMP_ODE_Lipschitz_def assuming
    "ODE_Lipschitz_def[ODE_continuous_def.d].ODE_Lipschitz_def"
    "connected: ASSUMPTION deriv_domain_def[(ODE_Lipschitz_def.d)].connected?")))
 (IMP_ODE_Lipschitz_def_TCC3 0
  (IMP_ODE_Lipschitz_def_TCC3-1 nil 3789482075
   ("" (lemma "not_one_element") (("" (propax) nil nil)) nil)
   ((not_one_element formula-decl nil ODE_continuous_def nil)) nil
   (IMP_ODE_Lipschitz_def assuming
    "ODE_Lipschitz_def[ODE_continuous_def.d].ODE_Lipschitz_def"
    "not_one_element: ASSUMPTION deriv_domain_def[(ODE_Lipschitz_def.d)].not_one_element?")))
 (cont_d?_TCC1 0
  (cont_d?_TCC1-1 nil 3787938923 ("" (subtype-tcc) nil nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic
     Optimization_Dev)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices matrices)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (cont_d? subtype "ODE_continuous_def.vv" "(list_adt[real].cons?)")))
 (cont_d?_TCC2 0
  (cont_d?_TCC1-1 nil 3787938690 ("" (subtype-tcc) nil nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic
     Optimization_Dev)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices matrices)
    (d formal-const-decl "[real -> bool]" ODE_continuous_def nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (cont_d? subtype "ODE_continuous_def.x" "(list_adt[real].cons?)")))
 (cont_d?_TCC3 0
  (cont_d?_TCC2-1 nil 3787938690 ("" (subtype-tcc) nil nil) nil nil
   (cont_d? subtype "list_adt[real].car(ODE_continuous_def.x)"
    "(ODE_continuous_def.d)")))
 (cont_Lip_2ndv_TCC1 0
  (cont_Lip_2ndv_TCC1-1 nil 3787999022 ("" (subtype-tcc) nil nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic
     Optimization_Dev)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (d formal-const-decl "[real -> bool]" ODE_continuous_def nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices matrices)
    (od_f type-eq-decl nil ODE_def nil)
    (Lip_d? const-decl "bool" ODE_Lipschitz_def nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (sub const-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices))
   nil
   (cont_Lip_2ndv subtype "ODE_continuous_def.x"
    "(list_adt[real].cons?)")))
 (cont_Lip_2ndv 0
  (cont_Lip_2ndv-1 nil 3787999063
   ("" (skeep)
    (("" (skeep)
      (("" (expand "contD?" 1 1)
        (("" (skeep)
          (("" (lemma "contp_norms_v2v[n]")
            ((""
              (inst -1 "LAMBDA(x:VectorN(n)): d(car(x))" "n" "_" "p")
              (("" (inst -1 "LAMBDA (v: VectorN(n)): f(t, v)")
                (("" (assert)
                  (("" (hide 2)
                    (("" (typepred "f")
                      (("" (expand "Lip_d?" -1)
                        (("" (reveal -)
                          (("" (hide -1 -2)
                            (("" (reveal +)
                              ((""
                                (hide 1)
                                ((""
                                  (inst 1 "norm_2(n)" "norm_2(n)")
                                  ((""
                                    (inst -1 "norm_2(n)")
                                    ((""
                                      (skeep)
                                      ((""
                                        (inst -1 "t" "_" "_")
                                        ((""
                                          (expand "contp?" 1)
                                          ((""
                                            (skeep)
                                            ((""
                                              (inst 1 "eps/(L*2)")
                                              (("1"
                                                (skeep)
                                                (("1"
                                                  (inst -1 "x_1" "p")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (mult-by -2 "L")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (expand
                                                           "restrict")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (expand
                                                         "restrict")
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (case "L=0")
                                                (("1"
                                                  (reveal +)
                                                  (("1"
                                                    (inst 1 "eps")
                                                    (("1"
                                                      (skeep 1)
                                                      (("1"
                                                        (inst
                                                         -3
                                                         "x_1"
                                                         "p")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (expand
                                                             "restrict")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (assert)
                                                  (("2"
                                                    (split 2)
                                                    (("1"
                                                      (mult-by 1 "2*L")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      (("2"
                                                        (mult-by
                                                         1
                                                         "2*L")
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (assert)
                                                (("3"
                                                  (reveal +)
                                                  (("3"
                                                    (inst 1 "eps")
                                                    (("3"
                                                      (skeep)
                                                      (("3"
                                                        (inst
                                                         -3
                                                         "x_1"
                                                         "p")
                                                        (("3"
                                                          (assert)
                                                          (("3"
                                                            (expand
                                                             "restrict")
                                                            (("3"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic
     Optimization_Dev)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices matrices)
    (domain type-eq-decl nil domain_vec2real_def Optimization_Dev)
    (d formal-const-decl "[real -> bool]" ODE_continuous_def nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (norm_2 const-decl "(norm?(m))" norms Optimization_Dev)
    (norm? const-decl "bool" norms Optimization_Dev)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (contp? const-decl "bool" continuity_multivar Optimization_Dev)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (L skolem-const-decl "{LL: real | LL >= 0}" ODE_continuous_def nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (eps skolem-const-decl "posreal" ODE_continuous_def nil)
    (both_sides_times_pos_lt1 formula-decl nil real_props nil)
    (Vector type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (both_sides_times_pos_le1_imp formula-decl nil extra_real_props
     nil)
    (both_sides_times_pos_ge1 formula-decl nil real_props nil)
    (div_cancel2 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (restrict const-decl "R" restrict nil)
    (od_f type-eq-decl nil ODE_def nil)
    (Lip_d? const-decl "bool" ODE_Lipschitz_def nil)
    (contp_norms_v2v formula-decl nil continuity_multivar
     Optimization_Dev)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (contD? const-decl "bool" continuity_multivar Optimization_Dev))
   nil))
 (cont_Lip_bothv_TCC1 0
  (cont_Lip_bothv_TCC1-1 nil 3787999199 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (d formal-const-decl "[real -> bool]" ODE_continuous_def nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices matrices)
    (od_f type-eq-decl nil ODE_def nil)
    (Lip_d? const-decl "bool" ODE_Lipschitz_def nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     Optimization_Dev)
    (sub const-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (contp? const-decl "bool" continuity_multivar Optimization_Dev)
    (contD? const-decl "bool" continuity_multivar Optimization_Dev)
    (cont_d? const-decl "bool" ODE_continuous_def nil))
   nil
   (cont_Lip_bothv subtype "ODE_continuous_def.vv"
    "(list_adt[real].cons?)")))
 (cont_Lip_bothv_TCC2 0
  (cont_Lip_bothv_TCC2-1 nil 3787999199 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (d formal-const-decl "[real -> bool]" ODE_continuous_def nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices matrices)
    (od_f type-eq-decl nil ODE_def nil)
    (Lip_d? const-decl "bool" ODE_Lipschitz_def nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     Optimization_Dev)
    (sub const-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (contp? const-decl "bool" continuity_multivar Optimization_Dev)
    (contD? const-decl "bool" continuity_multivar Optimization_Dev)
    (cont_d? const-decl "bool" ODE_continuous_def nil))
   nil
   (cont_Lip_bothv subtype "ODE_continuous_def.v"
    "(list_adt[real].cons?)")))
 (cont_Lip_bothv_TCC3 0
  (cont_Lip_bothv_TCC3-1 nil 3787999199 ("" (subtype-tcc) nil nil)
   ((sub const-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (contp? const-decl "bool" continuity_multivar Optimization_Dev)
    (contD? const-decl "bool" continuity_multivar Optimization_Dev)
    (cont_d? const-decl "bool" ODE_continuous_def nil))
   nil
   (cont_Lip_bothv subtype "list_adt[real].car(ODE_continuous_def.v)"
    "(ODE_continuous_def.d)")))
 (cont_Lip_bothv_TCC4 0
  (cont_Lip_bothv_TCC4-1 nil 3787999199
   ("" (skeep)
    (("" (skeep 1)
      (("" (typepred "v")
        (("" (expand "length" -2) (("" (propax) nil nil)) nil)) nil))
      nil))
    nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic
     Optimization_Dev)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (VectorN type-eq-decl nil matrices matrices)
    (d formal-const-decl "[real -> bool]" ODE_continuous_def nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil))
   nil
   (cont_Lip_bothv subtype "list_adt[real].cdr(ODE_continuous_def.v)"
    "matrices.VectorN(ODE_continuous_def.n)")))
 (cont_Lip_bothv 0
  (cont_Lip_bothv-1 nil 3787999249
   ("" (skeep)
    (("" (lemma "contD_norms_v2v[1+n]")
      ((""
        (inst -1 "LAMBDA (x: VectorN(1 + n)): d(car(x))" "n"
         "(LAMBDA (v: {vv: VectorN(1 + n)| d(car(vv))}): f(car(v), cdr(v)))")
        (("1" (assert)
          (("1" (hide 2)
            (("1" (inst 1 "norm_inf(1+n)" "norm_inf(n)")
              (("1" (assert)
                (("1" (expand "contD?" 1)
                  (("1" (typepred "f")
                    (("1" (expand "Lip_d?" -1)
                      (("1" (inst -1 "norm_inf(n)")
                        (("1" (skeep 1)
                          (("1" (assert)
                            (("1" (expand "cont_d?" -2)
                              (("1"
                                (typepred "p")
                                (("1"
                                  (hide -1)
                                  (("1"
                                    (hide -1)
                                    (("1"
                                      (skeep -2)
                                      (("1"
                                        (expand "contp?" 1 1)
                                        (("1"
                                          (skeep 1)
                                          (("1"
                                            (inst -3 "cdr(p)")
                                            (("1"
                                              (expand "contD?" -3)
                                              (("1"
                                                (inst -3 "(:car(p):)")
                                                (("1"
                                                  (expand "contp?" -3)
                                                  (("1"
                                                    (inst
                                                     -3
                                                     "norm_inf(1)"
                                                     "norm_inf(n)")
                                                    (("1"
                                                      (inst -3 "eps/3")
                                                      (("1"
                                                        (skeep)
                                                        (("1"
                                                          (case
                                                           "NOT L=0")
                                                          (("1"
                                                            (hide 1)
                                                            (("1"
                                                              (inst
                                                               1
                                                               "min(delta, eps/(2*L))")
                                                              (("1"
                                                                (skeep)
                                                                (("1"
                                                                  (typepred
                                                                   "x_1")
                                                                  (("1"
                                                                    (inst
                                                                     -7
                                                                     "(:car(x_1):)")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (split
                                                                         -7)
                                                                        (("1"
                                                                          (case
                                                                           " norm_inf(n)(f(car(x_1), cdr(x_1)) - f(car(p), cdr(p))) =  norm_inf(n)((f(car(x_1), cdr(x_1))-f(car(x_1), cdr(p)))
                                                                   +(f(car(x_1), cdr(p))- f(car(p), cdr(p))))")
                                                                          (("1"
                                                                            (replace
                                                                             -1)
                                                                            (("1"
                                                                              (hide
                                                                               -1)
                                                                              (("1"
                                                                                (typepred
                                                                                 "norm_inf(n)")
                                                                                (("1"
                                                                                  (expand
                                                                                   "norm?"
                                                                                   -1)
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (inst
                                                                                       -4
                                                                                       "(f(car(x_1), cdr(x_1)) - f(car(x_1), cdr(p)))"
                                                                                       "(f(car(x_1), cdr(p)) - f(car(p), cdr(p)))")
                                                                                      (("1"
                                                                                        (case
                                                                                         "  norm_inf(n)((f(car(x_1), cdr(x_1)) - f(car(x_1), cdr(p)))) +
                                                                                          norm_inf(n)((f(car(x_1), cdr(p)) - f(car(p), cdr(p))))<eps")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil)
                                                                                         ("2"
                                                                                          (hide
                                                                                           2)
                                                                                          (("2"
                                                                                            (inst
                                                                                             -10
                                                                                             "car(x_1)"
                                                                                             "cdr(x_1)"
                                                                                             "cdr(p)")
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (case
                                                                                                 "norm_inf(n)(cdr(x_1) - cdr(p)) < min(delta,eps/(2*L))")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (case
                                                                                                     "min(delta, eps / (2 * L)) <= eps/(2*L)")
                                                                                                    (("1"
                                                                                                      (case
                                                                                                       "NOT norm_inf(n)(cdr(x_1) - cdr(p))< eps/(2*L)")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (mult-by
                                                                                                         -1
                                                                                                         "L")
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (expand
                                                                                                       "min"
                                                                                                       1
                                                                                                       1)
                                                                                                      (("2"
                                                                                                        (lift-if
                                                                                                         1)
                                                                                                        (("2"
                                                                                                          (split
                                                                                                           1)
                                                                                                          (("1"
                                                                                                            (flatten)
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (flatten)
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (hide
                                                                                                   -1
                                                                                                   -2
                                                                                                   -3
                                                                                                   -4
                                                                                                   -5
                                                                                                   -6
                                                                                                   -7
                                                                                                   -8
                                                                                                   -9
                                                                                                   -20)
                                                                                                  (("2"
                                                                                                    (hide
                                                                                                     2)
                                                                                                    (("2"
                                                                                                      (case
                                                                                                       " norm_inf(n)(cdr(x_1) - cdr(p)) <= norm_inf(1 + n)(x_1 - p)")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (hide
                                                                                                         2)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "norm_inf"
                                                                                                           1)
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "norm_inf"
                                                                                                             1
                                                                                                             2)
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "-"
                                                                                                               1)
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "sub"
                                                                                                                 1)
                                                                                                                (("2"
                                                                                                                  (case
                                                                                                                   "cdr(p)=null")
                                                                                                                  (("1"
                                                                                                                    (typepred
                                                                                                                     "p")
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "length"
                                                                                                                       -2)
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (expand
                                                                                                                     "scal"
                                                                                                                     2
                                                                                                                     2)
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      (("2"
                                                                                                                        (case
                                                                                                                         "cdr(x_1)=null")
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          (("1"
                                                                                                                            (typepred
                                                                                                                             "x_1")
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               "length"
                                                                                                                               -2)
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (expand
                                                                                                                           "add"
                                                                                                                           3
                                                                                                                           2)
                                                                                                                          (("2"
                                                                                                                            (expand
                                                                                                                             "abs"
                                                                                                                             3)
                                                                                                                            (("2"
                                                                                                                              (lift-if
                                                                                                                               3)
                                                                                                                              (("2"
                                                                                                                                (split
                                                                                                                                 3)
                                                                                                                                (("1"
                                                                                                                                  (flatten)
                                                                                                                                  (("1"
                                                                                                                                    (expand
                                                                                                                                     "length"
                                                                                                                                     -1)
                                                                                                                                    (("1"
                                                                                                                                      (typepred
                                                                                                                                       "x_1"
                                                                                                                                       "p"
                                                                                                                                       "scal(-1,cdr(p))"
                                                                                                                                       "add(cdr(x_1), scal(-1, cdr(p)))")
                                                                                                                                      (("1"
                                                                                                                                        (grind)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil)
                                                                                                                                 ("2"
                                                                                                                                  (flatten)
                                                                                                                                  (("2"
                                                                                                                                    (assert)
                                                                                                                                    (("2"
                                                                                                                                      (expand
                                                                                                                                       "max"
                                                                                                                                       2
                                                                                                                                       1)
                                                                                                                                      (("2"
                                                                                                                                        (lift-if
                                                                                                                                         2)
                                                                                                                                        (("2"
                                                                                                                                          (split
                                                                                                                                           2)
                                                                                                                                          (("1"
                                                                                                                                            (flatten)
                                                                                                                                            (("1"
                                                                                                                                              (expand
                                                                                                                                               "length"
                                                                                                                                               -1)
                                                                                                                                              (("1"
                                                                                                                                                (typepred
                                                                                                                                                 "x_1"
                                                                                                                                                 "p"
                                                                                                                                                 "scal(-1,cdr(p))"
                                                                                                                                                 "add(cdr(x_1), scal(-1, cdr(p)))"
                                                                                                                                                 "abs(add(cdr(x_1), scal(-1, cdr(p))))")
                                                                                                                                                (("1"
                                                                                                                                                  (assert)
                                                                                                                                                  (("1"
                                                                                                                                                    (grind)
                                                                                                                                                    nil
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil)
                                                                                                                                           ("2"
                                                                                                                                            (flatten)
                                                                                                                                            (("2"
                                                                                                                                              (expand
                                                                                                                                               "norm_inf"
                                                                                                                                               2
                                                                                                                                               1)
                                                                                                                                              (("2"
                                                                                                                                                (expand
                                                                                                                                                 "max"
                                                                                                                                                 2
                                                                                                                                                 2)
                                                                                                                                                (("2"
                                                                                                                                                  (lift-if
                                                                                                                                                   2)
                                                                                                                                                  (("2"
                                                                                                                                                    (split
                                                                                                                                                     2)
                                                                                                                                                    (("1"
                                                                                                                                                      (flatten)
                                                                                                                                                      (("1"
                                                                                                                                                        (assert)
                                                                                                                                                        nil
                                                                                                                                                        nil))
                                                                                                                                                      nil)
                                                                                                                                                     ("2"
                                                                                                                                                      (flatten)
                                                                                                                                                      (("2"
                                                                                                                                                        (assert)
                                                                                                                                                        nil
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (typepred
                                                                                         "(f(car[real](x_1), cdr[real](p)) -
                                                             f(car[real](p), cdr[real](p)))")
                                                                                        (("2"
                                                                                          (hide
                                                                                           -1)
                                                                                          (("2"
                                                                                            (typepred
                                                                                             "f(car[real](x_1), cdr[real](p))"
                                                                                             "f(car[real](p), cdr[real](p))")
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (replace
                                                                                                 -2)
                                                                                                (("2"
                                                                                                  (replace
                                                                                                   -4)
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "max"
                                                                                                     -5)
                                                                                                    (("2"
                                                                                                      (propax)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("3"
                                                                                        (assert)
                                                                                        (("3"
                                                                                          (typepred
                                                                                           "(f(car[real](x_1), cdr[real](x_1)) -
                                                             f(car[real](x_1), cdr[real](p)))"
                                                                                           "f(car[real](x_1), cdr[real](x_1))"
                                                                                           "f(car[real](x_1), cdr[real](p))")
                                                                                          (("3"
                                                                                            (assert)
                                                                                            (("3"
                                                                                              (replace
                                                                                               -4)
                                                                                              (("3"
                                                                                                (replace
                                                                                                 -6)
                                                                                                (("3"
                                                                                                  (expand
                                                                                                   "max"
                                                                                                   -2)
                                                                                                  (("3"
                                                                                                    (propax)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (lemma
                                                                               "norm_inf_canc")
                                                                              (("2"
                                                                                (inst
                                                                                 -1
                                                                                 "n"
                                                                                 "_"
                                                                                 "_"
                                                                                 "_")
                                                                                (("2"
                                                                                  (inst
                                                                                   -1
                                                                                   "f(car(x_1), cdr(x_1))"
                                                                                   "f(car(x_1), cdr(p))"
                                                                                   "f(car(p), cdr(p))")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("3"
                                                                            (typepred
                                                                             "(f(car[real](x_1), cdr[real](x_1)) -
                                                       f(car[real](x_1), cdr[real](p)))
                                                      +
                                                      (f(car[real](x_1), cdr[real](p)) -
                                                        f(car[real](p), cdr[real](p)))")
                                                                            (("3"
                                                                              (typepred
                                                                               "(f(car[real](x_1), cdr[real](x_1)) -
                                                         f(car[real](x_1), cdr[real](p)))"
                                                                               "(f(car[real](x_1), cdr[real](x_1)) -
                                                         f(car[real](x_1), cdr[real](p)))
                                                        +
                                                        (f(car[real](x_1), cdr[real](p)) -
                                                          f(car[real](p), cdr[real](p)))")
                                                                              (("3"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (hide
                                                                           -1
                                                                           -2
                                                                           -3
                                                                           -4
                                                                           -5)
                                                                          (("2"
                                                                            (hide
                                                                             2)
                                                                            (("2"
                                                                              (expand
                                                                               "norm_inf")
                                                                              (("2"
                                                                                (case
                                                                                 " norm_inf((: car(x_1) :) - (: car(p) :)) <= norm_inf(x_1 - p)")
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil)
                                                                                 ("2"
                                                                                  (hide
                                                                                   2)
                                                                                  (("2"
                                                                                    (hide
                                                                                     -1)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "norm_inf"
                                                                                       1
                                                                                       1)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "norm_inf"
                                                                                         1
                                                                                         1)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "abs"
                                                                                           1
                                                                                           2)
                                                                                          (("2"
                                                                                            (lift-if
                                                                                             1)
                                                                                            (("2"
                                                                                              (split
                                                                                               1)
                                                                                              (("1"
                                                                                                (flatten)
                                                                                                (("1"
                                                                                                  (typepred
                                                                                                   "x_1-p"
                                                                                                   "x_1"
                                                                                                   "p")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (flatten)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "max"
                                                                                                   2
                                                                                                   2)
                                                                                                  (("2"
                                                                                                    (lift-if
                                                                                                     2)
                                                                                                    (("2"
                                                                                                      (split
                                                                                                       2)
                                                                                                      (("1"
                                                                                                        (flatten)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "length"
                                                                                                           -1)
                                                                                                          (("1"
                                                                                                            (typepred
                                                                                                             "x_1"
                                                                                                             "p"
                                                                                                             "x_1-p"
                                                                                                             "abs(cdr(x_1-p))")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (grind)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (flatten)
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "-"
                                                                                                             2
                                                                                                             2)
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "sub"
                                                                                                               2
                                                                                                               1)
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "scal"
                                                                                                                 2
                                                                                                                 1)
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "add"
                                                                                                                   2
                                                                                                                   1)
                                                                                                                  (("2"
                                                                                                                    (expand
                                                                                                                     "-"
                                                                                                                     2
                                                                                                                     1)
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       "sub"
                                                                                                                       2
                                                                                                                       1)
                                                                                                                      (("2"
                                                                                                                        (expand
                                                                                                                         "scal"
                                                                                                                         2
                                                                                                                         1)
                                                                                                                        (("2"
                                                                                                                          (expand
                                                                                                                           "scal"
                                                                                                                           2
                                                                                                                           1)
                                                                                                                          (("2"
                                                                                                                            (expand
                                                                                                                             "add"
                                                                                                                             2
                                                                                                                             1)
                                                                                                                            (("2"
                                                                                                                              (expand
                                                                                                                               "add"
                                                                                                                               2
                                                                                                                               1)
                                                                                                                              (("2"
                                                                                                                                (expand
                                                                                                                                 "abs"
                                                                                                                                 2
                                                                                                                                 1)
                                                                                                                                (("2"
                                                                                                                                  (lift-if
                                                                                                                                   2)
                                                                                                                                  (("2"
                                                                                                                                    (split
                                                                                                                                     2)
                                                                                                                                    (("1"
                                                                                                                                      (flatten)
                                                                                                                                      (("1"
                                                                                                                                        (expand
                                                                                                                                         "max"
                                                                                                                                         1
                                                                                                                                         1)
                                                                                                                                        (("1"
                                                                                                                                          (lift-if
                                                                                                                                           1)
                                                                                                                                          (("1"
                                                                                                                                            (split
                                                                                                                                             1)
                                                                                                                                            (("1"
                                                                                                                                              (flatten)
                                                                                                                                              (("1"
                                                                                                                                                (expand
                                                                                                                                                 "max"
                                                                                                                                                 1
                                                                                                                                                 1)
                                                                                                                                                (("1"
                                                                                                                                                  (lift-if
                                                                                                                                                   1)
                                                                                                                                                  (("1"
                                                                                                                                                    (split
                                                                                                                                                     1)
                                                                                                                                                    (("1"
                                                                                                                                                      (flatten)
                                                                                                                                                      (("1"
                                                                                                                                                        (assert)
                                                                                                                                                        nil
                                                                                                                                                        nil))
                                                                                                                                                      nil)
                                                                                                                                                     ("2"
                                                                                                                                                      (flatten)
                                                                                                                                                      (("2"
                                                                                                                                                        (assert)
                                                                                                                                                        nil
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil)
                                                                                                                                             ("2"
                                                                                                                                              (flatten)
                                                                                                                                              (("2"
                                                                                                                                                (expand
                                                                                                                                                 "length"
                                                                                                                                                 1
                                                                                                                                                 1)
                                                                                                                                                (("2"
                                                                                                                                                  (expand
                                                                                                                                                   "length"
                                                                                                                                                   1
                                                                                                                                                   1)
                                                                                                                                                  (("2"
                                                                                                                                                    (propax)
                                                                                                                                                    nil
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil)
                                                                                                                                     ("2"
                                                                                                                                      (flatten)
                                                                                                                                      (("2"
                                                                                                                                        (expand
                                                                                                                                         "length"
                                                                                                                                         1
                                                                                                                                         1)
                                                                                                                                        (("2"
                                                                                                                                          (expand
                                                                                                                                           "length"
                                                                                                                                           1
                                                                                                                                           1)
                                                                                                                                          (("2"
                                                                                                                                            (propax)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (reveal
                                                                 +)
                                                                (("2"
                                                                  (hide
                                                                   1
                                                                   3
                                                                   4)
                                                                  (("2"
                                                                    (split
                                                                     2)
                                                                    (("1"
                                                                      (expand
                                                                       "min"
                                                                       1
                                                                       1)
                                                                      (("1"
                                                                        (lift-if
                                                                         1)
                                                                        (("1"
                                                                          (split
                                                                           1)
                                                                          (("1"
                                                                            (flatten)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (mult-by
                                                                                 1
                                                                                 "2*L")
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (expand
                                                                       "min"
                                                                       1
                                                                       1)
                                                                      (("2"
                                                                        (lift-if)
                                                                        (("2"
                                                                          (split
                                                                           1)
                                                                          (("1"
                                                                            (flatten)
                                                                            (("1"
                                                                              (mult-by
                                                                               1
                                                                               "2*L")
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (assert)
                                                                (("3"
                                                                  (reveal
                                                                   +)
                                                                  (("3"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (inst
                                                             1
                                                             "delta")
                                                            (("2"
                                                              (skeep 1)
                                                              (("2"
                                                                (case
                                                                 " norm_inf(n)(f(car(x_1), cdr(x_1)) - f(car(p), cdr(p))) =
                                 norm_inf(n)
                                         ((f(car(x_1), cdr(x_1)) - f(car(x_1), cdr(p))) +
                                           (f(car(x_1), cdr(p)) - f(car(p), cdr(p))))")
                                                                (("1"
                                                                  (replace
                                                                   -1)
                                                                  (("1"
                                                                    (typepred
                                                                     "norm_inf(n)")
                                                                    (("1"
                                                                      (expand
                                                                       "norm?"
                                                                       -1)
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (inst
                                                                           -4
                                                                           "(f(car(x_1), cdr(x_1)) - f(car(x_1), cdr(p)))"
                                                                           "(f(car(x_1), cdr(p)) - f(car(p), cdr(p)))")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (case
                                                                               "norm_inf(n)((f(car(x_1), cdr(p)) - f(car(p), cdr(p)))) +
                                          norm_inf(n)((f(car(x_1), cdr(x_1)) - f(car(x_1), cdr(p)))) < eps")
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil)
                                                                               ("2"
                                                                                (hide
                                                                                 2)
                                                                                (("2"
                                                                                  (inst
                                                                                   -8
                                                                                   "car(x_1)"
                                                                                   "cdr(x_1)"
                                                                                   "cdr(p)")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (replace
                                                                                       -6
                                                                                       -8)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (case
                                                                                           "NOT  norm_inf(n)(f(car(x_1), cdr(x_1)) - f(car(x_1), cdr(p))) =0")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil)
                                                                                           ("2"
                                                                                            (replace
                                                                                             -1)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (inst
                                                                                                 -11
                                                                                                 "(:car(x_1):)")
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (hide
                                                                                                     1)
                                                                                                    (("2"
                                                                                                      (hide
                                                                                                       -1
                                                                                                       -2
                                                                                                       -3
                                                                                                       -4
                                                                                                       -5
                                                                                                       -6
                                                                                                       -7
                                                                                                       -8
                                                                                                       -9)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "norm_inf")
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "norm_inf")
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "abs")
                                                                                                            (("2"
                                                                                                              (lift-if
                                                                                                               1)
                                                                                                              (("2"
                                                                                                                (split
                                                                                                                 1)
                                                                                                                (("1"
                                                                                                                  (flatten)
                                                                                                                  (("1"
                                                                                                                    (lift-if
                                                                                                                     -2)
                                                                                                                    (("1"
                                                                                                                      (split
                                                                                                                       -2)
                                                                                                                      (("1"
                                                                                                                        (flatten)
                                                                                                                        (("1"
                                                                                                                          (grind)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (flatten)
                                                                                                                        (("2"
                                                                                                                          (expand
                                                                                                                           "max"
                                                                                                                           -1
                                                                                                                           1)
                                                                                                                          (("2"
                                                                                                                            (lift-if
                                                                                                                             -1)
                                                                                                                            (("2"
                                                                                                                              (split
                                                                                                                               -1)
                                                                                                                              (("1"
                                                                                                                                (flatten)
                                                                                                                                (("1"
                                                                                                                                  (assert)
                                                                                                                                  (("1"
                                                                                                                                    (expand
                                                                                                                                     "length"
                                                                                                                                     -1)
                                                                                                                                    (("1"
                                                                                                                                      (grind)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (flatten)
                                                                                                                                (("2"
                                                                                                                                  (assert)
                                                                                                                                  (("2"
                                                                                                                                    (expand
                                                                                                                                     "max"
                                                                                                                                     3
                                                                                                                                     1)
                                                                                                                                    (("2"
                                                                                                                                      (lift-if
                                                                                                                                       3)
                                                                                                                                      (("2"
                                                                                                                                        (split
                                                                                                                                         3)
                                                                                                                                        (("1"
                                                                                                                                          (flatten)
                                                                                                                                          (("1"
                                                                                                                                            (assert)
                                                                                                                                            (("1"
                                                                                                                                              (expand
                                                                                                                                               "-"
                                                                                                                                               1
                                                                                                                                               1)
                                                                                                                                              (("1"
                                                                                                                                                (expand
                                                                                                                                                 "sub"
                                                                                                                                                 1
                                                                                                                                                 1)
                                                                                                                                                (("1"
                                                                                                                                                  (expand
                                                                                                                                                   "scal"
                                                                                                                                                   1
                                                                                                                                                   1)
                                                                                                                                                  (("1"
                                                                                                                                                    (expand
                                                                                                                                                     "scal"
                                                                                                                                                     1
                                                                                                                                                     1)
                                                                                                                                                    (("1"
                                                                                                                                                      (expand
                                                                                                                                                       "add"
                                                                                                                                                       1
                                                                                                                                                       1)
                                                                                                                                                      (("1"
                                                                                                                                                        (expand
                                                                                                                                                         "-"
                                                                                                                                                         -2
                                                                                                                                                         1)
                                                                                                                                                        (("1"
                                                                                                                                                          (expand
                                                                                                                                                           "sub"
                                                                                                                                                           -2
                                                                                                                                                           1)
                                                                                                                                                          (("1"
                                                                                                                                                            (expand
                                                                                                                                                             "scal"
                                                                                                                                                             -2
                                                                                                                                                             1)
                                                                                                                                                            (("1"
                                                                                                                                                              (assert)
                                                                                                                                                              (("1"
                                                                                                                                                                (expand
                                                                                                                                                                 "add"
                                                                                                                                                                 -2
                                                                                                                                                                 1)
                                                                                                                                                                (("1"
                                                                                                                                                                  (assert)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (case
                                                                                                                                                                     "abs(car(x_1) - car(p)) <=max(abs(car(x_1) - car(p)), max(abs(cdr(x_1 - p))))")
                                                                                                                                                                    (("1"
                                                                                                                                                                      (assert)
                                                                                                                                                                      nil
                                                                                                                                                                      nil)
                                                                                                                                                                     ("2"
                                                                                                                                                                      (grind)
                                                                                                                                                                      nil
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil)
                                                                                                                                         ("2"
                                                                                                                                          (flatten)
                                                                                                                                          (("2"
                                                                                                                                            (expand
                                                                                                                                             "length"
                                                                                                                                             1
                                                                                                                                             1)
                                                                                                                                            (("2"
                                                                                                                                              (expand
                                                                                                                                               "length"
                                                                                                                                               1
                                                                                                                                               1)
                                                                                                                                              (("2"
                                                                                                                                                (propax)
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (flatten)
                                                                                                                  (("2"
                                                                                                                    (hide
                                                                                                                     -1
                                                                                                                     2)
                                                                                                                    (("2"
                                                                                                                      (grind)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (typepred
                                                                             "((f(car[real](x_1), cdr[real](p)) -
                                     f(car[real](p), cdr[real](p))))"
                                                                             "f(car[real](x_1), cdr[real](p))"
                                                                             "f(car[real](p), cdr[real](p))")
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("3"
                                                                            (typepred
                                                                             "(f(car[real](x_1), cdr[real](x_1)) -
                                     f(car[real](x_1), cdr[real](p)))"
                                                                             "f(car[real](x_1), cdr[real](x_1))"
                                                                             " f(car[real](x_1), cdr[real](p))")
                                                                            (("3"
                                                                              (assert)
                                                                              (("3"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (lemma
                                                                   "norm_inf_canc")
                                                                  (("2"
                                                                    (inst
                                                                     -1
                                                                     "n"
                                                                     "f(car(x_1), cdr(x_1))"
                                                                     "f(car(x_1), cdr(p))"
                                                                     "f(car(p), cdr(p))")
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("3"
                                                                  (assert)
                                                                  (("3"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (typepred "p")
                                              (("2"
                                                (expand "length" -2)
                                                (("2"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (skeep 1)
          (("2" (typepred "v")
            (("2" (expand "length" -2) (("2" (propax) nil nil)) nil))
            nil))
          nil)
         ("3" (skeep 1) (("3" (assert) nil nil)) nil)
         ("4" (skeep 1)
          (("4" (typepred "x")
            (("4" (expand "length" -2) (("4" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (contD_norms_v2v formula-decl nil continuity_multivar
     Optimization_Dev)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (norm_inf const-decl "(norm?(m))" norms Optimization_Dev)
    (norm? const-decl "bool" norms Optimization_Dev)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (contD? const-decl "bool" continuity_multivar Optimization_Dev)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     Optimization_Dev)
    (cont_d? const-decl "bool" ODE_continuous_def nil)
    (contD? const-decl "bool" continuity_multivar Optimization_Dev)
    (contp? const-decl "bool" continuity_multivar Optimization_Dev)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nzreal_min application-judgement "{z: nzreal | z <= x AND z <= y}"
     real_defs nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (L skolem-const-decl "{LL: real | LL >= 0}" ODE_continuous_def nil)
    (<= const-decl "bool" reals nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (delta skolem-const-decl "posreal" ODE_continuous_def nil)
    (eps skolem-const-decl "posreal" ODE_continuous_def nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (Vector type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (f skolem-const-decl "{ff: od_f(n) | Lip_d?(n)(ff)}"
     ODE_continuous_def nil)
    (x_1 skolem-const-decl "(LAMBDA (x: VectorN(1 + n)): d(car(x)))"
     ODE_continuous_def nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (add def-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (max def-decl "real" norms Optimization_Dev)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (abs def-decl "{l: list | length(l) = length(ll)}" norms
         Optimization_Dev)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (scal def-decl "VectorN(length(v2))" matrices matrices)
    (sub const-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (norm_inf const-decl "[(cons?) -> nonneg_real]" norms
     Optimization_Dev)
    (real_times_real_is_real application-judgement "real" reals nil)
    (both_sides_times_pos_lt1 formula-decl nil real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (< const-decl "bool" reals nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (norm_inf_canc formula-decl nil norms Optimization_Dev)
    (both_sides_times_pos_le1_imp formula-decl nil extra_real_props
     nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (div_cancel2 formula-decl nil real_props nil)
    (both_sides_times_pos_ge1 formula-decl nil real_props nil)
    (x_1 skolem-const-decl "(LAMBDA (x: VectorN(1 + n)): d(car(x)))"
     ODE_continuous_def nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic Optimization_Dev)
    (* const-decl "VectorN(length(v2))" matrices matrices)
    (length_singleton formula-decl nil more_list_props structures)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (p skolem-const-decl "(LAMBDA (x: VectorN(1 + n)): d(car(x)))"
     ODE_continuous_def nil)
    (contp? const-decl "bool" continuity_multivar Optimization_Dev)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Lip_d? const-decl "bool" ODE_Lipschitz_def nil)
    (od_f type-eq-decl nil ODE_def nil)
    (domain type-eq-decl nil domain_vec2real_def Optimization_Dev)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (d formal-const-decl "[real -> bool]" ODE_continuous_def nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (n skolem-const-decl "posnat" ODE_continuous_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil))
   nil))
 (cont_Lip_bothR_TCC1 0
  (cont_Lip_bothR_TCC1-1 nil 3787999521 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (d formal-const-decl "[real -> bool]" ODE_continuous_def nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices matrices)
    (od_f type-eq-decl nil ODE_def nil)
    (Lip_d? const-decl "bool" ODE_Lipschitz_def nil)
    (r2v type-eq-decl nil r2v_def nil)
    (continuous? const-decl "bool" r2v_analysis nil)
    (r2v_n type-eq-decl nil r2v_def nil)
    (nth const-decl "[(d) -> real]" r2v_def nil)
    (continuous? const-decl "bool" continuous_functions analysis)
    (continuous? const-decl "bool" continuous_functions analysis)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     Optimization_Dev)
    (sub const-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (contp? const-decl "bool" continuity_multivar Optimization_Dev)
    (contD? const-decl "bool" continuity_multivar Optimization_Dev)
    (cont_d? const-decl "bool" ODE_continuous_def nil))
   nil
   (cont_Lip_bothR subtype "ODE_continuous_def.vv"
    "(list_adt[real].cons?)")))
 (cont_Lip_bothR_TCC2 0
  (cont_Lip_bothR_TCC2-1 nil 3787999521 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (d formal-const-decl "[real -> bool]" ODE_continuous_def nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices matrices)
    (od_f type-eq-decl nil ODE_def nil)
    (Lip_d? const-decl "bool" ODE_Lipschitz_def nil)
    (r2v type-eq-decl nil r2v_def nil)
    (continuous? const-decl "bool" r2v_analysis nil)
    (r2v_n type-eq-decl nil r2v_def nil)
    (nth const-decl "[(d) -> real]" r2v_def nil)
    (continuous? const-decl "bool" continuous_functions analysis)
    (continuous? const-decl "bool" continuous_functions analysis)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     Optimization_Dev)
    (sub const-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (contp? const-decl "bool" continuity_multivar Optimization_Dev)
    (contD? const-decl "bool" continuity_multivar Optimization_Dev)
    (cont_d? const-decl "bool" ODE_continuous_def nil))
   nil
   (cont_Lip_bothR subtype "ODE_continuous_def.v"
    "(list_adt[real].cons?)")))
 (cont_Lip_bothR_TCC3 0
  (cont_Lip_bothR_TCC3-1 nil 3787999521 ("" (subtype-tcc) nil nil)
   ((sub const-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (contp? const-decl "bool" continuity_multivar Optimization_Dev)
    (contD? const-decl "bool" continuity_multivar Optimization_Dev)
    (cont_d? const-decl "bool" ODE_continuous_def nil))
   nil
   (cont_Lip_bothR subtype "list_adt[real].car(ODE_continuous_def.v)"
    "(ODE_continuous_def.d)")))
 (cont_Lip_bothR 0
  (cont_Lip_bothR-1 nil 3787999561
   ("" (skeep)
    (("" (lemma "cont_Lip_bothv")
      (("" (inst -1 "n" "f")
        (("" (assert)
          (("" (expand "contD?" -1)
            (("" (typepred "y")
              (("" (lemma "contD_norms_v2v[1]")
                ((""
                  (inst -1 "(LAMBDA (x: VectorN(1)): d(car(x)))" "n"
                   "(LAMBDA (v: {vv: VectorN(1) | d(car(vv))}): f(car(v), y(car(v))))")
                  (("1" (assert)
                    (("1" (hide 2)
                      (("1" (inst 1 "norm_inf(1)" "norm_inf(n)")
                        (("1" (expand "contD?" 1 1)
                          (("1" (skeep 1)
                            (("1" (expand "contp?" 1)
                              (("1"
                                (skeep 1)
                                (("1"
                                  (inst -2 "cons(car(p),y(car(p)))")
                                  (("1"
                                    (expand "contp?" -2)
                                    (("1"
                                      (inst
                                       -2
                                       "norm_inf(1+n)"
                                       "norm_inf(n)")
                                      (("1"
                                        (inst -2 "eps")
                                        (("1"
                                          (lemma "cont_entry_v")
                                          (("1"
                                            (typepred "n")
                                            (("1"
                                              (inst -2 "y")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (hide -3)
                                                  (("1"
                                                    (expand
                                                     "contD?"
                                                     -2)
                                                    (("1"
                                                      (typepred "p")
                                                      (("1"
                                                        (inst -5 "p")
                                                        (("1"
                                                          (expand
                                                           "contp?"
                                                           -5)
                                                          (("1"
                                                            (inst
                                                             -5
                                                             "norm_inf(1)"
                                                             "norm_inf(length(y))")
                                                            (("1"
                                                              (skeep
                                                               -6)
                                                              (("1"
                                                                (inst
                                                                 -5
                                                                 "delta")
                                                                (("1"
                                                                  (skeep
                                                                   -5)
                                                                  (("1"
                                                                    (inst
                                                                     1
                                                                     "min(delta_1,delta)")
                                                                    (("1"
                                                                      (skeep
                                                                       1)
                                                                      (("1"
                                                                        (typepred
                                                                         "x_1")
                                                                        (("1"
                                                                          (inst
                                                                           -8
                                                                           "x_1")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (inst
                                                                               -10
                                                                               "cons( car(x_1), y(car(x_1)))")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (hide
                                                                                   1)
                                                                                  (("1"
                                                                                    (lemma
                                                                                     "norm_inf_recurse")
                                                                                    (("1"
                                                                                      (inst
                                                                                       -1
                                                                                       "1+n"
                                                                                       "cons(car(x_1), y(car(x_1))) - cons(car(p), y(car(p)))")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (replace
                                                                                           -1)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "max"
                                                                                             1)
                                                                                            (("1"
                                                                                              (lift-if
                                                                                               1)
                                                                                              (("1"
                                                                                                (split
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (flatten)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (hide
                                                                                                       -3
                                                                                                       -6)
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "norm_inf"
                                                                                                         1
                                                                                                         1)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "norm_inf"
                                                                                                           -8)
                                                                                                          (("1"
                                                                                                            (lemma
                                                                                                             "cdr_sub")
                                                                                                            (("1"
                                                                                                              (inst
                                                                                                               -1
                                                                                                               "cons(car(x_1), y(car(x_1)))"
                                                                                                               "cons(car(p), y(car(p)))")
                                                                                                              (("1"
                                                                                                                (replace
                                                                                                                 -1)
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (flatten)
                                                                                                  (("2"
                                                                                                    (hide
                                                                                                     1)
                                                                                                    (("2"
                                                                                                      (lemma
                                                                                                       "car_sub")
                                                                                                      (("2"
                                                                                                        (inst
                                                                                                         -1
                                                                                                         "cons(car(x_1), y(car(x_1)))"
                                                                                                         "cons(car(p), y(car(p)))")
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          (("2"
                                                                                                            (replace
                                                                                                             -1)
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "norm_inf"
                                                                                                               -11)
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "norm_inf"
                                                                                                                 -11)
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "abs"
                                                                                                                   -11)
                                                                                                                  (("2"
                                                                                                                    (assert)
                                                                                                                    (("2"
                                                                                                                      (typepred
                                                                                                                       "x_1-p"
                                                                                                                       "x_1"
                                                                                                                       "p")
                                                                                                                      (("2"
                                                                                                                        (assert)
                                                                                                                        (("2"
                                                                                                                          (replace
                                                                                                                           -4)
                                                                                                                          (("2"
                                                                                                                            (replace
                                                                                                                             -7)
                                                                                                                            (("2"
                                                                                                                              (expand
                                                                                                                               "max"
                                                                                                                               -2)
                                                                                                                              (("2"
                                                                                                                                (assert)
                                                                                                                                (("2"
                                                                                                                                  (expand
                                                                                                                                   "max"
                                                                                                                                   -17)
                                                                                                                                  (("2"
                                                                                                                                    (assert)
                                                                                                                                    (("2"
                                                                                                                                      (lemma
                                                                                                                                       "car_sub")
                                                                                                                                      (("2"
                                                                                                                                        (inst
                                                                                                                                         -1
                                                                                                                                         "x_1"
                                                                                                                                         "p")
                                                                                                                                        (("2"
                                                                                                                                          (assert)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (hide
                                                                                         2)
                                                                                        (("2"
                                                                                          (typepred
                                                                                           "cons[real](car[real](x_1), y(car[real](x_1))) -
            cons[real](car[real](p), y(car[real](p)))")
                                                                                          (("2"
                                                                                            (expand
                                                                                             "length"
                                                                                             -2
                                                                                             2)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "length"
                                                                                               -2
                                                                                               3)
                                                                                              (("2"
                                                                                                (typepred
                                                                                                 "y")
                                                                                                (("2"
                                                                                                  (typepred
                                                                                                   "y(car(x_1))")
                                                                                                  (("2"
                                                                                                    (typepred
                                                                                                     "y(car(p))")
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (replace
                                                                                                         -2)
                                                                                                        (("2"
                                                                                                          (replace
                                                                                                           -4)
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "max"
                                                                                                             -7)
                                                                                                            (("2"
                                                                                                              (propax)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (expand
                                                                                   "length"
                                                                                   1
                                                                                   1)
                                                                                  (("2"
                                                                                    (typepred
                                                                                     "y(car(x_1))")
                                                                                    (("2"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              (("2"
                                                                (lemma
                                                                 "length_cons")
                                                                (("2"
                                                                  (inst
                                                                   -1
                                                                   "y")
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (typepred
                                                                       "y")
                                                                      (("2"
                                                                        (expand
                                                                         "length"
                                                                         2)
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (lemma "length_cons")
                                                (("2"
                                                  (inst -1 "y")
                                                  (("2"
                                                    (expand
                                                     "length"
                                                     -1)
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (expand "length" 1 1)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (skeep 1) (("2" (assert) nil nil)) nil)
                   ("3" (skeep 1) (("3" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cont_Lip_bothv formula-decl nil ODE_continuous_def nil)
    (r2v_n type-eq-decl nil r2v_def nil)
    (continuous? const-decl "bool" r2v_analysis nil)
    (r2v type-eq-decl nil r2v_def nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (domain type-eq-decl nil domain_vec2real_def Optimization_Dev)
    (contD? const-decl "bool" continuity_multivar Optimization_Dev)
    (contp? const-decl "bool" continuity_multivar Optimization_Dev)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (p skolem-const-decl "(LAMBDA (x: VectorN(1)): d(car(x)))"
     ODE_continuous_def nil)
    (n skolem-const-decl "posnat" ODE_continuous_def nil)
    (y skolem-const-decl "{yy: r2v_n(n) | continuous?(yy)}"
     ODE_continuous_def nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (cont_entry_v formula-decl nil r2v_analysis nil)
    (cons? const-decl "bool" r2v_def nil)
    (length_cons formula-decl nil r2v_def nil)
    (x_1 skolem-const-decl "(LAMBDA (x: VectorN(1)): d(car(x)))"
     ODE_continuous_def nil)
    (Vector type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (car_sub formula-decl nil vector_arithmetic Optimization_Dev)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (abs def-decl "{l: list | length(l) = length(ll)}" norms
         Optimization_Dev)
    (max def-decl "real" norms Optimization_Dev)
    (length_singleton formula-decl nil more_list_props structures)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (norm_inf const-decl "[(cons?) -> nonneg_real]" norms
     Optimization_Dev)
    (cdr_sub formula-decl nil vector_arithmetic Optimization_Dev)
    (nonneg_real_max application-judgement
     "{z: nonneg_real | z >= x AND z >= y}" real_defs nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (posrat_max application-judgement "{s: posrat | s >= q AND s >= r}"
     real_defs nil)
    (posint_max application-judgement "{k: posint | i <= k AND j <= k}"
     real_defs nil)
    (norm_inf_recurse formula-decl nil norms Optimization_Dev)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (<= const-decl "bool" reals nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (posreal_min application-judgement
     "{z: posreal | z <= x AND z <= y}" real_defs nil)
    (length const-decl "nat" r2v_def nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (contp? const-decl "bool" continuity_multivar Optimization_Dev)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     Optimization_Dev)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (norm? const-decl "bool" norms Optimization_Dev)
    (norm_inf const-decl "(norm?(m))" norms Optimization_Dev)
    (contD_norms_v2v formula-decl nil continuity_multivar
     Optimization_Dev)
    (contD? const-decl "bool" continuity_multivar Optimization_Dev)
    (Lip_d? const-decl "bool" ODE_Lipschitz_def nil)
    (od_f type-eq-decl nil ODE_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (d formal-const-decl "[real -> bool]" ODE_continuous_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (cont_Lip_norm_TCC1 0
  (cont_Lip_norm_TCC1-1 nil 3788016286 ("" (subtype-tcc) nil nil)
   ((sub const-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (contp? const-decl "bool" continuity_multivar Optimization_Dev)
    (contD? const-decl "bool" continuity_multivar Optimization_Dev)
    (cont_d? const-decl "bool" ODE_continuous_def nil)
    (length_singleton formula-decl nil more_list_props structures))
   nil
   (cont_Lip_norm subtype
    "(: ODE_continuous_def.nn(ODE_continuous_def.f(list_adt[real].car(ODE_continuous_def.v), ODE_continuous_def.y(list_adt[real].car(ODE_continuous_def.v)))) :)"
    "matrices.VectorN(1)")))
 (cont_Lip_norm 0
  (cont_Lip_norm-1 nil 3788016310
   ("" (lemma "cont_comp")
    (("" (skeep 1)
      ((""
        (inst -1 "1" "n" "1" "LAMBDA(v:VectorN(1)): d(car(v))"
         "LAMBDA(v:{vv:VectorN(1)|d(car(vv))}): f(car(v),y(car(v)))"
         "LAMBDA(v:VectorN(n)): (: nn(v) :)")
        (("1" (split -1)
          (("1" (propax) nil nil)
           ("2" (hide 2)
            (("2" (lemma "cont_Lip_bothR")
              (("2" (inst -1 "n" "f" "y") (("2" (assert) nil nil))
                nil))
              nil))
            nil)
           ("3" (hide 2)
            (("3" (lemma "norm_cont_v2v[n]")
              (("3" (inst -1 "(LAMBDA (v_1: VectorN(n)): TRUE)" "nn")
                (("3" (assert)
                  (("3" (expand "contD?")
                    (("3" (skeep)
                      (("3" (inst -1 "p")
                        (("3" (expand "contp?" -1)
                          (("3" (lemma "contp_norms_v2v[n]")
                            (("3"
                              (inst -1
                               "(LAMBDA (v_1: VectorN(n)): TRUE)" "1"
                               "(LAMBDA (v: VectorN(n)): (: nn(v) :))"
                               "p")
                              (("3"
                                (assert)
                                (("3"
                                  (hide 2)
                                  (("3"
                                    (expand "contp?" 1)
                                    (("3"
                                      (inst
                                       1
                                       "norm_inf(n)"
                                       "norm_inf(1)")
                                      (("3"
                                        (inst -1 "norm_inf(n)")
                                        (("3"
                                          (skeep)
                                          (("3"
                                            (inst -1 "eps")
                                            (("3"
                                              (skeep -1)
                                              (("3"
                                                (inst 1 "delta")
                                                (("3"
                                                  (skeep 1)
                                                  (("3"
                                                    (assert)
                                                    (("3"
                                                      (inst -2 "x")
                                                      (("3"
                                                        (assert)
                                                        (("3"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide 2)
          (("2" (skeep 1)
            (("2" (typepred "v")
              (("2" (expand "length" -2) (("2" (assert) nil nil)) nil))
              nil))
            nil))
          nil)
         ("3" (hide 2)
          (("3" (skeep)
            (("3" (typepred "v") (("3" (grind) nil nil)) nil)) nil))
          nil)
         ("4" (skeep 1)
          (("4" (typepred "v") (("4" (grind) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (cont_Lip_bothR formula-decl nil ODE_continuous_def nil)
    (norm_cont_v2v formula-decl nil continuity_multivar
     Optimization_Dev)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     Optimization_Dev)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (contp? const-decl "bool" continuity_multivar Optimization_Dev)
    (norm_inf const-decl "(norm?(m))" norms Optimization_Dev)
    (cont_d? const-decl "bool" ODE_continuous_def nil)
    (contp? const-decl "bool" continuity_multivar Optimization_Dev)
    (max def-decl "real" norms Optimization_Dev)
    (abs def-decl "{l: list | length(l) = length(ll)}" norms
         Optimization_Dev)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (norm_inf const-decl "[(cons?) -> nonneg_real]" norms
     Optimization_Dev)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (sub const-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (add def-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (scal def-decl "VectorN(length(v2))" matrices matrices)
    (minus_real_is_real application-judgement "real" reals nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (contp? const-decl "bool" continuity_multivar Optimization_Dev)
    (contp_norms_v2v formula-decl nil continuity_multivar
     Optimization_Dev)
    (contD? const-decl "bool" continuity_multivar Optimization_Dev)
    (contD? const-decl "bool" continuity_multivar Optimization_Dev)
    (TRUE const-decl "bool" booleans nil)
    (norm? const-decl "bool" norms Optimization_Dev)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (continuous? const-decl "bool" r2v_analysis nil)
    (r2v type-eq-decl nil r2v_def nil)
    (r2v_n type-eq-decl nil r2v_def nil)
    (Lip_d? const-decl "bool" ODE_Lipschitz_def nil)
    (od_f type-eq-decl nil ODE_def nil)
    (domain type-eq-decl nil domain_vec2real_def Optimization_Dev)
    (length_singleton formula-decl nil more_list_props structures)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n skolem-const-decl "posnat" ODE_continuous_def nil)
    (d formal-const-decl "[real -> bool]" ODE_continuous_def nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices matrices)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cont_comp formula-decl nil composition_function Optimization_Dev))
   shostak))
 (cont_od_fx 0
  (cont_od_fx-1 nil 3788085480
   ("" (skeep)
    (("" (lemma "cont_Lip_bothR")
      (("" (inst -1 "n" "f" "y")
        (("" (assert)
          (("" (expand "continuous?")
            (("" (expand "contD?" -1)
              (("" (skeep 1)
                (("" (expand "continuous?" 1)
                  (("" (skeep 1)
                    (("" (inst -1 "(: x0 :)")
                      (("" (expand "contp?" -1)
                        (("" (inst -1 "norm_inf(1)" "norm_inf(n)")
                          (("" (expand "continuous?" 1)
                            (("" (skeep 1)
                              ((""
                                (inst -1 "epsilon")
                                ((""
                                  (skeep -1)
                                  ((""
                                    (inst 1 "delta")
                                    ((""
                                      (skeep 1)
                                      ((""
                                        (inst -1 "(: x :)")
                                        ((""
                                          (assert)
                                          ((""
                                            (split -1)
                                            (("1"
                                              (expand "od_fx" 1)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand "nth" 1)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (lemma
                                                       "norm_inf_nth_ineq")
                                                      (("1"
                                                        (inst
                                                         -1
                                                         "f(x, y(x)) - f(x0, y(x0))"
                                                         "i")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (expand
                                                             "-"
                                                             -1
                                                             2)
                                                            (("1"
                                                              (expand
                                                               "sub"
                                                               -1
                                                               1)
                                                              (("1"
                                                                (lemma
                                                                 "nth_sum")
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "f(x, y(x))"
                                                                   "scal(-1, f(x0, y(x0))  ) ")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (inst
                                                                       -1
                                                                       "i")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (expand
                                                                           "+"
                                                                           -1
                                                                           1)
                                                                          (("1"
                                                                            (replace
                                                                             -1
                                                                             -2)
                                                                            (("1"
                                                                              (lemma
                                                                               "nth_dist")
                                                                              (("1"
                                                                                (inst
                                                                                 -1
                                                                                 "f(x0,y(x0))"
                                                                                 "-1"
                                                                                 "i")
                                                                                (("1"
                                                                                  (expand
                                                                                   "*"
                                                                                   -1
                                                                                   1)
                                                                                  (("1"
                                                                                    (replace
                                                                                     -1
                                                                                     -3)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "norm_inf"
                                                                                         -4
                                                                                         1)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (typepred
                                                           "i")
                                                          (("2"
                                                            (typepred
                                                             "od_fx(n,f,y)"
                                                             "(f(x, y(x)) - f(x0, y(x0)))"
                                                             "f(x,y(x))"
                                                             "f(x0,y(x0))")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cont_Lip_bothR formula-decl nil ODE_continuous_def nil)
    (contD? const-decl "bool" continuity_multivar Optimization_Dev)
    (continuous? const-decl "bool" continuous_functions analysis)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     Optimization_Dev)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (length_singleton formula-decl nil more_list_props structures)
    (norm_inf const-decl "(norm?(m))" norms Optimization_Dev)
    (norm? const-decl "bool" norms Optimization_Dev)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (norm_inf const-decl "[(cons?) -> nonneg_real]" norms
     Optimization_Dev)
    (max def-decl "real" norms Optimization_Dev)
    (abs def-decl "{l: list | length(l) = length(ll)}" norms
         Optimization_Dev)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (add def-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (minus_real_is_real application-judgement "real" reals nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (od_fx const-decl "{ff: r2v_n(n) | length(ff) = n}" ODE_def nil)
    (nth const-decl "[(d) -> real]" r2v_def nil)
    (norm_inf_nth_ineq formula-decl nil norms Optimization_Dev)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (sub const-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (scal def-decl "VectorN(length(v2))" matrices matrices)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (nth_dist formula-decl nil vector_arithmetic Optimization_Dev)
    (* const-decl "VectorN(length(v2))" matrices matrices)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nth_sum formula-decl nil vector_arithmetic Optimization_Dev)
    (below type-eq-decl nil naturalnumbers nil)
    (x0 skolem-const-decl "(d)" ODE_continuous_def nil)
    (x skolem-const-decl "(d)" ODE_continuous_def nil)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (Vector type-eq-decl nil matrices matrices)
    (i skolem-const-decl "{ii: nat | ii < length(od_fx[d](n, f, y))}"
       ODE_continuous_def nil)
    (y skolem-const-decl "{yy: r2v_n[d](n) | continuous?[d](yy)}"
     ODE_continuous_def nil)
    (f skolem-const-decl
     "{ff: od_f[d](n) | Lip_d?[d](n)(ff) AND cont_d?(n)(ff)}"
     ODE_continuous_def nil)
    (n skolem-const-decl "posnat" ODE_continuous_def nil)
    (length const-decl "nat" r2v_def nil)
    (< const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (continuous? const-decl "bool" continuous_functions analysis)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (contp? const-decl "bool" continuity_multivar Optimization_Dev)
    (continuous? const-decl "bool" r2v_analysis nil)
    (r2v type-eq-decl nil r2v_def nil)
    (r2v_n type-eq-decl nil r2v_def nil)
    (cont_d? const-decl "bool" ODE_continuous_def nil)
    (Lip_d? const-decl "bool" ODE_Lipschitz_def nil)
    (od_f type-eq-decl nil ODE_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (d formal-const-decl "[real -> bool]" ODE_continuous_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (Int_od_fx 0
  (Int_od_fx-1 nil 3788882014
   ("" (lemma "cont_od_fx")
    (("" (lemma "cont_Int")
      (("" (skeep 1)
        (("" (inst -2 "n" "f" "y")
          (("" (inst -1 "od_fx(n,f,y)")
            (("" (assert) (("" (inst -1 "a" "b") nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((d formal-const-decl "[real -> bool]" ODE_continuous_def nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (cont_Int formula-decl nil r2v_analysis nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices matrices)
    (od_f type-eq-decl nil ODE_def nil)
    (Lip_d? const-decl "bool" ODE_Lipschitz_def nil)
    (cont_d? const-decl "bool" ODE_continuous_def nil)
    (r2v_n type-eq-decl nil r2v_def nil)
    (r2v type-eq-decl nil r2v_def nil)
    (continuous? const-decl "bool" r2v_analysis nil)
    (od_fx const-decl "{ff: r2v_n(n) | length(ff) = n}" ODE_def nil)
    (length const-decl "nat" r2v_def nil)
    (cont_od_fx formula-decl nil ODE_continuous_def nil))
   shostak))
 (cont_Lip_real_TCC1 0
  (cont_Lip_real_TCC1-1 nil 3788024581 ("" (subtype-tcc) nil nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices matrices)
    (od_f type-eq-decl nil ODE_def nil)
    (Lip_d? const-decl "bool" ODE_Lipschitz_def nil)
    (r2v type-eq-decl nil r2v_def nil)
    (continuous? const-decl "bool" r2v_analysis nil)
    (r2v_n type-eq-decl nil r2v_def nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (norm? const-decl "bool" norms Optimization_Dev)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     Optimization_Dev)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nth const-decl "[(d) -> real]" r2v_def nil)
    (continuous? const-decl "bool" continuous_functions analysis)
    (continuous? const-decl "bool" continuous_functions analysis)
    (* const-decl "VectorN(length(v2))" matrices matrices)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sub const-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (contp? const-decl "bool" continuity_multivar Optimization_Dev)
    (contD? const-decl "bool" continuity_multivar Optimization_Dev)
    (cont_d? const-decl "bool" ODE_continuous_def nil)
    (d formal-const-decl "[real -> bool]" ODE_continuous_def nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (od_fx const-decl "{ff: r2v_n(n) | length(ff) = n}" ODE_def nil))
   nil
   (cont_Lip_real subtype
    "ODE_def[ODE_continuous_def.d].od_fx(ODE_continuous_def.n, ODE_continuous_def.f, ODE_continuous_def.y)(ODE_continuous_def.x)"
    "(list_adt[real].cons?)")))
 (cont_Lip_real 0
  (cont_Lip_real-1 nil 3788024618
   ("" (lemma "cont_Lip_norm")
    (("" (skeep 1)
      (("" (inst -1 "n" "f" "y" "nn")
        (("" (assert)
          (("" (expand "continuous?" 1 1)
            (("" (expand "contD?" -1)
              (("" (skeep 1)
                (("" (inst -1 "(: x0 :)")
                  (("" (expand "contp?" -1)
                    (("" (expand "continuous?" 1)
                      (("" (skeep 1)
                        (("" (inst -1 "norm_inf(1)" "norm_inf(1)")
                          (("" (inst -1 "epsilon")
                            (("" (skeep -1)
                              ((""
                                (inst 1 "delta")
                                ((""
                                  (skeep 1)
                                  ((""
                                    (inst -1 "(: x_1 :)")
                                    ((""
                                      (assert)
                                      ((""
                                        (split -1)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "od_fx" 1)
                                            (("1"
                                              (assert)
                                              (("1" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (assert)
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((contD? const-decl "bool" continuity_multivar Optimization_Dev)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     Optimization_Dev)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (length_singleton formula-decl nil more_list_props structures)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (continuous? const-decl "bool" continuous_functions analysis)
    (norm_inf const-decl "(norm?(m))" norms Optimization_Dev)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (scal def-decl "VectorN(length(v2))" matrices matrices)
    (add def-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (sub const-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (abs def-decl "{l: list | length(l) = length(ll)}" norms
         Optimization_Dev)
    (max def-decl "real" norms Optimization_Dev)
    (norm_inf const-decl "[(cons?) -> nonneg_real]" norms
     Optimization_Dev)
    (cont_d? const-decl "bool" ODE_continuous_def nil)
    (od_fx const-decl "{ff: r2v_n(n) | length(ff) = n}" ODE_def nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (contp? const-decl "bool" continuity_multivar Optimization_Dev)
    (continuous? const-decl "bool" continuous_functions analysis)
    (norm? const-decl "bool" norms Optimization_Dev)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (continuous? const-decl "bool" r2v_analysis nil)
    (r2v type-eq-decl nil r2v_def nil)
    (r2v_n type-eq-decl nil r2v_def nil)
    (Lip_d? const-decl "bool" ODE_Lipschitz_def nil)
    (od_f type-eq-decl nil ODE_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (d formal-const-decl "[real -> bool]" ODE_continuous_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (cont_Lip_norm formula-decl nil ODE_continuous_def nil))
   shostak)))

