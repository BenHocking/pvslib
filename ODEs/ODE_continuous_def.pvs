ODE_continuous_def [ d :[ real -> bool ] ]  % Welcome
% d - domain of the functions r2v
      	     	: THEORY
%Created by                     JTS
%	 	           Jan 2020
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%| Defines continuity of ODE     |%
%| functions defined in ODE def  |%
%| in the first variable.        |%
%| Continuity in the first       |%
%| variable and Lipchitz in the  |%
%| second variable implies       |%
%| continuity of the function in |%
%| general. A selection of useful|%
%| continuity lemmas are here,   |%
%| all specific to the ODE       |%
%| functions                     |%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%Last Updated	           Jan 2020

%-----     %
 BEGIN
%     -----%

%-------------------------------------------------------------------------
%% Assume that the domain is nonempty, connected, and has more than
%  one element.
%-------------------------------------------------------------------------

  ASSUMING
  
    IMPORTING analysis@deriv_domain_def[(d)]
      non_empty : ASSUMPTION nonempty?(d)
      connected : ASSUMPTION connected?[(d)]
      not_one_element : ASSUMPTION not_one_element?[(d)]
    
   ENDASSUMING
   
%-------------------------------------------------------------------------
%% Importing  analysis@composition_continuous to have the continuity of
%  the composition of continuous real-valued functions
%% Importing Lipschitz_ODE_Def to have the definition of Lipschitz in the
%  second variable of the ode function.
%% Importing mv_analysis@compositon_function to have continuity of
%  composition of multi-variate functions.
%-------------------------------------------------------------------------

IMPORTING analysis@composition_continuous
IMPORTING ODE_Lipschitz_def[d]
IMPORTING mv_analysis@composition_function

%-------------------------------------------------------------------------
%% Define continuity in the first variable of an ODE function
%-------------------------------------------------------------------------

 cont_d?(n:posnat)(f:od_f(n)):
  bool =
   FORALL(y1:VectorN(n)):
    contD?[1](LAMBDA(x:VectorN(1)): d(car(x)), n)
     (LAMBDA(x:{vv:VectorN(1) | d(car(vv))}): f(car(x), y1))

%-------------------------------------------------------------------------
%% Lipschitz in the second variable implies continuous in the second
%  variable
%-------------------------------------------------------------------------
	
 cont_Lip_2ndv: LEMMA
  FORALL(n:posnat, f:{ ff:od_f(n) | Lip_d?(n)(ff) }):
   FORALL(t:(d)):
    contD?[n](LAMBDA(x:VectorN(n)): d(car(x)), n)
     (LAMBDA(v:VectorN(n)): f(t, v))

%-------------------------------------------------------------------------
%% Continuity in the first variable, and Lipschitz in the second variable
%  implies Continuity in the multivariate sense in both variables
%-------------------------------------------------------------------------
	
 cont_Lip_bothv: LEMMA
  FORALL(n:posnat, f:{ ff:od_f(n)| Lip_d?(n)(ff) }):
   cont_d?(n)(f) IMPLIES
    contD?[n+1](LAMBDA(x:VectorN(n+1)): d(car(x)), n)
     (LAMBDA(v:{vv:VectorN(n+1)| d(car(vv))}): f(car(v), cdr(v)))

%-------------------------------------------------------------------------
%% If f: R < Rn -> R is continuous in the first variable, and Lipchitz
%  in the second, and if y: R -> Rn is continuous then
%  f(v,y(v)) is continuous
%-------------------------------------------------------------------------

 cont_Lip_bothR: LEMMA
  FORALL(n:posnat, f:{ ff:od_f(n) | Lip_d?(n)(ff) },
  y:{ yy:r2v_n(n) | continuous?(yy) }):
   cont_d?(n)(f) IMPLIES
    contD?[1](LAMBDA(x:VectorN(1)): d(car(x)), n)
     (LAMBDA(v:{vv:VectorN(1)| d(car(vv))}): f(car(v), y(car(v))))

%-------------------------------------------------------------------------
%% When the ODE function is composed with the norm, it is still continuous
%-------------------------------------------------------------------------

 cont_Lip_norm: LEMMA
  FORALL(n:posnat,f:{ff:od_f(n)| Lip_d?(n)(ff)},
  y:{yy:r2v_n(n)| continuous?(yy)}, nn:(norm?(n))):
    cont_d?(n)(f) IMPLIES
      contD?[1](LAMBDA(x:VectorN(1)): d(car(x)) , 1)
        (LAMBDA(v:{vv:VectorN(1)| d(car(vv))}): (: nn(f(car(v),y(car(v)))) :) )

%-------------------------------------------------------------------------
%% The od_fx function is continuous
%-------------------------------------------------------------------------

 cont_od_fx: LEMMA
  FORALL (n: posnat,
  f: {ff: od_f[d](n) | Lip_d?[d](n)(ff) AND cont_d?(n)(ff)},
  y: {yy: r2v_n[d](n) | continuous?[d](yy)}):
   continuous?[d](od_fx[d](n, f, y))

%-------------------------------------------------------------------------
%% The od_fx function is Integrable
%-------------------------------------------------------------------------

 Int_od_fx: LEMMA
  FORALL (n: posnat, a,b:(d),
  f: {ff: od_f[d](n) | Lip_d?[d](n)(ff) AND cont_d?(n)(ff)},
  y: {yy: r2v_n[d](n) | continuous?[d](yy)}):
   Integrable?[d](a,b,od_fx[d](n, f, y))

%-------------------------------------------------------------------------
%% The od_fx function composed with the norm functoin is still
%  continuous
%-------------------------------------------------------------------------

 cont_Lip_real: LEMMA
  FORALL(n:posnat,f:{ff:od_f(n)| Lip_d?(n)(ff)},
   y:{yy:r2v_n(n) | continuous?(yy)}, nn:(norm?(n))):
    cont_d?(n)(f) IMPLIES
     continuous?[(d)](LAMBDA(x:(d)): nn(od_fx(n, f, y)(x)))

  %~~~        END   ~~~%
  End ODE_continuous_def
