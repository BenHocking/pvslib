(ODE_def
 (IMP_r2v_analysis_TCC1 0
  (IMP_r2v_analysis_TCC1-1 nil 3789396425
   ("" (lemma "non_empty") (("" (propax) nil nil)) nil)
   ((non_empty formula-decl nil ODE_def nil)) nil
   (IMP_r2v_analysis assuming "r2v_analysis[ODE_def.d].r2v_analysis"
    "non_empty: ASSUMPTION sets[real].nonempty?(r2v_analysis.d)")))
 (IMP_r2v_analysis_TCC2 0
  (IMP_r2v_analysis_TCC2-1 nil 3789396425
   ("" (lemma "connected") (("" (propax) nil nil)) nil)
   ((connected formula-decl nil ODE_def nil)) nil
   (IMP_r2v_analysis assuming "r2v_analysis[ODE_def.d].r2v_analysis"
    "connected: ASSUMPTION deriv_domain_def[(r2v_analysis.d)].connected?")))
 (IMP_r2v_analysis_TCC3 0
  (IMP_r2v_analysis_TCC3-1 nil 3789396425
   ("" (lemma "not_one_element") (("" (propax) nil nil)) nil)
   ((not_one_element formula-decl nil ODE_def nil)) nil
   (IMP_r2v_analysis assuming "r2v_analysis[ODE_def.d].r2v_analysis"
    "not_one_element: ASSUMPTION deriv_domain_def[(r2v_analysis.d)].not_one_element?")))
 (IMP_derivatives_def_TCC1 0
  (IMP_derivatives_def_TCC1-1 nil 3789396425
   ("" (lemma "deriv_domain") (("" (propax) nil nil)) nil)
   ((deriv_domain formula-decl nil r2v_analysis nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (d formal-const-decl "[real -> bool]" ODE_def nil))
   nil
   (IMP_derivatives_def assuming
    "analysis@derivatives_def[(ODE_def.d)].derivatives_def"
    "deriv_domain: ASSUMPTION deriv_domain_def[T].deriv_domain?")))
 (od_fx_TCC1 0
  (od_fx_TCC1-1 nil 3787492912 ("" (subtype-tcc) nil nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis)
    (d formal-const-decl "[real -> bool]" ODE_def nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (length const-decl "nat" r2v_def nil))
   nil
   (od_fx subtype "LAMBDA (t: (ODE_def.d)): ODE_def.f(t, ODE_def.y(t))"
    "{ff: r2v_def[ODE_def.d].r2v_n(ODE_def.n) | r2v_def[ODE_def.d].length(ff) = ODE_def.n}")))
 (nth_od_fx_TCC1 0
  (nth_od_fx_TCC1-1 nil 3787493547 ("" (subtype-tcc) nil nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis)
    (od_fx const-decl "{ff: r2v_n(n) | length(ff) = n}" ODE_def nil)
    (d formal-const-decl "[real -> bool]" ODE_def nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (length const-decl "nat" r2v_def nil))
   nil
   (nth_od_fx subtype "ODE_def.i"
    "{jj: naturalnumbers.nat | reals.<(jj, r2v_def[ODE_def.d].length(ODE_def.od_fx(ODE_def.n, ODE_def.f, ODE_def.y)))}")))
 (nth_od_fx_TCC2 0
  (nth_od_fx_TCC2-1 nil 3787493547 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (d formal-const-decl "[real -> bool]" ODE_def nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis))
   nil
   (nth_od_fx subtype "ODE_def.i" "below[length[real](f(t, y(t)))]")))
 (nth_od_fx 0
  (nth_od_fx-1 nil 3787494010
   ("" (induct "n")
    (("1" (skeep) nil nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (case "i=0")
          (("1" (replace -1)
            (("1" (expand "nth" 1)
              (("1" (decompose-equality 1)
                (("1" (expand "nth" 1)
                  (("1" (expand "od_fx" 1 1) (("1" (propax) nil nil))
                    nil))
                  nil)
                 ("2" (skeep)
                  (("2" (assert)
                    (("2" (typepred "f(t,y(t))")
                      (("2" (assert) nil nil)) nil))
                    nil))
                  nil)
                 ("3" (skeep)
                  (("3" (typepred "od_fx(1+j,f,y)")
                    (("3" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (expand "od_fx" 2 1)
            (("2" (expand "nth" 2 1) (("2" (propax) nil nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (skeep 1) (("3" (typepred "i") (("3" (assert) nil nil)) nil))
      nil)
     ("4" (skeep 1) (("4" (typepred "i") (("4" (assert) nil nil)) nil))
      nil))
    nil)
   ((numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (y skolem-const-decl "r2v_n[d](1 + j)" ODE_def nil)
    (f skolem-const-decl "od_f(1 + j)" ODE_def nil)
    (j skolem-const-decl "nat" ODE_def nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis)
    (nat_induction formula-decl nil naturalnumbers nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (nth const-decl "[(d) -> real]" r2v_def nil)
    (pred type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (d formal-const-decl "[real -> bool]" ODE_def nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices matrices)
    (od_f type-eq-decl nil ODE_def nil)
    (r2v_n type-eq-decl nil r2v_def nil)
    (< const-decl "bool" reals nil) (r2v type-eq-decl nil r2v_def nil)
    (length const-decl "nat" r2v_def nil)
    (od_fx const-decl "{ff: r2v_n(n) | length(ff) = n}" ODE_def nil))
   shostak))
 (od_sol?_TCC1 0
  (od_sol?_TCC2-1 nil 3785668086
   ("" (skeep) (("" (typepred "y") (("" (propax) nil nil)) nil)) nil)
   ((r2v_n type-eq-decl nil r2v_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (derivable? const-decl "bool" r2v_analysis nil)
    (r2v type-eq-decl nil r2v_def nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (d formal-const-decl "[real -> bool]" ODE_def nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   nil
   (od_sol? subtype "ODE_def.y"
    "(r2v_analysis[ODE_def.d].derivable?)")))
 (od_sol_nth_TCC1 0
  (od_sol_nth_TCC1-1 nil 3790338473 ("" (subtype-tcc) nil nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (> const-decl "bool" reals nil) (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (r2v type-eq-decl nil r2v_def nil)
    (derivable? const-decl "bool" r2v_analysis nil)
    (VectorN type-eq-decl nil matrices matrices)
    (r2v_n type-eq-decl nil r2v_def nil)
    (od_f type-eq-decl nil ODE_def nil)
    (od_sol? const-decl "bool" ODE_def nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (closed_interval type-eq-decl nil intervals_real reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (derivable? const-decl "bool" derivatives analysis)
    (derivable? const-decl "bool" derivatives_def analysis)
    (convergent? const-decl "bool" lim_of_functions analysis)
    (convergence const-decl "bool" lim_of_functions analysis)
    (convergence const-decl "bool" convergence_functions analysis)
    (NQ const-decl "real" derivatives_def analysis)
    (nth const-decl "[(d) -> real]" r2v_def nil)
    (adh const-decl "setof[real]" convergence_functions analysis)
    (fullset const-decl "set" sets nil)
    (od_fx const-decl "{ff: r2v_n(n) | length(ff) = n}" ODE_def nil)
    (d formal-const-decl "[real -> bool]" ODE_def nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (length const-decl "nat" r2v_def nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   nil
   (od_sol_nth subtype "ODE_def.i"
    "{jj: naturalnumbers.nat | reals.<(jj, r2v_def[ODE_def.d].length(ODE_def.od_fx(ODE_def.n, ODE_def.f, ODE_def.y)))}")))
 (od_sol_nth_TCC2 0
  (od_sol_nth_TCC2-1 nil 3790338473 ("" (subtype-tcc) nil nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (> const-decl "bool" reals nil) (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (r2v type-eq-decl nil r2v_def nil)
    (derivable? const-decl "bool" r2v_analysis nil)
    (VectorN type-eq-decl nil matrices matrices)
    (r2v_n type-eq-decl nil r2v_def nil)
    (od_f type-eq-decl nil ODE_def nil)
    (od_sol? const-decl "bool" ODE_def nil)
    (< const-decl "bool" reals nil)
    (length const-decl "nat" r2v_def nil)
    (below type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (closed_interval type-eq-decl nil intervals_real reals)
    (od_fx const-decl "{ff: r2v_n(n) | length(ff) = n}" ODE_def nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (fullset const-decl "set" sets nil)
    (adh const-decl "setof[real]" convergence_functions analysis)
    (d formal-const-decl "[real -> bool]" ODE_def nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nth const-decl "[(d) -> real]" r2v_def nil)
    (NQ const-decl "real" derivatives_def analysis)
    (convergence const-decl "bool" convergence_functions analysis)
    (convergence const-decl "bool" lim_of_functions analysis)
    (convergent? const-decl "bool" lim_of_functions analysis)
    (derivable? const-decl "bool" derivatives_def analysis)
    (derivable? const-decl "bool" derivatives analysis)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   nil
   (od_sol_nth subtype "r2v_def[ODE_def.d].nth(ODE_def.y, ODE_def.i)"
    "deriv_fun[(d)]")))
 (od_sol_nth 0
  (od_sol_nth-1 nil 3790338518
   ("" (skeep)
    (("" (skeep)
      (("" (typepred "y")
        (("" (expand "od_sol?" -2)
          (("" (decompose-equality -2)
            (("" (inst -1 "t")
              (("" (lemma "deriv_nth")
                (("" (inst -1 "y" "i")
                  (("" (assert)
                    (("" (lemma "list_extensionality")
                      (("" (inst -1 "od_fx(n,f,y)(t)" "deriv(y)(t)")
                        (("" (flatten)
                          (("" (hide -2)
                            (("" (split -1)
                              (("1"
                                (flatten)
                                (("1"
                                  (inst -2 "i")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (decompose-equality -3)
                                      (("1"
                                        (inst -1 "t")
                                        (("1"
                                          (expand "nth" -1 1)
                                          (("1"
                                            (replace -1 -3)
                                            (("1"
                                              (expand "nth" 1 1)
                                              (("1" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (typepred "i")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (typepred "y")
                                        (("2"
                                          (expand "length" -3)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (propax) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (list_extensionality formula-decl nil more_list_props structures)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (t skolem-const-decl "closed_interval[(d)](a, b)" ODE_def nil)
    (i skolem-const-decl "below(length(y))" ODE_def nil)
    (y skolem-const-decl "(od_sol?(n, a, b, f))" ODE_def nil)
    (f skolem-const-decl "od_f(n)" ODE_def nil)
    (b skolem-const-decl "{bb: (d) | bb > a}" ODE_def nil)
    (a skolem-const-decl "(d)" ODE_def nil)
    (n skolem-const-decl "nat" ODE_def nil)
    (deriv const-decl "[T -> real]" derivatives analysis)
    (deriv_fun type-eq-decl nil derivatives analysis)
    (derivable? const-decl "bool" derivatives analysis)
    (nth const-decl "[(d) -> real]" r2v_def nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis)
    (deriv_nth formula-decl nil r2v_analysis nil)
    (deriv def-decl "{ff: r2v | length(ff) = length(f)}" r2v_analysis
     nil)
    (od_fx const-decl "{ff: r2v_n(n) | length(ff) = n}" ODE_def nil)
    (length const-decl "nat" r2v_def nil)
    (closed_interval type-eq-decl nil intervals_real reals)
    (<= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (d formal-const-decl "[real -> bool]" ODE_def nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (r2v type-eq-decl nil r2v_def nil)
    (derivable? const-decl "bool" r2v_analysis nil)
    (VectorN type-eq-decl nil matrices matrices)
    (r2v_n type-eq-decl nil r2v_def nil)
    (> const-decl "bool" reals nil) (od_f type-eq-decl nil ODE_def nil)
    (od_sol? const-decl "bool" ODE_def nil))
   shostak))
 (od_sol?_TCC2 0
  (od_sol?_TCC3-1 nil 3785668086 ("" (subtype-tcc) nil nil)
   ((real_plus_real_is_real application-judgement "real" reals nil))
   nil
   (od_sol? subtype "ODE_def.y"
    "(r2v_analysis[ODE_def.d].derivable?)")))
 (od_sol?_TCC3 0
  (od_sol?_TCC3-1 nil 3787678998 ("" (subtype-tcc) nil nil)
   ((real_plus_real_is_real application-judgement "real" reals nil))
   nil
   (od_sol? subtype "ODE_def.y"
    "(r2v_analysis[ODE_def.d].derivable?)"))))

