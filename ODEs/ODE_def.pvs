ODE_def [ d :[ real -> bool ] ]  % Welcome
% d - domain of the functions r2v
		: THEORY

%Created by                     JTS
%	 	           Jan 2020
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%| This defines the first order  |%
%| ODE, including the ode        |%
%| "function" and what it means  |%
%| to be a solution              |%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%Last Updated	           Jan 2020

%-----     %
  BEGIN
%     -----%


%-------------------------------------------------------------------------
%% Assume that the domain is nonempty, connected, and has more than
%  one element.
%-------------------------------------------------------------------------

  ASSUMING
  
    IMPORTING analysis@deriv_domain_def[(d)]
      non_empty : ASSUMPTION nonempty?(d)
      connected : ASSUMPTION connected?[(d)]
      not_one_element : ASSUMPTION not_one_element?[(d)]
    
  ENDASSUMING

%-------------------------------------------------------------------------
%% Importing basic analysis for r2v functions
%% Importing definition of derivatives for functions f: [(d) -> real]
%  must import r2v_analysis first, do have the deriv_domain lemma
%-------------------------------------------------------------------------

IMPORTING r2v_analysis[d]
IMPORTING analysis@derivatives_def[(d)]
 
%-------------------------------------------------------------------------
%% Define ODE function f(x,v) (od_f) and f(x,y(x)) (od_fx). Here od_f and
%  od_fx will be the left side of the first order ODE  y` = f
%-------------------------------------------------------------------------

 od_f(n:nat): TYPE =
  [(d),  VectorN(n)
   ->  VectorN(n)]

 od_fx(n:nat, f:od_f(n), y:r2v_n(n)):
  { ff:r2v_n(n) | length(ff) = n } =
    LAMBDA(t:(d)): f(t,y(t))

 nth_od_fx: LEMMA
  FORALL(n:nat, f:od_f(n),  y:r2v_n(n),
  i:{ ii:nat | ii < n }):
   nth(od_fx(n, f, y), i) =
    LAMBDA(t:(d)): nth(f(t, y(t)), i)


%-------------------------------------------------------------------------
%% Define solution on closed interval in (d)
%-------------------------------------------------------------------------

 od_sol?(n:nat, a:(d), b:{ bb:(d) | bb > a }, f:od_f(n))
  (y:{ yy:r2v_n(n) | derivable?(yy) }):
   bool =
    (LAMBDA(t:closed_interval(a, b)): od_fx(n, f, y)(t))
    =
    (LAMBDA(t:closed_interval(a, b)): deriv(y)(t))

 od_sol_nth: LEMMA
  FORALL (n:nat, a:(d), b:{ bb:(d) | bb > a }, f:od_f(n),
  y:(od_sol?(n,a,b,f))):
   FORALL(i:below(length(y)), t:closed_interval(a, b)):
   nth(od_fx(n,f,y),i)(t) = deriv(nth(y,i))(t)

 ivt_s?(n:nat, a:(d), b:{ bb:(d) | bb > a }, f:od_f(n),
  y0: VectorN(n) )(y:{ yy:r2v_n(n) | derivable?(yy) }):
   bool =
    od_sol?(n, a, b, f)(y) AND y(a) = y0

%-------------------------------------------------------------------------
%% Define solution on interval [a,infty) in (d)
%-------------------------------------------------------------------------

 od_sol?(n:nat, a:(d), f:od_f(n))(y:{ yy:r2v_n(n) | derivable?(yy) }):
  bool =
   (LAMBDA(x:{ xx:(d) | xx >= a }): od_fx(n, f, y)(x))
   =
   (LAMBDA(x:{ xx:(d) | xx >= a }): deriv(y)(x))

 ivt_s?(n:nat, a:(d), f:od_f(n), y0:VectorN(n))
 (y:{ yy:r2v_n(n) | derivable?(yy) }):
  bool =
   od_sol?(n, a, f)(y) AND y(a) = y0

%-------------------------------------------------------------------------
%% Define solution in all of (d). For solution of the ivt on all of (d)
%  the assumption that (d) has a minimal element is enforced 
%-------------------------------------------------------------------------

 od_sol?(n:nat, f:od_f(n))(y:{ yy:r2v_n(n) | derivable?(yy) }):
  bool =
   (LAMBDA(x:(d)): od_fx(n, f, y)(x))
   =
   (LAMBDA(x:(d)): deriv(y)(x))

 ivt_s?(n:nat, a:{ aa:(d) | FORALL(dd:(d)): aa <= dd },
 f:od_f(n), y0: VectorN(n))(y:{ yy:r2v_n(n) | derivable?(yy) }):
  bool =
   od_sol?(n, f)(y) AND y(a) = y0

 ivt_s_unique?(n:nat, a:{ aa:(d) | FORALL(dd:(d)): aa <= dd },
 f:od_f(n), y0:VectorN(n))(y:{yy:r2v_n(n)| derivable?(yy)}):
  bool =
   ivt_s?(n, a, f, y0)(y) AND
    FORALL(y2:{ yy:r2v_n(n) | derivable?(yy) }):
     ivt_s?(n, a, f, y0)(y2) IMPLIES y = y2

 %~~  End ~%
 END ODE_def

