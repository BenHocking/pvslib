(ODE_psi_def
 (IMP_ODE_def_TCC1 0
  (IMP_ODE_def_TCC1-1 nil 3789480495
   ("" (lemma "non_empty") (("" (propax) nil nil)) nil)
   ((non_empty formula-decl nil ODE_psi_def nil)) nil
   (IMP_ODE_def assuming "ODE_def[ODE_psi_def.d].ODE_def"
    "non_empty: ASSUMPTION sets[real].nonempty?(ODE_def.d)")))
 (IMP_ODE_def_TCC2 0
  (IMP_ODE_def_TCC2-1 nil 3789480495
   ("" (lemma "connected") (("" (propax) nil nil)) nil)
   ((connected formula-decl nil ODE_psi_def nil)) nil
   (IMP_ODE_def assuming "ODE_def[ODE_psi_def.d].ODE_def"
    "connected: ASSUMPTION deriv_domain_def[(ODE_def.d)].connected?")))
 (IMP_ODE_def_TCC3 0
  (IMP_ODE_def_TCC3-1 nil 3789480495
   ("" (lemma "not_one_element") (("" (propax) nil nil)) nil)
   ((not_one_element formula-decl nil ODE_psi_def nil)) nil
   (IMP_ODE_def assuming "ODE_def[ODE_psi_def.d].ODE_def"
    "not_one_element: ASSUMPTION deriv_domain_def[(ODE_def.d)].not_one_element?")))
 (psi_TCC1 0
  (psi_TCC1-2 nil 3789480563
   ("" (skeep)
    (("" (lemma "cont_Int")
      (("" (inst -1 "od_fx(n,f,y)")
        (("" (assert) (("" (inst -1 "a" "x") nil nil)) nil)) nil))
      nil))
    nil)
   ((d formal-const-decl "[real -> bool]" ODE_psi_def nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (cont_Int formula-decl nil r2v_analysis nil)
    (continuous? const-decl "bool" r2v_analysis nil)
    (od_fx const-decl "{ff: r2v_n(n) | length(ff) = n}" ODE_def nil)
    (length const-decl "nat" r2v_def nil)
    (r2v_n type-eq-decl nil r2v_def nil)
    (od_f type-eq-decl nil ODE_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (r2v type-eq-decl nil r2v_def nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis))
   nil
   (psi subtype
    "ODE_def[ODE_psi_def.d].od_fx(ODE_psi_def.n, ODE_psi_def.f, ODE_psi_def.y)"
    "{ff: r2v_def[ODE_psi_def.d].r2v | r2v_analysis[ODE_psi_def.d].Integrable?(ODE_psi_def.a, ODE_psi_def.x, ff)}"))
  (psi_TCC1-1 nil 3789480495 ("" (subtype-tcc) nil nil) nil nil
   (psi subtype
    "ODE_def[ODE_psi_def.d].od_fx(ODE_psi_def.n, ODE_psi_def.f, ODE_psi_def.y)"
    "{ff: r2v_def[ODE_psi_def.d].r2v | r2v_analysis[ODE_psi_def.d].Integrable?(ODE_psi_def.a, ODE_psi_def.x, ff)}")))
 (psi_TCC2 0
  (psi_TCC2-2 nil 3789480583
   ("" (skeep)
    (("" (typepred "y0 + Integral(a, x, od_fx(n, f, y))")
      (("" (typepred "y0")
        (("" (typepred "r2v_analysis.Integral(a, x, od_fx(n, f, y))")
          (("" (hide -1)
            (("" (assert)
              (("" (replace -1 -5)
                (("" (replace -3 -5)
                  (("" (expand "od_fx" -5)
                    (("" (expand "length" -5 2)
                      (("" (assert)
                        (("" (typepred "f(choose(d), y(choose(d)))")
                          (("" (hide -1)
                            (("" (replace -1)
                              ((""
                                (expand "max" -6)
                                (("" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((continuous? const-decl "bool" r2v_analysis nil)
    (od_fx const-decl "{ff: r2v_n(n) | length(ff) = n}" ODE_def nil)
    (r2v_n type-eq-decl nil r2v_def nil)
    (od_f type-eq-decl nil ODE_def nil)
    (Integral def-decl "VectorN(length(f))" r2v_analysis nil)
    (length const-decl "nat" r2v_def nil)
    (Integrable? const-decl "bool" r2v_analysis nil)
    (r2v type-eq-decl nil r2v_def nil)
    (d formal-const-decl "[real -> bool]" ODE_psi_def nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (VectorN type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vector type-eq-decl nil matrices matrices)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (set type-eq-decl nil sets nil)
    (nonempty? const-decl "bool" sets nil)
    (choose const-decl "(p)" sets nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis))
   nil
   (psi subtype
    "(matrices.+)(ODE_psi_def.y0, r2v_analysis[ODE_psi_def.d].Integral(ODE_psi_def.a, ODE_psi_def.x, ODE_def[ODE_psi_def.d].od_fx(ODE_psi_def.n, ODE_psi_def.f, ODE_psi_def.y)))"
    "matrices.VectorN(ODE_psi_def.n)"))
  (psi_TCC2-1 nil 3789480495 ("" (subtype-tcc) nil nil) nil nil
   (psi subtype
    "(matrices.+)(ODE_psi_def.y0, r2v_analysis[ODE_psi_def.d].Integral(ODE_psi_def.a, ODE_psi_def.x, ODE_def[ODE_psi_def.d].od_fx(ODE_psi_def.n, ODE_psi_def.f, ODE_psi_def.y)))"
    "matrices.VectorN(ODE_psi_def.n)")))
 (psi_TCC3 0
  (psi_TCC3-2 nil 3789480606
   ("" (skeep)
    (("" (expand "length" 1 1)
      ((""
        (typepred "y0" "(y0 + Integral(a, choose(d), od_fx(n, f, y)))"
         "r2v_analysis.Integral(a, choose(d), od_fx(n, f, y))")
        (("" (hide -1 -3 -5)
          (("" (replace -1)
            (("" (replace -3 -2)
              (("" (expand "od_fx" -2 2)
                (("" (expand "length" -2 2)
                  (("" (typepred "f(choose(d), y(choose(d)))")
                    (("" (hide -1)
                      (("" (replace -1)
                        (("" (expand "max" -3) (("" (propax) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((length const-decl "nat" r2v_def nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices matrices)
    (Vector type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (d formal-const-decl "[real -> bool]" ODE_psi_def nil)
    (r2v type-eq-decl nil r2v_def nil)
    (Integrable? const-decl "bool" r2v_analysis nil)
    (Integral def-decl "VectorN(length(f))" r2v_analysis nil)
    (set type-eq-decl nil sets nil)
    (nonempty? const-decl "bool" sets nil)
    (choose const-decl "(p)" sets nil)
    (od_f type-eq-decl nil ODE_def nil)
    (r2v_n type-eq-decl nil r2v_def nil)
    (od_fx const-decl "{ff: r2v_n(n) | length(ff) = n}" ODE_def nil)
    (continuous? const-decl "bool" r2v_analysis nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis))
   nil
   (psi subtype
    "LAMBDA (x: (ODE_psi_def.d)): (matrices.+)(ODE_psi_def.y0, r2v_analysis[ODE_psi_def.d].Integral(ODE_psi_def.a, x, ODE_def[ODE_psi_def.d].od_fx(ODE_psi_def.n, ODE_psi_def.f, ODE_psi_def.y)))"
    "{pp: r2v_def[ODE_psi_def.d].r2v_n(ODE_psi_def.n) | r2v_def[ODE_psi_def.d].length(pp) = ODE_psi_def.n}"))
  (psi_TCC3-1 nil 3789480495 ("" (subtype-tcc) nil nil) nil nil
   (psi subtype
    "LAMBDA (x: (ODE_psi_def.d)): (matrices.+)(ODE_psi_def.y0, r2v_analysis[ODE_psi_def.d].Integral(ODE_psi_def.a, x, ODE_def[ODE_psi_def.d].od_fx(ODE_psi_def.n, ODE_psi_def.f, ODE_psi_def.y)))"
    "{pp: r2v_def[ODE_psi_def.d].r2v_n(ODE_psi_def.n) | r2v_def[ODE_psi_def.d].length(pp) = ODE_psi_def.n}")))
 (psi_init 0
  (psi_init-1 nil 3789480627
   ("" (skeep)
    (("" (expand "psi" 1 1)
      (("" (lemma "Int_zero")
        (("" (inst -1 "a" "od_fx(n,f,y)")
          (("" (replace -1)
            (("" (lemma "zero_id")
              (("" (inst -1 "y0")
                (("" (expand "od_fx" 1 1)
                  (("" (expand "length" 1 1) (("" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((psi const-decl "{pp: r2v_n(n) | length(pp) = n}" ODE_psi_def nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (r2v type-eq-decl nil r2v_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (od_f type-eq-decl nil ODE_def nil)
    (r2v_n type-eq-decl nil r2v_def nil)
    (length const-decl "nat" r2v_def nil)
    (od_fx const-decl "{ff: r2v_n(n) | length(ff) = n}" ODE_def nil)
    (continuous? const-decl "bool" r2v_analysis nil)
    (zero_id formula-decl nil vector_arithmetic mv_analysis)
    (Int_zero formula-decl nil r2v_analysis nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (d formal-const-decl "[real -> bool]" ODE_psi_def nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis))
   nil))
 (psi_derivable 0
  (psi_derivable-1 nil 3789480655
   ("" (skeep)
    (("" (expand "derivable?" 1)
      (("" (skeep)
        (("" (expand "psi" 1 1)
          (("" (expand "nth" 1 1)
            (("" (expand "derivable?" 1 1)
              (("" (skeep)
                (("" (assert)
                  (("" (lemma "sum_derivable")
                    (("" (lemma "nth_add")
                      ((""
                        (inst -1 "LAMBDA(x_1:(d)): y0"
                         "LAMBDA(x_1:(d)): Integral(a, x_1, od_fx(n, f, y))"
                         "i")
                        (("1" (assert)
                          (("1" (expand "nth" -1)
                            (("1" (assert)
                              (("1"
                                (case
                                 " (LAMBDA (x: (d)) -> real:
                           nth(((LAMBDA (x_1: (d)): y0) +
                                 LAMBDA (x_1: (d)): Integral(a, x_1, od_fx(n, f, y)))
                                   (x),
                               i)) = LAMBDA (x_1: (d)) -> real:
                                     nth(y0 + Integral(a, x_1, od_fx(n, f, y)), i)
                                   ")
                                (("1"
                                  (replace -1)
                                  (("1"
                                    (replace -2)
                                    (("1"
                                      (inst
                                       -3
                                       "LAMBDA (x: (d)): nth(Integral(a, x, od_fx(n, f, y)), i)"
                                       "LAMBDA (x: (d)): nth(y0, i)"
                                       "x")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (split -3)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "+" -1)
                                              (("1" (propax) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (lemma "Int_nth")
                                            (("2"
                                              (hide 2)
                                              (("2"
                                                (hide -2)
                                                (("2"
                                                  (case
                                                   "(LAMBDA (x: (d)): nth(Integral(a, x, od_fx(n, f, y)), i)) = (LAMBDA (x: (d)): Integral(a, x, nth(od_fx(n, f, y),i)))")
                                                  (("1"
                                                    (replace -1 1)
                                                    (("1"
                                                      (lemma
                                                       "fundamental")
                                                      (("1"
                                                        (inst
                                                         -1
                                                         "LAMBDA (x: (d)):
                                            Integral(a, x, nth(od_fx(n, f, y), i))"
                                                         "a"
                                                         "nth(od_fx(n,f,y),i)")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (split -1)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (expand
                                                                   "derivable?"
                                                                   -1)
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     "x")
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (typepred
                                                               "f")
                                                              (("2"
                                                                (expand
                                                                 "continuous?"
                                                                 -1)
                                                                (("2"
                                                                  (inst
                                                                   -1
                                                                   "i")
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (typepred
                                                           "i")
                                                          (("2"
                                                            (typepred
                                                             "psi(n,a,y0,y,f)"
                                                             "od_fx(n,f,y)")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("3"
                                                          (skeep)
                                                          (("3"
                                                            (lemma
                                                             "not_one_element")
                                                            (("3"
                                                              (typepred
                                                               "od_fx(n,f,y)")
                                                              (("3"
                                                                (hide
                                                                 -)
                                                                (("3"
                                                                  (lemma
                                                                   "cont_Int")
                                                                  (("3"
                                                                    (inst
                                                                     -1
                                                                     "od_fx(n,f,y)")
                                                                    (("3"
                                                                      (assert)
                                                                      (("3"
                                                                        (inst
                                                                         -1
                                                                         "a"
                                                                         "x!1")
                                                                        (("3"
                                                                          (assert)
                                                                          (("3"
                                                                            (expand
                                                                             "Integrable?"
                                                                             -1)
                                                                            (("3"
                                                                              (inst
                                                                               -1
                                                                               "i")
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("4"
                                                          (skeep 1)
                                                          (("4"
                                                            (lemma
                                                             "connected")
                                                            (("4"
                                                              (assert)
                                                              (("4"
                                                                (hide
                                                                 -)
                                                                (("4"
                                                                  (typepred
                                                                   "i")
                                                                  (("4"
                                                                    (expand
                                                                     "length"
                                                                     1
                                                                     1)
                                                                    (("4"
                                                                      (expand
                                                                       "psi"
                                                                       -1)
                                                                      (("4"
                                                                        (assert)
                                                                        (("4"
                                                                          (expand
                                                                           "length"
                                                                           -1)
                                                                          (("4"
                                                                            (assert)
                                                                            (("4"
                                                                              (expand
                                                                               "od_fx"
                                                                               1
                                                                               1)
                                                                              (("4"
                                                                                (assert)
                                                                                (("4"
                                                                                  (typepred
                                                                                   "y0 + Integral(a, choose(d), od_fx(n, f, y))")
                                                                                  (("4"
                                                                                    (typepred
                                                                                     "y0")
                                                                                    (("4"
                                                                                      (replace
                                                                                       -2)
                                                                                      (("4"
                                                                                        (typepred
                                                                                         "r2v_analysis.Integral(a, choose(d), od_fx(n, f, y))")
                                                                                        (("4"
                                                                                          (expand
                                                                                           "od_fx"
                                                                                           -2)
                                                                                          (("4"
                                                                                            (expand
                                                                                             "length"
                                                                                             -2
                                                                                             2)
                                                                                            (("4"
                                                                                              (assert)
                                                                                              (("4"
                                                                                                (expand
                                                                                                 "max"
                                                                                                 -6)
                                                                                                (("4"
                                                                                                  (typepred
                                                                                                   "f")
                                                                                                  (("4"
                                                                                                    (typepred
                                                                                                     "f(choose(d), y(choose(d)))")
                                                                                                    (("4"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (decompose-equality
                                                     1)
                                                    (("1"
                                                      (inst
                                                       -1
                                                       "a"
                                                       "x!1"
                                                       "od_fx(n,f,y)"
                                                       "i")
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (skeep)
                                                      (("2"
                                                        (lemma
                                                         "not_one_element")
                                                        (("2"
                                                          (lemma
                                                           "cont_Int")
                                                          (("2"
                                                            (inst
                                                             -1
                                                             "od_fx(n,f,y)")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (inst
                                                                 -1
                                                                 "a"
                                                                 "x!1")
                                                                (("2"
                                                                  (expand
                                                                   "Integrable?"
                                                                   -1)
                                                                  (("2"
                                                                    (inst
                                                                     -1
                                                                     "i")
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (skeep 1)
                                                      (("3"
                                                        (lemma
                                                         "connected")
                                                        (("3"
                                                          (assert)
                                                          (("3"
                                                            (typepred
                                                             "i")
                                                            (("3"
                                                              (typepred
                                                               "psi(n,a,y0,y,f)")
                                                              (("3"
                                                                (typepred
                                                                 "od_fx(n,f,y)")
                                                                (("3"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("4"
                                                      (lemma
                                                       "cont_Int")
                                                      (("4"
                                                        (inst
                                                         -1
                                                         "od_fx(n,f,y)")
                                                        (("4"
                                                          (assert)
                                                          (("4"
                                                            (skeep 1)
                                                            (("4"
                                                              (inst
                                                               -1
                                                               "a"
                                                               "x!1")
                                                              (("4"
                                                                (expand
                                                                 "Integrable?"
                                                                 -1)
                                                                (("4"
                                                                  (inst
                                                                   -1
                                                                   "i")
                                                                  (("1"
                                                                    (typepred
                                                                     "Integral[d](a, x!1, od_fx[d](n, f, y))")
                                                                    (("1"
                                                                      (typepred
                                                                       "i")
                                                                      (("1"
                                                                        (typepred
                                                                         "od_fx(n,f,y)")
                                                                        (("1"
                                                                          (typepred
                                                                           "psi(n,a,y0,y,f)")
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (typepred
                                                                     "od_fx(n,f,y)"
                                                                     "i")
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("5"
                                                      (skeep)
                                                      (("5"
                                                        (typepred
                                                         "psi(n,a,y0,y,f)"
                                                         "od_fx(n,f,y)")
                                                        (("5"
                                                          (assert)
                                                          (("5"
                                                            (lemma
                                                             "cont_Int")
                                                            (("5"
                                                              (inst
                                                               -1
                                                               "od_fx(n,f,y)")
                                                              (("5"
                                                                (assert)
                                                                (("5"
                                                                  (inst
                                                                   -1
                                                                   "a"
                                                                   "x!1")
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (assert)
                                                    (("3"
                                                      (lemma
                                                       "not_one_element")
                                                      (("3"
                                                        (skeep)
                                                        (("3"
                                                          (lemma
                                                           "cont_Int")
                                                          (("3"
                                                            (inst
                                                             -1
                                                             "od_fx(n,f,y)")
                                                            (("3"
                                                              (assert)
                                                              (("3"
                                                                (inst
                                                                 -1
                                                                 "a"
                                                                 "x!1")
                                                                (("3"
                                                                  (assert)
                                                                  (("3"
                                                                    (expand
                                                                     "Integrable?"
                                                                     -1)
                                                                    (("3"
                                                                      (inst
                                                                       -1
                                                                       "i")
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("4"
                                                    (skeep 1)
                                                    (("4"
                                                      (lemma
                                                       "connected")
                                                      (("4"
                                                        (typepred "i")
                                                        (("4"
                                                          (typepred
                                                           "psi(n,a,y0,y,f)")
                                                          (("4"
                                                            (typepred
                                                             "od_fx(n,f,y)"
                                                             "i")
                                                            (("4"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("5"
                                                    (lemma "cont_Int")
                                                    (("5"
                                                      (skeep 1)
                                                      (("5"
                                                        (inst
                                                         -1
                                                         "od_fx(n,f,y)")
                                                        (("5"
                                                          (assert)
                                                          (("5"
                                                            (inst
                                                             -1
                                                             "a"
                                                             "x!1")
                                                            (("5"
                                                              (expand
                                                               "Integrable?"
                                                               -1)
                                                              (("5"
                                                                (typepred
                                                                 "i")
                                                                (("5"
                                                                  (typepred
                                                                   "psi(n,a,y0,y,f)")
                                                                  (("5"
                                                                    (typepred
                                                                     "Integral[d](a, x!1, od_fx[d](n, f, y))")
                                                                    (("5"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (lemma "const_derivable")
                                            (("3"
                                              (inst -1 "nth(y0,i)" "x")
                                              (("1"
                                                (expand "const_fun" -1)
                                                (("1"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil)
                                               ("2"
                                                (typepred "i")
                                                (("2"
                                                  (typepred "y0")
                                                  (("2"
                                                    (replace -2)
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (skeep)
                                        (("2"
                                          (typepred "y0")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (typepred "i")
                                              (("2"
                                                (typepred
                                                 "psi(n,a,y0,y,f)"
                                                 "od_fx(n,f,y)")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (skeep 1)
                                        (("3"
                                          (typepred
                                           "Integral[d](a, x!1, od_fx(n, f, y))"
                                           "od_fx(n,f,y)")
                                          (("3"
                                            (typepred
                                             "psi(n,a,y0,y,f)"
                                             "od_fx(n,f,y)")
                                            (("3" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("4"
                                        (skeep 1)
                                        (("4"
                                          (lemma "cont_Int")
                                          (("4"
                                            (inst -1 "od_fx(n,f,y)")
                                            (("4"
                                              (assert)
                                              (("4"
                                                (inst -1 "a" "x!1")
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (decompose-equality 1)
                                  (("1"
                                    (expand "+" 1)
                                    (("1"
                                      (expand "plusr2v" 1)
                                      (("1"
                                        (expand "+" 1)
                                        (("1" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (skeep)
                                    (("2"
                                      (typepred
                                       "y0"
                                       "(y0 + Integral(a, x_1, od_fx(n, f, y)))"
                                       "r2v_analysis.Integral(a, x_1, od_fx(n, f, y))")
                                      (("2"
                                        (typepred "y0" "od_fx(n,f,y)")
                                        (("2"
                                          (typepred
                                           "psi(n,a,y0,y,f)"
                                           "od_fx(n,f,y)")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (lemma "cont_Int")
                                    (("3"
                                      (inst -1 "od_fx(n,f,y)")
                                      (("3"
                                        (assert)
                                        (("3"
                                          (skeep 1)
                                          (("3"
                                            (inst -1 "a" "x_1")
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("4"
                                    (skeep 1)
                                    (("4"
                                      (expand "+")
                                      (("4"
                                        (expand "plusr2v" 1 1)
                                        (("4"
                                          (assert)
                                          (("4"
                                            (typepred
                                             "y0"
                                             "(y0 + Integral(a, x!1, od_fx(n, f, y)))"
                                             "r2v_analysis.Integral(a, x!1, od_fx(n, f, y))")
                                            (("4"
                                              (typepred
                                               "psi(n,a,y0,y,f)"
                                               "od_fx(n,f,y)")
                                              (("4" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("5"
                                    (skeep 1)
                                    (("5"
                                      (inst 1 "n")
                                      (("5"
                                        (skeep)
                                        (("5"
                                          (typepred
                                           "r2v_analysis.Integral(a, x!2, od_fx(n, f, y))")
                                          (("5"
                                            (typepred
                                             "psi(n,a,y0,y,f)"
                                             "od_fx(n,f,y)")
                                            (("5" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("6"
                                    (skeep 1)
                                    (("6"
                                      (lemma "cont_Int")
                                      (("6"
                                        (inst -1 "od_fx(n,f,y)")
                                        (("6"
                                          (assert)
                                          (("6"
                                            (inst -1 "a" "x_1")
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("7"
                                    (skeep)
                                    (("7"
                                      (inst 1 "n")
                                      (("7"
                                        (skeep)
                                        (("7"
                                          (typepred "y0")
                                          (("7" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (assert)
                                  (("3"
                                    (skeep)
                                    (("3"
                                      (typepred
                                       "psi(n,a,y0,y,f)"
                                       "od_fx(n,f,y)")
                                      (("3"
                                        (typepred
                                         "y0"
                                         "(y0 + Integral(a, x_1, od_fx(n, f, y)))"
                                         "r2v_analysis.Integral(a, x_1, od_fx(n, f, y))")
                                        (("3" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("4"
                                  (skeep)
                                  (("4"
                                    (lemma "cont_Int")
                                    (("4"
                                      (inst -1 "od_fx(n,f,y)")
                                      (("4"
                                        (assert)
                                        (("4"
                                          (inst -1 "a" "x_1")
                                          nil
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("5"
                                  (assert)
                                  (("5"
                                    (skeep 1)
                                    (("5"
                                      (expand "+" 1)
                                      (("5"
                                        (expand "plusr2v" 1)
                                        (("5"
                                          (typepred
                                           "y0"
                                           "(y0 + Integral(a, x!1, od_fx(n, f, y)))"
                                           "r2v_analysis.Integral(a, x!1, od_fx(n, f, y))")
                                          (("5"
                                            (typepred
                                             "psi(n,a,y0,y,f)"
                                             "od_fx(n,f,y)")
                                            (("5" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("6"
                                  (skeep)
                                  (("6"
                                    (lemma "cont_Int")
                                    (("6"
                                      (inst -1 "od_fx(n,f,y)")
                                      (("6"
                                        (assert)
                                        (("6"
                                          (inst -1 "a" "x_1")
                                          nil
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("7"
                                  (skeep)
                                  (("7"
                                    (inst 1 "n")
                                    (("7"
                                      (skeep)
                                      (("7"
                                        (typepred
                                         "r2v_analysis.Integral(a, x!2, od_fx(n, f, y))")
                                        (("7"
                                          (hide -1)
                                          (("7"
                                            (typepred
                                             "psi(n,a,y0,y,f)"
                                             "od_fx(n,f,y)")
                                            (("7" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("8"
                                  (skeep)
                                  (("8"
                                    (inst 1 "n")
                                    (("8"
                                      (skeep)
                                      (("8" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand "length" 1)
                          (("2" (assert)
                            (("2" (typepred "i" "y0")
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil)
                         ("3" (assert)
                          (("3" (split 1)
                            (("1" (inst 1 "n")
                              (("1"
                                (skeep)
                                (("1"
                                  (typepred
                                   "psi(n,a,y0,y,f)"
                                   "od_fx(n,f,y)")
                                  (("1"
                                    (typepred
                                     "r2v_analysis.Integral(a, x!1, od_fx(n, f, y))")
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand "length" 1)
                              (("2"
                                (typepred "y0")
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("4" (skeep)
                          (("4" (lemma "cont_Int")
                            (("4" (inst -1 "od_fx(n,f,y)")
                              (("4"
                                (assert)
                                (("4" (inst -1 "a" "x_1") nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("5" (inst 1 "n")
                          (("5" (skeep)
                            (("5" (typepred "y0")
                              (("5" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis)
    (nth const-decl "[(d) -> real]" r2v_def nil)
    (d formal-const-decl "[real -> bool]" ODE_psi_def nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (sum_derivable formula-decl nil derivatives_def analysis)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (y0 skolem-const-decl "VectorN(n)" ODE_psi_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n skolem-const-decl "nat" ODE_psi_def nil)
    (length def-decl "nat" list_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (f skolem-const-decl "{ff: od_f(n) | continuous?(od_fx(n, ff, y))}"
     ODE_psi_def nil)
    (y skolem-const-decl "r2v_n[d](n)" ODE_psi_def nil)
    (continuous? const-decl "bool" r2v_analysis nil)
    (od_fx const-decl "{ff: r2v_n(n) | length(ff) = n}" ODE_def nil)
    (length const-decl "nat" r2v_def nil)
    (r2v_n type-eq-decl nil r2v_def nil)
    (od_f type-eq-decl nil ODE_def nil)
    (a skolem-const-decl "(d)" ODE_psi_def nil)
    (Integrable? const-decl "bool" r2v_analysis nil)
    (r2v type-eq-decl nil r2v_def nil)
    (Integral def-decl "VectorN(length(f))" r2v_analysis nil)
    (i skolem-const-decl "{ii: nat | ii < length(psi(n, a, y0, y, f))}"
       ODE_psi_def nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (+ const-decl "{hh: r2v | length(hh) = max(length(f), length(g))}"
       r2v_def nil)
    (Vector type-eq-decl nil matrices matrices)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (const_derivable formula-decl nil derivatives_def analysis)
    (const_fun const-decl "[T -> real]" real_fun_ops reals)
    (Int_nth formula-decl nil r2v_analysis nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (not_one_element formula-decl nil ODE_psi_def nil)
    (cont_Int formula-decl nil r2v_analysis nil)
    (connected formula-decl nil ODE_psi_def nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (choose const-decl "(p)" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (fundamental formula-decl nil fundamental_theorem analysis)
    (Integral const-decl "real" integral_def analysis)
    (Integrable_funs type-eq-decl nil integral_def analysis)
    (Integrable? const-decl "bool" integral_def analysis)
    (+ const-decl "[T -> real]" real_fun_ops reals)
    (plusr2v const-decl
     "{hh: r2v | length(hh) = max(length(f), length(g))}" r2v_def nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nth_add formula-decl nil r2v_def nil)
    (derivable? const-decl "bool" derivatives analysis)
    (psi const-decl "{pp: r2v_n(n) | length(pp) = n}" ODE_psi_def nil)
    (derivable? const-decl "bool" r2v_analysis nil))
   nil))
 (psi_cont 0
  (psi_cont-1 nil 3789480694
   ("" (skeep)
    (("" (assert)
      (("" (lemma "derivable_cont[(d)]")
        (("1" (expand "continuous?" 1)
          (("1" (skeep 1)
            (("1" (inst?)
              (("1" (lemma "psi_derivable")
                (("1" (inst?)
                  (("1" (expand "derivable?")
                    (("1" (inst -1 "i")
                      (("1" (assert)
                        (("1" (expand "derivable?" -1)
                          (("1" (propax) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (lemma "not_one_element") (("2" (propax) nil nil)) nil)
         ("3" (lemma "deriv_domain") (("3" (propax) nil nil)) nil))
        nil))
      nil))
    nil)
   ((continuous? const-decl "bool" r2v_analysis nil)
    (derivable? const-decl "bool" derivatives analysis)
    (deriv_fun type-eq-decl nil derivatives analysis)
    (r2v type-eq-decl nil r2v_def nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (length const-decl "nat" r2v_def nil)
    (nth const-decl "[(d) -> real]" r2v_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (r2v_n type-eq-decl nil r2v_def nil)
    (od_f type-eq-decl nil ODE_def nil)
    (od_fx const-decl "{ff: r2v_n(n) | length(ff) = n}" ODE_def nil)
    (psi const-decl "{pp: r2v_n(n) | length(pp) = n}" ODE_psi_def nil)
    (i skolem-const-decl "{ii: nat | ii < length(psi(n, a, y0, y, f))}"
       ODE_psi_def nil)
    (f skolem-const-decl "{ff: od_f(n) | continuous?(od_fx(n, ff, y))}"
     ODE_psi_def nil)
    (y skolem-const-decl "r2v_n[d](n)" ODE_psi_def nil)
    (y0 skolem-const-decl "VectorN(n)" ODE_psi_def nil)
    (a skolem-const-decl "(d)" ODE_psi_def nil)
    (n skolem-const-decl "nat" ODE_psi_def nil)
    (derivable? const-decl "bool" r2v_analysis nil)
    (psi_derivable formula-decl nil ODE_psi_def nil)
    (derivable_cont judgement-tcc nil derivatives analysis)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (d formal-const-decl "[real -> bool]" ODE_psi_def nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis))
   nil))
 (psi_deriv_TCC1 0
  (psi_deriv_TCC1-2 nil 3789480714
   ("" (lemma "psi_derivable") (("" (propax) nil nil)) nil)
   ((psi_derivable formula-decl nil ODE_psi_def nil)) nil
   (psi_deriv subtype
    "ODE_psi_def.psi(ODE_psi_def.n, ODE_psi_def.a, ODE_psi_def.y0, ODE_psi_def.y, ODE_psi_def.f)"
    "(r2v_analysis[ODE_psi_def.d].derivable?)"))
  (psi_deriv_TCC1-1 nil 3789480495 ("" (subtype-tcc) nil nil) nil nil
   (psi_deriv subtype
    "ODE_psi_def.psi(ODE_psi_def.n, ODE_psi_def.a, ODE_psi_def.y0, ODE_psi_def.y, ODE_psi_def.f)"
    "(r2v_analysis[ODE_psi_def.d].derivable?)")))
 (psi_deriv 0
  (psi_deriv-1 nil 3789480738
   ("" (skeep)
    (("" (lemma "nth_equal")
      (("" (inst -1 "deriv(psi(n, a, y0, y, f))" "od_fx(n, f, y)")
        (("1" (assert)
          (("1" (hide 2)
            (("1" (skeep)
              (("1" (lemma "deriv_nth")
                (("1" (lemma "psi_derivable")
                  (("1" (inst?)
                    (("1" (inst -2 "(psi(n, a, y0, y, f))" "i")
                      (("1" (assert)
                        (("1" (replace -2)
                          (("1" (lemma "nth_od_fx")
                            (("1" (inst?)
                              (("1"
                                (replace -1)
                                (("1"
                                  (decompose-equality 1)
                                  (("1"
                                    (expand "psi" 1 1)
                                    (("1"
                                      (expand "nth" 1 1)
                                      (("1"
                                        (case
                                         "(LAMBDA (x_1: (d)) -> real:
                                               nth(y0 + Integral(a, x_1, od_fx(n, f, y)), i)) = (LAMBDA (x_1: (d)) -> real:
                                               nth(y0,i) + nth(Integral(a, x_1, od_fx(n, f, y)), i))")
                                        (("1"
                                          (replace -1)
                                          (("1"
                                            (lemma "deriv_sum")
                                            (("1"
                                              (inst
                                               -1
                                               "(LAMBDA (x_1: (d)) -> real:
                                       nth(y0, i))"
                                               "(LAMBDA (x_1: (d)) -> real:
                                       nth(Integral(a, x_1, od_fx(n, f, y)), i))"
                                               "_")
                                              (("1"
                                                (inst -1 "x!1")
                                                (("1"
                                                  (split -1)
                                                  (("1"
                                                    (expand "+" -1 1)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand
                                                         "deriv"
                                                         1
                                                         1)
                                                        (("1"
                                                          (replace
                                                           -1
                                                           1)
                                                          (("1"
                                                            (lemma
                                                             "deriv_const")
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "nth(y0,i)"
                                                               "x!1")
                                                              (("1"
                                                                (expand
                                                                 "const_fun"
                                                                 -1)
                                                                (("1"
                                                                  (replace
                                                                   -1
                                                                   1)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (lemma
                                                                       "Int_nth")
                                                                      (("1"
                                                                        (case
                                                                         "(LAMBDA (x_1: (d)) -> real:
                                                                  nth(Integral(a, x_1, od_fx(n, f, y)), i)) = (LAMBDA (x_1: (d)) -> real:
                                                                  Integral(a, x_1, nth(od_fx(n, f, y),i)))")
                                                                        (("1"
                                                                          (replace
                                                                           -1)
                                                                          (("1"
                                                                            (lemma
                                                                             "fundamental")
                                                                            (("1"
                                                                              (inst
                                                                               -1
                                                                               "(LAMBDA (x_1: (d)) -> real:
                                                         Integral(a, x_1, nth(od_fx(n, f, y), i)))"
                                                                               "a"
                                                                               "nth(od_fx(n,f,y),i)")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (split
                                                                                   -1)
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "od_fx"
                                                                                         -2
                                                                                         2)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (decompose-equality
                                                                                             -2)
                                                                                            (("1"
                                                                                              (inst
                                                                                               -1
                                                                                               "x!1")
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "deriv"
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (replace
                                                                                                   -1
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "nth"
                                                                                                       1
                                                                                                       1)
                                                                                                      (("1"
                                                                                                        (propax)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (inst
                                                                                               1
                                                                                               "n")
                                                                                              (("2"
                                                                                                (skeep)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("3"
                                                                                              (lemma
                                                                                               "not_one_element")
                                                                                              (("3"
                                                                                                (lemma
                                                                                                 "connected")
                                                                                                (("3"
                                                                                                  (lemma
                                                                                                   "deriv_domain")
                                                                                                  (("3"
                                                                                                    (hide
                                                                                                     -)
                                                                                                    (("3"
                                                                                                      (typepred
                                                                                                       "f")
                                                                                                      (("3"
                                                                                                        (expand
                                                                                                         "od_fx"
                                                                                                         -1)
                                                                                                        (("3"
                                                                                                          (lemma
                                                                                                           "cont_Int")
                                                                                                          (("3"
                                                                                                            (inst
                                                                                                             -1
                                                                                                             "LAMBDA (t: (d)) -> VectorN(n): f(t, y(t))")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (inst
                                                                                                                 -1
                                                                                                                 "a"
                                                                                                                 "x!3")
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "Integrable?"
                                                                                                                     -1)
                                                                                                                    (("1"
                                                                                                                      (inst
                                                                                                                       -1
                                                                                                                       "i")
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (hide
                                                                                                                         2
                                                                                                                         3)
                                                                                                                        (("2"
                                                                                                                          (typepred
                                                                                                                           "i")
                                                                                                                          (("2"
                                                                                                                            (expand
                                                                                                                             "length"
                                                                                                                             1
                                                                                                                             1)
                                                                                                                            (("2"
                                                                                                                              (assert)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (hide
                                                                                                               2
                                                                                                               3)
                                                                                                              (("2"
                                                                                                                (typepred
                                                                                                                 "f")
                                                                                                                (("2"
                                                                                                                  (inst
                                                                                                                   1
                                                                                                                   "n")
                                                                                                                  (("2"
                                                                                                                    (skeep)
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (typepred
                                                                                       "f")
                                                                                      (("2"
                                                                                        (expand
                                                                                         "continuous?"
                                                                                         -1)
                                                                                        (("2"
                                                                                          (inst
                                                                                           -1
                                                                                           "i")
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (skeep
                                                                                   1)
                                                                                  (("2"
                                                                                    (lemma
                                                                                     "not_one_element")
                                                                                    (("2"
                                                                                      (hide
                                                                                       2)
                                                                                      (("2"
                                                                                        (hide
                                                                                         -)
                                                                                        (("2"
                                                                                          (lemma
                                                                                           "cont_Int")
                                                                                          (("2"
                                                                                            (inst
                                                                                             -1
                                                                                             "od_fx(n,f,y)")
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (inst
                                                                                                 -1
                                                                                                 "a"
                                                                                                 "x_1")
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "Integrable?"
                                                                                                     -1)
                                                                                                    (("2"
                                                                                                      (inst
                                                                                                       -1
                                                                                                       "i")
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (decompose-equality
                                                                           1)
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             "a"
                                                                             "x!2"
                                                                             "od_fx(n,f,y)"
                                                                             "i")
                                                                            nil
                                                                            nil)
                                                                           ("2"
                                                                            (lemma
                                                                             "not_one_element")
                                                                            (("2"
                                                                              (skeep
                                                                               1)
                                                                              (("2"
                                                                                (hide
                                                                                 -)
                                                                                (("2"
                                                                                  (lemma
                                                                                   "cont_Int")
                                                                                  (("2"
                                                                                    (inst
                                                                                     -1
                                                                                     "od_fx(n,f,y)")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (inst
                                                                                         -1
                                                                                         "a"
                                                                                         "x_1")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "Integrable?"
                                                                                           -1)
                                                                                          (("2"
                                                                                            (inst
                                                                                             -1
                                                                                             "i")
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("3"
                                                                            (skeep
                                                                             1)
                                                                            (("3"
                                                                              (lemma
                                                                               "connected")
                                                                              (("3"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("4"
                                                                            (skeep
                                                                             1)
                                                                            (("4"
                                                                              (lemma
                                                                               "cont_Int")
                                                                              (("4"
                                                                                (inst
                                                                                 -1
                                                                                 "od_fx(n,f,y)")
                                                                                (("4"
                                                                                  (assert)
                                                                                  (("4"
                                                                                    (inst
                                                                                     -1
                                                                                     "a"
                                                                                     "x_1")
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("3"
                                                                          (assert)
                                                                          (("3"
                                                                            (skeep
                                                                             1)
                                                                            (("3"
                                                                              (lemma
                                                                               "cont_Int")
                                                                              (("3"
                                                                                (inst
                                                                                 -1
                                                                                 "od_fx(n,f,y)")
                                                                                (("3"
                                                                                  (assert)
                                                                                  (("3"
                                                                                    (inst
                                                                                     -1
                                                                                     "a"
                                                                                     "x_1")
                                                                                    (("3"
                                                                                      (expand
                                                                                       "Integrable?"
                                                                                       -1)
                                                                                      (("3"
                                                                                        (inst
                                                                                         -1
                                                                                         "i")
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (lemma
                                                     "const_derivable")
                                                    (("2"
                                                      (inst
                                                       -1
                                                       "nth(y0,i)"
                                                       "x!1")
                                                      (("2"
                                                        (expand
                                                         "const_fun"
                                                         -1)
                                                        (("2"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (lemma
                                                     "fundamental")
                                                    (("3"
                                                      (reveal -)
                                                      (("3"
                                                        (hide -1)
                                                        (("3"
                                                          (hide -1)
                                                          (("3"
                                                            (hide -1)
                                                            (("3"
                                                              (hide
                                                               -1
                                                               -2
                                                               -3)
                                                              (("3"
                                                                (hide
                                                                 -1)
                                                                (("3"
                                                                  (case
                                                                   "(LAMBDA (x_1:(d)) -> real:
                                                                       nth(Integral(a, x_1, od_fx(n, f, y)), i)) = (LAMBDA (x_1: (d)) -> real:
                                                                       Integral(a, x_1, nth(od_fx(n, f, y),i)))")
                                                                  (("1"
                                                                    (replace
                                                                     -1)
                                                                    (("1"
                                                                      (inst
                                                                       -2
                                                                       "(LAMBDA (x_1: (d)) -> real:
                                                              Integral(a, x_1, nth(od_fx(n, f, y), i)))"
                                                                       "a"
                                                                       "nth(od_fx(n,f,y),i)")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (split
                                                                           -2)
                                                                          (("1"
                                                                            (flatten)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (expand
                                                                                 "derivable?"
                                                                                 -1)
                                                                                (("1"
                                                                                  (inst
                                                                                   -1
                                                                                   "x!1")
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (typepred
                                                                               "f")
                                                                              (("2"
                                                                                (expand
                                                                                 "continuous?"
                                                                                 -1)
                                                                                (("2"
                                                                                  (inst
                                                                                   -1
                                                                                   "i")
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (skeep)
                                                                        (("2"
                                                                          (lemma
                                                                           "not_one_element")
                                                                          (("2"
                                                                            (hide
                                                                             -)
                                                                            (("2"
                                                                              (lemma
                                                                               "cont_Int")
                                                                              (("2"
                                                                                (inst
                                                                                 -1
                                                                                 "od_fx(n,f,y)")
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (inst
                                                                                     -1
                                                                                     "a"
                                                                                     "x_1")
                                                                                    (("2"
                                                                                      (expand
                                                                                       "Integrable?"
                                                                                       -1)
                                                                                      (("2"
                                                                                        (inst
                                                                                         -1
                                                                                         "i")
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (decompose-equality
                                                                       1)
                                                                      (("1"
                                                                        (lemma
                                                                         "Int_nth")
                                                                        (("1"
                                                                          (inst
                                                                           -1
                                                                           "a"
                                                                           "x!2"
                                                                           "od_fx(n,f,y)"
                                                                           "i")
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (lemma
                                                                         "not_one_element")
                                                                        (("2"
                                                                          (skeep
                                                                           1)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (hide
                                                                               -)
                                                                              (("2"
                                                                                (lemma
                                                                                 "cont_Int")
                                                                                (("2"
                                                                                  (inst
                                                                                   -1
                                                                                   "od_fx(n,f,y)")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (inst
                                                                                       -1
                                                                                       "a"
                                                                                       "x_1")
                                                                                      (("2"
                                                                                        (expand
                                                                                         "Integrable?"
                                                                                         -1)
                                                                                        (("2"
                                                                                          (inst
                                                                                           -1
                                                                                           "i")
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("3"
                                                                        (skeep
                                                                         1)
                                                                        (("3"
                                                                          (lemma
                                                                           "connected")
                                                                          (("3"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("4"
                                                                        (skeep
                                                                         1)
                                                                        (("4"
                                                                          (lemma
                                                                           "cont_Int")
                                                                          (("4"
                                                                            (inst
                                                                             -1
                                                                             "od_fx(n,f,y)")
                                                                            (("4"
                                                                              (assert)
                                                                              (("4"
                                                                                (inst
                                                                                 -1
                                                                                 "a"
                                                                                 "x_1")
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("3"
                                                                    (assert)
                                                                    (("3"
                                                                      (skeep
                                                                       1)
                                                                      (("3"
                                                                        (lemma
                                                                         "cont_Int")
                                                                        (("3"
                                                                          (inst
                                                                           -1
                                                                           "od_fx(n,f,y)")
                                                                          (("3"
                                                                            (assert)
                                                                            (("3"
                                                                              (inst
                                                                               -1
                                                                               "a"
                                                                               "x_1")
                                                                              (("3"
                                                                                (expand
                                                                                 "Integrable?"
                                                                                 -1)
                                                                                (("3"
                                                                                  (inst
                                                                                   -1
                                                                                   "i")
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (skeep 1)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil)
                                               ("3"
                                                (skeep 1)
                                                (("3"
                                                  (lemma "cont_Int")
                                                  (("3"
                                                    (inst
                                                     -1
                                                     "od_fx(n,f,y)")
                                                    (("3"
                                                      (assert)
                                                      (("3"
                                                        (inst
                                                         -1
                                                         "a"
                                                         "x_1")
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (assert)
                                          (("2"
                                            (decompose-equality 1)
                                            (("1"
                                              (lemma "nth_sum")
                                              (("1"
                                                (inst
                                                 -1
                                                 "y0"
                                                 "Integral(a, x!2, od_fx(n, f, y))")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (inst -1 "i")
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (skeep 1)
                                              (("2" (assert) nil nil))
                                              nil)
                                             ("3"
                                              (skeep 1)
                                              (("3"
                                                (assert)
                                                (("3"
                                                  (typepred
                                                   "y0 + Integral(a, x_1, od_fx(n, f, y))"
                                                   "y0"
                                                   "r2v_analysis.Integral(a, x_1, od_fx(n, f, y))")
                                                  (("3"
                                                    (hide -1 -3 -5)
                                                    (("3"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("4"
                                              (skeep 1)
                                              (("4"
                                                (lemma "cont_Int")
                                                (("4"
                                                  (inst
                                                   -1
                                                   "od_fx(n,f,y)")
                                                  (("4"
                                                    (assert)
                                                    (("4"
                                                      (inst
                                                       -1
                                                       "a"
                                                       "x_1")
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (assert)
                                          (("3"
                                            (skeep)
                                            (("3" (assert) nil nil))
                                            nil))
                                          nil)
                                         ("4"
                                          (skeep)
                                          (("4"
                                            (assert)
                                            (("4"
                                              (typepred
                                               "y0 + Integral(a, x_1, od_fx(n, f, y))"
                                               "y0"
                                               "r2v_analysis.Integral(a, x_1, od_fx(n, f, y))")
                                              (("4"
                                                (hide -1 -3 -5)
                                                (("4"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("5"
                                          (skeep)
                                          (("5"
                                            (lemma "cont_Int")
                                            (("5"
                                              (inst -1 "od_fx(n,f,y)")
                                              (("5"
                                                (assert)
                                                (("5"
                                                  (inst -1 "a" "x_1")
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (skeep 1)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (assert) nil nil))
        nil))
      nil))
    nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis)
    (y0 skolem-const-decl "VectorN(n)" ODE_psi_def nil)
    (a skolem-const-decl "(d)" ODE_psi_def nil)
    (psi const-decl "{pp: r2v_n(n) | length(pp) = n}" ODE_psi_def nil)
    (deriv def-decl "{ff: r2v | length(ff) = length(f)}" r2v_analysis
     nil)
    (derivable? const-decl "bool" r2v_analysis nil)
    (f skolem-const-decl "{ff: od_f(n) | continuous?(od_fx(n, ff, y))}"
     ODE_psi_def nil)
    (y skolem-const-decl "r2v_n[d](n)" ODE_psi_def nil)
    (continuous? const-decl "bool" r2v_analysis nil)
    (n skolem-const-decl "nat" ODE_psi_def nil)
    (od_fx const-decl "{ff: r2v_n(n) | length(ff) = n}" ODE_def nil)
    (r2v_n type-eq-decl nil r2v_def nil)
    (od_f type-eq-decl nil ODE_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (length const-decl "nat" r2v_def nil)
    (r2v type-eq-decl nil r2v_def nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (deriv_nth formula-decl nil r2v_analysis nil)
    (nth_od_fx formula-decl nil ODE_def nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (Vector type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (Integrable? const-decl "bool" r2v_analysis nil)
    (Integral def-decl "VectorN(length(f))" r2v_analysis nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (deriv_sum formula-decl nil derivatives_def analysis)
    (const_derivable formula-decl nil derivatives_def analysis)
    (+ const-decl "[T -> real]" real_fun_ops reals)
    (deriv_const formula-decl nil derivatives_def analysis)
    (const_fun const-decl "[T -> real]" real_fun_ops reals)
    (Integrable? const-decl "bool" integral_def analysis)
    (Integrable_funs type-eq-decl nil integral_def analysis)
    (Integral const-decl "real" integral_def analysis)
    (fundamental formula-decl nil fundamental_theorem analysis)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (connected formula-decl nil ODE_psi_def nil)
    (cont_Int formula-decl nil r2v_analysis nil)
    (deriv_domain formula-decl nil r2v_analysis nil)
    (not_one_element formula-decl nil ODE_psi_def nil)
    (Int_nth formula-decl nil r2v_analysis nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (below type-eq-decl nil naturalnumbers nil)
    (nth_sum formula-decl nil vector_arithmetic mv_analysis)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (derivable? const-decl "bool" derivatives analysis)
    (deriv_fun type-eq-decl nil derivatives analysis)
    (deriv const-decl "[T -> real]" derivatives analysis)
    (nth const-decl "[(d) -> real]" r2v_def nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (i skolem-const-decl
       "{ii: nat | ii < length(deriv(psi(n, a, y0, y, f)))}"
       ODE_psi_def nil)
    (< const-decl "bool" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (psi_derivable formula-decl nil ODE_psi_def nil)
    (nth_equal formula-decl nil r2v_def nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (d formal-const-decl "[real -> bool]" ODE_psi_def nil))
   nil)))

