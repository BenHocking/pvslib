(ODE_solution_existence_uniqueness
 (Psi_TCC1 0
  (Psi_TCC1-1 nil 3789485046 ("" (assuming-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (closed_interval? const-decl "bool" interval_def nil)
    (< const-decl "bool" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (closed_interval? const-decl "bool" interval_def nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (nonempty? const-decl "bool" sets nil))
   nil
   (Psi assuming "ODE_def[ODE_solution_existence_uniqueness.d].ODE_def"
    "non_empty: ASSUMPTION sets[real].nonempty?(ODE_def.d)")))
 (Psi_TCC2 0
  (Psi_TCC2-1 nil 3789485046
   ("" (skeep) (("" (lemma "ci_connected") (("" (inst?) nil nil)) nil))
    nil)
   ((ci_connected formula-decl nil interval_def nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (closed_interval? const-decl "bool" interval_def nil))
   nil
   (Psi assuming "ODE_def[ODE_solution_existence_uniqueness.d].ODE_def"
    "connected: ASSUMPTION deriv_domain_def[(ODE_def.d)].connected?")))
 (Psi_TCC3 0
  (Psi_TCC3-1 nil 3789485046
   ("" (skeep)
    (("" (lemma "ci_not_one_element") (("" (inst?) nil nil)) nil)) nil)
   ((ci_not_one_element formula-decl nil interval_def nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (closed_interval? const-decl "bool" interval_def nil))
   nil
   (Psi assuming "ODE_def[ODE_solution_existence_uniqueness.d].ODE_def"
    "not_one_element: ASSUMPTION deriv_domain_def[(ODE_def.d)].not_one_element?")))
 (Psi_TCC4 0
  (Psi_TCC4-1 nil 3789485046 ("" (assuming-tcc) nil nil) nil nil
   (Psi assuming
    "metric_rho[ODE_solution_existence_uniqueness.d].metric_rho"
    "closed_interval: ASSUMPTION interval_def.closed_interval?(metric_rho.d)")))
 (Psi_TCC5 0
  (Psi_TCC5-1 nil 3789485046 ("" (subtype-tcc) nil nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (closed_interval? const-decl "bool" interval_def nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices matrices)
    (od_f type-eq-decl nil ODE_def nil)
    (Lip_d? const-decl "bool" ODE_Lipschitz_def nil)
    (cont_d? const-decl "bool" ODE_continuous_def nil)
    (r2v type-eq-decl nil r2v_def nil)
    (continuous? const-decl "bool" r2v_analysis nil)
    (r2v_n type-eq-decl nil r2v_def nil)
    (S type-eq-decl nil metric_rho nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (n!1 skolem-const-decl "posnat" ODE_solution_existence_uniqueness
     nil)
    (Vector type-eq-decl nil matrices matrices)
    (scal def-decl "VectorN(length(v2))" matrices matrices)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic mv_analysis)
    (<= const-decl "bool" reals nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (add def-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (< const-decl "bool" reals nil)
    (continuous? const-decl "bool" continuous_functions analysis)
    (continuous? const-decl "bool" continuous_functions analysis)
    (nth const-decl "[(d) -> real]" r2v_def nil)
    (contD? const-decl "bool" continuity_multivar mv_analysis)
    (contp? const-decl "bool" continuity_multivar mv_analysis)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (sub const-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (closed_interval? const-decl "bool" interval_def nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (norm? const-decl "bool" norms mv_analysis)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (* const-decl "VectorN(length(v2))" matrices matrices))
   nil
   (Psi subtype
    "r2v_continuous_extension[ODE_solution_existence_uniqueness.d].d_b"
    "(list_adt[real].cons?)")))
 (Psi_TCC6 0
  (Psi_TCC6-1 nil 3789485046 ("" (subtype-tcc) nil nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (closed_interval? const-decl "bool" interval_def nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices matrices)
    (od_f type-eq-decl nil ODE_def nil)
    (Lip_d? const-decl "bool" ODE_Lipschitz_def nil)
    (cont_d? const-decl "bool" ODE_continuous_def nil)
    (r2v type-eq-decl nil r2v_def nil)
    (continuous? const-decl "bool" r2v_analysis nil)
    (r2v_n type-eq-decl nil r2v_def nil)
    (S type-eq-decl nil metric_rho nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (continuous? const-decl "bool" continuous_functions analysis)
    (continuous? const-decl "bool" continuous_functions analysis)
    (nth const-decl "[(d) -> real]" r2v_def nil)
    (contD? const-decl "bool" continuity_multivar mv_analysis)
    (contp? const-decl "bool" continuity_multivar mv_analysis)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (sub const-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (closed_interval? const-decl "bool" interval_def nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil
   (Psi subtype
    "list_adt[real].car(r2v_continuous_extension[ODE_solution_existence_uniqueness.d].d_b)"
    "(ODE_solution_existence_uniqueness.d)")))
 (Psi_TCC7 0
  (Psi_TCC7-1 nil 3789485046
   ("" (skeep)
    (("" (lemma "cont_od_fx[d]")
      (("1" (inst?) nil nil)
       ("2" (lemma "ci_not_one_element") (("2" (inst?) nil nil)) nil)
       ("3" (lemma "ci_connected") (("3" (inst?) nil nil)) nil)
       ("4" (lemma "ci_nonempty") (("4" (inst?) nil nil)) nil))
      nil))
    nil)
   ((closed_interval? const-decl "bool" interval_def nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (cont_od_fx formula-decl nil ODE_continuous_def nil)
    (nonempty? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (connected? const-decl "bool" deriv_domain_def analysis)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices matrices)
    (od_f type-eq-decl nil ODE_def nil)
    (Lip_d? const-decl "bool" ODE_Lipschitz_def nil)
    (cont_d? const-decl "bool" ODE_continuous_def nil)
    (r2v_n type-eq-decl nil r2v_def nil)
    (r2v type-eq-decl nil r2v_def nil)
    (continuous? const-decl "bool" r2v_analysis nil)
    (S type-eq-decl nil metric_rho nil)
    (ci_not_one_element formula-decl nil interval_def nil)
    (ci_connected formula-decl nil interval_def nil)
    (ci_nonempty formula-decl nil interval_def nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis))
   nil
   (Psi subtype "ODE_solution_existence_uniqueness.f"
    "{ff: ODE_def[ODE_solution_existence_uniqueness.d].od_f(ODE_solution_existence_uniqueness.n) | r2v_analysis[ODE_solution_existence_uniqueness.d].continuous?(ODE_def[ODE_solution_existence_uniqueness.d].od_fx(ODE_solution_existence_uniqueness.n, ff, ODE_solution_existence_uniqueness.y))}")))
 (Psi_TCC8 0
  (Psi_TCC8-2 nil 3789485176
   ("" (skeep) (("" (lemma "psi_cont[d]") (("" (inst?) nil nil)) nil))
    nil)
   ((closed_interval? const-decl "bool" interval_def nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (psi_cont formula-decl nil ODE_psi_def nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (d_b const-decl "{dd: list[real] |
   (length(dd) = 2 AND (d(car(dd)) AND d(car(cdr(dd))))) AND
    FORALL (x: real): (car(dd) <= x AND x <= car(cdr(dd))) IFF d(x)}"
     r2v_continuous_extension nil)
    (VectorN type-eq-decl nil matrices matrices)
    (r2v_n type-eq-decl nil r2v_def nil)
    (r2v type-eq-decl nil r2v_def nil)
    (continuous? const-decl "bool" r2v_analysis nil)
    (S type-eq-decl nil metric_rho nil)
    (od_f type-eq-decl nil ODE_def nil)
    (length const-decl "nat" r2v_def nil)
    (od_fx const-decl "{ff: r2v_n(n) | length(ff) = n}" ODE_def nil)
    (Lip_d? const-decl "bool" ODE_Lipschitz_def nil)
    (cont_d? const-decl "bool" ODE_continuous_def nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis))
   nil
   (Psi subtype
    "ODE_psi_def[ODE_solution_existence_uniqueness.d].psi(ODE_solution_existence_uniqueness.n, list_adt[real].car(r2v_continuous_extension[ODE_solution_existence_uniqueness.d].d_b), ODE_solution_existence_uniqueness.y0, ODE_solution_existence_uniqueness.y, ODE_solution_existence_uniqueness.f)"
    "metric_rho[ODE_solution_existence_uniqueness.d].S(ODE_solution_existence_uniqueness.n)"))
  (Psi_TCC8-1 nil 3789485046 ("" (subtype-tcc) nil nil) nil nil
   (Psi subtype
    "ODE_psi_def[ODE_solution_existence_uniqueness.d].psi(ODE_solution_existence_uniqueness.n, list_adt[real].car(r2v_continuous_extension[ODE_solution_existence_uniqueness.d].d_b), ODE_solution_existence_uniqueness.y0, ODE_solution_existence_uniqueness.y, ODE_solution_existence_uniqueness.f)"
    "metric_rho[ODE_solution_existence_uniqueness.d].S(ODE_solution_existence_uniqueness.n)")))
 (Psi_contract_TCC1 0
  (Psi_contract_TCC1-1 nil 3789485485 ("" (subtype-tcc) nil nil)
   ((Psi const-decl "S[d](n)" ODE_solution_existence_uniqueness nil)
    (fullset const-decl "set" sets nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil
   (Psi_contract subtype
    "restrict[metric_rho[ODE_solution_existence_uniqueness.d].S(ODE_solution_existence_uniqueness.n), (sets[metric_rho[ODE_solution_existence_uniqueness.d].S(ODE_solution_existence_uniqueness.n)].fullset), metric_rho[ODE_solution_existence_uniqueness.d].S(ODE_solution_existence_uniqueness.n)].restrict(ODE_solution_existence_uniqueness.Psi(ODE_solution_existence_uniqueness.d, ODE_solution_existence_uniqueness.n, ODE_solution_existence_uniqueness.f, ODE_solution_existence_uniqueness.y0))"
    "[(sets[metric_rho[ODE_solution_existence_uniqueness.d].S(ODE_solution_existence_uniqueness.n)].fullset) -> (sets[metric_rho[ODE_solution_existence_uniqueness.d].S(ODE_solution_existence_uniqueness.n)].fullset)]")))
 (Psi_contract_TCC2 0
  (Psi_contract_TCC2-1 nil 3789485485
   ("" (skeep)
    (("" (lemma "rho_metric[d]") (("" (inst?) nil nil)) nil)) nil)
   ((closed_interval? const-decl "bool" interval_def nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (rho_metric formula-decl nil metric_rho nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices matrices)
    (od_f type-eq-decl nil ODE_def nil)
    (Lip_d? const-decl "bool" ODE_Lipschitz_def nil)
    (nnreal type-eq-decl nil real_types nil)
    (<= const-decl "bool" reals nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (norm? const-decl "bool" norms mv_analysis)
    (norm_inf const-decl "(norm?(m))" norms mv_analysis)
    (Vector type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (Lip_c const-decl "{L: nnreal |
   FORALL (t: (d), y1, y2: VectorN(n)):
     norm_inf(n)(f(t, y1) - f(t, y2)) <= L * norm_inf(n)(y1 - y2)}"
     ODE_Lipschitz_def nil)
    (cont_d? const-decl "bool" ODE_continuous_def nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis))
   nil
   (Psi_contract subtype
    "metric_rho[ODE_solution_existence_uniqueness.d].rho(ODE_solution_existence_uniqueness.n, (number_fields.+)(1, number_fields.*(2, ODE_Lipschitz_def[ODE_solution_existence_uniqueness.d].Lip_c(ODE_solution_existence_uniqueness.n)(ODE_solution_existence_uniqueness.f))), norms.norm_inf(ODE_solution_existence_uniqueness.n))"
    "metric[S[d](n)]")))
 (Psi_contract_TCC3 0
  (Psi_contract_TCC3-1 nil 3789485485
   ("" (skeep)
    (("" (expand "nonempty?" 1)
      (("" (expand "empty?" -1)
        (("" (inst -1 "LAMBDA(x:(d)): zero_vec(n)")
          (("1" (expand "member" 1)
            (("1" (expand "fullset" 1) (("1" (propax) nil nil)) nil))
            nil)
           ("2" (expand "continuous?" 1)
            (("2" (skeep)
              (("2" (lemma "nth_zero")
                (("2" (inst -1 "n" "i")
                  (("1" (expand "nth" 1)
                    (("1" (replace -1)
                      (("1" (expand "continuous?" 1)
                        (("1" (skeep)
                          (("1" (expand "continuous?" 1)
                            (("1" (skeep)
                              (("1"
                                (inst 1 "1")
                                (("1"
                                  (skeep)
                                  (("1" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (typepred "i")
                    (("2" (expand "length" -1 1)
                      (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nonempty? const-decl "bool" sets nil)
    (n skolem-const-decl "posnat" ODE_solution_existence_uniqueness
     nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic mv_analysis)
    (VectorN type-eq-decl nil matrices matrices)
    (continuous? const-decl "bool" r2v_analysis nil)
    (r2v type-eq-decl nil r2v_def nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (d skolem-const-decl "(closed_interval?)"
       ODE_solution_existence_uniqueness nil)
    (closed_interval? const-decl "bool" interval_def nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (r2v_n type-eq-decl nil r2v_def nil)
    (S type-eq-decl nil metric_rho nil)
    (fullset const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (< const-decl "bool" reals nil)
    (length const-decl "nat" r2v_def nil)
    (i skolem-const-decl
       "{ii: nat | ii < length(LAMBDA (x: (d)): zero_vec(n))}"
       ODE_solution_existence_uniqueness nil)
    (below type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (continuous? const-decl "bool" continuous_functions analysis)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (continuous? const-decl "bool" continuous_functions analysis)
    (nth const-decl "[(d) -> real]" r2v_def nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nth_zero formula-decl nil vector_arithmetic mv_analysis)
    (empty? const-decl "bool" sets nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis))
   nil
   (Psi_contract subtype
    "sets[metric_rho[ODE_solution_existence_uniqueness.d].S(ODE_solution_existence_uniqueness.n)].fullset"
    "nonempty_set[S[d](n)]")))
 (Psi_contract 0
  (Psi_contract-1 nil 3789485734
   ("" (skeep)
    (("" (lemma "psi_contraction[d]")
      (("" (expand "contraction?" 1)
        (("" (inst -1 "n" "y0" "f" "_" "_" "_")
          (("" (expand "restrict" 1)
            (("" (inst 1 "(Lip_c(n)(f) / (1 + 2 * Lip_c[d](n)(f)))")
              (("1" (skeep)
                (("1" (expand "Psi")
                  (("1" (assert)
                    (("1" (inst -1 "x" "y" "1 + 2 * Lip_c[d](n)(f)")
                      nil nil))
                    nil))
                  nil))
                nil)
               ("2" (assert)
                (("2" (hide -1)
                  (("2" (mult-by 1 "(1 + 2 * Lip_c[d](n)(f))")
                    (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((closed_interval? const-decl "bool" interval_def nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (psi_contraction formula-decl nil ODE_psi_contraction nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices matrices)
    (od_f type-eq-decl nil ODE_def nil)
    (Lip_d? const-decl "bool" ODE_Lipschitz_def nil)
    (cont_d? const-decl "bool" ODE_continuous_def nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (f skolem-const-decl
     "{ff: od_f[d](n) | Lip_d?[d](n)(ff) AND cont_d?[d](n)(ff)}"
     ODE_solution_existence_uniqueness nil)
    (n skolem-const-decl "posnat" ODE_solution_existence_uniqueness
     nil)
    (Lip_c const-decl "{L: nnreal |
   FORALL (t: (d), y1, y2: VectorN(n)):
     norm_inf(n)(f(t, y1) - f(t, y2)) <= L * norm_inf(n)(y1 - y2)}"
     ODE_Lipschitz_def nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (Vector type-eq-decl nil matrices matrices)
    (norm_inf const-decl "(norm?(m))" norms mv_analysis)
    (norm? const-decl "bool" norms mv_analysis)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (<= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (d skolem-const-decl "(closed_interval?)"
       ODE_solution_existence_uniqueness nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (Psi const-decl "S[d](n)" ODE_solution_existence_uniqueness nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (fullset const-decl "set" sets nil) (set type-eq-decl nil sets nil)
    (S type-eq-decl nil metric_rho nil)
    (continuous? const-decl "bool" r2v_analysis nil)
    (r2v type-eq-decl nil r2v_def nil)
    (r2v_n type-eq-decl nil r2v_def nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (div_cancel2 formula-decl nil real_props nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (both_sides_times_pos_ge1_imp formula-decl nil extra_real_props
     nil)
    (restrict const-decl "R" restrict nil)
    (contraction? const-decl "bool" banach metric_space)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis))
   shostak))
 (Psi_fixed_point_TCC1 0
  (Psi_fixed_point_TCC1-1 nil 3789486302 ("" (subtype-tcc) nil nil)
   ((Psi const-decl "S[d](n)" ODE_solution_existence_uniqueness nil)
    (fullset const-decl "set" sets nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil
   (Psi_fixed_point subtype "ODE_solution_existence_uniqueness.x"
    "(sets[metric_rho[ODE_solution_existence_uniqueness.d].S(ODE_solution_existence_uniqueness.n)].fullset)")))
 (Psi_fixed_point 0
  (Psi_fixed_point-1 nil 3789486396
   ("" (skeep)
    ((""
      (lemma
       "banach_fixed_point_thm [S[d](n), rho[d](n, 2 * Lip_c[d](n)(f) + 1, norm_inf(n)), fullset[S[d](n)]]")
      (("1" (inst -1 "Psi(d,n,f,y0)")
        (("1" (assert)
          (("1" (split -1)
            (("1" (skeep)
              (("1" (inst 1 "x_star")
                (("1" (assert)
                  (("1" (expand "restrict")
                    (("1" (assert)
                      (("1" (split 1)
                        (("1" (skeep)
                          (("1" (inst -3 "y")
                            (("1" (assert) nil nil)
                             ("2" (expand "fullset" 1)
                              (("2" (propax) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (skeep)
                          (("2" (inst -3 "x") (("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide 2)
              (("2" (lemma "Cfs_complete[d]")
                (("2" (lemma "Psi_contract")
                  (("2" (inst?)
                    (("2" (inst -2 "n" " 1 + 2 * Lip_c[d](n)(f)")
                      (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide 2)
          (("2" (lemma "Psi_contract")
            (("2" (assert)
              (("2" (split 1)
                (("1" (skeep)
                  (("1" (expand "fullset" 1) (("1" (propax) nil nil))
                    nil))
                  nil)
                 ("2" (expand "restrict")
                  (("2" (inst -1 "d" "n" "f" "y0")
                    (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide 2)
        (("2" (lemma "Psi_TCC8")
          (("2" (lemma "Psi_contract_TCC1")
            (("2" (lemma "Psi_contract_TCC2")
              (("2" (lemma "Psi_contract_TCC3")
                (("2" (hide -2 -3)
                  (("2" (hide -2)
                    (("2" (inst -1 "d" "n" "f" "y0") nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (hide 2)
        (("3" (lemma "rho_metric[d]") (("3" (inst?) nil nil)) nil))
        nil))
      nil))
    nil)
   ((fullset const-decl "set" sets nil) (set type-eq-decl nil sets nil)
    (cont_d? const-decl "bool" ODE_continuous_def nil)
    (Lip_c const-decl "{L: nnreal |
   FORALL (t: (d), y1, y2: VectorN(n)):
     norm_inf(n)(f(t, y1) - f(t, y2)) <= L * norm_inf(n)(y1 - y2)}"
     ODE_Lipschitz_def nil)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (Vector type-eq-decl nil matrices matrices)
    (norm_inf const-decl "(norm?(m))" norms mv_analysis)
    (<= const-decl "bool" reals nil)
    (Lip_d? const-decl "bool" ODE_Lipschitz_def nil)
    (od_f type-eq-decl nil ODE_def nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (rho const-decl "nnreal" metric_rho nil)
    (nnreal type-eq-decl nil real_types nil)
    (norm? const-decl "bool" norms mv_analysis)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (S type-eq-decl nil metric_rho nil)
    (continuous? const-decl "bool" r2v_analysis nil)
    (r2v type-eq-decl nil r2v_def nil)
    (r2v_n type-eq-decl nil r2v_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (closed_interval? const-decl "bool" interval_def nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (banach_fixed_point_thm formula-decl nil banach metric_space)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (metric? const-decl "bool" metric_def metric_space)
    (nonempty? const-decl "bool" sets nil)
    (Psi_contract formula-decl nil ODE_solution_existence_uniqueness
     nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (Cfs_complete formula-decl nil continuous_function_complete_rho
     nil)
    (y skolem-const-decl "S[d](n)" ODE_solution_existence_uniqueness
     nil)
    (d skolem-const-decl "(closed_interval?)"
       ODE_solution_existence_uniqueness nil)
    (n skolem-const-decl "posnat" ODE_solution_existence_uniqueness
     nil)
    (Psi const-decl "S[d](n)" ODE_solution_existence_uniqueness nil)
    (f skolem-const-decl
     "{ff: od_f[d](n) | Lip_d?[d](n)(ff) AND cont_d?[d](n)(ff)}"
     ODE_solution_existence_uniqueness nil)
    (y0 skolem-const-decl "VectorN(n)"
     ODE_solution_existence_uniqueness nil)
    (contraction? const-decl "bool" banach metric_space)
    (restrict const-decl "R" restrict nil)
    (Psi_TCC8 subtype-tcc nil ODE_solution_existence_uniqueness nil)
    (Psi_contract_TCC2 subtype-tcc nil
     ODE_solution_existence_uniqueness nil)
    (Psi_contract_TCC3 subtype-tcc nil
     ODE_solution_existence_uniqueness nil)
    (Psi_contract_TCC1 subtype-tcc nil
     ODE_solution_existence_uniqueness nil)
    (rho_metric formula-decl nil metric_rho nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis))
   shostak))
 (init_unique_solution_TCC1 0
  (init_unique_solution_TCC1-1 nil 3789487376
   ("" (subtype-tcc) nil nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (closed_interval? const-decl "bool" interval_def nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices matrices)
    (od_f type-eq-decl nil ODE_def nil)
    (Lip_d? const-decl "bool" ODE_Lipschitz_def nil)
    (cont_d? const-decl "bool" ODE_continuous_def nil)
    (r2v type-eq-decl nil r2v_def nil)
    (derivable? const-decl "bool" r2v_analysis nil)
    (r2v_n type-eq-decl nil r2v_def nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (n!1 skolem-const-decl "posnat" ODE_solution_existence_uniqueness
     nil)
    (Vector type-eq-decl nil matrices matrices)
    (scal def-decl "VectorN(length(v2))" matrices matrices)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic mv_analysis)
    (<= const-decl "bool" reals nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (add def-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (< const-decl "bool" reals nil)
    (derivable? const-decl "bool" derivatives analysis)
    (derivable? const-decl "bool" derivatives_def analysis)
    (convergent? const-decl "bool" lim_of_functions analysis)
    (convergence const-decl "bool" lim_of_functions analysis)
    (convergence const-decl "bool" convergence_functions analysis)
    (NQ const-decl "real" derivatives_def analysis)
    (nth const-decl "[(d) -> real]" r2v_def nil)
    (adh const-decl "setof[real]" convergence_functions analysis)
    (fullset const-decl "set" sets nil)
    (contD? const-decl "bool" continuity_multivar mv_analysis)
    (contp? const-decl "bool" continuity_multivar mv_analysis)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (sub const-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (closed_interval? const-decl "bool" interval_def nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (norm? const-decl "bool" norms mv_analysis)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (* const-decl "VectorN(length(v2))" matrices matrices))
   nil
   (init_unique_solution subtype
    "r2v_continuous_extension[ODE_solution_existence_uniqueness.d].d_b"
    "(list_adt[real].cons?)")))
 (init_unique_solution_TCC2 0
  (init_unique_solution_TCC2-1 nil 3789487376
   ("" (skeep)
    (("" (assert)
      (("" (assert)
        (("" (skeep)
          (("" (typepred "d_b[d]")
            (("" (inst -5 "dd") (("" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (closed_interval? const-decl "bool" interval_def nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (d_b const-decl "{dd: list[real] |
   (length(dd) = 2 AND (d(car(dd)) AND d(car(cdr(dd))))) AND
    FORALL (x: real): (car(dd) <= x AND x <= car(cdr(dd))) IFF d(x)}"
     r2v_continuous_extension nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis))
   nil
   (init_unique_solution subtype
    "list_adt[real].car(r2v_continuous_extension[ODE_solution_existence_uniqueness.d].d_b)"
    "{aa: (ODE_solution_existence_uniqueness.d) | FORALL (dd: (ODE_solution_existence_uniqueness.d)): reals.<=(aa, dd)}")))
 (init_unique_solution_TCC3 0
  (init_unique_solution_TCC3-1 nil 3789487376
   ("" (skeep)
    (("" (typepred "y")
      (("" (lemma "der_cont[d]")
        (("" (inst?) (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((r2v_n type-eq-decl nil r2v_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (derivable? const-decl "bool" r2v_analysis nil)
    (r2v type-eq-decl nil r2v_def nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (closed_interval? const-decl "bool" interval_def nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (der_cont formula-decl nil r2v_analysis nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis))
   nil
   (init_unique_solution subtype "ODE_solution_existence_uniqueness.y"
    "metric_rho[ODE_solution_existence_uniqueness.d].S(ODE_solution_existence_uniqueness.n)")))
 (init_unique_solution_TCC4 0
  (init_unique_solution_TCC4-1 nil 3789487376
   ("" (subtype-tcc) nil nil)
   ((od_fx const-decl "{ff: r2v_n(n) | length(ff) = n}" ODE_def nil)
    (od_sol? const-decl "bool" ODE_def nil)
    (ivt_s? const-decl "bool" ODE_def nil)
    (ivt_s_unique? const-decl "bool" ODE_def nil)
    (Psi const-decl "S[d](n)" ODE_solution_existence_uniqueness nil)
    (fullset const-decl "set" sets nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil
   (init_unique_solution subtype "ODE_solution_existence_uniqueness.x"
    "(sets[metric_rho[ODE_solution_existence_uniqueness.d].S(ODE_solution_existence_uniqueness.n)].fullset)")))
 (init_unique_solution 0
  (init_unique_solution-1 nil 3789487502
   ("" (skeep)
    (("" (lemma "Psi_fixed_point")
      (("" (inst -1 "d" "n" "f" "y0")
        (("" (assert)
          (("" (skeep)
            (("" (lemma "psi_fixed_imp_sol[d]")
              (("" (inst -1 "n" "car(d_b[d])" "y0" "f")
                (("1" (split -1)
                  (("1" (skeep -1)
                    (("1" (inst 1 "y")
                      (("1" (assert)
                        (("1" (expand "Psi" 1 1)
                          (("1" (assert)
                            (("1" (skeep)
                              (("1"
                                (inst -5 "x")
                                (("1"
                                  (assert)
                                  (("1"
                                    (case "x_star=y")
                                    (("1" (assert) nil nil)
                                     ("2"
                                      (inst -4 "y")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (expand "Psi" 2 1)
                                          (("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide 2)
                    (("2" (inst 1 "x_star")
                      (("2" (typepred "x_star")
                        (("2" (split 1)
                          (("1" (expand "Psi" -2)
                            (("1" (propax) nil nil)) nil)
                           ("2" (assert)
                            (("2" (skeep 1)
                              (("2"
                                (inst -4 "y2")
                                (("2"
                                  (assert)
                                  (("2"
                                    (expand "Psi" 2)
                                    (("2" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert)
                  (("2" (hide 2)
                    (("2" (split 1)
                      (("1" (grind) nil nil)
                       ("2" (skeep 1)
                        (("2" (typepred "d_b[d]")
                          (("2" (inst -5 "dd") (("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (hide 2)
                  (("3" (hide -)
                    (("3" (typepred "d_b[d]") (("3" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Psi_fixed_point formula-decl nil ODE_solution_existence_uniqueness
     nil)
    (psi_fixed_imp_sol formula-decl nil ODE_psi_contraction nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (derivable? const-decl "bool" r2v_analysis nil)
    (r2v type-eq-decl nil r2v_def nil)
    (r2v_n type-eq-decl nil r2v_def nil)
    (Psi const-decl "S[d](n)" ODE_solution_existence_uniqueness nil)
    (continuous? const-decl "bool" r2v_analysis nil)
    (S type-eq-decl nil metric_rho nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (d_b const-decl "{dd: list[real] |
   (length(dd) = 2 AND (d(car(dd)) AND d(car(cdr(dd))))) AND
    FORALL (x: real): (car(dd) <= x AND x <= car(cdr(dd))) IFF d(x)}"
     r2v_continuous_extension nil)
    (<= const-decl "bool" reals nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (d skolem-const-decl "(closed_interval?)"
       ODE_solution_existence_uniqueness nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cont_d? const-decl "bool" ODE_continuous_def nil)
    (Lip_d? const-decl "bool" ODE_Lipschitz_def nil)
    (od_f type-eq-decl nil ODE_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (closed_interval? const-decl "bool" interval_def nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis))
   shostak))
 (unique_solution 0
  (unique_solution-1 nil 3789487424
   ("" (lemma "init_unique_solution")
    (("" (skeep)
      (("" (inst?)
        (("" (assert) (("" (skeep) (("" (inst 1 "y") nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis)
    (derivable? const-decl "bool" r2v_analysis nil)
    (r2v type-eq-decl nil r2v_def nil)
    (r2v_n type-eq-decl nil r2v_def nil)
    (cont_d? const-decl "bool" ODE_continuous_def nil)
    (Lip_d? const-decl "bool" ODE_Lipschitz_def nil)
    (od_f type-eq-decl nil ODE_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (closed_interval? const-decl "bool" interval_def nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (init_unique_solution formula-decl nil
     ODE_solution_existence_uniqueness nil))
   shostak))
 (ode_sol_TCC1 0
  (ode_sol_TCC1-1 nil 3793110861 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (closed_interval? const-decl "bool" interval_def nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (closed_interval? const-decl "bool" interval_def nil)
    (r2v type-eq-decl nil r2v_def nil)
    (choose const-decl "(p)" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (yy!1 skolem-const-decl "r2v_n[d!1](n!1)"
     ODE_solution_existence_uniqueness nil)
    (r2v_n type-eq-decl nil r2v_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (d!1 skolem-const-decl "(closed_interval?)"
     ODE_solution_existence_uniqueness nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (n!1 skolem-const-decl "posnat" ODE_solution_existence_uniqueness
     nil)
    (< const-decl "bool" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (fullset const-decl "set" sets nil)
    (adh const-decl "setof[real]" convergence_functions analysis)
    (nth const-decl "[(d) -> real]" r2v_def nil)
    (NQ const-decl "real" derivatives_def analysis)
    (convergence const-decl "bool" convergence_functions analysis)
    (convergence const-decl "bool" lim_of_functions analysis)
    (convergent? const-decl "bool" lim_of_functions analysis)
    (derivable? const-decl "bool" derivatives_def analysis)
    (derivable? const-decl "bool" derivatives analysis)
    (derivable? const-decl "bool" r2v_analysis nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (length const-decl "nat" r2v_def nil))
   nil
   (ode_sol subtype
    "r2v_continuous_extension[ODE_solution_existence_uniqueness.d].d_b"
    "(list_adt[real].cons?)")))
 (ode_sol_TCC2 0
  (ode_sol_TCC2-1 nil 3793110861
   ("" (skeep)
    (("" (typepred "d_b[d]")
      (("" (assert)
        (("" (skeep)
          (("" (inst-cp -5 "dd")
            (("" (flatten) (("" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((d_b const-decl "{dd: list[real] |
   (length(dd) = 2 AND (d(car(dd)) AND d(car(cdr(dd))))) AND
    FORALL (x: real): (car(dd) <= x AND x <= car(cdr(dd))) IFF d(x)}"
     r2v_continuous_extension nil)
    (<= const-decl "bool" reals nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (closed_interval? const-decl "bool" interval_def nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis))
   nil
   (ode_sol subtype
    "list_adt[real].car(r2v_continuous_extension[ODE_solution_existence_uniqueness.d].d_b)"
    "{aa: (ODE_solution_existence_uniqueness.d) | FORALL (dd: (ODE_solution_existence_uniqueness.d)): reals.<=(aa, dd)}")))
 (ode_sol_TCC3 0
  (ode_sol_TCC3-1 nil 3793110861
   (""
    (inst 1 "LAMBDA(d:(closed_interval?),n:posnat,f: {ff: od_f[d](n) |
   Lip_d?[d](n)(ff) AND cont_d?[d](n)(ff)}): LAMBDA(y0:VectorN(n)): choose({yy:r2v_n[d](n) | derivable?[d](yy) AND ivt_s_unique?[d](n, car(d_b[d]), f, y0)(yy)})")
    (("1" (skeep*)
      (("1" (expand "nonempty?" 1)
        (("1" (expand "empty?" -1)
          (("1" (lemma "unique_solution")
            (("1" (inst?)
              (("1" (skeep)
                (("1" (inst -2 "y")
                  (("1" (expand "member" 1) (("1" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skeep*)
      (("2" (typepred "d_b[d]")
        (("2" (assert)
          (("2" (skeep)
            (("2" (inst-cp -5 "dd")
              (("2" (flatten) (("2" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (skeep) (("3" (grind) nil nil)) nil)
     ("4" (skeep)
      (("4" (typepred "d")
        (("4" (lemma "ci_not_one_element") (("4" (inst?) nil nil))
          nil))
        nil))
      nil)
     ("5" (skeep)
      (("5" (lemma "ci_connected") (("5" (inst?) nil nil)) nil)) nil)
     ("6" (skeep)
      (("6" (lemma "ci_nonempty") (("6" (inst?) nil nil)) nil)) nil))
    nil)
   ((ci_nonempty formula-decl nil interval_def nil)
    (ci_connected formula-decl nil interval_def nil)
    (ci_not_one_element formula-decl nil interval_def nil)
    (derivable? const-decl "bool" derivatives analysis)
    (derivable? const-decl "bool" derivatives_def analysis)
    (convergent? const-decl "bool" lim_of_functions analysis)
    (convergence const-decl "bool" lim_of_functions analysis)
    (convergence const-decl "bool" convergence_functions analysis)
    (NQ const-decl "real" derivatives_def analysis)
    (nth const-decl "[(d) -> real]" r2v_def nil)
    (adh const-decl "setof[real]" convergence_functions analysis)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (fullset const-decl "set" sets nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis)
    (TRUE const-decl "bool" booleans nil)
    (empty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (unique_solution formula-decl nil ODE_solution_existence_uniqueness
     nil)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (connected? const-decl "bool" deriv_domain_def analysis)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (choose const-decl "(p)" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (d_b const-decl "{dd: list[real] |
   (length(dd) = 2 AND (d(car(dd)) AND d(car(cdr(dd))))) AND
    FORALL (x: real): (car(dd) <= x AND x <= car(cdr(dd))) IFF d(x)}"
     r2v_continuous_extension nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (ivt_s_unique? const-decl "bool" ODE_def nil)
    (<= const-decl "bool" reals nil)
    (derivable? const-decl "bool" r2v_analysis nil)
    (r2v type-eq-decl nil r2v_def nil)
    (r2v_n type-eq-decl nil r2v_def nil)
    (cont_d? const-decl "bool" ODE_continuous_def nil)
    (Lip_d? const-decl "bool" ODE_Lipschitz_def nil)
    (od_f type-eq-decl nil ODE_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (closed_interval? const-decl "bool" interval_def nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil
   (ode_sol existence ""
    "[d1: [d: (interval_def.closed_interval?), n: integers.posnat, {ff: ODE_def[d].od_f(n) | booleans.AND(ODE_Lipschitz_def[d].Lip_d?(n)(ff), ODE_continuous_def[d].cont_d?(n)(ff))}] -> [y0: matrices.VectorN(d1`2) -> {yy: r2v_def[d1`1].r2v_n(d1`2) | booleans.AND(r2v_analysis[d1`1].derivable?(yy), ODE_def[d1`1].ivt_s_unique?(d1`2, list_adt[real].car(r2v_continuous_extension[d1`1].d_b), d1`3, y0)(yy))}]]")))
 (ode_sol_extend_TCC1 0
  (ode_sol_extend_TCC1-1 nil 3793111865 ("" (subtype-tcc) nil nil) nil
   nil
   (ode_sol_extend subtype "ODE_solution_existence_uniqueness.c"
    "{b: reals.real | reals.<(ODE_solution_existence_uniqueness.a, b)}")))
 (ode_sol_extend_TCC2 0
  (ode_sol_extend_TCC6-1 nil 3793111865 ("" (subtype-tcc) nil nil) nil
   nil
   (ode_sol_extend subtype "ODE_solution_existence_uniqueness.b"
    "{b: reals.real | reals.<(ODE_solution_existence_uniqueness.a, b)}")))
 (ode_sol_extend_TCC3 0
  (ode_sol_extend_TCC2-1 nil 3793111865 ("" (assuming-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (closed_interval const-decl "(closed_interval?(a, b))" interval_def
     nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (nonempty? const-decl "bool" sets nil))
   nil
   (ode_sol_extend assuming
    "ODE_def[(interval_def.closed_interval(ODE_solution_existence_uniqueness.a, ODE_solution_existence_uniqueness.c))].ODE_def"
    "non_empty: ASSUMPTION sets[real].nonempty?(ODE_def.d)")))
 (ode_sol_extend_TCC4 0
  (ode_sol_extend_TCC3-1 nil 3793111865 ("" (assuming-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (< const-decl "bool" reals nil)
    (closed_interval? const-decl "bool" interval_def nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (closed_interval const-decl "(closed_interval?(a, b))" interval_def
     nil)
    (connected? const-decl "bool" deriv_domain_def analysis))
   nil
   (ode_sol_extend assuming
    "ODE_def[(interval_def.closed_interval(ODE_solution_existence_uniqueness.a, ODE_solution_existence_uniqueness.c))].ODE_def"
    "connected: ASSUMPTION deriv_domain_def[(ODE_def.d)].connected?")))
 (ode_sol_extend_TCC5 0
  (ode_sol_extend_TCC4-1 nil 3793111865
   ("" (skeep)
    (("" (lemma "ci_ci")
      (("" (lemma "ci_not_one_element")
        (("" (inst -2 "a" "c") (("" (inst?) nil nil)) nil)) nil))
      nil))
    nil)
   ((ci_ci formula-decl nil interval_def nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (> const-decl "bool" reals nil)
    (closed_interval? const-decl "bool" interval_def nil)
    (closed_interval? const-decl "bool" interval_def nil)
    (closed_interval const-decl "(closed_interval?(a, b))" interval_def
     nil)
    (c skolem-const-decl "{cc: real | cc >= b}"
       ODE_solution_existence_uniqueness nil)
    (b skolem-const-decl "{bb: real | bb > a}"
     ODE_solution_existence_uniqueness nil)
    (a skolem-const-decl "real" ODE_solution_existence_uniqueness nil)
    (ci_not_one_element formula-decl nil interval_def nil))
   nil
   (ode_sol_extend assuming
    "ODE_def[(interval_def.closed_interval(ODE_solution_existence_uniqueness.a, ODE_solution_existence_uniqueness.c))].ODE_def"
    "not_one_element: ASSUMPTION deriv_domain_def[(ODE_def.d)].not_one_element?")))
 (ode_sol_extend_TCC6 0
  (ode_sol_extend_TCC8-1 nil 3793111865 ("" (subtype-tcc) nil nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (closed_interval? const-decl "bool" interval_def nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices matrices)
    (od_f type-eq-decl nil ODE_def nil)
    (Lip_d? const-decl "bool" ODE_Lipschitz_def nil)
    (cont_d? const-decl "bool" ODE_continuous_def nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (n!1 skolem-const-decl "posnat" ODE_solution_existence_uniqueness
     nil)
    (Vector type-eq-decl nil matrices matrices)
    (scal def-decl "VectorN(length(v2))" matrices matrices)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic mv_analysis)
    (<= const-decl "bool" reals nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (add def-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (contD? const-decl "bool" continuity_multivar mv_analysis)
    (contp? const-decl "bool" continuity_multivar mv_analysis)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (sub const-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (closed_interval const-decl "(closed_interval?(a, b))" interval_def
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (norm? const-decl "bool" norms mv_analysis)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (* const-decl "VectorN(length(v2))" matrices matrices))
   nil
   (ode_sol_extend subtype "ODE_solution_existence_uniqueness.t"
    "(interval_def.closed_interval(ODE_solution_existence_uniqueness.a, ODE_solution_existence_uniqueness.c))")))
 (ode_sol_extend_TCC7 0
  (ode_sol_extend_TCC5-1 nil 3793111865
   ("" (skeep) (("" (lemma "ci_ci") (("" (inst?) nil nil)) nil)) nil)
   ((ci_ci formula-decl nil interval_def nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (< const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (> const-decl "bool" reals nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis))
   nil
   (ode_sol_extend subtype
    "interval_def.closed_interval(ODE_solution_existence_uniqueness.a, ODE_solution_existence_uniqueness.c)"
    "(interval_def.closed_interval?)")))
 (ode_sol_extend_TCC8 0
  (ode_sol_extend_TCC7-1 nil 3793111865
   ("" (skeep) (("" (lemma "ci_ci") (("" (inst?) nil nil)) nil)) nil)
   ((ci_ci formula-decl nil interval_def nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (< const-decl "bool" reals nil) (> const-decl "bool" reals nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis))
   nil
   (ode_sol_extend subtype
    "interval_def.closed_interval(ODE_solution_existence_uniqueness.a, ODE_solution_existence_uniqueness.b)"
    "(interval_def.closed_interval?)")))
 (ode_sol_extend_TCC9 0
  (ode_sol_extend_TCC9-1 nil 3793111865
   ("" (skeep*)
    (("" (expand "closed_interval")
      (("" (assert)
        (("" (flatten)
          (("" (typepred "a" "b" "c") (("" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((closed_interval const-decl "(closed_interval?(a, b))" interval_def
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis))
   nil
   (ode_sol_extend subtype
    "(interval_def.closed_interval(ODE_solution_existence_uniqueness.a, ODE_solution_existence_uniqueness.b))"
    "{dd: [reals.real -> booleans.bool] | FORALL (t: reals.real): booleans.IMPLIES(dd(t), interval_def.closed_interval(ODE_solution_existence_uniqueness.a, ODE_solution_existence_uniqueness.c)(t))}")))
 (ode_sol_extend_TCC10 0
  (ode_sol_extend_TCC10-1 nil 3793344095
   ("" (skeep*)
    (("" (lemma "ci_ci")
      (("" (lemma "ci_nonempty")
        (("" (inst -2 "a" "b") (("" (inst?) nil nil)) nil)) nil))
      nil))
    nil)
   ((ci_ci formula-decl nil interval_def nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil) (> const-decl "bool" reals nil)
    (closed_interval const-decl "(closed_interval?(a, b))" interval_def
     nil)
    (closed_interval? const-decl "bool" interval_def nil)
    (closed_interval? const-decl "bool" interval_def nil)
    (b skolem-const-decl "{bb: real | bb > a}"
     ODE_solution_existence_uniqueness nil)
    (a skolem-const-decl "real" ODE_solution_existence_uniqueness nil)
    (ci_nonempty formula-decl nil interval_def nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis))
   nil
   (ode_sol_extend assuming
    "restrict_ode[(interval_def.closed_interval(ODE_solution_existence_uniqueness.a, ODE_solution_existence_uniqueness.c)), (interval_def.closed_interval(ODE_solution_existence_uniqueness.a, ODE_solution_existence_uniqueness.b))].restrict_ode"
    "non_empty2: ASSUMPTION sets[real].nonempty?(restrict_ode.d2)")))
 (ode_sol_extend_TCC11 0
  (ode_sol_extend_TCC11-1 nil 3793344095 ("" (assuming-tcc) nil nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (closed_interval? const-decl "bool" interval_def nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices matrices)
    (od_f type-eq-decl nil ODE_def nil)
    (Lip_d? const-decl "bool" ODE_Lipschitz_def nil)
    (cont_d? const-decl "bool" ODE_continuous_def nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sub const-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (contp? const-decl "bool" continuity_multivar mv_analysis)
    (contD? const-decl "bool" continuity_multivar mv_analysis)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (n!1 skolem-const-decl "posnat" ODE_solution_existence_uniqueness
     nil)
    (Vector type-eq-decl nil matrices matrices)
    (scal def-decl "VectorN(length(v2))" matrices matrices)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic mv_analysis)
    (<= const-decl "bool" reals nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (add def-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (closed_interval const-decl "(closed_interval?(a, b))" interval_def
     nil)
    (connected? const-decl "bool" deriv_domain_def analysis)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (norm? const-decl "bool" norms mv_analysis)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (* const-decl "VectorN(length(v2))" matrices matrices))
   nil
   (ode_sol_extend assuming
    "restrict_ode[(interval_def.closed_interval(ODE_solution_existence_uniqueness.a, ODE_solution_existence_uniqueness.c)), (interval_def.closed_interval(ODE_solution_existence_uniqueness.a, ODE_solution_existence_uniqueness.b))].restrict_ode"
    "connected2: ASSUMPTION deriv_domain_def[(restrict_ode.d2)].connected?")))
 (ode_sol_extend_TCC12 0
  (ode_sol_extend_TCC12-1 nil 3793344095
   ("" (skeep)
    (("" (lemma "ci_ci")
      (("" (lemma "ci_nonempty")
        (("" (inst -2 "a" "b")
          (("" (inst?)
            (("" (assert)
              (("" (lemma "ci_not_one_element") (("" (inst?) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ci_ci formula-decl nil interval_def nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (< const-decl "bool" reals nil) (> const-decl "bool" reals nil)
    (ci_not_one_element formula-decl nil interval_def nil)
    (closed_interval? const-decl "bool" interval_def nil)
    (closed_interval? const-decl "bool" interval_def nil)
    (closed_interval const-decl "(closed_interval?(a, b))" interval_def
     nil)
    (a skolem-const-decl "real" ODE_solution_existence_uniqueness nil)
    (b skolem-const-decl "{bb: real | bb > a}"
     ODE_solution_existence_uniqueness nil)
    (ci_nonempty formula-decl nil interval_def nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis))
   nil
   (ode_sol_extend assuming
    "restrict_ode[(interval_def.closed_interval(ODE_solution_existence_uniqueness.a, ODE_solution_existence_uniqueness.c)), (interval_def.closed_interval(ODE_solution_existence_uniqueness.a, ODE_solution_existence_uniqueness.b))].restrict_ode"
    "not_one_element2: ASSUMPTION deriv_domain_def[(restrict_ode.d2)].not_one_element?")))
 (ode_sol_extend_TCC13 0
  (ode_sol_extend_TCC13-1 nil 3793344095
   ("" (skeep)
    (("" (split 1)
      (("1"
        (lemma
         "restrict_Lip[(closed_interval(a, c)), (closed_interval(a, b))]")
        (("1" (inst?) (("1" (assert) nil nil)) nil)
         ("2" (hide 2)
          (("2" (skeep)
            (("2" (expand "closed_interval")
              (("2" (typepred "b" "c")
                (("2" (assert)
                  (("2" (flatten) (("2" (assert) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2"
        (lemma
         "restrict_cont[(closed_interval(a, c)), (closed_interval(a, b))]")
        (("1" (inst?) (("1" (assert) nil nil)) nil)
         ("2" (hide 2)
          (("2" (skeep)
            (("2" (typepred "t")
              (("2" (typepred "a" "b" "c")
                (("2" (expand "closed_interval")
                  (("2" (assert)
                    (("2" (flatten) (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices matrices)
    (od_f type-eq-decl nil ODE_def nil)
    (Lip_d? const-decl "bool" ODE_Lipschitz_def nil)
    (cont_d? const-decl "bool" ODE_continuous_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (restrict_Lip formula-decl nil restrict_ode nil)
    (real nonempty-type-from-decl nil reals nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (< const-decl "bool" reals nil)
    (closed_interval? const-decl "bool" interval_def nil)
    (closed_interval const-decl "(closed_interval?(a, b))" interval_def
     nil)
    (>= const-decl "bool" reals nil) (> const-decl "bool" reals nil)
    (restrict_cont formula-decl nil restrict_ode nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis))
   nil
   (ode_sol_extend subtype
    "restrict_ode[(interval_def.closed_interval(ODE_solution_existence_uniqueness.a, ODE_solution_existence_uniqueness.c)), (interval_def.closed_interval(ODE_solution_existence_uniqueness.a, ODE_solution_existence_uniqueness.b))].restrict(ODE_solution_existence_uniqueness.n, ODE_solution_existence_uniqueness.f)"
    "{ff: ODE_def[interval_def.closed_interval(ODE_solution_existence_uniqueness.a, ODE_solution_existence_uniqueness.b)].od_f(ODE_solution_existence_uniqueness.n) | booleans.AND(ODE_Lipschitz_def[interval_def.closed_interval(ODE_solution_existence_uniqueness.a, ODE_solution_existence_uniqueness.b)].Lip_d?(ODE_solution_existence_uniqueness.n)(ff), ODE_continuous_def[interval_def.closed_interval(ODE_solution_existence_uniqueness.a, ODE_solution_existence_uniqueness.b)].cont_d?(ODE_solution_existence_uniqueness.n)(ff))}")))
 (ode_sol_extend 0
  (ode_sol_extend-1 nil 3793972878
   ("" (skeep)
    (("" (decompose-equality 1)
      (("1" (expand "restrict" 1)
        (("1"
          (typepred " ode_sol(closed_interval(a, b), n,
                   LAMBDA (x: (closed_interval(a, b)),
                           v: VectorN(n)) -> VectorN(n):
                     f(x, v))
                  (y0)")
          (("1" (expand "ivt_s_unique?" -2)
            (("1" (flatten)
              (("1"
                (inst -3
                 "LAMBDA(x:closed_interval(a,b)):  ode_sol(closed_interval(a, c), n, f)(y0)(x)")
                (("1" (assert)
                  (("1" (split -3)
                    (("1" (decompose-equality -1)
                      (("1" (inst -1 "x!1") (("1" (assert) nil nil))
                        nil))
                      nil)
                     ("2" (hide 2)
                      (("2"
                        (typepred
                         "ode_sol(closed_interval(a, c), n, f)(y0)")
                        (("1" (expand "ivt_s_unique?" -2)
                          (("1" (flatten)
                            (("1" (expand "ivt_s?" 1)
                              (("1"
                                (expand "ivt_s?" -2)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (split 1)
                                      (("1"
                                        (hide -4)
                                        (("1"
                                          (expand "od_sol?" 1)
                                          (("1"
                                            (expand "od_sol?" -2)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (decompose-equality 1)
                                                (("1"
                                                  (decompose-equality
                                                   -2)
                                                  (("1"
                                                    (typepred "x!2")
                                                    (("1"
                                                      (inst -3 "x!2")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (expand
                                                           "od_fx"
                                                           1
                                                           1)
                                                          (("1"
                                                            (expand
                                                             "od_fx"
                                                             -3
                                                             1)
                                                            (("1"
                                                              (replace
                                                               -3
                                                               1)
                                                              (("1"
                                                                (lemma
                                                                 "list_extensionality")
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "(r2v_analysis[interval_def.closed_interval(a, c)].deriv
                                   (ode_sol(interval_def.closed_interval(a, c), n, f)(y0))
                                   (x!2))"
                                                                   "r2v_analysis[interval_def.closed_interval(a, b)].deriv
                                   (LAMBDA (x:
                                              reals@intervals_real
                                                  [reals.real].closed_interval(a, b)):
                                      ode_sol(interval_def.closed_interval(a, c), n, f)(y0)(x))
                                   (x!2)")
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (hide
                                                                         2)
                                                                        (("1"
                                                                          (split
                                                                           1)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (hide
                                                                               -)
                                                                              (("1"
                                                                                (typepred
                                                                                 "r2v_analysis[interval_def.closed_interval(a, c)].deriv
                                          (ode_sol(interval_def.closed_interval(a, c), n, f)(y0))")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (typepred
                                                                                     "(r2v_analysis[interval_def.closed_interval(a, b)].deriv
                                          (LAMBDA (x:
                                                     reals@intervals_real
                                                         [reals.real].closed_interval(a, b)):
                                             ode_sol(interval_def.closed_interval(a, c), n, f)(y0)
                                                    (x)))")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (skeep*)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "length"
                                                                                           -4
                                                                                           1)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "length"
                                                                                             -2
                                                                                             1)
                                                                                            (("1"
                                                                                              (inst-cp
                                                                                               -3
                                                                                               "x!2")
                                                                                              (("1"
                                                                                                (inst-cp
                                                                                                 -1
                                                                                                 "x!2")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     -4
                                                                                                     "choose[real](interval_def.closed_interval(a, c))")
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       -1
                                                                                                       "choose[real](interval_def.closed_interval(a, b))")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (replace
                                                                                                           -5
                                                                                                           1)
                                                                                                          (("1"
                                                                                                            (replace
                                                                                                             -2
                                                                                                             1)
                                                                                                            (("1"
                                                                                                              (replace
                                                                                                               -1)
                                                                                                              (("1"
                                                                                                                (replace
                                                                                                                 -4)
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "length"
                                                                                                                   -3)
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "length"
                                                                                                                     -6
                                                                                                                     1)
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (hide
                                                                                       2)
                                                                                      (("2"
                                                                                        (skeep)
                                                                                        (("2"
                                                                                          (split
                                                                                           1)
                                                                                          (("1"
                                                                                            (inst
                                                                                             1
                                                                                             "m")
                                                                                            (("1"
                                                                                              (skeep)
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -1
                                                                                                 "x_1")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (case
                                                                                                     "length(r2v_analysis[interval_def.closed_interval(a, c)].deriv
                                                  (ode_sol(interval_def.closed_interval(a, c), n, f)(y0))) =  length(r2v_analysis[interval_def.closed_interval(a, c)].deriv
                                                  (ode_sol(interval_def.closed_interval(a, c), n, f)(y0))
                                                  (x_1))")
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (replace
                                                                                                         -1
                                                                                                         -3
                                                                                                         lr)
                                                                                                        (("1"
                                                                                                          (replace
                                                                                                           -2)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "length"
                                                                                                             -3)
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (hide
                                                                                                       2)
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "length"
                                                                                                           1
                                                                                                           1)
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            (("2"
                                                                                                              (reveal
                                                                                                               -)
                                                                                                              (("2"
                                                                                                                (hide
                                                                                                                 -15)
                                                                                                                (("2"
                                                                                                                  (hide
                                                                                                                   -14
                                                                                                                   -13
                                                                                                                   -12)
                                                                                                                  (("2"
                                                                                                                    (hide
                                                                                                                     -10
                                                                                                                     -9
                                                                                                                     -8
                                                                                                                     -7
                                                                                                                     -6
                                                                                                                     -5)
                                                                                                                    (("2"
                                                                                                                      (hide
                                                                                                                       -2)
                                                                                                                      (("2"
                                                                                                                        (inst
                                                                                                                         -1
                                                                                                                         " (choose[real](interval_def.closed_interval(a, c)))")
                                                                                                                        (("2"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (reveal
                                                                                             -)
                                                                                            (("2"
                                                                                              (hide
                                                                                               -13
                                                                                               -12)
                                                                                              (("2"
                                                                                                (hide
                                                                                                 -11)
                                                                                                (("2"
                                                                                                  (hide
                                                                                                   -10)
                                                                                                  (("2"
                                                                                                    (hide
                                                                                                     -8)
                                                                                                    (("2"
                                                                                                      (hide
                                                                                                       -1)
                                                                                                      (("2"
                                                                                                        (hide
                                                                                                         -5
                                                                                                         -6
                                                                                                         -7
                                                                                                         -8)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "derivable?")
                                                                                                          (("2"
                                                                                                            (skeep)
                                                                                                            (("2"
                                                                                                              (inst
                                                                                                               -4
                                                                                                               "i")
                                                                                                              (("1"
                                                                                                                (lemma
                                                                                                                 "derivable_subtype[(closed_interval(a, c)), (closed_interval(a, b))]")
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "nth"
                                                                                                                   -5)
                                                                                                                  (("1"
                                                                                                                    (inst
                                                                                                                     -1
                                                                                                                     "LAMBDA (x: (closed_interval(a, c))) -> real:
                                                   nth(ode_sol(closed_interval(a, c), n, f)(y0)(x), i)")
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      (("1"
                                                                                                                        (split
                                                                                                                         -1)
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           "restrict"
                                                                                                                           -1)
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               "nth"
                                                                                                                               1
                                                                                                                               1)
                                                                                                                              (("1"
                                                                                                                                (propax)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (hide
                                                                                                                           2)
                                                                                                                          (("2"
                                                                                                                            (lemma
                                                                                                                             "ci_deriv_domain")
                                                                                                                            (("2"
                                                                                                                              (inst
                                                                                                                               -1
                                                                                                                               "(closed_interval(a,b))")
                                                                                                                              (("2"
                                                                                                                                (assert)
                                                                                                                                (("2"
                                                                                                                                  (lemma
                                                                                                                                   "ci_ci")
                                                                                                                                  (("2"
                                                                                                                                    (inst
                                                                                                                                     -1
                                                                                                                                     "a"
                                                                                                                                     "b")
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("3"
                                                                                                                          (assert)
                                                                                                                          (("3"
                                                                                                                            (lemma
                                                                                                                             "ci_not_one_element")
                                                                                                                            (("3"
                                                                                                                              (inst
                                                                                                                               -1
                                                                                                                               "closed_interval(a,b)")
                                                                                                                              (("3"
                                                                                                                                (lemma
                                                                                                                                 "ci_ci")
                                                                                                                                (("3"
                                                                                                                                  (inst
                                                                                                                                   -1
                                                                                                                                   "a"
                                                                                                                                   "b")
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (assert)
                                                                                                                      (("2"
                                                                                                                        (skeep)
                                                                                                                        (("2"
                                                                                                                          (assert)
                                                                                                                          (("2"
                                                                                                                            (typepred
                                                                                                                             "i")
                                                                                                                            (("2"
                                                                                                                              (expand
                                                                                                                               "length"
                                                                                                                               -1)
                                                                                                                              (("2"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (lemma
                                                                                                                   "ci_not_one_element")
                                                                                                                  (("2"
                                                                                                                    (inst
                                                                                                                     -1
                                                                                                                     "closed_interval(a,c)")
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("3"
                                                                                                                  (lemma
                                                                                                                   "ci_deriv_domain")
                                                                                                                  (("3"
                                                                                                                    (inst
                                                                                                                     -1
                                                                                                                     "closed_interval(a,c)")
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("4"
                                                                                                                  (skeep)
                                                                                                                  (("4"
                                                                                                                    (typepred
                                                                                                                     "x")
                                                                                                                    (("4"
                                                                                                                      (expand
                                                                                                                       "closed_interval")
                                                                                                                      (("4"
                                                                                                                        (assert)
                                                                                                                        (("4"
                                                                                                                          (flatten)
                                                                                                                          (("4"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (typepred
                                                                                                                 "i")
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  (("2"
                                                                                                                    (expand
                                                                                                                     "length"
                                                                                                                     -1)
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      (("2"
                                                                                                                        (expand
                                                                                                                         "length"
                                                                                                                         1)
                                                                                                                        (("2"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("3"
                                                                                      (skeep)
                                                                                      (("3"
                                                                                        (hide
                                                                                         -)
                                                                                        (("3"
                                                                                          (hide
                                                                                           2)
                                                                                          (("3"
                                                                                            (split
                                                                                             1)
                                                                                            (("1"
                                                                                              (flatten)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "closed_interval"
                                                                                                 1
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (flatten)
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "closed_interval"
                                                                                                   -1
                                                                                                   1)
                                                                                                  (("2"
                                                                                                    (propax)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("4"
                                                                                      (hide
                                                                                       2)
                                                                                      (("4"
                                                                                        (hide
                                                                                         -)
                                                                                        (("4"
                                                                                          (skeep)
                                                                                          (("4"
                                                                                            (typepred
                                                                                             "x")
                                                                                            (("4"
                                                                                              (expand
                                                                                               "closed_interval"
                                                                                               1
                                                                                               1)
                                                                                              (("4"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (skeep)
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (hide
                                                                                 -)
                                                                                (("2"
                                                                                  (lemma
                                                                                   "deriv_nth[interval_def.closed_interval(a, b)]")
                                                                                  (("2"
                                                                                    (lemma
                                                                                     "deriv_nth[interval_def.closed_interval(a, c)]")
                                                                                    (("2"
                                                                                      (inst
                                                                                       -2
                                                                                       "(LAMBDA (x:
                                                  reals@intervals_real
                                                      [reals.real].closed_interval(a, b)):
                                          ode_sol(interval_def.closed_interval(a, c), n, f)(y0)(x))"
                                                                                       "n_1")
                                                                                      (("1"
                                                                                        (inst
                                                                                         -1
                                                                                         "(ode_sol(interval_def.closed_interval(a, c), n, f)(y0))"
                                                                                         "n_1")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (decompose-equality
                                                                                             -1)
                                                                                            (("1"
                                                                                              (inst
                                                                                               -1
                                                                                               "x!2")
                                                                                              (("1"
                                                                                                (decompose-equality
                                                                                                 -2)
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -1
                                                                                                   "x!2")
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "nth"
                                                                                                     -1
                                                                                                     1)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "nth"
                                                                                                       -2
                                                                                                       1)
                                                                                                      (("1"
                                                                                                        (replace
                                                                                                         -1
                                                                                                         1)
                                                                                                        (("1"
                                                                                                          (replace
                                                                                                           -2
                                                                                                           1)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "nth"
                                                                                                             1)
                                                                                                            (("1"
                                                                                                              (lemma
                                                                                                               "deriv_subtype_dd[(closed_interval(a, c)), (closed_interval(a, b))]")
                                                                                                              (("1"
                                                                                                                (inst
                                                                                                                 -1
                                                                                                                 "(LAMBDA (x: (interval_def.closed_interval(a, c))) -> real:
                                              nth(ode_sol(interval_def.closed_interval(a, c), n, f)(y0)(x),
                                                  n_1))")
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (split
                                                                                                                     -1)
                                                                                                                    (("1"
                                                                                                                      (hide
                                                                                                                       -2)
                                                                                                                      (("1"
                                                                                                                        (decompose-equality
                                                                                                                         -1)
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           "restrict"
                                                                                                                           -1)
                                                                                                                          (("1"
                                                                                                                            (inst
                                                                                                                             -1
                                                                                                                             "x!2")
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (hide
                                                                                                                           2)
                                                                                                                          (("2"
                                                                                                                            (typepred
                                                                                                                             "(ode_sol(interval_def.closed_interval(a, c), n, f)(y0))")
                                                                                                                            (("2"
                                                                                                                              (expand
                                                                                                                               "derivable?"
                                                                                                                               -1)
                                                                                                                              (("2"
                                                                                                                                (inst
                                                                                                                                 -1
                                                                                                                                 "n_1")
                                                                                                                                (("2"
                                                                                                                                  (assert)
                                                                                                                                  (("2"
                                                                                                                                    (expand
                                                                                                                                     "nth"
                                                                                                                                     -1)
                                                                                                                                    (("2"
                                                                                                                                      (propax)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("3"
                                                                                                                          (hide
                                                                                                                           2)
                                                                                                                          (("3"
                                                                                                                            (hide
                                                                                                                             -2
                                                                                                                             -3
                                                                                                                             -4)
                                                                                                                            (("3"
                                                                                                                              (expand
                                                                                                                               "closed_interval")
                                                                                                                              (("3"
                                                                                                                                (flatten)
                                                                                                                                (("3"
                                                                                                                                  (assert)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("4"
                                                                                                                          (hide
                                                                                                                           2)
                                                                                                                          (("4"
                                                                                                                            (hide
                                                                                                                             -3)
                                                                                                                            (("4"
                                                                                                                              (expand
                                                                                                                               "closed_interval")
                                                                                                                              (("4"
                                                                                                                                (flatten)
                                                                                                                                (("4"
                                                                                                                                  (assert)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (hide
                                                                                                                       2)
                                                                                                                      (("2"
                                                                                                                        (hide
                                                                                                                         -1
                                                                                                                         -2)
                                                                                                                        (("2"
                                                                                                                          (typepred
                                                                                                                           "ode_sol(interval_def.closed_interval(a, c), n, f)(y0)")
                                                                                                                          (("2"
                                                                                                                            (expand
                                                                                                                             "derivable?"
                                                                                                                             -1)
                                                                                                                            (("2"
                                                                                                                              (inst
                                                                                                                               -1
                                                                                                                               "n_1")
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 "nth"
                                                                                                                                 -1
                                                                                                                                 1)
                                                                                                                                (("1"
                                                                                                                                  (propax)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (hide
                                                                                                                                 2)
                                                                                                                                (("2"
                                                                                                                                  (typepred
                                                                                                                                   "n_1")
                                                                                                                                  (("2"
                                                                                                                                    (assert)
                                                                                                                                    (("2"
                                                                                                                                      (expand
                                                                                                                                       "length"
                                                                                                                                       1
                                                                                                                                       1)
                                                                                                                                      (("2"
                                                                                                                                        (assert)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("3"
                                                                                                                      (hide
                                                                                                                       2)
                                                                                                                      (("3"
                                                                                                                        (hide
                                                                                                                         -)
                                                                                                                        (("3"
                                                                                                                          (lemma
                                                                                                                           "ci_deriv_domain")
                                                                                                                          (("3"
                                                                                                                            (inst
                                                                                                                             -1
                                                                                                                             "closed_interval(a,b)")
                                                                                                                            (("3"
                                                                                                                              (lemma
                                                                                                                               "ci_ci")
                                                                                                                              (("3"
                                                                                                                                (inst
                                                                                                                                 -1
                                                                                                                                 "a"
                                                                                                                                 "b")
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("4"
                                                                                                                      (lemma
                                                                                                                       "ci_not_one_element")
                                                                                                                      (("4"
                                                                                                                        (inst
                                                                                                                         -1
                                                                                                                         "closed_interval(a,b)")
                                                                                                                        (("4"
                                                                                                                          (lemma
                                                                                                                           "ci_ci")
                                                                                                                          (("4"
                                                                                                                            (inst
                                                                                                                             -1
                                                                                                                             "a"
                                                                                                                             "b")
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (hide
                                                                                                                   2)
                                                                                                                  (("2"
                                                                                                                    (hide
                                                                                                                     -)
                                                                                                                    (("2"
                                                                                                                      (skeep)
                                                                                                                      (("2"
                                                                                                                        (typepred
                                                                                                                         "n_1")
                                                                                                                        (("2"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (hide
                                                                                                                 -)
                                                                                                                (("2"
                                                                                                                  (hide
                                                                                                                   2)
                                                                                                                  (("2"
                                                                                                                    (lemma
                                                                                                                     "ci_not_one_element")
                                                                                                                    (("2"
                                                                                                                      (inst
                                                                                                                       -1
                                                                                                                       "closed_interval(a,c)")
                                                                                                                      (("2"
                                                                                                                        (lemma
                                                                                                                         "ci_ci")
                                                                                                                        (("2"
                                                                                                                          (inst
                                                                                                                           -1
                                                                                                                           "a"
                                                                                                                           "c")
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("3"
                                                                                                                (hide
                                                                                                                 -)
                                                                                                                (("3"
                                                                                                                  (hide
                                                                                                                   2)
                                                                                                                  (("3"
                                                                                                                    (lemma
                                                                                                                     "ci_deriv_domain")
                                                                                                                    (("3"
                                                                                                                      (inst
                                                                                                                       -1
                                                                                                                       "closed_interval(a,c)")
                                                                                                                      (("3"
                                                                                                                        (lemma
                                                                                                                         "ci_ci")
                                                                                                                        (("3"
                                                                                                                          (inst
                                                                                                                           -1
                                                                                                                           "a"
                                                                                                                           "c")
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("4"
                                                                                                                (assert)
                                                                                                                (("4"
                                                                                                                  (hide
                                                                                                                   -)
                                                                                                                  (("4"
                                                                                                                    (hide
                                                                                                                     2)
                                                                                                                    (("4"
                                                                                                                      (skeep)
                                                                                                                      (("4"
                                                                                                                        (typepred
                                                                                                                         "x")
                                                                                                                        (("4"
                                                                                                                          (expand
                                                                                                                           "closed_interval")
                                                                                                                          (("4"
                                                                                                                            (flatten)
                                                                                                                            (("4"
                                                                                                                              (assert)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (hide
                                                                                                   2)
                                                                                                  (("2"
                                                                                                    (hide
                                                                                                     -2
                                                                                                     -3)
                                                                                                    (("2"
                                                                                                      (typepred
                                                                                                       "ode_sol(interval_def.closed_interval(a, c), n, f)(y0)")
                                                                                                      (("2"
                                                                                                        (inst
                                                                                                         1
                                                                                                         "n")
                                                                                                        (("2"
                                                                                                          (skeep)
                                                                                                          (("2"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("3"
                                                                                                  (hide
                                                                                                   2)
                                                                                                  (("3"
                                                                                                    (hide
                                                                                                     -)
                                                                                                    (("3"
                                                                                                      (lemma
                                                                                                       "derivable_subtype[(closed_interval(a, c)), (closed_interval(a, b))]")
                                                                                                      (("1"
                                                                                                        (lemma
                                                                                                         "restrict_derivable[(closed_interval(a,c)),(closed_interval(a,b))]")
                                                                                                        (("1"
                                                                                                          (inst
                                                                                                           -1
                                                                                                           "n"
                                                                                                           "ode_sol(interval_def.closed_interval(a, c), n, f)(y0)")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "restrict"
                                                                                                               -1
                                                                                                               1)
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (hide
                                                                                                                   -2)
                                                                                                                  (("1"
                                                                                                                    (case
                                                                                                                     "(LAMBDA (s: (closed_interval(a, b))):
                                                 ode_sol(interval_def.closed_interval(a, c), n, f)(y0)(s)) = ((LAMBDA (x:
                                                          reals@intervals_real[reals.real].closed_interval(a,
                                                                                                           b)):
                                                  ode_sol(interval_def.closed_interval(a, c), n, f)(y0)(x)))")
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (hide
                                                                                                                       2)
                                                                                                                      (("2"
                                                                                                                        (decompose-equality
                                                                                                                         1)
                                                                                                                        (("1"
                                                                                                                          (skeep)
                                                                                                                          (("1"
                                                                                                                            (expand
                                                                                                                             "closed_interval")
                                                                                                                            (("1"
                                                                                                                              (propax)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (skeep)
                                                                                                                          (("2"
                                                                                                                            (expand
                                                                                                                             "closed_interval?"
                                                                                                                             1)
                                                                                                                            (("2"
                                                                                                                              (inst
                                                                                                                               1
                                                                                                                               "a"
                                                                                                                               "c")
                                                                                                                              (("2"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("3"
                                                                                                                          (skeep)
                                                                                                                          (("3"
                                                                                                                            (typepred
                                                                                                                             "x")
                                                                                                                            (("3"
                                                                                                                              (expand
                                                                                                                               "closed_interval"
                                                                                                                               1)
                                                                                                                              (("3"
                                                                                                                                (propax)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("4"
                                                                                                                          (skeep)
                                                                                                                          (("4"
                                                                                                                            (assert)
                                                                                                                            (("4"
                                                                                                                              (expand
                                                                                                                               "closed_interval?"
                                                                                                                               1)
                                                                                                                              (("4"
                                                                                                                                (inst
                                                                                                                                 1
                                                                                                                                 "a"
                                                                                                                                 "c")
                                                                                                                                (("4"
                                                                                                                                  (expand
                                                                                                                                   "closed_interval?"
                                                                                                                                   1)
                                                                                                                                  (("4"
                                                                                                                                    (skeep)
                                                                                                                                    (("4"
                                                                                                                                      (expand
                                                                                                                                       "closed_interval"
                                                                                                                                       1
                                                                                                                                       1)
                                                                                                                                      (("4"
                                                                                                                                        (propax)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("5"
                                                                                                                          (skeep)
                                                                                                                          (("5"
                                                                                                                            (expand
                                                                                                                             "closed_interval"
                                                                                                                             1)
                                                                                                                            (("5"
                                                                                                                              (typepred
                                                                                                                               "s")
                                                                                                                              (("5"
                                                                                                                                (expand
                                                                                                                                 "closed_interval"
                                                                                                                                 -1)
                                                                                                                                (("5"
                                                                                                                                  (flatten)
                                                                                                                                  (("5"
                                                                                                                                    (assert)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("3"
                                                                                                                      (hide
                                                                                                                       2)
                                                                                                                      (("3"
                                                                                                                        (skeep)
                                                                                                                        (("3"
                                                                                                                          (expand
                                                                                                                           "closed_interval"
                                                                                                                           1
                                                                                                                           1)
                                                                                                                          (("3"
                                                                                                                            (propax)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("4"
                                                                                                                      (hide
                                                                                                                       2)
                                                                                                                      (("4"
                                                                                                                        (skeep)
                                                                                                                        (("4"
                                                                                                                          (expand
                                                                                                                           "closed_interval"
                                                                                                                           1
                                                                                                                           1)
                                                                                                                          (("4"
                                                                                                                            (expand
                                                                                                                             "closed_interval?"
                                                                                                                             1
                                                                                                                             1)
                                                                                                                            (("4"
                                                                                                                              (inst
                                                                                                                               1
                                                                                                                               "a"
                                                                                                                               "c")
                                                                                                                              (("4"
                                                                                                                                (expand
                                                                                                                                 "closed_interval?"
                                                                                                                                 1)
                                                                                                                                (("4"
                                                                                                                                  (propax)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("5"
                                                                                                                      (hide
                                                                                                                       2)
                                                                                                                      (("5"
                                                                                                                        (skeep)
                                                                                                                        (("5"
                                                                                                                          (typepred
                                                                                                                           "x")
                                                                                                                          (("5"
                                                                                                                            (expand
                                                                                                                             "closed_interval"
                                                                                                                             1
                                                                                                                             1)
                                                                                                                            (("5"
                                                                                                                              (propax)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("6"
                                                                                                                      (hide
                                                                                                                       2)
                                                                                                                      (("6"
                                                                                                                        (skeep)
                                                                                                                        (("6"
                                                                                                                          (expand
                                                                                                                           "closed_interval?"
                                                                                                                           1
                                                                                                                           1)
                                                                                                                          (("6"
                                                                                                                            (inst
                                                                                                                             1
                                                                                                                             "a"
                                                                                                                             "c")
                                                                                                                            (("6"
                                                                                                                              (expand
                                                                                                                               "closed_interval?"
                                                                                                                               1
                                                                                                                               1)
                                                                                                                              (("6"
                                                                                                                                (skeep)
                                                                                                                                (("6"
                                                                                                                                  (expand
                                                                                                                                   "closed_interval"
                                                                                                                                   1
                                                                                                                                   1)
                                                                                                                                  (("6"
                                                                                                                                    (propax)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (hide
                                                                                                             2)
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "closed_interval?"
                                                                                                               1
                                                                                                               1)
                                                                                                              (("2"
                                                                                                                (inst
                                                                                                                 1
                                                                                                                 "a"
                                                                                                                 "c")
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "closed_interval?"
                                                                                                                   1
                                                                                                                   1)
                                                                                                                  (("2"
                                                                                                                    (skeep)
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       "closed_interval"
                                                                                                                       1
                                                                                                                       1)
                                                                                                                      (("2"
                                                                                                                        (propax)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (hide
                                                                                                           2)
                                                                                                          (("2"
                                                                                                            (skeep)
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "closed_interval")
                                                                                                              (("2"
                                                                                                                (flatten)
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (hide
                                                                                                         2)
                                                                                                        (("2"
                                                                                                          (lemma
                                                                                                           "ci_not_one_element")
                                                                                                          (("2"
                                                                                                            (inst
                                                                                                             -1
                                                                                                             "closed_interval(a,c)")
                                                                                                            (("2"
                                                                                                              (lemma
                                                                                                               "ci_ci")
                                                                                                              (("2"
                                                                                                                (inst
                                                                                                                 -1
                                                                                                                 "a"
                                                                                                                 "c")
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("3"
                                                                                                        (hide
                                                                                                         2)
                                                                                                        (("3"
                                                                                                          (lemma
                                                                                                           "ci_deriv_domain")
                                                                                                          (("3"
                                                                                                            (inst
                                                                                                             -1
                                                                                                             "closed_interval(a,c)")
                                                                                                            (("3"
                                                                                                              (lemma
                                                                                                               "ci_ci")
                                                                                                              (("3"
                                                                                                                (inst
                                                                                                                 -1
                                                                                                                 "a"
                                                                                                                 "c")
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("4"
                                                                                                        (hide
                                                                                                         2)
                                                                                                        (("4"
                                                                                                          (skeep)
                                                                                                          (("4"
                                                                                                            (typepred
                                                                                                             "x")
                                                                                                            (("4"
                                                                                                              (expand
                                                                                                               "closed_interval")
                                                                                                              (("4"
                                                                                                                (flatten)
                                                                                                                (("4"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("4"
                                                                                                  (hide
                                                                                                   2)
                                                                                                  (("4"
                                                                                                    (inst
                                                                                                     1
                                                                                                     "n")
                                                                                                    (("4"
                                                                                                      (skeep)
                                                                                                      (("4"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("5"
                                                                                                  (hide
                                                                                                   2)
                                                                                                  (("5"
                                                                                                    (hide
                                                                                                     -5
                                                                                                     -6)
                                                                                                    (("5"
                                                                                                      (expand
                                                                                                       "closed_interval")
                                                                                                      (("5"
                                                                                                        (propax)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("6"
                                                                                                  (hide
                                                                                                   2)
                                                                                                  (("6"
                                                                                                    (expand
                                                                                                     "closed_interval"
                                                                                                     -3)
                                                                                                    (("6"
                                                                                                      (propax)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("7"
                                                                                                  (expand
                                                                                                   "closed_interval"
                                                                                                   -)
                                                                                                  (("7"
                                                                                                    (propax)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("8"
                                                                                                  (hide
                                                                                                   2)
                                                                                                  (("8"
                                                                                                    (typepred
                                                                                                     "x!3")
                                                                                                    (("8"
                                                                                                      (expand
                                                                                                       "closed_interval"
                                                                                                       1)
                                                                                                      (("8"
                                                                                                        (propax)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (hide
                                                                                           2)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "length"
                                                                                               1
                                                                                               1)
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (hide
                                                                                         2)
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "length"
                                                                                             1
                                                                                             1)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("3"
                                                                                        (hide
                                                                                         2)
                                                                                        (("3"
                                                                                          (split
                                                                                           1)
                                                                                          (("1"
                                                                                            (inst
                                                                                             1
                                                                                             "n")
                                                                                            (("1"
                                                                                              (skeep)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (lemma
                                                                                             "restrict_derivable[(closed_interval(a,c)),(closed_interval(a,b))]")
                                                                                            (("1"
                                                                                              (inst
                                                                                               -1
                                                                                               "n"
                                                                                               " ode_sol(interval_def.closed_interval(a, c), n, f)(y0)")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "restrict"
                                                                                                   -1
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (case
                                                                                                       "(LAMBDA (s: (closed_interval(a, b))):
                                             ode_sol(interval_def.closed_interval(a, c), n, f)(y0)(s)) =  (LAMBDA (x:
                                                      reals@intervals_real[reals.real].closed_interval(a,
                                                                                                       b)):
                                              ode_sol(interval_def.closed_interval(a, c), n, f)(y0)(x))")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (hide
                                                                                                         2)
                                                                                                        (("2"
                                                                                                          (decompose-equality
                                                                                                           1)
                                                                                                          (("1"
                                                                                                            (skeep)
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "closed_interval"
                                                                                                               1)
                                                                                                              (("1"
                                                                                                                (propax)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (skeep)
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "closed_interval?"
                                                                                                               1
                                                                                                               1)
                                                                                                              (("2"
                                                                                                                (inst
                                                                                                                 1
                                                                                                                 "a"
                                                                                                                 "c")
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "closed_interval?"
                                                                                                                   1
                                                                                                                   1)
                                                                                                                  (("2"
                                                                                                                    (skeep)
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       "closed_interval"
                                                                                                                       1
                                                                                                                       1)
                                                                                                                      (("2"
                                                                                                                        (propax)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("3"
                                                                                                            (skeep)
                                                                                                            (("3"
                                                                                                              (expand
                                                                                                               "closed_interval"
                                                                                                               1
                                                                                                               1)
                                                                                                              (("3"
                                                                                                                (propax)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("4"
                                                                                                            (skeep)
                                                                                                            (("4"
                                                                                                              (expand
                                                                                                               "closed_interval?"
                                                                                                               1
                                                                                                               1)
                                                                                                              (("4"
                                                                                                                (inst
                                                                                                                 1
                                                                                                                 "a"
                                                                                                                 "c")
                                                                                                                (("4"
                                                                                                                  (expand
                                                                                                                   "closed_interval?"
                                                                                                                   1
                                                                                                                   1)
                                                                                                                  (("4"
                                                                                                                    (skeep)
                                                                                                                    (("4"
                                                                                                                      (expand
                                                                                                                       "closed_interval"
                                                                                                                       1
                                                                                                                       1)
                                                                                                                      (("4"
                                                                                                                        (propax)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("5"
                                                                                                            (skeep)
                                                                                                            (("5"
                                                                                                              (expand
                                                                                                               "closed_interval"
                                                                                                               1
                                                                                                               1)
                                                                                                              (("5"
                                                                                                                (assert)
                                                                                                                (("5"
                                                                                                                  (typepred
                                                                                                                   "s")
                                                                                                                  (("5"
                                                                                                                    (expand
                                                                                                                     "closed_interval"
                                                                                                                     -1
                                                                                                                     1)
                                                                                                                    (("5"
                                                                                                                      (flatten)
                                                                                                                      (("5"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("3"
                                                                                                        (hide
                                                                                                         2)
                                                                                                        (("3"
                                                                                                          (skeep)
                                                                                                          (("3"
                                                                                                            (expand
                                                                                                             "closed_interval"
                                                                                                             1
                                                                                                             1)
                                                                                                            (("3"
                                                                                                              (propax)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("4"
                                                                                                        (hide
                                                                                                         2)
                                                                                                        (("4"
                                                                                                          (skeep)
                                                                                                          (("4"
                                                                                                            (expand
                                                                                                             "closed_interval?"
                                                                                                             1
                                                                                                             1)
                                                                                                            (("4"
                                                                                                              (inst
                                                                                                               1
                                                                                                               "a"
                                                                                                               "c")
                                                                                                              (("4"
                                                                                                                (expand
                                                                                                                 "closed_interval?"
                                                                                                                 1
                                                                                                                 1)
                                                                                                                (("4"
                                                                                                                  (skeep)
                                                                                                                  (("4"
                                                                                                                    (expand
                                                                                                                     "closed_interval"
                                                                                                                     1
                                                                                                                     1)
                                                                                                                    (("4"
                                                                                                                      (propax)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("5"
                                                                                                        (skeep)
                                                                                                        (("5"
                                                                                                          (typepred
                                                                                                           "x")
                                                                                                          (("5"
                                                                                                            (expand
                                                                                                             "closed_interval"
                                                                                                             1
                                                                                                             1)
                                                                                                            (("5"
                                                                                                              (propax)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("6"
                                                                                                        (skeep)
                                                                                                        (("6"
                                                                                                          (expand
                                                                                                           "closed_interval?"
                                                                                                           1
                                                                                                           1)
                                                                                                          (("6"
                                                                                                            (inst
                                                                                                             1
                                                                                                             "a"
                                                                                                             "c")
                                                                                                            (("6"
                                                                                                              (expand
                                                                                                               "closed_interval?"
                                                                                                               1
                                                                                                               1)
                                                                                                              (("6"
                                                                                                                (skeep)
                                                                                                                (("6"
                                                                                                                  (expand
                                                                                                                   "closed_interval"
                                                                                                                   1
                                                                                                                   1)
                                                                                                                  (("6"
                                                                                                                    (propax)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("7"
                                                                                                        (assert)
                                                                                                        (("7"
                                                                                                          (skeep)
                                                                                                          (("7"
                                                                                                            (typepred
                                                                                                             "s")
                                                                                                            (("7"
                                                                                                              (expand
                                                                                                               "closed_interval")
                                                                                                              (("7"
                                                                                                                (flatten)
                                                                                                                (("7"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (lemma
                                                                                                 "ci_ci")
                                                                                                (("2"
                                                                                                  (inst?)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (skeep)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "closed_interval")
                                                                                                (("2"
                                                                                                  (flatten)
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("4"
                                                                                        (hide
                                                                                         2)
                                                                                        (("4"
                                                                                          (skeep)
                                                                                          (("4"
                                                                                            (expand
                                                                                             "closed_interval"
                                                                                             1
                                                                                             1)
                                                                                            (("4"
                                                                                              (propax)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("5"
                                                                                        (hide
                                                                                         2)
                                                                                        (("5"
                                                                                          (skeep)
                                                                                          (("5"
                                                                                            (typepred
                                                                                             "x")
                                                                                            (("5"
                                                                                              (expand
                                                                                               "closed_interval"
                                                                                               1
                                                                                               1)
                                                                                              (("5"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide
                                                                     2)
                                                                    (("2"
                                                                      (split
                                                                       1)
                                                                      (("1"
                                                                        (inst
                                                                         1
                                                                         "n")
                                                                        (("1"
                                                                          (skeep)
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (lemma
                                                                         "restrict_derivable[(closed_interval(a,c)),(closed_interval(a,b))]")
                                                                        (("1"
                                                                          (inst
                                                                           -1
                                                                           "n"
                                                                           "ode_sol(interval_def.closed_interval(a, c), n, f)(y0)")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (expand
                                                                               "restrict"
                                                                               -1)
                                                                              (("1"
                                                                                (case
                                                                                 "(LAMBDA (s: (closed_interval(a, b))):
                                            ode_sol(interval_def.closed_interval(a, c), n, f)(y0)(s)) =  (LAMBDA (x:
                                                     reals@intervals_real[reals.real].closed_interval(a,
                                                                                                      b)):
                                             ode_sol(interval_def.closed_interval(a, c), n, f)(y0)(x))")
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil)
                                                                                 ("2"
                                                                                  (decompose-equality
                                                                                   1)
                                                                                  (("1"
                                                                                    (skeep)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "closed_interval"
                                                                                       1
                                                                                       1)
                                                                                      (("1"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (skeep)
                                                                                    (("2"
                                                                                      (hide
                                                                                       -)
                                                                                      (("2"
                                                                                        (typepred
                                                                                         "x")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "closed_interval"
                                                                                           1
                                                                                           1)
                                                                                          (("2"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("3"
                                                                                    (skeep)
                                                                                    (("3"
                                                                                      (expand
                                                                                       "closed_interval"
                                                                                       1
                                                                                       1)
                                                                                      (("3"
                                                                                        (assert)
                                                                                        (("3"
                                                                                          (typepred
                                                                                           "s")
                                                                                          (("3"
                                                                                            (expand
                                                                                             "closed_interval"
                                                                                             -1
                                                                                             1)
                                                                                            (("3"
                                                                                              (flatten)
                                                                                              (("3"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("3"
                                                                                  (skeep)
                                                                                  (("3"
                                                                                    (expand
                                                                                     "closed_interval"
                                                                                     1
                                                                                     1)
                                                                                    (("3"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("4"
                                                                                  (skeep)
                                                                                  (("4"
                                                                                    (expand
                                                                                     "closed_interval"
                                                                                     1
                                                                                     1)
                                                                                    (("4"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("5"
                                                                                  (skeep)
                                                                                  (("5"
                                                                                    (typepred
                                                                                     "s")
                                                                                    (("5"
                                                                                      (expand
                                                                                       "closed_interval")
                                                                                      (("5"
                                                                                        (flatten)
                                                                                        (("5"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (skeep)
                                                                          (("2"
                                                                            (expand
                                                                             "closed_interval")
                                                                            (("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("3"
                                                                    (hide
                                                                     2)
                                                                    (("3"
                                                                      (skeep)
                                                                      (("3"
                                                                        (expand
                                                                         "closed_interval"
                                                                         1
                                                                         1)
                                                                        (("3"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("4"
                                                                    (hide
                                                                     2)
                                                                    (("4"
                                                                      (skeep)
                                                                      (("4"
                                                                        (expand
                                                                         "closed_interval")
                                                                        (("4"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        (("2"
                                                          (hide 2)
                                                          (("2"
                                                            (split 1)
                                                            (("1"
                                                              (expand
                                                               "closed_interval")
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              (("2"
                                                                (typepred
                                                                 "d_b[closed_interval(a, c)]")
                                                                (("2"
                                                                  (expand
                                                                   "closed_interval"
                                                                   -6)
                                                                  (("2"
                                                                    (expand
                                                                     "closed_interval"
                                                                     -)
                                                                    (("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (inst
                                                                           -7
                                                                           "x!2")
                                                                          (("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide 2)
                                                    (("2"
                                                      (hide -)
                                                      (("2"
                                                        (lemma "ci_ci")
                                                        (("2"
                                                          (inst
                                                           -1
                                                           "a"
                                                           "c")
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (hide 2)
                                                    (("3"
                                                      (lemma "ci_ci")
                                                      (("3"
                                                        (inst?)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (skeep)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (hide -)
                                                      (("2"
                                                        (typepred
                                                         "(deriv[closed_interval(a, b)]
               (LAMBDA (x: closed_interval[real](a, b)):
                  ode_sol(closed_interval(a, c), n, f)(y0)(x)))")
                                                        (("1"
                                                          (expand
                                                           "length"
                                                           -2
                                                           2)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (skeep)
                                                              (("1"
                                                                (expand
                                                                 "length"
                                                                 -2
                                                                 1)
                                                                (("1"
                                                                  (inst-cp
                                                                   -1
                                                                   "choose[real](closed_interval(a,b))")
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     "x_1")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide 2)
                                                          (("2"
                                                            (split 1)
                                                            (("1"
                                                              (inst
                                                               1
                                                               "n")
                                                              (("1"
                                                                (skeep)
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (lemma
                                                               "derivable_subtype[(closed_interval(a, c)), (closed_interval(a, b))]")
                                                              (("1"
                                                                (lemma
                                                                 "restrict_derivable[(closed_interval(a,c)),(closed_interval(a,b))]")
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "n"
                                                                   "ode_sol(interval_def.closed_interval(a, c), n, f)(y0)")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (expand
                                                                       "restrict"
                                                                       -1
                                                                       1)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (hide
                                                                           -2)
                                                                          (("1"
                                                                            (case
                                                                             "(LAMBDA (s: (closed_interval(a, b))):
                                                 ode_sol(interval_def.closed_interval(a, c), n, f)(y0)(s)) = ((LAMBDA (x:
                                                          reals@intervals_real[reals.real].closed_interval(a,
                                                                                                           b)):
                                                  ode_sol(interval_def.closed_interval(a, c), n, f)(y0)(x)))")
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil)
                                                                             ("2"
                                                                              (hide
                                                                               2)
                                                                              (("2"
                                                                                (decompose-equality
                                                                                 1)
                                                                                (("1"
                                                                                  (skeep)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "closed_interval")
                                                                                    (("1"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (skeep)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "closed_interval?"
                                                                                     1)
                                                                                    (("2"
                                                                                      (inst
                                                                                       1
                                                                                       "a"
                                                                                       "c")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("3"
                                                                                  (skeep)
                                                                                  (("3"
                                                                                    (typepred
                                                                                     "x")
                                                                                    (("3"
                                                                                      (expand
                                                                                       "closed_interval"
                                                                                       1)
                                                                                      (("3"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("4"
                                                                                  (skeep)
                                                                                  (("4"
                                                                                    (assert)
                                                                                    (("4"
                                                                                      (expand
                                                                                       "closed_interval?"
                                                                                       1)
                                                                                      (("4"
                                                                                        (inst
                                                                                         1
                                                                                         "a"
                                                                                         "c")
                                                                                        (("4"
                                                                                          (expand
                                                                                           "closed_interval?"
                                                                                           1)
                                                                                          (("4"
                                                                                            (skeep)
                                                                                            (("4"
                                                                                              (expand
                                                                                               "closed_interval"
                                                                                               1
                                                                                               1)
                                                                                              (("4"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("5"
                                                                                  (skeep)
                                                                                  (("5"
                                                                                    (expand
                                                                                     "closed_interval"
                                                                                     1)
                                                                                    (("5"
                                                                                      (typepred
                                                                                       "s")
                                                                                      (("5"
                                                                                        (expand
                                                                                         "closed_interval"
                                                                                         -1)
                                                                                        (("5"
                                                                                          (flatten)
                                                                                          (("5"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("3"
                                                                              (hide
                                                                               2)
                                                                              (("3"
                                                                                (skeep)
                                                                                (("3"
                                                                                  (expand
                                                                                   "closed_interval"
                                                                                   1
                                                                                   1)
                                                                                  (("3"
                                                                                    (propax)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("4"
                                                                              (hide
                                                                               2)
                                                                              (("4"
                                                                                (skeep)
                                                                                (("4"
                                                                                  (expand
                                                                                   "closed_interval"
                                                                                   1
                                                                                   1)
                                                                                  (("4"
                                                                                    (expand
                                                                                     "closed_interval?"
                                                                                     1
                                                                                     1)
                                                                                    (("4"
                                                                                      (inst
                                                                                       1
                                                                                       "a"
                                                                                       "c")
                                                                                      (("4"
                                                                                        (expand
                                                                                         "closed_interval?"
                                                                                         1)
                                                                                        (("4"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("5"
                                                                              (hide
                                                                               2)
                                                                              (("5"
                                                                                (skeep)
                                                                                (("5"
                                                                                  (typepred
                                                                                   "x")
                                                                                  (("5"
                                                                                    (expand
                                                                                     "closed_interval"
                                                                                     1
                                                                                     1)
                                                                                    (("5"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("6"
                                                                              (hide
                                                                               2)
                                                                              (("6"
                                                                                (skeep)
                                                                                (("6"
                                                                                  (expand
                                                                                   "closed_interval?"
                                                                                   1
                                                                                   1)
                                                                                  (("6"
                                                                                    (inst
                                                                                     1
                                                                                     "a"
                                                                                     "c")
                                                                                    (("6"
                                                                                      (expand
                                                                                       "closed_interval?"
                                                                                       1
                                                                                       1)
                                                                                      (("6"
                                                                                        (skeep)
                                                                                        (("6"
                                                                                          (expand
                                                                                           "closed_interval"
                                                                                           1
                                                                                           1)
                                                                                          (("6"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide
                                                                     2)
                                                                    (("2"
                                                                      (expand
                                                                       "closed_interval?"
                                                                       1
                                                                       1)
                                                                      (("2"
                                                                        (inst
                                                                         1
                                                                         "a"
                                                                         "c")
                                                                        (("2"
                                                                          (expand
                                                                           "closed_interval?"
                                                                           1
                                                                           1)
                                                                          (("2"
                                                                            (skeep)
                                                                            (("2"
                                                                              (expand
                                                                               "closed_interval"
                                                                               1
                                                                               1)
                                                                              (("2"
                                                                                (propax)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide
                                                                   2)
                                                                  (("2"
                                                                    (skeep)
                                                                    (("2"
                                                                      (expand
                                                                       "closed_interval")
                                                                      (("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide
                                                                 2)
                                                                (("2"
                                                                  (lemma
                                                                   "ci_not_one_element")
                                                                  (("2"
                                                                    (inst
                                                                     -1
                                                                     "closed_interval(a,c)")
                                                                    (("2"
                                                                      (lemma
                                                                       "ci_ci")
                                                                      (("2"
                                                                        (inst
                                                                         -1
                                                                         "a"
                                                                         "c")
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (hide
                                                                 2)
                                                                (("3"
                                                                  (lemma
                                                                   "ci_deriv_domain")
                                                                  (("3"
                                                                    (inst
                                                                     -1
                                                                     "closed_interval(a,c)")
                                                                    (("3"
                                                                      (lemma
                                                                       "ci_ci")
                                                                      (("3"
                                                                        (inst
                                                                         -1
                                                                         "a"
                                                                         "c")
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("4"
                                                                (hide
                                                                 2)
                                                                (("4"
                                                                  (skeep)
                                                                  (("4"
                                                                    (typepred
                                                                     "x")
                                                                    (("4"
                                                                      (expand
                                                                       "closed_interval")
                                                                      (("4"
                                                                        (flatten)
                                                                        (("4"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("3"
                                                          (hide 2)
                                                          (("3"
                                                            (skeep)
                                                            (("3"
                                                              (assert)
                                                              (("3"
                                                                (expand
                                                                 "closed_interval")
                                                                (("3"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("4"
                                                          (hide 2)
                                                          (("4"
                                                            (skeep)
                                                            (("4"
                                                              (expand
                                                               "closed_interval?"
                                                               1
                                                               1)
                                                              (("4"
                                                                (inst
                                                                 1
                                                                 "a"
                                                                 "c")
                                                                (("4"
                                                                  (expand
                                                                   "closed_interval?"
                                                                   1
                                                                   1)
                                                                  (("4"
                                                                    (skeep)
                                                                    (("4"
                                                                      (assert)
                                                                      (("4"
                                                                        (expand
                                                                         "closed_interval"
                                                                         1
                                                                         1)
                                                                        (("4"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("5"
                                                          (hide 2)
                                                          (("5"
                                                            (skeep)
                                                            (("5"
                                                              (typepred
                                                               "x")
                                                              (("5"
                                                                (expand
                                                                 "closed_interval"
                                                                 1
                                                                 1)
                                                                (("5"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (skeep)
                                                  (("3"
                                                    (split 1)
                                                    (("1"
                                                      (inst 1 "n")
                                                      (("1"
                                                        (skeep)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide
                                                       -2
                                                       -3
                                                       -4
                                                       -5)
                                                      (("2"
                                                        (lemma
                                                         "restrict_derivable[(closed_interval(a,c)),(closed_interval(a,b))]")
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "n"
                                                           " ode_sol(closed_interval(a, c), n, f)(y0) ")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (expand
                                                               "restrict"
                                                               -1)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (case
                                                                   "(LAMBDA (s: (closed_interval(a, b))):
                                      ode_sol(interval_def.closed_interval(a, c), n, f)(y0)(s)) =  (LAMBDA (x:
                                               reals@intervals_real[reals.real].closed_interval(a,
                                                                                                b)):
                                       ode_sol(interval_def.closed_interval(a, c), n, f)(y0)(x))")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (decompose-equality
                                                                     1)
                                                                    (("1"
                                                                      (skeep)
                                                                      (("1"
                                                                        (expand
                                                                         "closed_interval"
                                                                         1
                                                                         1)
                                                                        (("1"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (skeep)
                                                                      (("2"
                                                                        (expand
                                                                         "closed_interval"
                                                                         1
                                                                         1)
                                                                        (("2"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("3"
                                                                      (skeep)
                                                                      (("3"
                                                                        (expand
                                                                         "closed_interval"
                                                                         1
                                                                         1)
                                                                        (("3"
                                                                          (typepred
                                                                           "s")
                                                                          (("3"
                                                                            (expand
                                                                             "closed_interval"
                                                                             -1
                                                                             1)
                                                                            (("3"
                                                                              (flatten)
                                                                              (("3"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("3"
                                                                    (skeep)
                                                                    (("3"
                                                                      (expand
                                                                       "closed_interval"
                                                                       1
                                                                       1)
                                                                      (("3"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("4"
                                                                    (skeep)
                                                                    (("4"
                                                                      (expand
                                                                       "closed_interval"
                                                                       1
                                                                       1)
                                                                      (("4"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("5"
                                                                    (skeep)
                                                                    (("5"
                                                                      (expand
                                                                       "closed_interval"
                                                                       1
                                                                       1)
                                                                      (("5"
                                                                        (typepred
                                                                         "s")
                                                                        (("5"
                                                                          (expand
                                                                           "closed_interval"
                                                                           -1
                                                                           1)
                                                                          (("5"
                                                                            (flatten)
                                                                            (("5"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (skeep)
                                                          (("2"
                                                            (expand
                                                             "closed_interval")
                                                            (("2"
                                                              (flatten)
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("4"
                                                  (skeep)
                                                  (("4"
                                                    (skeep)
                                                    (("4"
                                                      (expand
                                                       "closed_interval"
                                                       1
                                                       1)
                                                      (("4"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("5"
                                                  (skeep)
                                                  (("5"
                                                    (hide -)
                                                    (("5"
                                                      (typepred "x")
                                                      (("5"
                                                        (expand
                                                         "closed_interval"
                                                         1
                                                         1)
                                                        (("5"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("6"
                                                  (skeep)
                                                  (("6"
                                                    (hide -)
                                                    (("6"
                                                      (typepred "x")
                                                      (("6"
                                                        (expand
                                                         "closed_interval")
                                                        (("6"
                                                          (flatten)
                                                          (("6"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("7"
                                                  (skeep)
                                                  (("7"
                                                    (hide -)
                                                    (("7"
                                                      (lemma "ci_ci")
                                                      (("7"
                                                        (inst
                                                         -1
                                                         "a"
                                                         "b")
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (assert)
                                        (("2"
                                          (hide -4 -5 -6)
                                          (("2"
                                            (hide -1 -2)
                                            (("2"
                                              (case
                                               "car(d_b[closed_interval(a, c)]) = a")
                                              (("1"
                                                (case
                                                 "car(d_b[closed_interval(a, b)]) = a")
                                                (("1" (assert) nil nil)
                                                 ("2"
                                                  (typepred
                                                   "d_b[closed_interval(a, b)]")
                                                  (("2"
                                                    (hide -1)
                                                    (("2"
                                                      (expand
                                                       "closed_interval"
                                                       -2)
                                                      (("2"
                                                        (flatten)
                                                        (("2"
                                                          (inst -5 "a")
                                                          (("2"
                                                            (flatten)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (expand
                                                                 "closed_interval"
                                                                 1)
                                                                (("2"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (expand
                                                   "closed_interval?"
                                                   1
                                                   1)
                                                  (("3"
                                                    (inst 1 "a" "b")
                                                    (("3"
                                                      (expand
                                                       "closed_interval?"
                                                       1)
                                                      (("3"
                                                        (skeep)
                                                        (("3"
                                                          (expand
                                                           "closed_interval"
                                                           1
                                                           1)
                                                          (("3"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (typepred
                                                 "d_b[closed_interval(a, c)]")
                                                (("2"
                                                  (expand
                                                   "closed_interval"
                                                   -3)
                                                  (("2"
                                                    (inst -5 "a")
                                                    (("2"
                                                      (flatten)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (expand
                                                           "closed_interval"
                                                           1)
                                                          (("2"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide 2)
                          (("2" (hide -)
                            (("2" (lemma "ci_ci")
                              (("2" (inst?) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide 2)
                  (("2" (hide -2)
                    (("2" (assert)
                      (("2"
                        (lemma
                         "restrict_derivable[(closed_interval(a,c)),(closed_interval(a,b))]")
                        (("1"
                          (inst -1 "n"
                           "ode_sol(closed_interval(a, c), n, f)(y0)")
                          (("1" (assert)
                            (("1" (expand "restrict" -1 1)
                              (("1"
                                (assert)
                                (("1"
                                  (case
                                   "(LAMBDA (s: (closed_interval(a, b))):
                              ode_sol(interval_def.closed_interval(a, c), n, f)(y0)(s)) =  (LAMBDA (x:
                                       reals@intervals_real[reals.real].closed_interval(a,
                                                                                        b)):
                               ode_sol(interval_def.closed_interval(a, c), n, f)(y0)(x))")
                                  (("1" (assert) nil nil)
                                   ("2"
                                    (decompose-equality 1)
                                    (("1"
                                      (skeep)
                                      (("1"
                                        (expand "closed_interval" 1 1)
                                        (("1" (propax) nil nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (skeep)
                                      (("2"
                                        (expand "closed_interval?" 1 1)
                                        (("2"
                                          (inst 1 "a" "c")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (skeep)
                                      (("3"
                                        (expand "closed_interval")
                                        (("3" (propax) nil nil))
                                        nil))
                                      nil)
                                     ("4"
                                      (skeep)
                                      (("4"
                                        (expand "closed_interval?" 1 1)
                                        (("4"
                                          (inst 1 "a" "c")
                                          (("4"
                                            (expand
                                             "closed_interval?"
                                             1
                                             1)
                                            (("4"
                                              (skeep)
                                              (("4"
                                                (expand
                                                 "closed_interval"
                                                 1
                                                 1)
                                                (("4"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("5"
                                      (skeep)
                                      (("5"
                                        (expand "closed_interval" 1 1)
                                        (("5"
                                          (typepred "s")
                                          (("5"
                                            (expand
                                             "closed_interval"
                                             -1)
                                            (("5"
                                              (flatten)
                                              (("5" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (skeep)
                                    (("3"
                                      (expand "closed_interval" 1 1)
                                      (("3" (propax) nil nil))
                                      nil))
                                    nil)
                                   ("4"
                                    (skeep)
                                    (("4"
                                      (expand "closed_interval?" 1 1)
                                      (("4"
                                        (inst 1 "a" "c")
                                        (("4"
                                          (expand
                                           "closed_interval?"
                                           1
                                           1)
                                          (("4"
                                            (skeep)
                                            (("4"
                                              (expand
                                               "closed_interval"
                                               1
                                               1)
                                              (("4" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("5"
                                    (skeep)
                                    (("5"
                                      (expand "closed_interval" 1 1)
                                      (("5" (propax) nil nil))
                                      nil))
                                    nil)
                                   ("6"
                                    (skeep)
                                    (("6"
                                      (expand "closed_interval?" 1 1)
                                      (("6"
                                        (inst 1 "a" "c")
                                        (("6"
                                          (expand
                                           "closed_interval?"
                                           1
                                           1)
                                          (("6"
                                            (skeep)
                                            (("6"
                                              (expand
                                               "closed_interval"
                                               1
                                               1)
                                              (("6" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("7"
                                    (skeep)
                                    (("7"
                                      (expand "closed_interval" 1 1)
                                      (("7"
                                        (typepred "s")
                                        (("7"
                                          (expand
                                           "closed_interval"
                                           -1
                                           1)
                                          (("7"
                                            (flatten)
                                            (("7" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand "closed_interval?" 1 1)
                            (("2" (inst 1 "a" "c")
                              (("2"
                                (expand "closed_interval?" 1 1)
                                (("2"
                                  (skeep)
                                  (("2"
                                    (expand "closed_interval" 1 1)
                                    (("2" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (skeep)
                          (("2" (expand "closed_interval")
                            (("2" (flatten) (("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (skeep)
                  (("3" (expand "closed_interval" 1 1)
                    (("3" (propax) nil nil)) nil))
                  nil)
                 ("4" (skeep)
                  (("4" (typepred "x")
                    (("4" (expand "closed_interval" 1 1)
                      (("4" (propax) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2"
            (lemma
             "restrict_Lip[(closed_interval(a,c)),(closed_interval(a,b))]")
            (("1"
              (lemma
               "restrict_cont[(closed_interval(a,c)),(closed_interval(a,b))]")
              (("1" (inst -1 "n" "f")
                (("1" (inst -2 "n" "f")
                  (("1" (assert)
                    (("1" (expand "restrict" -)
                      (("1" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide 2)
              (("2" (skeep)
                (("2" (expand "closed_interval")
                  (("2" (flatten) (("2" (assert) nil nil)) nil)) nil))
                nil))
              nil))
            nil)
           ("3" (skeep)
            (("3" (expand "closed_interval" 1 1)
              (("3" (typepred "x")
                (("3" (expand "closed_interval" -1 1)
                  (("3" (flatten) (("3" (assert) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (skeep)
        (("2" (expand "closed_interval")
          (("2" (flatten) (("2" (assert) nil nil)) nil)) nil))
        nil)
       ("3" (skeep)
        (("3" (expand "closed_interval?" 1 1)
          (("3" (inst 1 "a" "c")
            (("3" (expand "closed_interval?" 1 1)
              (("3" (skeep)
                (("3" (expand "closed_interval" 1 1)
                  (("3" (propax) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("4" (skeep)
        (("4" (typepred "t")
          (("4" (expand "closed_interval" 1 1)
            (("4" (expand "closed_interval" -1 1)
              (("4" (flatten) (("4" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (a skolem-const-decl "real" ODE_solution_existence_uniqueness nil)
    (b skolem-const-decl "{bb: real | bb > a}"
     ODE_solution_existence_uniqueness nil)
    (c skolem-const-decl "{cc: real | cc >= b}"
       ODE_solution_existence_uniqueness nil)
    (closed_interval? const-decl "bool" interval_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (od_f type-eq-decl nil ODE_def nil)
    (Lip_d? const-decl "bool" ODE_Lipschitz_def nil)
    (cont_d? const-decl "bool" ODE_continuous_def nil)
    (r2v_n type-eq-decl nil r2v_def nil)
    (r2v type-eq-decl nil r2v_def nil)
    (derivable? const-decl "bool" r2v_analysis nil)
    (<= const-decl "bool" reals nil)
    (ivt_s_unique? const-decl "bool" ODE_def nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (d_b const-decl "{dd: list[real] |
   (length(dd) = 2 AND (d(car(dd)) AND d(car(cdr(dd))))) AND
    FORALL (x: real): (car(dd) <= x AND x <= car(cdr(dd))) IFF d(x)}"
     r2v_continuous_extension nil)
    (ode_sol const-decl "{yy: r2v_n[d](n) |
   derivable?[d](yy) AND ivt_s_unique?[d](n, car(d_b[d]), f, y0)(yy)}"
     ODE_solution_existence_uniqueness nil)
    (restrict const-decl "VectorN(n)" restrict_ode nil)
    (VectorN type-eq-decl nil matrices matrices)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil) (> const-decl "bool" reals nil)
    (closed_interval const-decl "(closed_interval?(a, b))" interval_def
     nil)
    (closed_interval? const-decl "bool" interval_def nil)
    (< const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (ivt_s? const-decl "bool" ODE_def nil)
    (od_sol? const-decl "bool" ODE_def nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (x!2 skolem-const-decl
     "{xx: (closed_interval(a, b)) | xx >= car(d_b[closed_interval(a, b)])}"
     ODE_solution_existence_uniqueness nil)
    (i skolem-const-decl "{ii: nat |
   ii <
    length(LAMBDA (x:
                     reals@intervals_real[reals.real].closed_interval(a,
                                                                      b)):
             ode_sol(interval_def.closed_interval(a, c), n, f)(y0)(x))}"
       ODE_solution_existence_uniqueness nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nth const-decl "[(d) -> real]" r2v_def nil)
    (ci_not_one_element formula-decl nil interval_def nil)
    (ci_ci formula-decl nil interval_def nil)
    (ci_deriv_domain formula-decl nil interval_def nil)
    (restrict const-decl "R" restrict nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (deriv_domain? const-decl "bool" deriv_domain_def analysis)
    (derivable_subtype formula-decl nil derivatives_subtype analysis)
    (set type-eq-decl nil sets nil)
    (nonempty? const-decl "bool" sets nil)
    (choose const-decl "(p)" sets nil)
    (TRUE const-decl "bool" booleans nil)
    (deriv_nth formula-decl nil r2v_analysis nil)
    (below type-eq-decl nil naturalnumbers nil)
    (n_1 skolem-const-decl
     "below(length((r2v_analysis[interval_def.closed_interval(a, c)].deriv
                  (ode_sol(interval_def.closed_interval(a, c), n, f)(y0))
                  (x!2))))" ODE_solution_existence_uniqueness nil)
    (restrict_derivable formula-decl nil restrict_ode nil)
    (deriv_subtype_dd formula-decl nil derivatives_subtype analysis)
    (derivable? const-decl "bool" derivatives analysis)
    (deriv_fun type-eq-decl nil derivatives analysis)
    (deriv const-decl "[T -> real]" derivatives analysis)
    (list_extensionality formula-decl nil more_list_props structures)
    (od_fx const-decl "{ff: r2v_n(n) | length(ff) = n}" ODE_def nil)
    (deriv def-decl "{ff: r2v | length(ff) = length(f)}" r2v_analysis
     nil)
    (length const-decl "nat" r2v_def nil)
    (y0 skolem-const-decl "VectorN(n)"
     ODE_solution_existence_uniqueness nil)
    (f skolem-const-decl "{ff: od_f[(closed_interval(a, c))](n) |
   Lip_d?[(closed_interval(a, c))](n)(ff) AND
    cont_d?[(closed_interval(a, c))](n)(ff)}"
     ODE_solution_existence_uniqueness nil)
    (n skolem-const-decl "posnat" ODE_solution_existence_uniqueness
     nil)
    (closed_interval type-eq-decl nil intervals_real reals)
    (restrict_cont formula-decl nil restrict_ode nil)
    (restrict_Lip formula-decl nil restrict_ode nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis))
   shostak))
 (Lip_hp?_TCC1 0
  (Lip_hp?_TCC1-1 nil 3794133467 ("" (assuming-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (hp const-decl "bool" interval_def nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (nonempty? const-decl "bool" sets nil))
   nil
   (Lip_hp? assuming
    "ODE_def[(interval_def.hp(ODE_solution_existence_uniqueness.a))].ODE_def"
    "non_empty: ASSUMPTION sets[real].nonempty?(ODE_def.d)")))
 (Lip_hp?_TCC2 0
  (Lip_hp?_TCC2-1 nil 3794133467 ("" (assuming-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (hp const-decl "bool" interval_def nil)
    (connected? const-decl "bool" deriv_domain_def analysis))
   nil
   (Lip_hp? assuming
    "ODE_def[(interval_def.hp(ODE_solution_existence_uniqueness.a))].ODE_def"
    "connected: ASSUMPTION deriv_domain_def[(ODE_def.d)].connected?")))
 (Lip_hp?_TCC3 0
  (Lip_hp?_TCC3-1 nil 3794133467
   ("" (skeep)
    (("" (expand "not_one_element?" 1 1)
      (("" (skeep)
        (("" (inst 1 "x+1")
          (("1" (assert) nil nil)
           ("2" (typepred "x")
            (("2" (expand "hp") (("2" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((not_one_element? const-decl "bool" deriv_domain_def analysis)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (x skolem-const-decl "(hp(a))" ODE_solution_existence_uniqueness
     nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (a skolem-const-decl "real" ODE_solution_existence_uniqueness nil)
    (hp const-decl "bool" interval_def nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil))
   nil
   (Lip_hp? assuming
    "ODE_def[(interval_def.hp(ODE_solution_existence_uniqueness.a))].ODE_def"
    "not_one_element: ASSUMPTION deriv_domain_def[(ODE_def.d)].not_one_element?")))
 (Lip_hp?_TCC4 0
  (Lip_hp?_TCC4-1 nil 3794133467 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (closed_interval const-decl "(closed_interval?(a, b))" interval_def
     nil)
    (hp const-decl "bool" interval_def nil))
   nil
   (Lip_hp? subtype
    "(interval_def.closed_interval(ODE_solution_existence_uniqueness.a, ODE_solution_existence_uniqueness.b))"
    "{dd: [reals.real -> booleans.bool] | FORALL (t: reals.real): booleans.IMPLIES(dd(t), interval_def.hp(ODE_solution_existence_uniqueness.a)(t))}")))
 (Lip_hp?_TCC5 0
  (Lip_hp?_TCC5-1 nil 3794133467 ("" (assuming-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (closed_interval const-decl "(closed_interval?(a, b))" interval_def
     nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (nonempty? const-decl "bool" sets nil))
   nil
   (Lip_hp? assuming
    "restrict_ode[(interval_def.hp(ODE_solution_existence_uniqueness.a)), (interval_def.closed_interval(ODE_solution_existence_uniqueness.a, ODE_solution_existence_uniqueness.b))].restrict_ode"
    "non_empty2: ASSUMPTION sets[real].nonempty?(restrict_ode.d2)")))
 (Lip_hp?_TCC6 0
  (Lip_hp?_TCC6-1 nil 3794133467 ("" (assuming-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (closed_interval? const-decl "bool" interval_def nil)
    (< const-decl "bool" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (closed_interval const-decl "(closed_interval?(a, b))" interval_def
     nil)
    (connected? const-decl "bool" deriv_domain_def analysis))
   nil
   (Lip_hp? assuming
    "restrict_ode[(interval_def.hp(ODE_solution_existence_uniqueness.a)), (interval_def.closed_interval(ODE_solution_existence_uniqueness.a, ODE_solution_existence_uniqueness.b))].restrict_ode"
    "connected2: ASSUMPTION deriv_domain_def[(restrict_ode.d2)].connected?")))
 (Lip_hp?_TCC7 0
  (Lip_hp?_TCC7-1 nil 3794133467
   ("" (skeep)
    (("" (lemma "ci_not_one_element")
      (("" (inst -1 "closed_interval(a, b)")
        (("" (lemma "ci_ci") (("" (inst?) nil nil)) nil)) nil))
      nil))
    nil)
   ((ci_not_one_element formula-decl nil interval_def nil)
    (ci_ci formula-decl nil interval_def nil)
    (a skolem-const-decl "real" ODE_solution_existence_uniqueness nil)
    (b skolem-const-decl "{bb: real | bb > a}"
     ODE_solution_existence_uniqueness nil)
    (> const-decl "bool" reals nil)
    (closed_interval const-decl "(closed_interval?(a, b))" interval_def
     nil)
    (closed_interval? const-decl "bool" interval_def nil)
    (< const-decl "bool" reals nil)
    (closed_interval? const-decl "bool" interval_def nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (Lip_hp? assuming
    "restrict_ode[(interval_def.hp(ODE_solution_existence_uniqueness.a)), (interval_def.closed_interval(ODE_solution_existence_uniqueness.a, ODE_solution_existence_uniqueness.b))].restrict_ode"
    "not_one_element2: ASSUMPTION deriv_domain_def[(restrict_ode.d2)].not_one_element?")))
 (ode_sol_restrict_hp_TCC1 0
  (ode_sol_restrict_hp_TCC1-1 nil 3794684107 ("" (subtype-tcc) nil nil)
   ((hp const-decl "bool" interval_def nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil
   (ode_sol_restrict_hp subtype "ODE_solution_existence_uniqueness.a"
    "(interval_def.hp(ODE_solution_existence_uniqueness.a))")))
 (ode_sol_restrict_hp_TCC2 0
  (ode_sol_restrict_hp_TCC2-1 nil 3794684107
   ("" (skeep)
    (("" (skeep)
      (("" (typepred "t")
        (("" (expand "closed_interval" -1)
          (("" (expand "hp" 1) (("" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (hp const-decl "bool" interval_def nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (< const-decl "bool" reals nil)
    (closed_interval? const-decl "bool" interval_def nil)
    (closed_interval const-decl "(closed_interval?(a, b))" interval_def
     nil)
    (> const-decl "bool" reals nil))
   nil
   (ode_sol_restrict_hp subtype "ODE_solution_existence_uniqueness.t"
    "(interval_def.hp(ODE_solution_existence_uniqueness.a))")))
 (ode_sol_restrict_hp_TCC3 0
  (ode_sol_restrict_hp_TCC3-1 nil 3794689349
   ("" (skeep)
    (("" (skeep)
      (("" (typepred "y")
        (("" (expand "length" -3)
          (("" (skeep)
            (("" (inst-cp -1 "choose[real]((hp(a)))")
              (("" (inst-cp -1 "t") (("" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((choose const-decl "(p)" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis)
    (< const-decl "bool" reals nil)
    (closed_interval? const-decl "bool" interval_def nil)
    (closed_interval const-decl "(closed_interval?(a, b))" interval_def
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (hp const-decl "bool" interval_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (length def-decl "nat" list_props nil)
    (r2v type-eq-decl nil r2v_def nil)
    (derivable? const-decl "bool" r2v_analysis nil)
    (length const-decl "nat" r2v_def nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil))
   nil
   (ode_sol_restrict_hp subtype
    "ODE_solution_existence_uniqueness.y(ODE_solution_existence_uniqueness.t)"
    "matrices.VectorN(ODE_solution_existence_uniqueness.n)")))
 (ode_sol_restrict_hp_TCC4 0
  (ode_sol_restrict_hp_TCC4-1 nil 3794689349
   ("" (skeep)
    (("" (typepred "y")
      (("" (skeep)
        (("" (expand "derivable?")
          (("" (skeep)
            (("" (inst -2 "i")
              (("1"
                (lemma
                 "derivable_subtype[(hp(a)), (closed_interval(a,b))]")
                (("1" (inst?)
                  (("1" (assert)
                    (("1" (split -1)
                      (("1" (expand "restrict" -1)
                        (("1" (assert)
                          (("1" (expand "nth" 1 1)
                            (("1" (assert)
                              (("1"
                                (expand "nth" -1 1)
                                (("1" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide 2)
                        (("2" (lemma "ci_deriv_domain")
                          (("2" (inst -1 "(closed_interval(a,b))")
                            (("2" (lemma "ci_ci")
                              (("2" (inst?) nil nil)) nil))
                            nil))
                          nil))
                        nil)
                       ("3" (assert)
                        (("3" (lemma "ci_not_one_element")
                          (("3" (inst -1 "(closed_interval(a,b))")
                            (("3" (lemma "ci_ci")
                              (("3" (inst?) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert)
                  (("2" (lemma "hp_noe") (("2" (inst -1 "a") nil nil))
                    nil))
                  nil)
                 ("3" (assert)
                  (("3" (lemma "hp_dd") (("3" (inst -1 "a") nil nil))
                    nil))
                  nil)
                 ("4" (assert)
                  (("4" (skeep)
                    (("4" (typepred "x")
                      (("4" (expand "closed_interval" -)
                        (("4" (expand "hp" 1) (("4" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (typepred "i")
                (("2" (expand "length" 1 1)
                  (("2" (expand "length" -1 1)
                    (("2" (skeep -2)
                      (("2" (expand "length" -3 1)
                        (("2" (inst-cp -2 "choose[real]((hp(a)))")
                          (("2"
                            (inst -2
                             "choose[real]((closed_interval(a,b)))")
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length const-decl "nat" r2v_def nil)
    (derivable? const-decl "bool" r2v_analysis nil)
    (r2v type-eq-decl nil r2v_def nil)
    (length def-decl "nat" list_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (hp const-decl "bool" interval_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (i skolem-const-decl
       "{ii: nat | ii < length(LAMBDA (t: (closed_interval(a, b))): y(t))}"
       ODE_solution_existence_uniqueness nil)
    (y skolem-const-decl
     "({yy: (derivable?[(hp(a))]) | length[(hp(a))](yy) = n})"
     ODE_solution_existence_uniqueness nil)
    (n skolem-const-decl "posnat" ODE_solution_existence_uniqueness
     nil)
    (b skolem-const-decl "{bb: real | bb > a}"
     ODE_solution_existence_uniqueness nil)
    (a skolem-const-decl "real" ODE_solution_existence_uniqueness nil)
    (closed_interval const-decl "(closed_interval?(a, b))" interval_def
     nil)
    (closed_interval? const-decl "bool" interval_def nil)
    (< const-decl "bool" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (hp_dd formula-decl nil interval_def nil)
    (hp_noe formula-decl nil interval_def nil)
    (nth const-decl "[(d) -> real]" r2v_def nil)
    (restrict const-decl "R" restrict nil)
    (ci_deriv_domain formula-decl nil interval_def nil)
    (ci_ci formula-decl nil interval_def nil)
    (closed_interval? const-decl "bool" interval_def nil)
    (ci_not_one_element formula-decl nil interval_def nil)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (deriv_domain? const-decl "bool" deriv_domain_def analysis)
    (derivable_subtype formula-decl nil derivatives_subtype analysis)
    (choose const-decl "(p)" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis))
   nil
   (ode_sol_restrict_hp subtype
    "LAMBDA (t: (interval_def.closed_interval(ODE_solution_existence_uniqueness.a, ODE_solution_existence_uniqueness.b))): ODE_solution_existence_uniqueness.y(t)"
    "{yy: r2v_def[(interval_def.closed_interval(ODE_solution_existence_uniqueness.a, ODE_solution_existence_uniqueness.b))].r2v_n(ODE_solution_existence_uniqueness.n) | r2v_analysis[(interval_def.closed_interval(ODE_solution_existence_uniqueness.a, ODE_solution_existence_uniqueness.b))].derivable?(yy)}")))
 (ode_sol_restrict_hp_TCC5 0
  (ode_sol_restrict_hp_TCC3-1 nil 3794684107
   ("" (skeep)
    (("" (skeep)
      (("" (expand "closed_interval" 1 1) (("" (propax) nil nil)) nil))
      nil))
    nil)
   ((closed_interval const-decl "(closed_interval?(a, b))" interval_def
     nil))
   nil
   (ode_sol_restrict_hp subtype "ODE_solution_existence_uniqueness.a"
    "(interval_def.closed_interval(ODE_solution_existence_uniqueness.a, ODE_solution_existence_uniqueness.b))")))
 (ode_sol_restrict_hp 0
  (ode_sol_restrict_hp-1 nil 3794731002
   ("" (skeep)
    (("" (skeep)
      (("" (expand "od_sol?")
        (("" (decompose-equality 1)
          (("1" (decompose-equality -1)
            (("1" (inst -1 "x!1")
              (("1" (expand "restrict" 1)
                (("1" (expand "od_fx")
                  (("1" (lemma "list_extensionality")
                    (("1" (inst?)
                      (("1" (flatten)
                        (("1" (split -1)
                          (("1" (hide -2)
                            (("1" (flatten)
                              (("1"
                                (hide -3)
                                (("1"
                                  (lemma "list_extensionality")
                                  (("1"
                                    (inst?)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (hide 2)
                                          (("1"
                                            (hide -1)
                                            (("1"
                                              (split 1)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (lemma
                                                   "ode_sol_restrict_hp_TCC4")
                                                  (("1"
                                                    (inst
                                                     -1
                                                     "n"
                                                     "a"
                                                     "f"
                                                     "y")
                                                    (("1"
                                                      (expand
                                                       "od_sol?"
                                                       -1)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (inst -1 "b")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (typepred
                                                               "y")
                                                              (("1"
                                                                (skeep)
                                                                (("1"
                                                                  (inst-cp
                                                                   -1
                                                                   "choose[real]((hp(a)))")
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     "choose[real]((closed_interval(a,b)))")
                                                                    (("1"
                                                                      (typepred
                                                                       "deriv(LAMBDA (t: (closed_interval(a, b))): y(t))")
                                                                      (("1"
                                                                        (typepred
                                                                         "deriv(y)")
                                                                        (("1"
                                                                          (skeep)
                                                                          (("1"
                                                                            (skeep)
                                                                            (("1"
                                                                              (expand
                                                                               "length"
                                                                               -2)
                                                                              (("1"
                                                                                (inst-cp
                                                                                 -3
                                                                                 "choose[real]((closed_interval(a,b)))")
                                                                                (("1"
                                                                                  (inst
                                                                                   -3
                                                                                   "x!1")
                                                                                  (("1"
                                                                                    (inst-cp
                                                                                     -1
                                                                                     "choose[real]((hp(a)))")
                                                                                    (("1"
                                                                                      (inst-cp
                                                                                       -1
                                                                                       "x!1")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (replace
                                                                                           -13
                                                                                           1)
                                                                                          (("1"
                                                                                            (replace
                                                                                             -2
                                                                                             1)
                                                                                            (("1"
                                                                                              (replace
                                                                                               -3
                                                                                               1
                                                                                               rl)
                                                                                              (("1"
                                                                                                (replace
                                                                                                 -4
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "length"
                                                                                                   -7
                                                                                                   2)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "length"
                                                                                                       -7
                                                                                                       1)
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide
                                                                         2)
                                                                        (("2"
                                                                          (inst
                                                                           1
                                                                           "n")
                                                                          (("2"
                                                                            (skeep)
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (expand
                                                                                 "length"
                                                                                 -4)
                                                                                (("2"
                                                                                  (reveal
                                                                                   -)
                                                                                  (("2"
                                                                                    (hide
                                                                                     -4)
                                                                                    (("2"
                                                                                      (hide
                                                                                       -3)
                                                                                      (("2"
                                                                                        (inst
                                                                                         -1
                                                                                         "x")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("3"
                                                                        (skeep)
                                                                        (("3"
                                                                          (expand
                                                                           "hp"
                                                                           1)
                                                                          (("3"
                                                                            (assert)
                                                                            (("3"
                                                                              (typepred
                                                                               "t")
                                                                              (("3"
                                                                                (expand
                                                                                 "closed_interval")
                                                                                (("3"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (expand
                                                                         "hp"
                                                                         1)
                                                                        (("2"
                                                                          (typepred
                                                                           "choose[real]((closed_interval(a, b)))")
                                                                          (("2"
                                                                            (expand
                                                                             "closed_interval"
                                                                             -1)
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (flatten)
                                                                                (("2"
                                                                                  (expand
                                                                                   "closed_interval"
                                                                                   1)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("3"
                                                                      (lemma
                                                                       "ci_nonempty")
                                                                      (("3"
                                                                        (inst
                                                                         -1
                                                                         "closed_interval(a,b)")
                                                                        (("3"
                                                                          (lemma
                                                                           "ci_ci")
                                                                          (("3"
                                                                            (inst?)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (lemma
                                                                       "hp_ne")
                                                                      (("2"
                                                                        (inst
                                                                         -1
                                                                         "a")
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (assert)
                                                (("2"
                                                  (skeep)
                                                  (("2"
                                                    (inst -2 "n!1")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (lemma
                                                         "deriv_nth[(hp(a))]")
                                                        (("2"
                                                          (inst
                                                           -1
                                                           "y"
                                                           "n!1")
                                                          (("2"
                                                            (expand
                                                             "nth"
                                                             -1)
                                                            (("2"
                                                              (decompose-equality
                                                               -1)
                                                              (("1"
                                                                (inst
                                                                 -1
                                                                 "x!1")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (expand
                                                                     "deriv"
                                                                     -1
                                                                     2)
                                                                    (("1"
                                                                      (replace
                                                                       -1
                                                                       -3)
                                                                      (("1"
                                                                        (lemma
                                                                         "deriv_nth[(closed_interval(a,b))]")
                                                                        (("1"
                                                                          (inst
                                                                           -1
                                                                           "LAMBDA (t: (closed_interval(a, b))): y(t)"
                                                                           "n!1")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (decompose-equality
                                                                               -1)
                                                                              (("1"
                                                                                (inst
                                                                                 -1
                                                                                 "x!1")
                                                                                (("1"
                                                                                  (expand
                                                                                   "nth"
                                                                                   -1)
                                                                                  (("1"
                                                                                    (replace
                                                                                     -1
                                                                                     1)
                                                                                    (("1"
                                                                                      (hide
                                                                                       -2)
                                                                                      (("1"
                                                                                        (lemma
                                                                                         "deriv_subtype_dd[(hp(a)), (closed_interval(a,b))]")
                                                                                        (("1"
                                                                                          (inst
                                                                                           -1
                                                                                           "nth(y,n!1)")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (split
                                                                                               -1)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "restrict"
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (decompose-equality
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     -1
                                                                                                     "x!1")
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "deriv"
                                                                                                         -1)
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "nth"
                                                                                                             -1)
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (replace
                                                                                                                 -1
                                                                                                                 -4
                                                                                                                 rl)
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "deriv"
                                                                                                                   1
                                                                                                                   1)
                                                                                                                  (("1"
                                                                                                                    (propax)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (hide
                                                                                                     2)
                                                                                                    (("2"
                                                                                                      (typepred
                                                                                                       "y")
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "derivable?"
                                                                                                         -2)
                                                                                                        (("2"
                                                                                                          (inst
                                                                                                           -2
                                                                                                           "n!1")
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("3"
                                                                                                    (expand
                                                                                                     "hp")
                                                                                                    (("3"
                                                                                                      (expand
                                                                                                       "closed_interval")
                                                                                                      (("3"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("4"
                                                                                                    (lemma
                                                                                                     "ode_sol_restrict_hp_TCC4")
                                                                                                    (("4"
                                                                                                      (inst
                                                                                                       -1
                                                                                                       "n"
                                                                                                       "a"
                                                                                                       "f"
                                                                                                       "y")
                                                                                                      (("4"
                                                                                                        (split
                                                                                                         -1)
                                                                                                        (("1"
                                                                                                          (inst
                                                                                                           -1
                                                                                                           "b")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "derivable?"
                                                                                                               -1)
                                                                                                              (("1"
                                                                                                                (inst
                                                                                                                 -1
                                                                                                                 "n!1")
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "nth"
                                                                                                                   -1)
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    (("1"
                                                                                                                      (hide
                                                                                                                       2)
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         "nth"
                                                                                                                         1)
                                                                                                                        (("1"
                                                                                                                          (propax)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (assert)
                                                                                                                  (("2"
                                                                                                                    (hide
                                                                                                                     2)
                                                                                                                    (("2"
                                                                                                                      (hide
                                                                                                                       2)
                                                                                                                      (("2"
                                                                                                                        (hide
                                                                                                                         -2
                                                                                                                         -3
                                                                                                                         -4
                                                                                                                         -5)
                                                                                                                        (("2"
                                                                                                                          (typepred
                                                                                                                           "n!1")
                                                                                                                          (("2"
                                                                                                                            (expand
                                                                                                                             "length"
                                                                                                                             1
                                                                                                                             1)
                                                                                                                            (("2"
                                                                                                                              (typepred
                                                                                                                               "y")
                                                                                                                              (("2"
                                                                                                                                (skeep)
                                                                                                                                (("2"
                                                                                                                                  (inst-cp
                                                                                                                                   -1
                                                                                                                                   "choose[real]((closed_interval(a,b)))")
                                                                                                                                  (("2"
                                                                                                                                    (inst-cp
                                                                                                                                     -1
                                                                                                                                     "choose[real]((hp(a)))")
                                                                                                                                    (("1"
                                                                                                                                      (expand
                                                                                                                                       "length"
                                                                                                                                       -5
                                                                                                                                       1)
                                                                                                                                      (("1"
                                                                                                                                        (assert)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil)
                                                                                                                                     ("2"
                                                                                                                                      (lemma
                                                                                                                                       "hp_ne")
                                                                                                                                      (("2"
                                                                                                                                        (inst?)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (expand
                                                                                                           "od_sol?"
                                                                                                           1)
                                                                                                          (("2"
                                                                                                            (reveal
                                                                                                             -)
                                                                                                            (("2"
                                                                                                              (hide
                                                                                                               -11
                                                                                                               -12
                                                                                                               -13
                                                                                                               -14
                                                                                                               -15
                                                                                                               -16)
                                                                                                              (("2"
                                                                                                                (hide
                                                                                                                 -5
                                                                                                                 -6
                                                                                                                 -7
                                                                                                                 -8
                                                                                                                 -9)
                                                                                                                (("2"
                                                                                                                  (hide
                                                                                                                   -1
                                                                                                                   -2)
                                                                                                                  (("2"
                                                                                                                    (reveal
                                                                                                                     -)
                                                                                                                    (("2"
                                                                                                                      (hide
                                                                                                                       -16)
                                                                                                                      (("2"
                                                                                                                        (hide
                                                                                                                         -14)
                                                                                                                        (("2"
                                                                                                                          (hide
                                                                                                                           -20)
                                                                                                                          (("2"
                                                                                                                            (hide
                                                                                                                             -19)
                                                                                                                            (("2"
                                                                                                                              (hide
                                                                                                                               -18)
                                                                                                                              (("2"
                                                                                                                                (hide
                                                                                                                                 -17)
                                                                                                                                (("2"
                                                                                                                                  (hide
                                                                                                                                   -16)
                                                                                                                                  (("2"
                                                                                                                                    (decompose-equality
                                                                                                                                     1)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("5"
                                                                                                    (typepred
                                                                                                     "s!1")
                                                                                                    (("5"
                                                                                                      (expand
                                                                                                       "hp")
                                                                                                      (("5"
                                                                                                        (expand
                                                                                                         "closed_interval")
                                                                                                        (("5"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (typepred
                                                                                                 "y")
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "derivable?"
                                                                                                   -2)
                                                                                                  (("2"
                                                                                                    (inst
                                                                                                     -2
                                                                                                     "n!1")
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("3"
                                                                                                (hide
                                                                                                 -)
                                                                                                (("3"
                                                                                                  (hide
                                                                                                   2
                                                                                                   3)
                                                                                                  (("3"
                                                                                                    (lemma
                                                                                                     "ci_deriv_domain")
                                                                                                    (("3"
                                                                                                      (inst
                                                                                                       -1
                                                                                                       "(closed_interval(a,b))")
                                                                                                      (("3"
                                                                                                        (lemma
                                                                                                         "ci_ci")
                                                                                                        (("3"
                                                                                                          (inst?)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("4"
                                                                                                (assert)
                                                                                                (("4"
                                                                                                  (hide
                                                                                                   2)
                                                                                                  (("4"
                                                                                                    (hide
                                                                                                     -)
                                                                                                    (("4"
                                                                                                      (lemma
                                                                                                       "ci_not_one_element")
                                                                                                      (("4"
                                                                                                        (inst
                                                                                                         -1
                                                                                                         "(closed_interval(a,b))")
                                                                                                        (("4"
                                                                                                          (lemma
                                                                                                           "ci_ci")
                                                                                                          (("4"
                                                                                                            (inst?)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (hide
                                                                                           2)
                                                                                          (("2"
                                                                                            (hide
                                                                                             -1)
                                                                                            (("2"
                                                                                              (lemma
                                                                                               "hp_noe")
                                                                                              (("2"
                                                                                                (inst
                                                                                                 -1
                                                                                                 "a")
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("3"
                                                                                          (hide
                                                                                           2)
                                                                                          (("3"
                                                                                            (hide
                                                                                             -)
                                                                                            (("3"
                                                                                              (lemma
                                                                                               "hp_dd")
                                                                                              (("3"
                                                                                                (inst
                                                                                                 -1
                                                                                                 "a")
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("4"
                                                                                          (hide
                                                                                           2)
                                                                                          (("4"
                                                                                            (hide
                                                                                             -)
                                                                                            (("4"
                                                                                              (skeep)
                                                                                              (("4"
                                                                                                (typepred
                                                                                                 "x")
                                                                                                (("4"
                                                                                                  (expand
                                                                                                   "closed_interval")
                                                                                                  (("4"
                                                                                                    (expand
                                                                                                     "hp"
                                                                                                     1)
                                                                                                    (("4"
                                                                                                      (flatten)
                                                                                                      (("4"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (hide
                                                                                 2)
                                                                                (("2"
                                                                                  (inst
                                                                                   1
                                                                                   "n")
                                                                                  (("2"
                                                                                    (skeep)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (hide
                                                                                         -1
                                                                                         -2
                                                                                         -3
                                                                                         -4
                                                                                         -5)
                                                                                        (("2"
                                                                                          (typepred
                                                                                           "y")
                                                                                          (("2"
                                                                                            (expand
                                                                                             "length"
                                                                                             -3)
                                                                                            (("2"
                                                                                              (skeep
                                                                                               -1)
                                                                                              (("2"
                                                                                                (inst-cp
                                                                                                 -1
                                                                                                 "choose[real]((hp(a)))")
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   -1
                                                                                                   "x")
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("3"
                                                                                (hide
                                                                                 2)
                                                                                (("3"
                                                                                  (lemma
                                                                                   "restrict_derivable[(hp(a)), (closed_interval(a,b))]")
                                                                                  (("1"
                                                                                    (inst
                                                                                     -1
                                                                                     "n"
                                                                                     "y")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "restrict"
                                                                                         -1)
                                                                                        (("1"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (hide
                                                                                       2)
                                                                                      (("2"
                                                                                        (skeep)
                                                                                        (("2"
                                                                                          (hide
                                                                                           -)
                                                                                          (("2"
                                                                                            (typepred
                                                                                             "y")
                                                                                            (("2"
                                                                                              (expand
                                                                                               "length"
                                                                                               -3)
                                                                                              (("2"
                                                                                                (skeep)
                                                                                                (("2"
                                                                                                  (inst-cp
                                                                                                   -1
                                                                                                   "choose[real]((hp(a)))")
                                                                                                  (("2"
                                                                                                    (inst
                                                                                                     -1
                                                                                                     "x1")
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (hide
                                                                                     2)
                                                                                    (("2"
                                                                                      (skeep)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "closed_interval")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "hp")
                                                                                          (("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("4"
                                                                                (hide
                                                                                 2)
                                                                                (("4"
                                                                                  (inst
                                                                                   1
                                                                                   "n")
                                                                                  (("4"
                                                                                    (hide
                                                                                     -)
                                                                                    (("4"
                                                                                      (typepred
                                                                                       "y")
                                                                                      (("4"
                                                                                        (skeep)
                                                                                        (("4"
                                                                                          (skeep)
                                                                                          (("4"
                                                                                            (inst-cp
                                                                                             -1
                                                                                             "x")
                                                                                            (("4"
                                                                                              (inst
                                                                                               -1
                                                                                               "choose[real]((hp(a)))")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "length"
                                                                                                   -4)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (lemma
                                                                                                 "hp_ne")
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   -1
                                                                                                   "a")
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("5"
                                                                                (typepred
                                                                                 "t!1")
                                                                                (("5"
                                                                                  (expand
                                                                                   "closed_interval")
                                                                                  (("5"
                                                                                    (expand
                                                                                     "hp")
                                                                                    (("5"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (typepred
                                                                               "n!1")
                                                                              (("2"
                                                                                (expand
                                                                                 "length"
                                                                                 1
                                                                                 1)
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (typepred
                                                                                     "y")
                                                                                    (("2"
                                                                                      (hide
                                                                                       -5
                                                                                       -7)
                                                                                      (("2"
                                                                                        (skeep)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "length"
                                                                                           -3)
                                                                                          (("2"
                                                                                            (inst-cp
                                                                                             -1
                                                                                             "choose[real]((closed_interval(a,b)))")
                                                                                            (("2"
                                                                                              (inst-cp
                                                                                               -1
                                                                                               "choose[real]((hp(a)))")
                                                                                              (("2"
                                                                                                (typepred
                                                                                                 "deriv(y)")
                                                                                                (("2"
                                                                                                  (skeep)
                                                                                                  (("2"
                                                                                                    (inst-cp
                                                                                                     -1
                                                                                                     "choose[real]((hp(a)))")
                                                                                                    (("2"
                                                                                                      (inst-cp
                                                                                                       -1
                                                                                                       "x!1")
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("3"
                                                                            (split
                                                                             1)
                                                                            (("1"
                                                                              (inst
                                                                               1
                                                                               "n")
                                                                              (("1"
                                                                                (skeep)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (typepred
                                                                                     "y")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "length"
                                                                                       -3)
                                                                                      (("1"
                                                                                        (skeep
                                                                                         -1)
                                                                                        (("1"
                                                                                          (inst-cp
                                                                                           -1
                                                                                           "choose[real]((hp(a)))")
                                                                                          (("1"
                                                                                            (inst
                                                                                             -1
                                                                                             "x")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (hide
                                                                               2)
                                                                              (("2"
                                                                                (lemma
                                                                                 "restrict_derivable[(hp(a)), (closed_interval(a,b))]")
                                                                                (("1"
                                                                                  (inst
                                                                                   -1
                                                                                   "n"
                                                                                   "y")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "restrict"
                                                                                       -1)
                                                                                      (("1"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (hide
                                                                                     2)
                                                                                    (("2"
                                                                                      (skeep)
                                                                                      (("2"
                                                                                        (typepred
                                                                                         "y")
                                                                                        (("2"
                                                                                          (skeep)
                                                                                          (("2"
                                                                                            (inst-cp
                                                                                             -1
                                                                                             "x!1")
                                                                                            (("2"
                                                                                              (expand
                                                                                               "length"
                                                                                               -4)
                                                                                              (("2"
                                                                                                (inst-cp
                                                                                                 -1
                                                                                                 "choose[real]((hp(a)))")
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (inst-cp
                                                                                                     -1
                                                                                                     "x1")
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (hide
                                                                                   2)
                                                                                  (("2"
                                                                                    (hide
                                                                                     -)
                                                                                    (("2"
                                                                                      (skeep)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "closed_interval")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "hp")
                                                                                          (("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("4"
                                                                            (hide
                                                                             2)
                                                                            (("4"
                                                                              (skeep)
                                                                              (("4"
                                                                                (typepred
                                                                                 "t")
                                                                                (("4"
                                                                                  (expand
                                                                                   "closed_interval")
                                                                                  (("4"
                                                                                    (expand
                                                                                     "hp")
                                                                                    (("4"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide
                                                                 2)
                                                                (("2"
                                                                  (typepred
                                                                   "y")
                                                                  (("2"
                                                                    (expand
                                                                     "derivable?"
                                                                     -2)
                                                                    (("2"
                                                                      (inst
                                                                       -2
                                                                       "n!1")
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (expand
                                                                           "nth"
                                                                           -2)
                                                                          (("2"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("3"
                                                                (hide
                                                                 2)
                                                                (("3"
                                                                  (typepred
                                                                   "n!1")
                                                                  (("3"
                                                                    (replace
                                                                     -5
                                                                     -1)
                                                                    (("3"
                                                                      (typepred
                                                                       "deriv(y)")
                                                                      (("3"
                                                                        (expand
                                                                         "length"
                                                                         -2)
                                                                        (("3"
                                                                          (skeep)
                                                                          (("3"
                                                                            (inst-cp
                                                                             -1
                                                                             "x!2")
                                                                            (("3"
                                                                              (inst
                                                                               -1
                                                                               "choose[real]((hp(a)))")
                                                                              (("3"
                                                                                (assert)
                                                                                (("3"
                                                                                  (typepred
                                                                                   "y")
                                                                                  (("3"
                                                                                    (expand
                                                                                     "length"
                                                                                     -3)
                                                                                    (("3"
                                                                                      (skeep)
                                                                                      (("3"
                                                                                        (inst-cp
                                                                                         -1
                                                                                         "x!2")
                                                                                        (("3"
                                                                                          (assert)
                                                                                          (("3"
                                                                                            (inst-cp
                                                                                             -1
                                                                                             "choose[real]((hp(a)))")
                                                                                            (("3"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("4"
                                                                (hide
                                                                 2)
                                                                (("4"
                                                                  (typepred
                                                                   "n!1")
                                                                  (("4"
                                                                    (replace
                                                                     -5
                                                                     -1)
                                                                    (("4"
                                                                      (typepred
                                                                       "deriv(y)")
                                                                      (("4"
                                                                        (expand
                                                                         "length"
                                                                         -2)
                                                                        (("4"
                                                                          (skeep)
                                                                          (("4"
                                                                            (inst-cp
                                                                             -1
                                                                             "choose[real]((hp(a)))")
                                                                            (("4"
                                                                              (inst-cp
                                                                               -1
                                                                               "x1!1")
                                                                              (("4"
                                                                                (assert)
                                                                                (("4"
                                                                                  (typepred
                                                                                   "y")
                                                                                  (("4"
                                                                                    (skeep)
                                                                                    (("4"
                                                                                      (inst-cp
                                                                                       -1
                                                                                       "choose[real]((hp(a)))")
                                                                                      (("4"
                                                                                        (inst-cp
                                                                                         -1
                                                                                         "x1!1")
                                                                                        (("4"
                                                                                          (assert)
                                                                                          (("4"
                                                                                            (replace
                                                                                             -7
                                                                                             1)
                                                                                            (("4"
                                                                                              (inst-cp
                                                                                               -6
                                                                                               "x!1")
                                                                                              (("4"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide 2)
                                      (("2"
                                        (split 1)
                                        (("1"
                                          (inst 1 "n")
                                          (("1"
                                            (skeep)
                                            (("1"
                                              (typepred "y")
                                              (("1"
                                                (expand "length" -3)
                                                (("1"
                                                  (skeep)
                                                  (("1"
                                                    (inst-cp
                                                     -1
                                                     "choose[real]((hp(a)))")
                                                    (("1"
                                                      (inst -1 "x")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (typepred "y")
                                          (("2"
                                            (lemma
                                             "restrict_derivable[(hp(a)), (closed_interval(a,b))]")
                                            (("1"
                                              (inst -1 "n" "y")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand
                                                   "restrict"
                                                   -1)
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide 2)
                                                (("2"
                                                  (skeep)
                                                  (("2"
                                                    (expand
                                                     "length"
                                                     -3)
                                                    (("2"
                                                      (skeep)
                                                      (("2"
                                                        (inst-cp
                                                         -1
                                                         "x1")
                                                        (("2"
                                                          (inst-cp
                                                           -1
                                                           "choose[real]((hp(a)))")
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (skeep)
                                              (("2"
                                                (expand
                                                 "closed_interval")
                                                (("2"
                                                  (expand "hp" 1)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (skeep)
                                      (("3"
                                        (typepred "t")
                                        (("3"
                                          (expand "closed_interval")
                                          (("3"
                                            (expand "hp")
                                            (("3" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (propax) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (typepred "x!1")
                (("2" (expand "closed_interval")
                  (("2" (expand "hp") (("2" (propax) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("2" (hide -5)
              (("2" (typepred "y")
                (("2" (expand "length" -3)
                  (("2" (skeep)
                    (("2" (inst-cp -1 "x2!1")
                      (("2" (inst-cp -1 "choose[real]((hp(a)))")
                        (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (skeep)
            (("2" (hide -1)
              (("2"
                (typepred "deriv[(closed_interval(a, b))]
               (LAMBDA (t: (closed_interval(a, b))): y(t))")
                (("1" (expand "length" -2)
                  (("1" (skeep)
                    (("1"
                      (inst-cp -1
                       "choose[real]((closed_interval(a,b)))")
                      (("1" (inst-cp -1 "x")
                        (("1" (assert)
                          (("1" (typepred "y")
                            (("1" (skeep)
                              (("1"
                                (expand "length" -3)
                                (("1"
                                  (inst-cp
                                   -1
                                   "choose[real]((closed_interval(a,b)))")
                                  (("1"
                                    (inst-cp
                                     -1
                                     "choose[real]((hp(a)))")
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide 2)
                  (("2" (split 1)
                    (("1" (inst 1 "n")
                      (("1" (skeep)
                        (("1" (typepred "y")
                          (("1" (expand "length" -3)
                            (("1" (skeep)
                              (("1"
                                (inst-cp -1 "choose[real]((hp(a)))")
                                (("1"
                                  (inst-cp -1 "x!1")
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2"
                      (lemma
                       "restrict_derivable[(hp(a)), (closed_interval(a,b))]")
                      (("1" (inst -1 "n" "y")
                        (("1" (assert)
                          (("1" (expand "restrict" -1)
                            (("1" (propax) nil nil)) nil))
                          nil)
                         ("2" (hide 2)
                          (("2" (skeep)
                            (("2" (typepred "y")
                              (("2"
                                (expand "length" -3)
                                (("2"
                                  (skeep -1)
                                  (("2"
                                    (inst-cp -1 "x1")
                                    (("2"
                                      (inst-cp
                                       -1
                                       "choose[real]((hp(a)))")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide 2)
                        (("2" (skeep)
                          (("2" (expand "closed_interval")
                            (("2" (expand "hp" 1)
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (hide 2)
                  (("3" (skeep)
                    (("3" (typepred "t")
                      (("3" (expand "closed_interval" -1)
                        (("3" (expand "hp" 1) (("3" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (skeep)
            (("3" (split 1)
              (("1" (inst 1 "n")
                (("1" (skeep)
                  (("1" (typepred "y")
                    (("1" (skeep)
                      (("1" (expand "length" -3)
                        (("1" (inst-cp -1 "x!1")
                          (("1" (inst-cp -1 "choose[real]((hp(a)))")
                            (("1" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide -1)
                (("2"
                  (lemma
                   "restrict_derivable[(hp(a)), (closed_interval(a,b))]")
                  (("1" (inst -1 "n" "y")
                    (("1" (assert)
                      (("1" (expand "restrict" -1)
                        (("1" (propax) nil nil)) nil))
                      nil)
                     ("2" (assert)
                      (("2" (skeep)
                        (("2" (typepred "y")
                          (("2" (skeep)
                            (("2" (inst-cp -1 "choose[real]((hp(a)))")
                              (("1"
                                (inst-cp -1 "x1")
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "length" -5)
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (lemma "hp_ne")
                                (("2" (inst?) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide 2)
                    (("2" (skeep)
                      (("2" (expand "closed_interval" -1)
                        (("2" (expand "hp" 1) (("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("4" (skeep)
            (("4" (typepred "y")
              (("4" (skeep)
                (("4" (expand "length" -3)
                  (("4" (inst-cp -1 "t")
                    (("4" (inst-cp -1 "choose[real]((hp(a)))")
                      (("4" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("5" (skeep)
            (("5" (typepred "t")
              (("5" (expand "closed_interval" -1)
                (("5" (assert)
                  (("5" (expand "hp" 1) (("5" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("6" (skeep*)
            (("6" (expand "hp" 1)
              (("6" (expand "closed_interval") (("6" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (a skolem-const-decl "real" ODE_solution_existence_uniqueness nil)
    (b skolem-const-decl "{bb: real | bb > a}"
     ODE_solution_existence_uniqueness nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (hp const-decl "bool" interval_def nil)
    (y skolem-const-decl
     "({yy: (derivable?[(hp(a))]) | length(yy) = n})"
     ODE_solution_existence_uniqueness nil)
    (n skolem-const-decl "posnat" ODE_solution_existence_uniqueness
     nil)
    (length const-decl "nat" r2v_def nil)
    (derivable? const-decl "bool" r2v_analysis nil)
    (r2v type-eq-decl nil r2v_def nil)
    (deriv def-decl "{ff: r2v | length(ff) = length(f)}" r2v_analysis
     nil)
    (od_f type-eq-decl nil ODE_def nil)
    (r2v_n type-eq-decl nil r2v_def nil)
    (od_fx const-decl "{ff: r2v_n(n) | length(ff) = n}" ODE_def nil)
    (restrict const-decl "VectorN(n)" restrict_ode nil)
    (cont_d? const-decl "bool" ODE_continuous_def nil)
    (Lip_hp? const-decl "bool" ODE_solution_existence_uniqueness nil)
    (VectorN type-eq-decl nil matrices matrices)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil) (>= const-decl "bool" reals nil)
    (> const-decl "bool" reals nil)
    (closed_interval const-decl "(closed_interval?(a, b))" interval_def
     nil)
    (closed_interval? const-decl "bool" interval_def nil)
    (< const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (x!1 skolem-const-decl "{xx: (closed_interval(a, b)) | xx >= a}"
     ODE_solution_existence_uniqueness nil)
    (ode_sol_restrict_hp_TCC4 subtype-tcc nil
     ODE_solution_existence_uniqueness nil)
    (set type-eq-decl nil sets nil)
    (nonempty? const-decl "bool" sets nil)
    (choose const-decl "(p)" sets nil)
    (ci_nonempty formula-decl nil interval_def nil)
    (ci_ci formula-decl nil interval_def nil)
    (closed_interval? const-decl "bool" interval_def nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (hp_ne formula-decl nil interval_def nil)
    (deriv const-decl "[T -> real]" derivatives analysis)
    (deriv_fun type-eq-decl nil derivatives analysis)
    (derivable? const-decl "bool" derivatives analysis)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (f skolem-const-decl
     "{ff: od_f[(hp(a))](n) | cont_d?[(hp(a))](n)(ff) AND Lip_hp?(a, n)(ff)}"
     ODE_solution_existence_uniqueness nil)
    (n!1 skolem-const-decl "below(length(f(x!1, y(x!1))))"
     ODE_solution_existence_uniqueness nil)
    (hp_dd formula-decl nil interval_def nil)
    (hp_noe formula-decl nil interval_def nil)
    (restrict const-decl "R" restrict nil)
    (ci_deriv_domain formula-decl nil interval_def nil)
    (ci_not_one_element formula-decl nil interval_def nil)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (deriv_domain? const-decl "bool" deriv_domain_def analysis)
    (deriv_subtype_dd formula-decl nil derivatives_subtype analysis)
    (restrict_derivable formula-decl nil restrict_ode nil)
    (nth const-decl "[(d) -> real]" r2v_def nil)
    (deriv_nth formula-decl nil r2v_analysis nil)
    (below type-eq-decl nil naturalnumbers nil)
    (list_extensionality formula-decl nil more_list_props structures)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (TRUE const-decl "bool" booleans nil)
    (od_sol? const-decl "bool" ODE_def nil))
   shostak))
 (unique_solution_restrict_TCC1 0
  (unique_solution_restrict_TCC5-1 nil 3795254461
   ("" (skeep)
    (("" (lemma "ci_nonempty")
      (("" (inst?)
        (("" (lemma "ci_ci") (("" (assert) (("" (inst?) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((ci_nonempty formula-decl nil interval_def nil)
    (ci_ci formula-decl nil interval_def nil)
    (a skolem-const-decl "real" ODE_solution_existence_uniqueness nil)
    (c skolem-const-decl "{cc: real | cc > a}"
       ODE_solution_existence_uniqueness nil)
    (> const-decl "bool" reals nil)
    (closed_interval const-decl "(closed_interval?(a, b))" interval_def
     nil)
    (closed_interval? const-decl "bool" interval_def nil)
    (< const-decl "bool" reals nil)
    (closed_interval? const-decl "bool" interval_def nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil
   (unique_solution_restrict assuming
    "ODE_def[interval_def.closed_interval(ODE_solution_existence_uniqueness.a, ODE_solution_existence_uniqueness.c)].ODE_def"
    "non_empty: ASSUMPTION sets[real].nonempty?(ODE_def.d)")))
 (unique_solution_restrict_TCC2 0
  (unique_solution_restrict_TCC6-1 nil 3795254461
   ("" (skeep)
    (("" (lemma "ci_connected")
      (("" (inst -1 "closed_interval(a,c)")
        (("" (lemma "ci_ci") (("" (inst?) nil nil)) nil)) nil))
      nil))
    nil)
   ((ci_connected formula-decl nil interval_def nil)
    (ci_ci formula-decl nil interval_def nil)
    (a skolem-const-decl "real" ODE_solution_existence_uniqueness nil)
    (c skolem-const-decl "{cc: real | cc > a}"
       ODE_solution_existence_uniqueness nil)
    (> const-decl "bool" reals nil)
    (closed_interval const-decl "(closed_interval?(a, b))" interval_def
     nil)
    (closed_interval? const-decl "bool" interval_def nil)
    (< const-decl "bool" reals nil)
    (closed_interval? const-decl "bool" interval_def nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (unique_solution_restrict assuming
    "ODE_def[interval_def.closed_interval(ODE_solution_existence_uniqueness.a, ODE_solution_existence_uniqueness.c)].ODE_def"
    "connected: ASSUMPTION deriv_domain_def[(ODE_def.d)].connected?")))
 (unique_solution_restrict_TCC3 0
  (unique_solution_restrict_TCC7-1 nil 3795254461
   ("" (skeep)
    (("" (lemma "ci_not_one_element")
      (("" (inst -1 "closed_interval(a,c)")
        (("" (lemma "ci_ci") (("" (inst?) nil nil)) nil)) nil))
      nil))
    nil)
   ((ci_not_one_element formula-decl nil interval_def nil)
    (ci_ci formula-decl nil interval_def nil)
    (a skolem-const-decl "real" ODE_solution_existence_uniqueness nil)
    (c skolem-const-decl "{cc: real | cc > a}"
       ODE_solution_existence_uniqueness nil)
    (> const-decl "bool" reals nil)
    (closed_interval const-decl "(closed_interval?(a, b))" interval_def
     nil)
    (closed_interval? const-decl "bool" interval_def nil)
    (< const-decl "bool" reals nil)
    (closed_interval? const-decl "bool" interval_def nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (unique_solution_restrict assuming
    "ODE_def[interval_def.closed_interval(ODE_solution_existence_uniqueness.a, ODE_solution_existence_uniqueness.c)].ODE_def"
    "not_one_element: ASSUMPTION deriv_domain_def[(ODE_def.d)].not_one_element?")))
 (unique_solution_restrict_TCC4 0
  (unique_solution_restrict_TCC2-1 nil 3795254461
   ("" (skeep*)
    (("" (typepred "t")
      (("" (expand "closed_interval")
        (("" (flatten) (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((> const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (closed_interval const-decl "(closed_interval?(a, b))" interval_def
     nil)
    (closed_interval? const-decl "bool" interval_def nil)
    (< const-decl "bool" reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (real nonempty-type-from-decl nil reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis))
   nil
   (unique_solution_restrict subtype
    "ODE_solution_existence_uniqueness.t"
    "(interval_def.closed_interval(ODE_solution_existence_uniqueness.a, ODE_solution_existence_uniqueness.c))")))
 (unique_solution_restrict_TCC5 0
  (unique_solution_restrict_TCC3-1 nil 3795254461
   ("" (skeep*)
    (("" (typepred "y")
      ((""
        (lemma
         " restrict_derivable[(closed_interval(a, c)), (closed_interval(a, b))]")
        (("1" (inst -1 "n" "y")
          (("1" (assert)
            (("1" (expand "restrict") (("1" (propax) nil nil)) nil))
            nil))
          nil)
         ("2" (hide 2)
          (("2" (lemma "ci_not_one_element")
            (("2" (inst -1 "(closed_interval(a,b))")
              (("2" (lemma "ci_ci") (("2" (inst?) nil nil)) nil)) nil))
            nil))
          nil)
         ("3" (lemma "ci_connected")
          (("3" (inst -1 "(closed_interval(a,b))")
            (("3" (lemma "ci_ci") (("3" (inst -1 "a" "b") nil nil))
              nil))
            nil))
          nil)
         ("4" (lemma "ci_nonempty")
          (("4" (inst -1 "(closed_interval(a,b))")
            (("4" (lemma "ci_ci") (("4" (inst?) nil nil)) nil)) nil))
          nil)
         ("5" (assert)
          (("5" (lemma "ci_not_one_element")
            (("5" (inst -1 "(closed_interval(a,c))")
              (("5" (lemma "ci_ci") (("5" (inst -1 "a" "c") nil nil))
                nil))
              nil))
            nil))
          nil)
         ("6" (lemma "ci_connected")
          (("6" (inst -1 "(closed_interval(a,c))")
            (("6" (lemma "ci_ci") (("6" (inst?) nil nil)) nil)) nil))
          nil)
         ("7" (assert)
          (("7" (lemma "ci_nonempty")
            (("7" (inst -1 "(closed_interval(a,c))")
              (("7" (lemma "ci_ci") (("7" (inst?) nil nil)) nil)) nil))
            nil))
          nil)
         ("8" (skeep)
          (("8" (expand "closed_interval")
            (("8" (flatten) (("8" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((r2v_n type-eq-decl nil r2v_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (derivable? const-decl "bool" r2v_analysis nil)
    (r2v type-eq-decl nil r2v_def nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil) (> const-decl "bool" reals nil)
    (closed_interval const-decl "(closed_interval?(a, b))" interval_def
     nil)
    (closed_interval? const-decl "bool" interval_def nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ci_nonempty formula-decl nil interval_def nil)
    (ci_connected formula-decl nil interval_def nil)
    (closed_interval? const-decl "bool" interval_def nil)
    (a skolem-const-decl "real" ODE_solution_existence_uniqueness nil)
    (c skolem-const-decl "{cc: real | cc > a}"
       ODE_solution_existence_uniqueness nil)
    (b skolem-const-decl "{bb: real | c >= bb AND bb > a}"
     ODE_solution_existence_uniqueness nil)
    (ci_ci formula-decl nil interval_def nil)
    (ci_not_one_element formula-decl nil interval_def nil)
    (restrict const-decl "R" restrict nil)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (connected? const-decl "bool" deriv_domain_def analysis)
    (set type-eq-decl nil sets nil)
    (nonempty? const-decl "bool" sets nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (restrict_derivable formula-decl nil restrict_ode nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis))
   nil
   (unique_solution_restrict subtype
    "LAMBDA (t: (interval_def.closed_interval(ODE_solution_existence_uniqueness.a, ODE_solution_existence_uniqueness.b))): ODE_solution_existence_uniqueness.y(t)"
    "{yy: r2v_def[interval_def.closed_interval(ODE_solution_existence_uniqueness.a, ODE_solution_existence_uniqueness.b)].r2v_n(ODE_solution_existence_uniqueness.n) | r2v_analysis[interval_def.closed_interval(ODE_solution_existence_uniqueness.a, ODE_solution_existence_uniqueness.b)].derivable?(yy)}")))
 (unique_solution_restrict_TCC6 0
  (unique_solution_restrict_TCC4-1 nil 3795254461
   ("" (skeep)
    (("" (split 1)
      (("1" (expand "closed_interval" 1) (("1" (propax) nil nil)) nil)
       ("2" (skeep)
        (("2" (typepred "dd")
          (("2" (expand "closed_interval") (("2" (assert) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((closed_interval const-decl "(closed_interval?(a, b))" interval_def
     nil)
    (> const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (closed_interval? const-decl "bool" interval_def nil)
    (< const-decl "bool" reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (real nonempty-type-from-decl nil reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis))
   nil
   (unique_solution_restrict subtype
    "ODE_solution_existence_uniqueness.a"
    "{aa: (interval_def.closed_interval(ODE_solution_existence_uniqueness.a, ODE_solution_existence_uniqueness.b)) | FORALL (dd: (interval_def.closed_interval(ODE_solution_existence_uniqueness.a, ODE_solution_existence_uniqueness.b))): reals.<=(aa, dd)}")))
 (unique_solution_restrict_TCC7 0
  (unique_solution_restrict_TCC5-1 nil 3795283180
   ("" (skeep)
    (("" (lemma "ci_nonempty")
      (("" (inst -1 "closed_interval(a,b)")
        (("" (lemma "ci_ci") (("" (inst?) nil nil)) nil)) nil))
      nil))
    nil)
   ((ci_nonempty formula-decl nil interval_def nil)
    (ci_ci formula-decl nil interval_def nil)
    (a skolem-const-decl "real" ODE_solution_existence_uniqueness nil)
    (c skolem-const-decl "{cc: real | cc > a}"
       ODE_solution_existence_uniqueness nil)
    (b skolem-const-decl "{bb: real | c >= bb AND bb > a}"
     ODE_solution_existence_uniqueness nil)
    (> const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (closed_interval const-decl "(closed_interval?(a, b))" interval_def
     nil)
    (closed_interval? const-decl "bool" interval_def nil)
    (< const-decl "bool" reals nil)
    (closed_interval? const-decl "bool" interval_def nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis))
   nil
   (unique_solution_restrict assuming
    "ODE_def[interval_def.closed_interval(ODE_solution_existence_uniqueness.a, ODE_solution_existence_uniqueness.b)].ODE_def"
    "non_empty: ASSUMPTION sets[real].nonempty?(ODE_def.d)")))
 (unique_solution_restrict_TCC8 0
  (unique_solution_restrict_TCC11-1 nil 3795283180
   ("" (assuming-tcc) nil nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (closed_interval? const-decl "bool" interval_def nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices matrices)
    (od_f type-eq-decl nil ODE_def nil)
    (Lip_d? const-decl "bool" ODE_Lipschitz_def nil)
    (cont_d? const-decl "bool" ODE_continuous_def nil)
    (r2v type-eq-decl nil r2v_def nil)
    (derivable? const-decl "bool" r2v_analysis nil)
    (r2v_n type-eq-decl nil r2v_def nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sub const-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (contp? const-decl "bool" continuity_multivar mv_analysis)
    (contD? const-decl "bool" continuity_multivar mv_analysis)
    (fullset const-decl "set" sets nil)
    (adh const-decl "setof[real]" convergence_functions analysis)
    (nth const-decl "[(d) -> real]" r2v_def nil)
    (NQ const-decl "real" derivatives_def analysis)
    (convergence const-decl "bool" convergence_functions analysis)
    (convergence const-decl "bool" lim_of_functions analysis)
    (convergent? const-decl "bool" lim_of_functions analysis)
    (derivable? const-decl "bool" derivatives_def analysis)
    (derivable? const-decl "bool" derivatives analysis)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (n!1 skolem-const-decl "posnat" ODE_solution_existence_uniqueness
     nil)
    (Vector type-eq-decl nil matrices matrices)
    (scal def-decl "VectorN(length(v2))" matrices matrices)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic mv_analysis)
    (<= const-decl "bool" reals nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (add def-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (closed_interval const-decl "(closed_interval?(a, b))" interval_def
     nil)
    (connected? const-decl "bool" deriv_domain_def analysis)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (norm? const-decl "bool" norms mv_analysis)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (* const-decl "VectorN(length(v2))" matrices matrices))
   nil
   (unique_solution_restrict assuming
    "ODE_def[interval_def.closed_interval(ODE_solution_existence_uniqueness.a, ODE_solution_existence_uniqueness.b)].ODE_def"
    "connected: ASSUMPTION deriv_domain_def[(ODE_def.d)].connected?")))
 (unique_solution_restrict_TCC9 0
  (unique_solution_restrict_TCC12-1 nil 3795283180
   ("" (skeep)
    (("" (lemma "ci_not_one_element")
      (("" (inst -1 "(closed_interval(a, b))")
        (("" (lemma "ci_ci") (("" (inst -1 "a" "b") nil nil)) nil))
        nil))
      nil))
    nil)
   ((ci_not_one_element formula-decl nil interval_def nil)
    (ci_ci formula-decl nil interval_def nil)
    (a skolem-const-decl "real" ODE_solution_existence_uniqueness nil)
    (c skolem-const-decl "{cc: real | cc > a}"
       ODE_solution_existence_uniqueness nil)
    (b skolem-const-decl "{bb: real | c >= bb AND bb > a}"
     ODE_solution_existence_uniqueness nil)
    (> const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (closed_interval const-decl "(closed_interval?(a, b))" interval_def
     nil)
    (closed_interval? const-decl "bool" interval_def nil)
    (< const-decl "bool" reals nil)
    (closed_interval? const-decl "bool" interval_def nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis))
   nil
   (unique_solution_restrict assuming
    "ODE_def[interval_def.closed_interval(ODE_solution_existence_uniqueness.a, ODE_solution_existence_uniqueness.b)].ODE_def"
    "not_one_element: ASSUMPTION deriv_domain_def[(ODE_def.d)].not_one_element?")))
 (unique_solution_restrict 0
  (unique_solution_restrict-1 nil 3795256248
   ("" (skeep*)
    (("" (inst 1 "ode_sol(closed_interval(a,c),n,f)(y0)")
      (("1" (skeep)
        (("1"
          (typepred "ode_sol(closed_interval(a,b),n,
   restrict[(closed_interval(a,c)),(closed_interval(a,b))](n,f))(y0)")
          (("1" (case "car(d_b[closed_interval(a, b)]) =a")
            (("1" (replace -1)
              (("1" (expand "restrict" -3)
                (("1" (lemma "ode_sol_extend")
                  (("1" (inst -1 "n" "a" "b" "c" "f" "y0")
                    (("1" (expand "restrict" -1)
                      (("1" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (typepred "(d_b[closed_interval(a, b)])")
              (("2" (inst-cp -5 "a")
                (("2" (inst -5 "car(d_b[closed_interval(a, b)])")
                  (("1" (flatten)
                    (("1" (assert)
                      (("1" (hide 2)
                        (("1" (hide -10) (("1" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("2" (lemma "ci_ci")
                    (("2" (inst -1 "a" "b") nil nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide 2)
            (("2" (typepred "f")
              (("2"
                (lemma
                 "restrict_Lip[(closed_interval(a, c)), (closed_interval(a, b))]")
                (("1" (inst?)
                  (("1" (assert)
                    (("1"
                      (lemma
                       "restrict_cont[(closed_interval(a, c)), (closed_interval(a, b))]")
                      (("1" (inst?) (("1" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide 2)
                  (("2" (lemma "ci_not_one_element")
                    (("2" (inst -1 "(closed_interval(a, b))")
                      (("2" (lemma "ci_ci")
                        (("2" (inst -1 "a" "b") nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("3" (hide 2)
                  (("3" (lemma "ci_connected")
                    (("3" (inst -1 "(closed_interval(a, b))")
                      (("3" (lemma "ci_ci")
                        (("3" (inst -1 "a" "b") nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("4" (hide 2)
                  (("4" (lemma "ci_nonempty")
                    (("4" (inst -1 "(closed_interval(a,b))")
                      (("4" (lemma "ci_ci")
                        (("4" (inst -1 "a" "b") nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("5" (hide 2)
                  (("5" (lemma "ci_not_one_element")
                    (("5" (inst -1 "(closed_interval(a,c))")
                      (("5" (lemma "ci_ci")
                        (("5" (inst -1 "a" "c") nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("6" (hide 2)
                  (("6" (lemma "ci_connected")
                    (("6" (inst -1 "(closed_interval(a, c))")
                      (("6" (lemma "ci_ci")
                        (("6" (inst -1 "a" "c") nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("7" (hide 2)
                  (("7" (lemma "ci_nonempty")
                    (("7" (inst -1 "(closed_interval(a,c))")
                      (("7" (lemma "ci_ci")
                        (("7" (inst -1 "a" "c") nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("8" (hide 2)
                  (("8" (skeep)
                    (("8" (expand "closed_interval")
                      (("8" (flatten) (("8" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (lemma "ci_not_one_element")
            (("3" (inst -1 "(closed_interval(a,b))")
              (("3" (lemma "ci_ci") (("3" (inst -1 "a" "b") nil nil))
                nil))
              nil))
            nil)
           ("4" (lemma "ci_connected")
            (("4" (inst -1 "(closed_interval(a,b))")
              (("4" (lemma "ci_ci") (("4" (inst?) nil nil)) nil)) nil))
            nil)
           ("5" (assert)
            (("5" (lemma "ci_nonempty")
              (("5" (inst -1 "(closed_interval(a,b))")
                (("5" (lemma "ci_ci") (("5" (inst -1 "a" "b") nil nil))
                  nil))
                nil))
              nil))
            nil)
           ("6" (lemma "ci_not_one_element")
            (("6" (inst -1 "(closed_interval(a,c))")
              (("6" (lemma "ci_ci") (("6" (inst?) nil nil)) nil)) nil))
            nil)
           ("7" (lemma "ci_connected")
            (("7" (inst -1 "(closed_interval(a,c))")
              (("7" (lemma "ci_ci") (("7" (inst -1 "a" "c") nil nil))
                nil))
              nil))
            nil)
           ("8" (lemma "ci_nonempty")
            (("8" (inst -1 "(closed_interval(a,c))")
              (("8" (lemma "ci_ci")
                (("8" (assert)
                  (("8" (lemma "ci_ci") (("8" (inst?) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("9" (hide 2)
            (("9" (skeep)
              (("9" (expand "closed_interval")
                (("9" (flatten) (("9" (assert) nil nil)) nil)) nil))
              nil))
            nil)
           ("10" (hide 2)
            (("10" (lemma "ci_ci") (("10" (inst?) nil nil)) nil)) nil))
          nil))
        nil)
       ("2" (assert)
        (("2" (lemma "ci_ci") (("2" (inst?) nil nil)) nil)) nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (c skolem-const-decl "{cc: real | cc > a}"
       ODE_solution_existence_uniqueness nil)
    (> const-decl "bool" reals nil)
    (a skolem-const-decl "real" ODE_solution_existence_uniqueness nil)
    (closed_interval const-decl "(closed_interval?(a, b))" interval_def
     nil)
    (closed_interval? const-decl "bool" interval_def nil)
    (< const-decl "bool" reals nil)
    (closed_interval? const-decl "bool" interval_def nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (VectorN type-eq-decl nil matrices matrices)
    (r2v_n type-eq-decl nil r2v_def nil)
    (r2v type-eq-decl nil r2v_def nil)
    (derivable? const-decl "bool" r2v_analysis nil)
    (od_f type-eq-decl nil ODE_def nil)
    (Lip_d? const-decl "bool" ODE_Lipschitz_def nil)
    (cont_d? const-decl "bool" ODE_continuous_def nil)
    (<= const-decl "bool" reals nil)
    (ivt_s_unique? const-decl "bool" ODE_def nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (d_b const-decl "{dd: list[real] |
   (length(dd) = 2 AND (d(car(dd)) AND d(car(cdr(dd))))) AND
    FORALL (x: real): (car(dd) <= x AND x <= car(cdr(dd))) IFF d(x)}"
     r2v_continuous_extension nil)
    (ode_sol const-decl "{yy: r2v_n[d](n) |
   derivable?[d](yy) AND ivt_s_unique?[d](n, car(d_b[d]), f, y0)(yy)}"
     ODE_solution_existence_uniqueness nil)
    (restrict const-decl "VectorN(n)" restrict_ode nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nonempty? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (connected? const-decl "bool" deriv_domain_def analysis)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (b skolem-const-decl "{bb: real | c >= bb AND bb > a}"
     ODE_solution_existence_uniqueness nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (fullset const-decl "set" sets nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (adh const-decl "setof[real]" convergence_functions analysis)
    (nth const-decl "[(d) -> real]" r2v_def nil)
    (NQ const-decl "real" derivatives_def analysis)
    (convergence const-decl "bool" convergence_functions analysis)
    (convergence const-decl "bool" lim_of_functions analysis)
    (convergent? const-decl "bool" lim_of_functions analysis)
    (derivable? const-decl "bool" derivatives_def analysis)
    (derivable? const-decl "bool" derivatives analysis)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (ci_ci formula-decl nil interval_def nil)
    (ode_sol_extend formula-decl nil ODE_solution_existence_uniqueness
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ci_nonempty formula-decl nil interval_def nil)
    (ci_connected formula-decl nil interval_def nil)
    (ci_not_one_element formula-decl nil interval_def nil)
    (restrict_cont formula-decl nil restrict_ode nil)
    (restrict_Lip formula-decl nil restrict_ode nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis))
   shostak))
 (ci_lambda_eq_TCC1 0
  (ci_lambda_eq_TCC1-1 nil 3794219086 ("" (subtype-tcc) nil nil)
   ((real_plus_real_is_real application-judgement "real" reals nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (hp const-decl "bool" interval_def nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil))
   nil
   (ci_lambda_eq subtype
    "(number_fields.+)(1, floor_ceil.ceiling((number_fields.+)(ODE_solution_existence_uniqueness.x2, ODE_solution_existence_uniqueness.x)))"
    "{b: reals.real | reals.<(ODE_solution_existence_uniqueness.a, b)}")))
 (ci_lambda_eq_TCC2 0
  (ci_lambda_eq_TCC2-1 nil 3794219086 ("" (subtype-tcc) nil nil)
   ((real_plus_real_is_real application-judgement "real" reals nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (VectorN type-eq-decl nil matrices matrices)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (ceiling const-decl "{i | x <= i & i < x + 1}" floor_ceil nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (integer nonempty-type-from-decl nil integers nil)
    (closed_interval const-decl "(closed_interval?(a, b))" interval_def
     nil)
    (closed_interval? const-decl "bool" interval_def nil)
    (< const-decl "bool" reals nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis)
    (hp const-decl "bool" interval_def nil))
   nil
   (ci_lambda_eq subtype "ODE_solution_existence_uniqueness.x_1"
    "(interval_def.hp(ODE_solution_existence_uniqueness.a))")))
 (ci_lambda_eq_TCC3 0
  (ci_lambda_eq_TCC3-1 nil 3794219086 ("" (subtype-tcc) nil nil)
   ((real_plus_real_is_real application-judgement "real" reals nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (hp const-decl "bool" interval_def nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (ci_lambda_eq subtype
    "(number_fields.+)(1, floor_ceil.ceiling(ODE_solution_existence_uniqueness.x))"
    "{b: reals.real | reals.<(ODE_solution_existence_uniqueness.a, b)}")))
 (ci_lambda_eq_TCC4 0
  (ci_lambda_eq_TCC4-1 nil 3794219086 ("" (subtype-tcc) nil nil)
   ((real_plus_real_is_real application-judgement "real" reals nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (VectorN type-eq-decl nil matrices matrices)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (ceiling const-decl "{i | x <= i & i < x + 1}" floor_ceil nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (integer nonempty-type-from-decl nil integers nil)
    (closed_interval const-decl "(closed_interval?(a, b))" interval_def
     nil)
    (closed_interval? const-decl "bool" interval_def nil)
    (< const-decl "bool" reals nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis)
    (hp const-decl "bool" interval_def nil))
   nil
   (ci_lambda_eq subtype "ODE_solution_existence_uniqueness.x_1"
    "(interval_def.hp(ODE_solution_existence_uniqueness.a))")))
 (ci_lambda_eq_TCC5 0
  (ci_lambda_eq_TCC5-1 nil 3794219086 ("" (subtype-tcc) nil nil)
   ((real_plus_real_is_real application-judgement "real" reals nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (hp const-decl "bool" interval_def nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (closed_interval const-decl "(closed_interval?(a, b))" interval_def
     nil))
   nil
   (ci_lambda_eq subtype
    "(LAMBDA (x_1: (interval_def.closed_interval(ODE_solution_existence_uniqueness.a, (number_fields.+)(1, floor_ceil.ceiling(ODE_solution_existence_uniqueness.x)))), v: matrices.VectorN(ODE_solution_existence_uniqueness.n)) -> VectorN(n): ODE_solution_existence_uniqueness.f(x_1, v))"
    "[[(interval_def.closed_interval(ODE_solution_existence_uniqueness.a, (number_fields.+)(1, floor_ceil.ceiling((number_fields.+)(ODE_solution_existence_uniqueness.x2, ODE_solution_existence_uniqueness.x))))), matrices.VectorN(ODE_solution_existence_uniqueness.n)] -> matrices.VectorN(ODE_solution_existence_uniqueness.n)]")))
 (ci_lambda_eq 0
  (ci_lambda_eq-1 nil 3794219200
   ("" (skeep)
    (("" (decompose-equality 1)
      (("1" (skeep)
        (("1" (split 1)
          (("1" (expand "closed_interval" 1)
            (("1" (flatten) (("1" (assert) nil nil)) nil)) nil)
           ("2" (flatten)
            (("2" (expand "closed_interval" 1)
              (("2" (expand "closed_interval" -)
                (("2" (assert)
                  (("2" (flatten) (("2" (assert) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (skeep)
        (("2" (typepred "x_1")
          (("2" (expand "closed_interval" -1)
            (("2" (expand "hp" 1)
              (("2" (flatten) (("2" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil)
       ("3" (typepred "x")
        (("3" (expand "hp" -1) (("3" (assert) nil nil)) nil)) nil)
       ("4" (skeep)
        (("4" (typepred "x_1")
          (("4" (expand "hp")
            (("4" (expand "closed_interval" -1)
              (("4" (flatten) (("4" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil)
       ("5" (typepred "x")
        (("5" (expand "hp" -1) (("5" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (a skolem-const-decl "real" ODE_solution_existence_uniqueness nil)
    (x skolem-const-decl "(hp(a))" ODE_solution_existence_uniqueness
     nil)
    (x2 skolem-const-decl "{xx: real | hp(a)(xx + x)}"
     ODE_solution_existence_uniqueness nil)
    (n skolem-const-decl "posnat" ODE_solution_existence_uniqueness
     nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (od_f type-eq-decl nil ODE_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (hp const-decl "bool" interval_def nil)
    (ceiling const-decl "{i | x <= i & i < x + 1}" floor_ceil nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (integer nonempty-type-from-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (closed_interval const-decl "(closed_interval?(a, b))" interval_def
     nil)
    (closed_interval? const-decl "bool" interval_def nil)
    (< const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   shostak))
 (ode_sol_derivable_TCC1 0
  (ode_sol_derivable_TCC1-1 nil 3794149993 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (hp const-decl "bool" interval_def nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil))
   nil
   (ode_sol_derivable subtype
    "(number_fields.+)(1, floor_ceil.ceiling(ODE_solution_existence_uniqueness.t))"
    "{b: reals.real | reals.<(ODE_solution_existence_uniqueness.a, b)}")))
 (ode_sol_derivable_TCC2 0
  (ode_sol_derivable_TCC2-1 nil 3794149993 ("" (subtype-tcc) nil nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (hp const-decl "bool" interval_def nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices matrices)
    (od_f type-eq-decl nil ODE_def nil)
    (cont_d? const-decl "bool" ODE_continuous_def nil)
    (Lip_hp? const-decl "bool" ODE_solution_existence_uniqueness nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (Lip_d? const-decl "bool" ODE_Lipschitz_def nil)
    (restrict const-decl "VectorN(n)" restrict_ode nil)
    (contD? const-decl "bool" continuity_multivar mv_analysis)
    (contp? const-decl "bool" continuity_multivar mv_analysis)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (sub const-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (closed_interval const-decl "(closed_interval?(a, b))" interval_def
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil
   (ode_sol_derivable subtype "ODE_solution_existence_uniqueness.t"
    "(interval_def.closed_interval(ODE_solution_existence_uniqueness.a, (number_fields.+)(floor_ceil.ceiling(ODE_solution_existence_uniqueness.t), 1)))")))
 (ode_sol_derivable_TCC3 0
  (ode_sol_derivable_TCC3-1 nil 3794149993 ("" (subtype-tcc) nil nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (hp const-decl "bool" interval_def nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices matrices)
    (od_f type-eq-decl nil ODE_def nil)
    (cont_d? const-decl "bool" ODE_continuous_def nil)
    (Lip_hp? const-decl "bool" ODE_solution_existence_uniqueness nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (Lip_d? const-decl "bool" ODE_Lipschitz_def nil)
    (restrict const-decl "VectorN(n)" restrict_ode nil)
    (contD? const-decl "bool" continuity_multivar mv_analysis)
    (contp? const-decl "bool" continuity_multivar mv_analysis)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (sub const-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil
   (ode_sol_derivable subtype
    "(number_fields.+)(floor_ceil.ceiling(ODE_solution_existence_uniqueness.t), 1)"
    "{b: reals.real | reals.<(ODE_solution_existence_uniqueness.a, b)}")))
 (ode_sol_derivable_TCC4 0
  (ode_sol_derivable_TCC4-1 nil 3794149993
   ("" (skeep) (("" (lemma "ci_ci") (("" (inst?) nil nil)) nil)) nil)
   ((ci_ci formula-decl nil interval_def nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (integer nonempty-type-from-decl nil integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (ceiling const-decl "{i | x <= i & i < x + 1}" floor_ceil nil)
    (hp const-decl "bool" interval_def nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis))
   nil
   (ode_sol_derivable subtype
    "interval_def.closed_interval(ODE_solution_existence_uniqueness.a, (number_fields.+)(floor_ceil.ceiling(ODE_solution_existence_uniqueness.t), 1))"
    "(interval_def.closed_interval?)")))
 (ode_sol_derivable_TCC5 0
  (ode_sol_derivable_TCC5-1 nil 3794149993 ("" (subtype-tcc) nil nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices matrices)
    (od_f type-eq-decl nil ODE_def nil)
    (cont_d? const-decl "bool" ODE_continuous_def nil)
    (Lip_hp? const-decl "bool" ODE_solution_existence_uniqueness nil)
    (sub const-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (contp? const-decl "bool" continuity_multivar mv_analysis)
    (contD? const-decl "bool" continuity_multivar mv_analysis)
    (restrict const-decl "VectorN(n)" restrict_ode nil)
    (Lip_d? const-decl "bool" ODE_Lipschitz_def nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (closed_interval const-decl "(closed_interval?(a, b))" interval_def
     nil)
    (hp const-decl "bool" interval_def nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil
   (ode_sol_derivable subtype
    "(interval_def.closed_interval(ODE_solution_existence_uniqueness.a, (number_fields.+)(1, floor_ceil.ceiling(ODE_solution_existence_uniqueness.t))))"
    "{dd: [reals.real -> booleans.bool] | FORALL (t: reals.real): booleans.IMPLIES(dd(t), interval_def.hp(ODE_solution_existence_uniqueness.a)(t))}")))
 (ode_sol_derivable_TCC6 0
  (ode_sol_derivable_TCC6-1 nil 3794149993
   ("" (skeep)
    (("" (lemma "ci_nonempty")
      (("" (inst?) (("" (lemma "ci_ci") (("" (inst?) nil nil)) nil))
        nil))
      nil))
    nil)
   ((ci_nonempty formula-decl nil interval_def nil)
    (ci_ci formula-decl nil interval_def nil)
    (a skolem-const-decl "real" ODE_solution_existence_uniqueness nil)
    (t skolem-const-decl "(hp(a))" ODE_solution_existence_uniqueness
     nil)
    (hp const-decl "bool" interval_def nil)
    (ceiling const-decl "{i | x <= i & i < x + 1}" floor_ceil nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (integer nonempty-type-from-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (closed_interval const-decl "(closed_interval?(a, b))" interval_def
     nil)
    (closed_interval? const-decl "bool" interval_def nil)
    (< const-decl "bool" reals nil)
    (closed_interval? const-decl "bool" interval_def nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis))
   nil
   (ode_sol_derivable assuming
    "restrict_ode[(interval_def.hp(ODE_solution_existence_uniqueness.a)), (interval_def.closed_interval(ODE_solution_existence_uniqueness.a, (number_fields.+)(1, floor_ceil.ceiling(ODE_solution_existence_uniqueness.t))))].restrict_ode"
    "non_empty2: ASSUMPTION sets[real].nonempty?(restrict_ode.d2)")))
 (ode_sol_derivable_TCC7 0
  (ode_sol_derivable_TCC7-1 nil 3794149993 ("" (assuming-tcc) nil nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (hp const-decl "bool" interval_def nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices matrices)
    (od_f type-eq-decl nil ODE_def nil)
    (cont_d? const-decl "bool" ODE_continuous_def nil)
    (Lip_hp? const-decl "bool" ODE_solution_existence_uniqueness nil)
    (ceiling const-decl "{i | x <= i & i < x + 1}" floor_ceil nil)
    (<= const-decl "bool" reals nil)
    (integer nonempty-type-from-decl nil integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (closed_interval? const-decl "bool" interval_def nil)
    (< const-decl "bool" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (sub const-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (contp? const-decl "bool" continuity_multivar mv_analysis)
    (contD? const-decl "bool" continuity_multivar mv_analysis)
    (restrict const-decl "VectorN(n)" restrict_ode nil)
    (Lip_d? const-decl "bool" ODE_Lipschitz_def nil)
    (closed_interval const-decl "(closed_interval?(a, b))" interval_def
     nil)
    (connected? const-decl "bool" deriv_domain_def analysis)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil
   (ode_sol_derivable assuming
    "restrict_ode[(interval_def.hp(ODE_solution_existence_uniqueness.a)), (interval_def.closed_interval(ODE_solution_existence_uniqueness.a, (number_fields.+)(1, floor_ceil.ceiling(ODE_solution_existence_uniqueness.t))))].restrict_ode"
    "connected2: ASSUMPTION deriv_domain_def[(restrict_ode.d2)].connected?")))
 (ode_sol_derivable_TCC8 0
  (ode_sol_derivable_TCC8-1 nil 3794149993
   ("" (skeep)
    (("" (lemma "ci_not_one_element")
      (("" (inst -1 "closed_interval(a, 1 + ceiling(t))")
        (("1" (lemma "ci_ci") (("1" (inst?) nil nil)) nil)
         ("2" (assert)
          (("2" (typepred "t")
            (("2" (expand "hp" -) (("2" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((ci_not_one_element formula-decl nil interval_def nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (ci_ci formula-decl nil interval_def nil)
    (a skolem-const-decl "real" ODE_solution_existence_uniqueness nil)
    (t skolem-const-decl "(hp(a))" ODE_solution_existence_uniqueness
     nil)
    (hp const-decl "bool" interval_def nil)
    (ceiling const-decl "{i | x <= i & i < x + 1}" floor_ceil nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (integer nonempty-type-from-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (closed_interval const-decl "(closed_interval?(a, b))" interval_def
     nil)
    (closed_interval? const-decl "bool" interval_def nil)
    (< const-decl "bool" reals nil)
    (closed_interval? const-decl "bool" interval_def nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis))
   nil
   (ode_sol_derivable assuming
    "restrict_ode[(interval_def.hp(ODE_solution_existence_uniqueness.a)), (interval_def.closed_interval(ODE_solution_existence_uniqueness.a, (number_fields.+)(1, floor_ceil.ceiling(ODE_solution_existence_uniqueness.t))))].restrict_ode"
    "not_one_element2: ASSUMPTION deriv_domain_def[(restrict_ode.d2)].not_one_element?")))
 (ode_sol_derivable_TCC9 0
  (ode_sol_derivable_TCC9-1 nil 3794149993
   ("" (skeep)
    ((""
      (lemma
       "restrict_cont[(hp(a)), (closed_interval(a, 1 + ceiling(t)))]")
      (("1" (inst -1 "n" "f")
        (("1" (assert)
          (("1" (typepred "f")
            (("1" (expand "Lip_hp?" -2)
              (("1" (inst -2 "1+ceiling(t)")
                (("1" (assert)
                  (("1" (typepred "t")
                    (("1" (expand "hp" -) (("1" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide 2)
        (("2" (skeep)
          (("2" (expand "closed_interval")
            (("2" (expand "hp" 1 1)
              (("2" (flatten) (("2" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil)
       ("3" (hide 2)
        (("3" (typepred "t")
          (("3" (expand "hp" -1) (("3" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((ceiling const-decl "{i | x <= i & i < x + 1}" floor_ceil nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (integer nonempty-type-from-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (closed_interval const-decl "(closed_interval?(a, b))" interval_def
     nil)
    (closed_interval? const-decl "bool" interval_def nil)
    (< const-decl "bool" reals nil)
    (hp const-decl "bool" interval_def nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (restrict_cont formula-decl nil restrict_ode nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (t skolem-const-decl "(hp(a))" ODE_solution_existence_uniqueness
     nil)
    (a skolem-const-decl "real" ODE_solution_existence_uniqueness nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Lip_hp? const-decl "bool" ODE_solution_existence_uniqueness nil)
    (cont_d? const-decl "bool" ODE_continuous_def nil)
    (od_f type-eq-decl nil ODE_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis))
   nil
   (ode_sol_derivable subtype
    "restrict_ode[(interval_def.hp(ODE_solution_existence_uniqueness.a)), (interval_def.closed_interval(ODE_solution_existence_uniqueness.a, (number_fields.+)(1, floor_ceil.ceiling(ODE_solution_existence_uniqueness.t))))].restrict(ODE_solution_existence_uniqueness.n, ODE_solution_existence_uniqueness.f)"
    "{ff: ODE_def[interval_def.closed_interval(ODE_solution_existence_uniqueness.a, (number_fields.+)(1, floor_ceil.ceiling(ODE_solution_existence_uniqueness.t)))].od_f(ODE_solution_existence_uniqueness.n) | booleans.AND(ODE_Lipschitz_def[interval_def.closed_interval(ODE_solution_existence_uniqueness.a, (number_fields.+)(1, floor_ceil.ceiling(ODE_solution_existence_uniqueness.t)))].Lip_d?(ODE_solution_existence_uniqueness.n)(ff), ODE_continuous_def[interval_def.closed_interval(ODE_solution_existence_uniqueness.a, (number_fields.+)(1, floor_ceil.ceiling(ODE_solution_existence_uniqueness.t)))].cont_d?(ODE_solution_existence_uniqueness.n)(ff))}")))
 (ode_sol_derivable_TCC10 0
  (ode_sol_derivable_TCC10-1 nil 3794149993
   ("" (skeep)
    (("" (inst 1 "n") (("" (skeep) (("" (assert) nil nil)) nil)) nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis))
   nil
   (ode_sol_derivable subtype
    "LAMBDA (t: (interval_def.hp(ODE_solution_existence_uniqueness.a))): ODE_solution_existence_uniqueness.ode_sol(interval_def.closed_interval(ODE_solution_existence_uniqueness.a, (number_fields.+)(floor_ceil.ceiling(t), 1)), ODE_solution_existence_uniqueness.n, restrict_ode[(interval_def.hp(ODE_solution_existence_uniqueness.a)), (interval_def.closed_interval(ODE_solution_existence_uniqueness.a, (number_fields.+)(1, floor_ceil.ceiling(t))))].restrict(ODE_solution_existence_uniqueness.n, ODE_solution_existence_uniqueness.f))(ODE_solution_existence_uniqueness.y0)(t)"
    "r2v[(hp(a))]")))
 (ode_sol_derivable 0
  (ode_sol_derivable-2 nil 3794218424
   ("" (skeep)
    (("" (expand "derivable?" 1)
      (("" (skeep)
        (("" (expand "derivable?" 1)
          (("" (skeep)
            (("" (typepred "x")
              (("" (expand "nth" 1 1)
                ((""
                  (typepred
                   "(ode_sol(closed_interval(a, 1 + ceiling(x)), n,
                                 restrict
                                     [(hp(a)),
                                      (closed_interval(a, 1 + ceiling(x)))]
                                     (n, f))
                                (y0))")
                  (("1" (hide -2)
                    (("1"
                      (lemma
                       "derivable_subtype_del[(hp(a)), (closed_interval(a, 1 + ceiling(x)))]")
                      (("1"
                        (inst -1 "LAMBDA (x: (hp(a))) -> real:
                         nth(ode_sol(closed_interval(a, 1 + ceiling(x)), n,
                                     restrict
                                         [(hp(a)),
                                          (closed_interval(a, 1 + ceiling(x)))]
                                         (n, f))
                                    (y0)(x),
                             i)" "_" "_")
                        (("1" (expand "derivable?" -2)
                          (("1" (inst -2 "i")
                            (("1" (expand "derivable?" -2)
                              (("1"
                                (inst -2 "x")
                                (("1"
                                  (expand "nth" -2)
                                  (("1"
                                    (inst
                                     -1
                                     "(LAMBDA (x1: (closed_interval(a, 1 + ceiling(x)))) -> real:
                               nth(ode_sol(closed_interval(a, 1 + ceiling(x)), n,
                                           restrict
                                               [(hp(a)),
                                                (closed_interval(a, 1 + ceiling(x)))]
                                               (n, f))
                                          (y0)(x1),
                                   i))"
                                     "_")
                                    (("1"
                                      (inst -1 "x")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (hide 2)
                                          (("1"
                                            (split 1)
                                            (("1"
                                              (lemma "ci_deriv_domain")
                                              (("1"
                                                (inst
                                                 -1
                                                 "(closed_interval(a, 1 + ceiling(x)))")
                                                (("1"
                                                  (lemma "ci_ci")
                                                  (("1"
                                                    (inst?)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (assert)
                                                  (("2"
                                                    (typepred "x")
                                                    (("2"
                                                      (expand "hp" -1)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (lemma
                                               "ci_not_one_element")
                                              (("2"
                                                (inst
                                                 -1
                                                 "(closed_interval(a, 1 + ceiling(x)))")
                                                (("1"
                                                  (lemma "ci_ci")
                                                  (("1"
                                                    (inst?)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (assert)
                                                  (("2"
                                                    (typepred "x")
                                                    (("2"
                                                      (expand "hp" -1)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (decompose-equality 1)
                                              (("1"
                                                (hide -1)
                                                (("1"
                                                  (typepred "x!1")
                                                  (("1"
                                                    (expand
                                                     "closed_interval"
                                                     -1)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (case
                                                           " 1 + ceiling(x!1) = 1 + ceiling(x)")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (replace
                                                               -1)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (expand
                                                                   "restrict")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (lemma
                                                                       "list_extensionality")
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         "(ode_sol(closed_interval(a, 1 + ceiling(x)), n,
                                        LAMBDA (x: (closed_interval(a, 1 + ceiling(x!1))),
                                                v: VectorN(n)) -> VectorN(n):
                                          f(x, v))
                                       (y0)(x!1))"
                                                                         "ode_sol(closed_interval(a, 1 + ceiling(x)), n,
                                         LAMBDA (x1: (closed_interval(a, 1 + ceiling(x))),
                                                 v: VectorN(n)) -> VectorN(n):
                                           f(x1, v))
                                        (y0)(x!1)")
                                                                        (("1"
                                                                          (flatten)
                                                                          (("1"
                                                                            (hide
                                                                             -2)
                                                                            (("1"
                                                                              (split
                                                                               -1)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (inst
                                                                                   -1
                                                                                   "i")
                                                                                  nil
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (hide
                                                                                 2)
                                                                                (("2"
                                                                                  (case
                                                                                   "(LAMBDA (x: (closed_interval(a, 1 + ceiling(x!1))),
                                                      v: VectorN(n)) -> VectorN(n):
                                                f(x, v)) = ( LAMBDA (x1: (closed_interval(a, 1 + ceiling(x))),
                                                      v: VectorN(n)) -> VectorN(n):
                                                f(x1, v))")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil)
                                                                                   ("2"
                                                                                    (decompose-equality
                                                                                     1)
                                                                                    (("1"
                                                                                      (hide
                                                                                       2)
                                                                                      (("1"
                                                                                        (skeep)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "closed_interval")
                                                                                          (("1"
                                                                                            (split
                                                                                             1)
                                                                                            (("1"
                                                                                              (flatten)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (flatten)
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (hide
                                                                                       2)
                                                                                      (("2"
                                                                                        (skeep)
                                                                                        (("2"
                                                                                          (typepred
                                                                                           "x1")
                                                                                          (("2"
                                                                                            (expand
                                                                                             "closed_interval")
                                                                                            (("2"
                                                                                              (expand
                                                                                               "hp")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("3"
                                                                                      (hide
                                                                                       2)
                                                                                      (("3"
                                                                                        (skeep)
                                                                                        (("3"
                                                                                          (typepred
                                                                                           "x!2")
                                                                                          (("3"
                                                                                            (expand
                                                                                             "closed_interval"
                                                                                             -1)
                                                                                            (("3"
                                                                                              (expand
                                                                                               "hp")
                                                                                              (("3"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("3"
                                                                                    (hide
                                                                                     2)
                                                                                    (("3"
                                                                                      (skeep)
                                                                                      (("3"
                                                                                        (split
                                                                                         1)
                                                                                        (("1"
                                                                                          (flatten)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (flatten)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("4"
                                                                                    (hide
                                                                                     2)
                                                                                    (("4"
                                                                                      (skeep)
                                                                                      (("4"
                                                                                        (typepred
                                                                                         "x1")
                                                                                        (("4"
                                                                                          (expand
                                                                                           "closed_interval"
                                                                                           -1)
                                                                                          (("4"
                                                                                            (expand
                                                                                             "hp")
                                                                                            (("4"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("5"
                                                                                    (hide
                                                                                     2)
                                                                                    (("5"
                                                                                      (skeep)
                                                                                      (("5"
                                                                                        (typepred
                                                                                         "x!2")
                                                                                        (("5"
                                                                                          (expand
                                                                                           "closed_interval")
                                                                                          (("5"
                                                                                            (expand
                                                                                             "hp")
                                                                                            (("5"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (hide
                                                                           2)
                                                                          (("2"
                                                                            (lemma
                                                                             "restrict_cont[(hp(a)), (closed_interval(a, 1 + ceiling(x)))]")
                                                                            (("2"
                                                                              (inst
                                                                               -1
                                                                               "n"
                                                                               "f")
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (expand
                                                                                   "restrict"
                                                                                   -1)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (typepred
                                                                                       "f")
                                                                                      (("2"
                                                                                        (expand
                                                                                         "Lip_hp?"
                                                                                         -2)
                                                                                        (("2"
                                                                                          (inst
                                                                                           -2
                                                                                           "1 + ceiling(x)")
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "restrict"
                                                                                               -2)
                                                                                              (("2"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("3"
                                                                          (hide
                                                                           2)
                                                                          (("3"
                                                                            (skeep)
                                                                            (("3"
                                                                              (typepred
                                                                               "x1")
                                                                              (("3"
                                                                                (expand
                                                                                 "closed_interval"
                                                                                 -1)
                                                                                (("3"
                                                                                  (flatten)
                                                                                  (("3"
                                                                                    (assert)
                                                                                    (("3"
                                                                                      (expand
                                                                                       "hp"
                                                                                       1)
                                                                                      (("3"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("4"
                                                                          (hide
                                                                           2)
                                                                          (("4"
                                                                            (case
                                                                             "(LAMBDA (x: (closed_interval(a, 1 + ceiling(x!1))),
                                                v: VectorN(n)) -> VectorN(n):
                                          f(x, v)) = (LAMBDA (x: (closed_interval(a, 1 + ceiling(x))),
                                                v: VectorN(n)) -> VectorN(n):
                                          f(x, v))")
                                                                            (("1"
                                                                              (typepred
                                                                               "f")
                                                                              (("1"
                                                                                (lemma
                                                                                 "restrict_cont[(hp(a)), (closed_interval(a, 1 + ceiling(x)))]")
                                                                                (("1"
                                                                                  (inst
                                                                                   -1
                                                                                   "n"
                                                                                   "f")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (hide
                                                                               2)
                                                                              (("2"
                                                                                (decompose-equality
                                                                                 1)
                                                                                (("1"
                                                                                  (skeep)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "closed_interval"
                                                                                     1)
                                                                                    (("1"
                                                                                      (split
                                                                                       1)
                                                                                      (("1"
                                                                                        (flatten)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (flatten)
                                                                                        (("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (skeep)
                                                                                  (("2"
                                                                                    (typepred
                                                                                     "x!2")
                                                                                    (("2"
                                                                                      (expand
                                                                                       "closed_interval"
                                                                                       -1)
                                                                                      (("2"
                                                                                        (flatten)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "hp"
                                                                                           1)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("3"
                                                                                  (skeep)
                                                                                  (("3"
                                                                                    (typepred
                                                                                     "x!2")
                                                                                    (("3"
                                                                                      (expand
                                                                                       "closed_interval"
                                                                                       -1)
                                                                                      (("3"
                                                                                        (expand
                                                                                         "hp"
                                                                                         1)
                                                                                        (("3"
                                                                                          (flatten)
                                                                                          (("3"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("3"
                                                                              (hide
                                                                               2)
                                                                              (("3"
                                                                                (skeep)
                                                                                (("3"
                                                                                  (expand
                                                                                   "closed_interval"
                                                                                   1)
                                                                                  (("3"
                                                                                    (split
                                                                                     1)
                                                                                    (("1"
                                                                                      (flatten)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (flatten)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("4"
                                                                              (hide
                                                                               2)
                                                                              (("4"
                                                                                (skeep)
                                                                                (("4"
                                                                                  (typepred
                                                                                   "x!2")
                                                                                  (("4"
                                                                                    (expand
                                                                                     "closed_interval"
                                                                                     -)
                                                                                    (("4"
                                                                                      (expand
                                                                                       "hp")
                                                                                      (("4"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("5"
                                                                              (hide
                                                                               2)
                                                                              (("5"
                                                                                (skeep)
                                                                                (("5"
                                                                                  (typepred
                                                                                   "x!2")
                                                                                  (("5"
                                                                                    (expand
                                                                                     "closed_interval"
                                                                                     -1)
                                                                                    (("5"
                                                                                      (expand
                                                                                       "hp"
                                                                                       1)
                                                                                      (("5"
                                                                                        (flatten)
                                                                                        (("5"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("5"
                                                                          (hide
                                                                           2)
                                                                          (("5"
                                                                            (skeep)
                                                                            (("5"
                                                                              (expand
                                                                               "closed_interval")
                                                                              (("5"
                                                                                (split
                                                                                 1)
                                                                                (("1"
                                                                                  (flatten)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (flatten)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("6"
                                                                          (hide
                                                                           2)
                                                                          (("6"
                                                                            (skeep)
                                                                            (("6"
                                                                              (typepred
                                                                               "x!2")
                                                                              (("6"
                                                                                (expand
                                                                                 "closed_interval"
                                                                                 -1)
                                                                                (("6"
                                                                                  (expand
                                                                                   "hp"
                                                                                   1)
                                                                                  (("6"
                                                                                    (flatten)
                                                                                    (("6"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            (("2"
                                                              (lemma
                                                               "list_extensionality")
                                                              (("2"
                                                                (inst
                                                                 -1
                                                                 "ode_sol(closed_interval(a, 1 + ceiling(x!1)), n,
                                        restrict[(hp(a)), (closed_interval(a, 1 + ceiling(x!1)))]
                                            (n, f))
                                       (y0)(x!1)"
                                                                 "ode_sol(closed_interval(a, 1 + ceiling(x)), n,
                                         restrict[(hp(a)), (closed_interval(a, 1 + ceiling(x)))]
                                             (n, f))
                                        (y0)(x!1)")
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (hide
                                                                     -2)
                                                                    (("1"
                                                                      (split
                                                                       -1)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (inst
                                                                           -1
                                                                           "i")
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide
                                                                         3)
                                                                        (("2"
                                                                          (lemma
                                                                           "ode_sol_extend")
                                                                          (("2"
                                                                            (case
                                                                             "ceiling(x!1)< ceiling(x)")
                                                                            (("1"
                                                                              (inst
                                                                               -2
                                                                               "n"
                                                                               "a"
                                                                               "1+ceiling(x!1)"
                                                                               "1+ceiling(x)"
                                                                               "restrict[(hp(a)), (closed_interval(a, 1 + ceiling(x)))]
                                               (n, f)"
                                                                               "y0")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (decompose-equality
                                                                                   -2)
                                                                                  (("1"
                                                                                    (inst
                                                                                     -1
                                                                                     "x!1")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "restrict")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (hide
                                                                                     2)
                                                                                    (("2"
                                                                                      (hide
                                                                                       2)
                                                                                      (("2"
                                                                                        (lemma
                                                                                         "ci_not_one_element")
                                                                                        (("2"
                                                                                          (inst
                                                                                           -1
                                                                                           "(closed_interval(a, 1 + ceiling(x!1)))")
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("3"
                                                                                    (hide
                                                                                     -)
                                                                                    (("3"
                                                                                      (hide
                                                                                       2
                                                                                       3)
                                                                                      (("3"
                                                                                        (expand
                                                                                         "connected?"
                                                                                         1)
                                                                                        (("3"
                                                                                          (skeep)
                                                                                          (("3"
                                                                                            (typepred
                                                                                             "z")
                                                                                            (("3"
                                                                                              (typepred
                                                                                               "y")
                                                                                              (("3"
                                                                                                (expand
                                                                                                 "closed_interval"
                                                                                                 -1)
                                                                                                (("3"
                                                                                                  (flatten)
                                                                                                  (("3"
                                                                                                    (typepred
                                                                                                     "x!2")
                                                                                                    (("3"
                                                                                                      (expand
                                                                                                       "closed_interval"
                                                                                                       -1)
                                                                                                      (("3"
                                                                                                        (flatten)
                                                                                                        (("3"
                                                                                                          (expand
                                                                                                           "closed_interval"
                                                                                                           1)
                                                                                                          (("3"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("4"
                                                                                    (hide
                                                                                     2)
                                                                                    (("4"
                                                                                      (hide
                                                                                       -)
                                                                                      (("4"
                                                                                        (lemma
                                                                                         "ci_nonempty")
                                                                                        (("4"
                                                                                          (inst
                                                                                           -1
                                                                                           "(closed_interval(a, 1 + ceiling(x!1)))")
                                                                                          (("4"
                                                                                            (lemma
                                                                                             "ci_ci")
                                                                                            (("4"
                                                                                              (inst?)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("5"
                                                                                    (hide
                                                                                     2)
                                                                                    (("5"
                                                                                      (hide
                                                                                       -)
                                                                                      (("5"
                                                                                        (lemma
                                                                                         "ci_not_one_element")
                                                                                        (("5"
                                                                                          (inst
                                                                                           -1
                                                                                           "(closed_interval(a, 1 + ceiling(x)))")
                                                                                          (("5"
                                                                                            (lemma
                                                                                             "ci_ci")
                                                                                            (("5"
                                                                                              (inst?)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("6"
                                                                                    (hide
                                                                                     2
                                                                                     3)
                                                                                    (("6"
                                                                                      (hide
                                                                                       -)
                                                                                      (("6"
                                                                                        (lemma
                                                                                         "ci_connected")
                                                                                        (("6"
                                                                                          (inst
                                                                                           -1
                                                                                           "(closed_interval(a, 1 + ceiling(x)))")
                                                                                          (("6"
                                                                                            (lemma
                                                                                             "ci_ci")
                                                                                            (("6"
                                                                                              (inst?)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("7"
                                                                                    (hide
                                                                                     -)
                                                                                    (("7"
                                                                                      (hide
                                                                                       2
                                                                                       3)
                                                                                      (("7"
                                                                                        (lemma
                                                                                         "ci_nonempty")
                                                                                        (("7"
                                                                                          (inst
                                                                                           -1
                                                                                           "(closed_interval(a, 1 + ceiling(x)))")
                                                                                          (("7"
                                                                                            (lemma
                                                                                             "ci_ci")
                                                                                            (("7"
                                                                                              (inst?)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("8"
                                                                                    (expand
                                                                                     "closed_interval")
                                                                                    (("8"
                                                                                      (flatten)
                                                                                      (("8"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("9"
                                                                                    (expand
                                                                                     "hp")
                                                                                    (("9"
                                                                                      (expand
                                                                                       "closed_interval")
                                                                                      (("9"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("10"
                                                                                    (expand
                                                                                     "hp")
                                                                                    (("10"
                                                                                      (expand
                                                                                       "closed_interval")
                                                                                      (("10"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("11"
                                                                                    (expand
                                                                                     "closed_interval")
                                                                                    (("11"
                                                                                      (assert)
                                                                                      (("11"
                                                                                        (flatten)
                                                                                        (("11"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (skeep)
                                                                                (("2"
                                                                                  (expand
                                                                                   "hp")
                                                                                  (("2"
                                                                                    (expand
                                                                                     "closed_interval")
                                                                                    (("2"
                                                                                      (flatten)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("3"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (case
                                                                               "NOT ceiling(x) < ceiling(x!1)")
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil)
                                                                               ("2"
                                                                                (inst
                                                                                 -2
                                                                                 "n"
                                                                                 "a"
                                                                                 "1+ceiling(x)"
                                                                                 "1+ceiling(x!1)"
                                                                                 "restrict[(hp(a)), (closed_interval(a, 1 + ceiling(x!1)))]
                                                (n, f)"
                                                                                 "y0")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (decompose-equality
                                                                                     -2)
                                                                                    (("1"
                                                                                      (inst
                                                                                       -1
                                                                                       "x!1")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "restrict")
                                                                                          (("1"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (hide
                                                                                       -)
                                                                                      (("2"
                                                                                        (hide
                                                                                         2)
                                                                                        (("2"
                                                                                          (hide
                                                                                           2)
                                                                                          (("2"
                                                                                            (lemma
                                                                                             "ci_not_one_element")
                                                                                            (("2"
                                                                                              (inst
                                                                                               -1
                                                                                               "(closed_interval(a, 1 + ceiling(x)))")
                                                                                              (("1"
                                                                                                (lemma
                                                                                                 "ci_ci")
                                                                                                (("1"
                                                                                                  (inst?)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (typepred
                                                                                                   "x")
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "hp")
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("3"
                                                                                      (hide
                                                                                       -)
                                                                                      (("3"
                                                                                        (hide
                                                                                         2
                                                                                         3)
                                                                                        (("3"
                                                                                          (lemma
                                                                                           "ci_connected")
                                                                                          (("3"
                                                                                            (inst
                                                                                             -1
                                                                                             "(closed_interval(a, 1 + ceiling(x)))")
                                                                                            (("1"
                                                                                              (lemma
                                                                                               "ci_ci")
                                                                                              (("1"
                                                                                                (inst?)
                                                                                                nil
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (typepred
                                                                                                 "x")
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "hp"
                                                                                                   -)
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("4"
                                                                                      (hide
                                                                                       -)
                                                                                      (("4"
                                                                                        (lemma
                                                                                         "ci_nonempty")
                                                                                        (("4"
                                                                                          (inst
                                                                                           -1
                                                                                           "(closed_interval(a, 1 + ceiling(x)))")
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("5"
                                                                                      (expand
                                                                                       "closed_interval"
                                                                                       1)
                                                                                      (("5"
                                                                                        (expand
                                                                                         "closed_interval"
                                                                                         -)
                                                                                        (("5"
                                                                                          (flatten)
                                                                                          (("5"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("6"
                                                                                      (hide
                                                                                       -3)
                                                                                      (("6"
                                                                                        (lemma
                                                                                         "ci_not_one_element")
                                                                                        (("6"
                                                                                          (inst
                                                                                           -1
                                                                                           "(closed_interval(a, 1 + ceiling(x!1)))")
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("7"
                                                                                      (lemma
                                                                                       "ci_connected")
                                                                                      (("7"
                                                                                        (inst
                                                                                         -1
                                                                                         "(closed_interval(a, 1 + ceiling(x!1)))")
                                                                                        nil
                                                                                        nil))
                                                                                      nil)
                                                                                     ("8"
                                                                                      (lemma
                                                                                       "ci_nonempty")
                                                                                      (("8"
                                                                                        (inst
                                                                                         -1
                                                                                         "(closed_interval(a, 1 + ceiling(x!1)))")
                                                                                        nil
                                                                                        nil))
                                                                                      nil)
                                                                                     ("9"
                                                                                      (lemma
                                                                                       "hp_noe")
                                                                                      (("9"
                                                                                        (inst
                                                                                         -1
                                                                                         "a")
                                                                                        nil
                                                                                        nil))
                                                                                      nil)
                                                                                     ("10"
                                                                                      (lemma
                                                                                       "hp_con")
                                                                                      (("10"
                                                                                        (inst
                                                                                         -1
                                                                                         "a")
                                                                                        nil
                                                                                        nil))
                                                                                      nil)
                                                                                     ("11"
                                                                                      (lemma
                                                                                       "hp_ne")
                                                                                      (("11"
                                                                                        (inst
                                                                                         -1
                                                                                         "a")
                                                                                        nil
                                                                                        nil))
                                                                                      nil)
                                                                                     ("12"
                                                                                      (expand
                                                                                       "closed_interval"
                                                                                       -)
                                                                                      (("12"
                                                                                        (expand
                                                                                         "hp")
                                                                                        (("12"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("13"
                                                                                      (hide
                                                                                       -4)
                                                                                      (("13"
                                                                                        (lemma
                                                                                         "ci_not_one_element")
                                                                                        (("13"
                                                                                          (inst
                                                                                           -1
                                                                                           "(closed_interval(a, 1 + ceiling(x!1)))")
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("14"
                                                                                      (lemma
                                                                                       "ci_connected")
                                                                                      (("14"
                                                                                        (inst
                                                                                         -1
                                                                                         "(closed_interval(a, 1 + ceiling(x!1)))")
                                                                                        nil
                                                                                        nil))
                                                                                      nil)
                                                                                     ("15"
                                                                                      (lemma
                                                                                       "ci_nonempty")
                                                                                      (("15"
                                                                                        (inst
                                                                                         -1
                                                                                         "(closed_interval(a, 1 + ceiling(x!1)))")
                                                                                        nil
                                                                                        nil))
                                                                                      nil)
                                                                                     ("16"
                                                                                      (lemma
                                                                                       "hp_noe")
                                                                                      (("16"
                                                                                        (inst
                                                                                         -1
                                                                                         "a")
                                                                                        nil
                                                                                        nil))
                                                                                      nil)
                                                                                     ("17"
                                                                                      (lemma
                                                                                       "hp_con")
                                                                                      (("17"
                                                                                        (inst
                                                                                         -1
                                                                                         "a")
                                                                                        nil
                                                                                        nil))
                                                                                      nil)
                                                                                     ("18"
                                                                                      (lemma
                                                                                       "hp_ne")
                                                                                      (("18"
                                                                                        (inst
                                                                                         -1
                                                                                         "a")
                                                                                        nil
                                                                                        nil))
                                                                                      nil)
                                                                                     ("19"
                                                                                      (expand
                                                                                       "closed_interval"
                                                                                       -)
                                                                                      (("19"
                                                                                        (expand
                                                                                         "hp")
                                                                                        (("19"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("20"
                                                                                      (expand
                                                                                       "closed_interval")
                                                                                      (("20"
                                                                                        (assert)
                                                                                        (("20"
                                                                                          (flatten)
                                                                                          (("20"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (lemma
                                                                                   "ci_not_one_element")
                                                                                  (("2"
                                                                                    (inst
                                                                                     -1
                                                                                     "(closed_interval(a, 1 + ceiling(x!1)))")
                                                                                    nil
                                                                                    nil))
                                                                                  nil)
                                                                                 ("3"
                                                                                  (lemma
                                                                                   "ci_connected")
                                                                                  (("3"
                                                                                    (inst
                                                                                     -1
                                                                                     "(closed_interval(a, 1 + ceiling(x!1)))")
                                                                                    nil
                                                                                    nil))
                                                                                  nil)
                                                                                 ("4"
                                                                                  (assert)
                                                                                  (("4"
                                                                                    (lemma
                                                                                     "ci_nonempty")
                                                                                    (("4"
                                                                                      (inst
                                                                                       -1
                                                                                       "(closed_interval(a, 1 + ceiling(x!1)))")
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("5"
                                                                                  (lemma
                                                                                   "hp_noe")
                                                                                  (("5"
                                                                                    (inst
                                                                                     -1
                                                                                     "a")
                                                                                    nil
                                                                                    nil))
                                                                                  nil)
                                                                                 ("6"
                                                                                  (lemma
                                                                                   "hp_con")
                                                                                  (("6"
                                                                                    (inst
                                                                                     -1
                                                                                     "a")
                                                                                    nil
                                                                                    nil))
                                                                                  nil)
                                                                                 ("7"
                                                                                  (lemma
                                                                                   "hp_ne")
                                                                                  (("7"
                                                                                    (inst
                                                                                     -1
                                                                                     "a")
                                                                                    nil
                                                                                    nil))
                                                                                  nil)
                                                                                 ("8"
                                                                                  (assert)
                                                                                  (("8"
                                                                                    (skeep)
                                                                                    (("8"
                                                                                      (expand
                                                                                       "closed_interval")
                                                                                      (("8"
                                                                                        (expand
                                                                                         "hp")
                                                                                        (("8"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("9"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil)
                                                                                 ("10"
                                                                                  (assert)
                                                                                  (("10"
                                                                                    (typepred
                                                                                     "x")
                                                                                    (("10"
                                                                                      (expand
                                                                                       "hp"
                                                                                       -5)
                                                                                      (("10"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide
                                                                   2
                                                                   3)
                                                                  (("2"
                                                                    (skeep)
                                                                    (("2"
                                                                      (expand
                                                                       "closed_interval"
                                                                       -1)
                                                                      (("2"
                                                                        (expand
                                                                         "hp")
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("3"
                                                                  (hide
                                                                   -)
                                                                  (("3"
                                                                    (lemma
                                                                     "ci_not_one_element")
                                                                    (("3"
                                                                      (inst
                                                                       -1
                                                                       "(closed_interval(a, 1 + ceiling(x!1)))")
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("4"
                                                                  (assert)
                                                                  (("4"
                                                                    (lemma
                                                                     "ci_connected")
                                                                    (("4"
                                                                      (inst
                                                                       -1
                                                                       "(closed_interval(a, 1 + ceiling(x!1)))")
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("5"
                                                                  (lemma
                                                                   "ci_nonempty")
                                                                  (("5"
                                                                    (inst
                                                                     -1
                                                                     "(closed_interval(a, 1 + ceiling(x!1)))")
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("6"
                                                                  (lemma
                                                                   "hp_noe")
                                                                  (("6"
                                                                    (inst
                                                                     -1
                                                                     "a")
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("7"
                                                                  (assert)
                                                                  (("7"
                                                                    (lemma
                                                                     "hp_con")
                                                                    (("7"
                                                                      (inst
                                                                       -1
                                                                       "a")
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("8"
                                                                  (assert)
                                                                  (("8"
                                                                    (lemma
                                                                     "hp_ne")
                                                                    (("8"
                                                                      (inst
                                                                       -1
                                                                       "a")
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("9"
                                                                  (assert)
                                                                  (("9"
                                                                    (skeep)
                                                                    (("9"
                                                                      (expand
                                                                       "closed_interval")
                                                                      (("9"
                                                                        (expand
                                                                         "hp")
                                                                        (("9"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (skeep)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (typepred "i")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (expand
                                                         "length"
                                                         -1)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (skeep)
                                                (("3"
                                                  (hide -1)
                                                  (("3"
                                                    (typepred "f")
                                                    (("3"
                                                      (expand
                                                       "Lip_hp?"
                                                       -2)
                                                      (("3"
                                                        (inst
                                                         -2
                                                         "1+ceiling(x)")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (lemma
                                                             "restrict_cont[(hp(a)),(closed_interval(a, 1 + ceiling(x)))]")
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "n"
                                                               "f")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          (("2"
                                                            (expand
                                                             "hp"
                                                             -2)
                                                            (("2"
                                                              (typepred
                                                               "x")
                                                              (("2"
                                                                (expand
                                                                 "hp"
                                                                 -)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("4"
                                                (skeep*)
                                                (("4"
                                                  (expand "hp")
                                                  (("4"
                                                    (expand
                                                     "closed_interval")
                                                    (("4"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("5"
                                                (skeep)
                                                (("5"
                                                  (lemma "ci_ci")
                                                  (("5"
                                                    (inst
                                                     -1
                                                     "a"
                                                     "1+ceiling(x)")
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("6"
                                                (skeep)
                                                (("6"
                                                  (typepred "a")
                                                  (("6"
                                                    (typepred "x")
                                                    (("6"
                                                      (expand "hp" -1)
                                                      (("6"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("7"
                                                (skeep)
                                                (("7"
                                                  (typepred "i")
                                                  (("7"
                                                    (expand
                                                     "length"
                                                     -1)
                                                    (("7"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("8"
                                                (skeep)
                                                (("8"
                                                  (hide -1)
                                                  (("8"
                                                    (typepred "f")
                                                    (("8"
                                                      (lemma
                                                       "restrict_cont[(hp(a)),(closed_interval(a, 1 + ceiling(s)))]")
                                                      (("1"
                                                        (inst?)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (expand
                                                             "Lip_hp?"
                                                             -3)
                                                            (("1"
                                                              (inst
                                                               -3
                                                               "1+ceiling(s)")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (typepred
                                                                   "s")
                                                                  (("1"
                                                                    (expand
                                                                     "closed_interval"
                                                                     -1)
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        (("2"
                                                          (lemma
                                                           "ci_not_one_element")
                                                          (("2"
                                                            (inst
                                                             -1
                                                             "(closed_interval(a, 1 + ceiling(s)))")
                                                            (("1"
                                                              (lemma
                                                               "ci_ci")
                                                              (("1"
                                                                (inst?)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              (("2"
                                                                (typepred
                                                                 "s")
                                                                (("2"
                                                                  (expand
                                                                   "closed_interval"
                                                                   -1)
                                                                  (("2"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (lemma
                                                         "ci_connected")
                                                        (("3"
                                                          (inst
                                                           -1
                                                           "(closed_interval(a, 1 + ceiling(s)))")
                                                          (("1"
                                                            (lemma
                                                             "ci_ci")
                                                            (("1"
                                                              (inst?)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            (("2"
                                                              (typepred
                                                               "s")
                                                              (("2"
                                                                (expand
                                                                 "closed_interval"
                                                                 -)
                                                                (("2"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("4"
                                                        (assert)
                                                        (("4"
                                                          (lemma
                                                           "ci_nonempty")
                                                          (("4"
                                                            (inst
                                                             -1
                                                             "(closed_interval(a, 1 + ceiling(s)))")
                                                            (("4"
                                                              (lemma
                                                               "ci_ci")
                                                              (("4"
                                                                (inst?)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("5"
                                                        (assert)
                                                        (("5"
                                                          (lemma
                                                           "hp_con")
                                                          (("5"
                                                            (inst
                                                             -1
                                                             "a")
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("6"
                                                        (assert)
                                                        (("6"
                                                          (lemma
                                                           "hp_ne")
                                                          (("6"
                                                            (inst
                                                             -1
                                                             "a")
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("7"
                                                        (skeep)
                                                        (("7"
                                                          (typepred
                                                           "t")
                                                          (("7"
                                                            (expand
                                                             "closed_interval"
                                                             -)
                                                            (("7"
                                                              (expand
                                                               "hp"
                                                               +)
                                                              (("7"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("8"
                                                        (typepred "a")
                                                        (("8"
                                                          (typepred
                                                           "s")
                                                          (("8"
                                                            (expand
                                                             "closed_interval"
                                                             -1)
                                                            (("8"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("9"
                                                (skeep)
                                                (("9"
                                                  (lemma
                                                   "ci_not_one_element")
                                                  (("9"
                                                    (inst
                                                     -1
                                                     "(closed_interval(a, 1 + ceiling(s)))")
                                                    (("1"
                                                      (lemma "ci_ci")
                                                      (("1"
                                                        (inst?)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      (("2"
                                                        (typepred "s")
                                                        (("2"
                                                          (expand
                                                           "hp"
                                                           -)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (expand
                                                               "closed_interval"
                                                               -1)
                                                              (("2"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("10"
                                                (skeep)
                                                (("10"
                                                  (lemma
                                                   "ci_connected")
                                                  (("10"
                                                    (inst
                                                     -1
                                                     "(closed_interval(a, 1 + ceiling(s)))")
                                                    (("1"
                                                      (lemma "ci_ci")
                                                      (("1"
                                                        (inst?)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      (("2"
                                                        (typepred "s")
                                                        (("2"
                                                          (expand
                                                           "hp"
                                                           -)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (expand
                                                               "closed_interval"
                                                               -)
                                                              (("2"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("11"
                                                (skeep)
                                                (("11"
                                                  (lemma "ci_nonempty")
                                                  (("11"
                                                    (inst
                                                     -1
                                                     "(closed_interval(a, 1 + ceiling(s)))")
                                                    (("11"
                                                      (lemma "ci_ci")
                                                      (("11"
                                                        (inst?)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("12"
                                                (skeep)
                                                (("12"
                                                  (assert)
                                                  (("12"
                                                    (lemma "hp_noe")
                                                    (("12"
                                                      (inst -1 "a")
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("13"
                                                (skeep)
                                                (("13"
                                                  (lemma "hp_con")
                                                  (("13"
                                                    (inst -1 "a")
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("14"
                                                (skeep)
                                                (("14"
                                                  (lemma "hp_ne")
                                                  (("14"
                                                    (inst -1 "a")
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("15"
                                                (skeep)
                                                (("15"
                                                  (skeep)
                                                  (("15"
                                                    (expand
                                                     "closed_interval")
                                                    (("15"
                                                      (expand "hp" 1)
                                                      (("15"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("16"
                                                (skeep)
                                                (("16"
                                                  (lemma "ci_ci")
                                                  (("16"
                                                    (inst
                                                     -1
                                                     "a"
                                                     " 1 + ceiling(s)")
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("17"
                                                (skeep)
                                                (("17"
                                                  (typepred "s")
                                                  (("17"
                                                    (expand
                                                     "closed_interval"
                                                     -1)
                                                    (("17"
                                                      (flatten)
                                                      (("17"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("18"
                                                (skeep)
                                                (("18"
                                                  (expand
                                                   "closed_interval"
                                                   1
                                                   1)
                                                  (("18"
                                                    (assert)
                                                    (("18"
                                                      (typepred "s")
                                                      (("18"
                                                        (expand
                                                         "closed_interval"
                                                         -1)
                                                        (("18"
                                                          (flatten)
                                                          (("18"
                                                            (assert)
                                                            (("18"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("19"
                                                (typepred "x")
                                                (("19"
                                                  (expand "hp" -1)
                                                  (("19"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide 2)
                                        (("2"
                                          (expand "hp" -2)
                                          (("2"
                                            (case "x=a")
                                            (("1"
                                              (inst 1 "0.5")
                                              (("1"
                                                (skeep)
                                                (("1"
                                                  (expand "extend" 1)
                                                  (("1"
                                                    (expand "fullset")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (split 1)
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (expand
                                                           "closed_interval"
                                                           1
                                                           1)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (typepred
                                                               "y")
                                                              (("2"
                                                                (expand
                                                                 "hp"
                                                                 -1)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (inst 2 "min(x-a,0.5)")
                                              (("1"
                                                (skeep)
                                                (("1"
                                                  (case "x-y=0")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand
                                                       "extend"
                                                       2)
                                                      (("1"
                                                        (expand
                                                         "fullset"
                                                         2)
                                                        (("1"
                                                          (expand
                                                           "closed_interval"
                                                           2)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (split 2)
                                                              (("1"
                                                                (propax)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (typepred
                                                                 "x")
                                                                (("2"
                                                                  (expand
                                                                   "hp"
                                                                   -1)
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    (("2"
                                                      (case "x-y>0")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (expand
                                                           "extend"
                                                           3)
                                                          (("1"
                                                            (split 3)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (expand
                                                                 "fullset"
                                                                 1)
                                                                (("1"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (expand
                                                               "closed_interval"
                                                               1
                                                               1)
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        (("2"
                                                          (case
                                                           "x-y<0")
                                                          (("1"
                                                            (expand
                                                             "extend"
                                                             4)
                                                            (("1"
                                                              (split 4)
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (expand
                                                                   "fullset"
                                                                   1
                                                                   1)
                                                                  (("1"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (expand
                                                                 "closed_interval"
                                                                 1
                                                                 1)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (assert)
                                                (("2"
                                                  (expand "min")
                                                  (("2"
                                                    (split 1)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (lift-if 1)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide 2)
                                      (("2"
                                        (hide -1)
                                        (("2"
                                          (skeep)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (typepred "i")
                                              (("2"
                                                (expand "length" -1)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (hide 2)
                                      (("3"
                                        (hide -1)
                                        (("3"
                                          (skeep)
                                          (("3"
                                            (lemma
                                             "restrict_cont[(hp(a)), (closed_interval(a, 1 + ceiling(x)))]")
                                            (("3"
                                              (inst -1 "n" "f")
                                              (("3"
                                                (assert)
                                                (("3"
                                                  (typepred "f")
                                                  (("3"
                                                    (expand
                                                     "Lip_hp?"
                                                     -2)
                                                    (("3"
                                                      (inst
                                                       -2
                                                       "1 + ceiling(x)")
                                                      (("3"
                                                        (assert)
                                                        (("3"
                                                          (typepred
                                                           "x")
                                                          (("3"
                                                            (expand
                                                             "hp")
                                                            (("3"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("4"
                                      (hide 2)
                                      (("4"
                                        (hide -1)
                                        (("4"
                                          (skeep)
                                          (("4"
                                            (skeep)
                                            (("4"
                                              (expand
                                               "closed_interval")
                                              (("4"
                                                (expand "hp")
                                                (("4"
                                                  (flatten)
                                                  (("4"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("5"
                                      (hide 2)
                                      (("5"
                                        (hide -1)
                                        (("5"
                                          (skeep)
                                          (("5"
                                            (lemma "ci_ci")
                                            (("5" (inst?) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("6"
                                      (assert)
                                      (("6"
                                        (hide 2)
                                        (("6"
                                          (hide -1)
                                          (("6"
                                            (skeep)
                                            (("6"
                                              (expand "hp" -1)
                                              (("6" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("7"
                                      (hide 2)
                                      (("7"
                                        (hide -1)
                                        (("7"
                                          (expand "hp" -1)
                                          (("7" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide -)
                                  (("2"
                                    (hide 2)
                                    (("2"
                                      (expand "closed_interval" 1)
                                      (("2"
                                        (typepred "x")
                                        (("2"
                                          (expand "hp" -1)
                                          (("2"
                                            (assert)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide -1)
                              (("2"
                                (typepred "i")
                                (("2"
                                  (expand "length" -1)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (expand "length" 1)
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (skeep)
                          (("2" (typepred "i")
                            (("2" (expand "length" -1)
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil)
                         ("3" (hide 2)
                          (("3" (hide -1)
                            (("3" (skeep)
                              (("3"
                                (lemma
                                 "restrict_cont[(hp(a)), (closed_interval(a, 1 + ceiling(x!1)))]")
                                (("1"
                                  (inst -1 "n" "f")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (typepred "f")
                                      (("1"
                                        (expand "Lip_hp?" -2)
                                        (("1"
                                          (inst -2 "1 + ceiling(x!1)")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (typepred "x!1")
                                              (("1"
                                                (expand "hp" -1)
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide 2)
                                  (("2"
                                    (skeep)
                                    (("2"
                                      (expand "hp")
                                      (("2"
                                        (expand "closed_interval")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (typepred "x!1")
                                  (("3"
                                    (expand "hp")
                                    (("3" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("4" (hide 2)
                          (("4" (hide -1)
                            (("4" (skeep)
                              (("4"
                                (lemma "ci_not_one_element")
                                (("4"
                                  (inst
                                   -1
                                   "(closed_interval(a, 1 + ceiling(x!1)))")
                                  (("1"
                                    (lemma "ci_ci")
                                    (("1"
                                      (inst?)
                                      (("1"
                                        (skeep)
                                        (("1"
                                          (expand "closed_interval")
                                          (("1"
                                            (expand "hp")
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (typepred "x!1")
                                        (("2"
                                          (expand "hp" -1)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (assert)
                                    (("2"
                                      (typepred "x!1")
                                      (("2"
                                        (expand "hp")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (lemma "ci_ci")
                                            (("2" (inst?) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (assert)
                                    (("3"
                                      (typepred "x!1")
                                      (("3"
                                        (expand "hp" -)
                                        (("3" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("5" (hide 2)
                          (("5" (hide -1)
                            (("5" (skeep)
                              (("5"
                                (lemma "ci_connected")
                                (("5"
                                  (lemma "ci_ci")
                                  (("5" (inst?) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("6" (hide 2)
                          (("6" (hide -1)
                            (("6" (skeep)
                              (("6"
                                (lemma "ci_nonempty")
                                (("6"
                                  (inst
                                   -1
                                   "(closed_interval(a, 1 + ceiling(x!1)))")
                                  (("1"
                                    (lemma "ci_ci")
                                    (("1"
                                      (inst -1 "a" "1 + ceiling(x!1)")
                                      (("1"
                                        (expand "closed_interval" 1)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (typepred "x!1")
                                            (("1"
                                              (expand "hp" -1)
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (lemma "ci_ci")
                                    (("2" (inst?) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("7" (assert)
                          (("7" (hide 2)
                            (("7" (skeep)
                              (("7"
                                (lemma "hp_noe")
                                (("7"
                                  (lemma "hp_noe")
                                  (("7"
                                    (inst -1 "a")
                                    (("7"
                                      (assert)
                                      (("7"
                                        (hide -3)
                                        (("7"
                                          (typepred "x!1")
                                          (("7"
                                            (expand "hp" -1)
                                            (("7" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide 2)
                        (("2" (hide -1)
                          (("2" (lemma "hp_noe")
                            (("2" (inst -1 "a") nil nil)) nil))
                          nil))
                        nil)
                       ("3" (hide 2)
                        (("3" (hide -1)
                          (("3" (lemma "hp_dd")
                            (("3" (inst -1 "a") nil nil)) nil))
                          nil))
                        nil)
                       ("4" (hide 2)
                        (("4" (hide -1)
                          (("4" (skeep)
                            (("4" (typepred "x1")
                              (("4"
                                (expand "hp")
                                (("4"
                                  (expand "closed_interval" -)
                                  (("4" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide 2)
                    (("2"
                      (lemma
                       "restrict_cont[(hp(a)), (closed_interval(a, 1 + ceiling(x)))]")
                      (("1" (inst -1 "n" "f")
                        (("1" (assert)
                          (("1" (typepred "f")
                            (("1" (expand "Lip_hp?" -2)
                              (("1"
                                (inst -2 "1+ceiling(x)")
                                (("1"
                                  (assert)
                                  (("1"
                                    (typepred "x")
                                    (("1"
                                      (expand "hp")
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide 2)
                        (("2" (skeep)
                          (("2" (expand "hp")
                            (("2" (expand "closed_interval")
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil)
                       ("3" (hide 2)
                        (("3" (expand "hp") (("3" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (hide 2)
                    (("3" (skeep)
                      (("3" (expand "closed_interval")
                        (("3" (expand "hp") (("3" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("4" (hide 2)
                    (("4" (lemma "ci_ci") (("4" (inst?) nil nil)) nil))
                    nil)
                   ("5" (assert)
                    (("5" (expand "hp" -1) (("5" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((derivable? const-decl "bool" r2v_analysis nil)
    (derivable? const-decl "bool" derivatives analysis)
    (hp const-decl "bool" interval_def nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (Lip_hp? const-decl "bool" ODE_solution_existence_uniqueness nil)
    (restrict const-decl "VectorN(n)" restrict_ode nil)
    (ode_sol const-decl "{yy: r2v_n[d](n) |
   derivable?[d](yy) AND ivt_s_unique?[d](n, car(d_b[d]), f, y0)(yy)}"
     ODE_solution_existence_uniqueness nil)
    (d_b const-decl "{dd: list[real] |
   (length(dd) = 2 AND (d(car(dd)) AND d(car(cdr(dd))))) AND
    FORALL (x: real): (car(dd) <= x AND x <= car(cdr(dd))) IFF d(x)}"
     r2v_continuous_extension nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (ivt_s_unique? const-decl "bool" ODE_def nil)
    (r2v_n type-eq-decl nil r2v_def nil)
    (cont_d? const-decl "bool" ODE_continuous_def nil)
    (Lip_d? const-decl "bool" ODE_Lipschitz_def nil)
    (od_f type-eq-decl nil ODE_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (closed_interval? const-decl "bool" interval_def nil)
    (r2v type-eq-decl nil r2v_def nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (ceiling const-decl "{i | x <= i & i < x + 1}" floor_ceil nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (integer nonempty-type-from-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (closed_interval const-decl "(closed_interval?(a, b))" interval_def
     nil)
    (closed_interval? const-decl "bool" interval_def nil)
    (< const-decl "bool" reals nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (derivable_subtype_del formula-decl nil derivatives_subtype
     analysis)
    (deriv_domain? const-decl "bool" deriv_domain_def analysis)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (x!1 skolem-const-decl "(hp(a))" ODE_solution_existence_uniqueness
     nil)
    (x!1 skolem-const-decl "(hp(a))" ODE_solution_existence_uniqueness
     nil)
    (x!1 skolem-const-decl "(hp(a))" ODE_solution_existence_uniqueness
     nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (FALSE const-decl "bool" booleans nil)
    (extend const-decl "R" extend nil) (set type-eq-decl nil sets nil)
    (fullset const-decl "set" sets nil)
    (member const-decl "bool" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (connected? const-decl "bool" deriv_domain_def analysis)
    (list_extensionality formula-decl nil more_list_props structures)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (restrict_cont formula-decl nil restrict_ode nil)
    (below type-eq-decl nil naturalnumbers nil)
    (x!1 skolem-const-decl "(closed_interval(a, 1 + ceiling(x)))"
     ODE_solution_existence_uniqueness nil)
    (ode_sol_extend formula-decl nil ODE_solution_existence_uniqueness
     nil)
    (hp_ne formula-decl nil interval_def nil)
    (hp_con formula-decl nil interval_def nil)
    (hp_noe formula-decl nil interval_def nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (ci_nonempty formula-decl nil interval_def nil)
    (ci_connected formula-decl nil interval_def nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (TRUE const-decl "bool" booleans nil)
    (s skolem-const-decl "(closed_interval(a, 1 + ceiling(x)))"
     ODE_solution_existence_uniqueness nil)
    (s skolem-const-decl "(closed_interval(a, 1 + ceiling(x)))"
     ODE_solution_existence_uniqueness nil)
    (s skolem-const-decl "(closed_interval(a, 1 + ceiling(x)))"
     ODE_solution_existence_uniqueness nil)
    (s skolem-const-decl "(closed_interval(a, 1 + ceiling(x)))"
     ODE_solution_existence_uniqueness nil)
    (ci_not_one_element formula-decl nil interval_def nil)
    (ci_deriv_domain formula-decl nil interval_def nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ci_ci formula-decl nil interval_def nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (derivable? const-decl "bool" derivatives_def analysis)
    (convergent? const-decl "bool" lim_of_functions analysis)
    (convergence const-decl "bool" lim_of_functions analysis)
    (convergence const-decl "bool" convergence_functions analysis)
    (NQ const-decl "real" derivatives_def analysis)
    (adh const-decl "setof[real]" convergence_functions analysis)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (x skolem-const-decl "(hp(a))" ODE_solution_existence_uniqueness
     nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (i skolem-const-decl "{ii: nat |
   ii <
    length(LAMBDA (t: (hp(a))):
             ode_sol(closed_interval(a, 1 + ceiling(t)), n,
                     restrict[(hp(a)), (closed_interval(a, 1 + ceiling(t)))]
                         (n, f))
                    (y0)(t))}" ODE_solution_existence_uniqueness nil)
    (y0 skolem-const-decl "VectorN(n)"
     ODE_solution_existence_uniqueness nil)
    (length const-decl "nat" r2v_def nil)
    (f skolem-const-decl
     "{ff: od_f[(hp(a))](n) | cont_d?[(hp(a))](n)(ff) AND Lip_hp?(a, n)(ff)}"
     ODE_solution_existence_uniqueness nil)
    (n skolem-const-decl "posnat" ODE_solution_existence_uniqueness
     nil)
    (a skolem-const-decl "real" ODE_solution_existence_uniqueness nil)
    (hp_dd formula-decl nil interval_def nil)
    (nth const-decl "[(d) -> real]" r2v_def nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis))
   nil)
  (ode_sol_derivable-1 nil 3794218276 ("" (postpone) nil nil) nil
   shostak))
 (ode_sol_deriv_TCC1 0
  (ode_sol_deriv_TCC1-1 nil 3794486467
   ("" (skeep)
    (("" (split 1)
      (("1" (inst 1 "n") (("1" (skeep) (("1" (assert) nil nil)) nil))
        nil)
       ("2" (lemma "ode_sol_derivable") (("2" (inst?) nil nil)) nil))
      nil))
    nil)
   ((int_plus_int_is_int application-judgement "int" integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (Lip_hp? const-decl "bool" ODE_solution_existence_uniqueness nil)
    (cont_d? const-decl "bool" ODE_continuous_def nil)
    (od_f type-eq-decl nil ODE_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (hp const-decl "bool" interval_def nil)
    (ode_sol_derivable formula-decl nil
     ODE_solution_existence_uniqueness nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis))
   nil
   (ode_sol_deriv subtype
    "LAMBDA (t: (interval_def.hp(ODE_solution_existence_uniqueness.a))): ODE_solution_existence_uniqueness.ode_sol(interval_def.closed_interval(ODE_solution_existence_uniqueness.a, (number_fields.+)(floor_ceil.ceiling(t), 1)), ODE_solution_existence_uniqueness.n, restrict_ode[(interval_def.hp(ODE_solution_existence_uniqueness.a)), (interval_def.closed_interval(ODE_solution_existence_uniqueness.a, (number_fields.+)(1, floor_ceil.ceiling(t))))].restrict(ODE_solution_existence_uniqueness.n, ODE_solution_existence_uniqueness.f))(ODE_solution_existence_uniqueness.y0)(t)"
    "(r2v_analysis[(interval_def.hp(ODE_solution_existence_uniqueness.a))].derivable?)")))
 (ode_sol_deriv_TCC2 0
  (ode_sol_deriv_TCC2-1 nil 3794486467 ("" (subtype-tcc) nil nil)
   ((real_minus_real_is_real application-judgement "real" reals nil))
   nil
   (ode_sol_deriv subtype
    "ODE_solution_existence_uniqueness.ode_sol(interval_def.closed_interval(ODE_solution_existence_uniqueness.a, (number_fields.+)(floor_ceil.ceiling(ODE_solution_existence_uniqueness.x), 1)), ODE_solution_existence_uniqueness.n, restrict_ode[(interval_def.hp(ODE_solution_existence_uniqueness.a)), (interval_def.closed_interval(ODE_solution_existence_uniqueness.a, (number_fields.+)(1, floor_ceil.ceiling(ODE_solution_existence_uniqueness.x))))].restrict(ODE_solution_existence_uniqueness.n, ODE_solution_existence_uniqueness.f))(ODE_solution_existence_uniqueness.y0)"
    "(r2v_analysis[interval_def.closed_interval(ODE_solution_existence_uniqueness.a, (number_fields.+)(floor_ceil.ceiling(ODE_solution_existence_uniqueness.x), 1))].derivable?)")))
 (ode_sol_deriv 0
  (ode_sol_deriv-1 nil 3794486993
   ("" (skeep)
    (("" (lemma "list_extensionality")
      (("" (inst?)
        (("1" (assert)
          (("1" (hide 2)
            (("1" (split 1)
              (("1" (assert)
                (("1"
                  (typepred "deriv[(hp(a))]
                 (LAMBDA (t: (hp(a))):
                    ode_sol(closed_interval(a, 1 + ceiling(t)), n,
                            restrict
                                [(hp(a)),
                                 (closed_interval(a, 1 + ceiling(t)))]
                                (n, f))
                           (y0)(t))")
                  (("1" (assert)
                    (("1" (expand "length" -2 2)
                      (("1" (assert)
                        (("1"
                          (typepred
                           "deriv[closed_interval(a, 1 + ceiling(x))]
                  (ode_sol(closed_interval(a, 1 + ceiling(x)), n,
                           restrict
                               [(hp(a)),
                                (closed_interval(a, 1 + ceiling(x)))]
                               (n, f))
                          (y0))
                  ")
                          (("1" (expand "length" -2)
                            (("1" (assert)
                              (("1"
                                (skeep -1)
                                (("1"
                                  (inst-cp -1 "x")
                                  (("1"
                                    (inst
                                     -1
                                     "choose[real](closed_interval(a, 1 + ceiling(x)))")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand "length" -5 1)
                                        (("1"
                                          (skeep)
                                          (("1"
                                            (inst-cp -4 "x")
                                            (("1"
                                              (inst
                                               -4
                                               "choose[real]((hp(a)))")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide 2)
                            (("2" (hide -1 -2)
                              (("2"
                                (skeep)
                                (("2"
                                  (expand "closed_interval" -1)
                                  (("2"
                                    (expand "hp" 1)
                                    (("2"
                                      (flatten)
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide 2)
                    (("2" (split 1)
                      (("1" (inst 1 "n")
                        (("1" (skeep) (("1" (assert) nil nil)) nil))
                        nil)
                       ("2" (lemma "ode_sol_derivable")
                        (("2" (inst?) (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("3" (hide 2)
                    (("3" (skeep)
                      (("3" (typepred "f")
                        (("3"
                          (lemma
                           "restrict_cont[(hp(a)), (closed_interval(a, 1 + ceiling(t)))]")
                          (("1" (inst?)
                            (("1" (assert)
                              (("1"
                                (expand "Lip_hp?" -3)
                                (("1"
                                  (inst -3 "1+ceiling(t)")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (typepred "t")
                                      (("1"
                                        (expand "hp" -)
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide 2)
                            (("2" (skeep)
                              (("2"
                                (assert)
                                (("2"
                                  (expand "closed_interval" -1)
                                  (("2"
                                    (expand "hp" 1)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (hide 2)
                            (("3" (typepred "t")
                              (("3"
                                (expand "hp" -1)
                                (("3" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("4" (hide 2)
                    (("4" (skeep*)
                      (("4" (expand "closed_interval")
                        (("4" (expand "hp" 1) (("4" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("5" (hide 2)
                    (("5" (skeep)
                      (("5" (lemma "ci_ci")
                        (("5" (inst -1 "a" "1+ceiling(t)") nil nil))
                        nil))
                      nil))
                    nil)
                   ("6" (assert)
                    (("6" (hide 2)
                      (("6" (skeep)
                        (("6" (expand "closed_interval")
                          (("6" (typepred "t")
                            (("6" (assert)
                              (("6"
                                (expand "hp" -)
                                (("6"
                                  (assert)
                                  (("6" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("7" (hide 2)
                    (("7" (skeep)
                      (("7" (typepred "t")
                        (("7" (expand "hp" -1) (("7" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (skeep)
                (("2" (lemma "deriv_nth[(hp(a))]")
                  (("2"
                    (inst -1 " (LAMBDA (t: (hp(a))):
                 ode_sol(closed_interval(a, 1 + ceiling(t)), n,
                         restrict
                             [(hp(a)), (closed_interval(a, 1 + ceiling(t)))]
                             (n, f))
                        (y0)(t))" "n_1")
                    (("1" (decompose-equality -1)
                      (("1" (inst -1 "x")
                        (("1" (expand "nth" -1 1)
                          (("1" (replace -1 1 lr)
                            (("1" (hide -1)
                              (("1"
                                (lemma
                                 "deriv_nth[closed_interval(a, 1 + ceiling(x))]")
                                (("1"
                                  (inst
                                   -1
                                   " (ode_sol(closed_interval(a, 1 + ceiling(x)), n,
                        restrict
                            [(hp(a)), (closed_interval(a, 1 + ceiling(x)))]
                            (n, f))
                       (y0))"
                                   "n_1")
                                  (("1"
                                    (decompose-equality -1)
                                    (("1"
                                      (inst -1 "x")
                                      (("1"
                                        (expand "nth" -1)
                                        (("1"
                                          (replace -1 1 lr)
                                          (("1"
                                            (hide -1)
                                            (("1"
                                              (lemma
                                               "deriv_subtype_del[(hp(a)), (closed_interval(a, 1 + ceiling(x)))]")
                                              (("1"
                                                (inst
                                                 -1
                                                 "LAMBDA (x: (hp(a))) -> real:
                               nth(ode_sol(closed_interval(a, 1 + ceiling(x)), n,
                                           restrict
                                               [(hp(a)),
                                                (closed_interval(a, 1 + ceiling(x)))]
                                               (n, f))
                                          (y0)(x),
                                   n_1)"
                                                 "_"
                                                 "_")
                                                (("1"
                                                  (inst
                                                   -1
                                                   "(LAMBDA (x1: (closed_interval(a, 1 + ceiling(x)))) -> real:
                                           nth(ode_sol(closed_interval(a, 1 + ceiling(x)), n,
                                                       restrict
                                                           [(hp(a)),
                                                            (closed_interval(a, 1 + ceiling(x)))]
                                                           (n, f))
                                                      (y0)(x1),
                                               n_1))"
                                                   "_")
                                                  (("1"
                                                    (inst -1 "x")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand
                                                         "nth"
                                                         1
                                                         1)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (split -1)
                                                            (("1"
                                                              (expand
                                                               "deriv"
                                                               1)
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide 2)
                                                              (("2"
                                                                (lemma
                                                                 "ci_deriv_domain")
                                                                (("2"
                                                                  (inst
                                                                   -1
                                                                   "(closed_interval(a, 1 + ceiling(x)))")
                                                                  (("1"
                                                                    (lemma
                                                                     "ci_ci")
                                                                    (("1"
                                                                      (inst?)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (typepred
                                                                       "x")
                                                                      (("2"
                                                                        (expand
                                                                         "hp"
                                                                         -1)
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("3"
                                                              (hide 2)
                                                              (("3"
                                                                (lemma
                                                                 "ci_not_one_element")
                                                                (("3"
                                                                  (inst
                                                                   -1
                                                                   "(closed_interval(a, 1 + ceiling(x)))")
                                                                  (("1"
                                                                    (lemma
                                                                     "ci_ci")
                                                                    (("1"
                                                                      (inst?)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (typepred
                                                                       "x")
                                                                      (("2"
                                                                        (expand
                                                                         "hp"
                                                                         -1)
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("4"
                                                              (hide 2)
                                                              (("4"
                                                                (decompose-equality
                                                                 1)
                                                                (("1"
                                                                  (case
                                                                   " 1 + ceiling(x!1) = 1 + ceiling(x)")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (replace
                                                                       -1)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (expand
                                                                           "restrict")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (lemma
                                                                               "list_extensionality")
                                                                              (("1"
                                                                                (inst
                                                                                 -1
                                                                                 "(ode_sol(closed_interval(a, 1 + ceiling(x)), n,
                                                              LAMBDA (x: (closed_interval(a, 1 + ceiling(x!1))),
                                                                      v: VectorN(n)) -> VectorN(n):
                                                                f(x, v))
                                                             (y0)(x!1))"
                                                                                 "ode_sol(closed_interval(a, 1 + ceiling(x)), n,
                                                               LAMBDA (x1: (closed_interval(a, 1 + ceiling(x))),
                                                                       v: VectorN(n)) -> VectorN(n):
                                                                 f(x1, v))
                                                              (y0)(x!1)")
                                                                                (("1"
                                                                                  (flatten)
                                                                                  (("1"
                                                                                    (hide
                                                                                     -2)
                                                                                    (("1"
                                                                                      (split
                                                                                       -1)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (inst
                                                                                           -1
                                                                                           "n_1")
                                                                                          nil
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (hide
                                                                                         2)
                                                                                        (("2"
                                                                                          (case
                                                                                           "(LAMBDA (x: (closed_interval(a, 1 + ceiling(x!1))),
                                                                                     v: VectorN(n)) -> VectorN(n):
                                                                               f(x, v)) = ( LAMBDA (x1: (closed_interval(a, 1 + ceiling(x))),
                                                                                     v: VectorN(n)) -> VectorN(n):
                                                                               f(x1, v))")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil)
                                                                                           ("2"
                                                                                            (decompose-equality
                                                                                             1)
                                                                                            (("1"
                                                                                              (hide
                                                                                               2)
                                                                                              (("1"
                                                                                                (skeep)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "closed_interval")
                                                                                                  (("1"
                                                                                                    (split
                                                                                                     1)
                                                                                                    (("1"
                                                                                                      (flatten)
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (flatten)
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (hide
                                                                                               2)
                                                                                              (("2"
                                                                                                (skeep)
                                                                                                (("2"
                                                                                                  (typepred
                                                                                                   "x1")
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "closed_interval")
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "hp")
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("3"
                                                                                              (hide
                                                                                               2)
                                                                                              (("3"
                                                                                                (skeep)
                                                                                                (("3"
                                                                                                  (typepred
                                                                                                   "x!2")
                                                                                                  (("3"
                                                                                                    (expand
                                                                                                     "closed_interval"
                                                                                                     -1)
                                                                                                    (("3"
                                                                                                      (expand
                                                                                                       "hp")
                                                                                                      (("3"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("4"
                                                                                              (hide
                                                                                               2)
                                                                                              (("4"
                                                                                                (typepred
                                                                                                 "x!1")
                                                                                                (("4"
                                                                                                  (expand
                                                                                                   "closed_interval")
                                                                                                  (("4"
                                                                                                    (propax)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("3"
                                                                                            (hide
                                                                                             2)
                                                                                            (("3"
                                                                                              (skeep)
                                                                                              (("3"
                                                                                                (split
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (flatten)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (flatten)
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("4"
                                                                                            (hide
                                                                                             2)
                                                                                            (("4"
                                                                                              (skeep)
                                                                                              (("4"
                                                                                                (typepred
                                                                                                 "x1")
                                                                                                (("4"
                                                                                                  (expand
                                                                                                   "closed_interval"
                                                                                                   -1)
                                                                                                  (("4"
                                                                                                    (expand
                                                                                                     "hp")
                                                                                                    (("4"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("5"
                                                                                            (hide
                                                                                             2)
                                                                                            (("5"
                                                                                              (skeep)
                                                                                              (("5"
                                                                                                (typepred
                                                                                                 "x!2")
                                                                                                (("5"
                                                                                                  (expand
                                                                                                   "closed_interval")
                                                                                                  (("5"
                                                                                                    (expand
                                                                                                     "hp")
                                                                                                    (("5"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("6"
                                                                                            (hide
                                                                                             2)
                                                                                            (("6"
                                                                                              (typepred
                                                                                               "x!1")
                                                                                              (("6"
                                                                                                (expand
                                                                                                 "closed_interval"
                                                                                                 -1)
                                                                                                (("6"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (hide
                                                                                   2)
                                                                                  (("2"
                                                                                    (lemma
                                                                                     "restrict_cont[(hp(a)), (closed_interval(a, 1 + ceiling(x)))]")
                                                                                    (("1"
                                                                                      (inst
                                                                                       -1
                                                                                       "n"
                                                                                       "f")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "restrict"
                                                                                           -1)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (typepred
                                                                                               "f")
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "Lip_hp?"
                                                                                                 -2)
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -2
                                                                                                   "1 + ceiling(x)")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "restrict"
                                                                                                       -2)
                                                                                                      (("1"
                                                                                                        (propax)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (hide
                                                                                                     2)
                                                                                                    (("2"
                                                                                                      (typepred
                                                                                                       "x")
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "hp"
                                                                                                         -)
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (hide
                                                                                       2)
                                                                                      (("2"
                                                                                        (skeep)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "closed_interval")
                                                                                          (("2"
                                                                                            (expand
                                                                                             "hp"
                                                                                             1)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("3"
                                                                                  (hide
                                                                                   2)
                                                                                  (("3"
                                                                                    (skeep)
                                                                                    (("3"
                                                                                      (typepred
                                                                                       "x1")
                                                                                      (("3"
                                                                                        (expand
                                                                                         "closed_interval"
                                                                                         -)
                                                                                        (("3"
                                                                                          (expand
                                                                                           "hp"
                                                                                           1)
                                                                                          (("3"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("4"
                                                                                  (hide
                                                                                   2)
                                                                                  (("4"
                                                                                    (case
                                                                                     "(LAMBDA (x: (closed_interval(a, 1 + ceiling(x!1))),
                                                                             v: VectorN(n)) -> VectorN(n):
                                                                       f(x, v)) = (LAMBDA (x: (closed_interval(a, 1 + ceiling(x))),
                                                                             v: VectorN(n)) -> VectorN(n):
                                                                       f(x, v))")
                                                                                    (("1"
                                                                                      (typepred
                                                                                       "f")
                                                                                      (("1"
                                                                                        (lemma
                                                                                         "restrict_cont[(hp(a)), (closed_interval(a, 1 + ceiling(x)))]")
                                                                                        (("1"
                                                                                          (inst
                                                                                           -1
                                                                                           "n"
                                                                                           "f")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (hide
                                                                                           2)
                                                                                          (("2"
                                                                                            (skeep)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "closed_interval")
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "hp"
                                                                                                 1)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (hide
                                                                                       2)
                                                                                      (("2"
                                                                                        (decompose-equality
                                                                                         1)
                                                                                        (("1"
                                                                                          (skeep)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "closed_interval"
                                                                                             1)
                                                                                            (("1"
                                                                                              (split
                                                                                               1)
                                                                                              (("1"
                                                                                                (flatten)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (flatten)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (skeep)
                                                                                          (("2"
                                                                                            (typepred
                                                                                             "x!2")
                                                                                            (("2"
                                                                                              (expand
                                                                                               "closed_interval"
                                                                                               -1)
                                                                                              (("2"
                                                                                                (flatten)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "hp"
                                                                                                   1)
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("3"
                                                                                          (typepred
                                                                                           "x")
                                                                                          (("3"
                                                                                            (expand
                                                                                             "hp"
                                                                                             -1)
                                                                                            (("3"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("4"
                                                                                          (skeep)
                                                                                          (("4"
                                                                                            (expand
                                                                                             "hp")
                                                                                            (("4"
                                                                                              (typepred
                                                                                               "x!2")
                                                                                              (("4"
                                                                                                (expand
                                                                                                 "closed_interval"
                                                                                                 -1)
                                                                                                (("4"
                                                                                                  (flatten)
                                                                                                  (("4"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("5"
                                                                                          (typepred
                                                                                           "x!1")
                                                                                          (("5"
                                                                                            (expand
                                                                                             "closed_interval")
                                                                                            (("5"
                                                                                              (propax)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("3"
                                                                                      (assert)
                                                                                      (("3"
                                                                                        (hide
                                                                                         2)
                                                                                        (("3"
                                                                                          (skeep)
                                                                                          (("3"
                                                                                            (expand
                                                                                             "closed_interval")
                                                                                            (("3"
                                                                                              (split
                                                                                               1)
                                                                                              (("1"
                                                                                                (flatten)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (flatten)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("4"
                                                                                      (hide
                                                                                       2)
                                                                                      (("4"
                                                                                        (skeep)
                                                                                        (("4"
                                                                                          (typepred
                                                                                           "x!2")
                                                                                          (("4"
                                                                                            (expand
                                                                                             "closed_interval"
                                                                                             -1)
                                                                                            (("4"
                                                                                              (expand
                                                                                               "hp"
                                                                                               1)
                                                                                              (("4"
                                                                                                (flatten)
                                                                                                (("4"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("5"
                                                                                      (hide
                                                                                       2)
                                                                                      (("5"
                                                                                        (skeep)
                                                                                        (("5"
                                                                                          (typepred
                                                                                           "x!2")
                                                                                          (("5"
                                                                                            (expand
                                                                                             "closed_interval"
                                                                                             -1)
                                                                                            (("5"
                                                                                              (expand
                                                                                               "hp"
                                                                                               1)
                                                                                              (("5"
                                                                                                (flatten)
                                                                                                (("5"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("6"
                                                                                      (hide
                                                                                       2)
                                                                                      (("6"
                                                                                        (typepred
                                                                                         "x!1")
                                                                                        (("6"
                                                                                          (expand
                                                                                           "closed_interval"
                                                                                           -1)
                                                                                          (("6"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("5"
                                                                                  (hide
                                                                                   2)
                                                                                  (("5"
                                                                                    (skeep)
                                                                                    (("5"
                                                                                      (split
                                                                                       1)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "closed_interval")
                                                                                        (("1"
                                                                                          (flatten)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (flatten)
                                                                                        (("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("6"
                                                                                  (hide
                                                                                   2)
                                                                                  (("6"
                                                                                    (skeep)
                                                                                    (("6"
                                                                                      (typepred
                                                                                       "x!2")
                                                                                      (("6"
                                                                                        (expand
                                                                                         "hp")
                                                                                        (("6"
                                                                                          (expand
                                                                                           "closed_interval")
                                                                                          (("6"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("7"
                                                                                  (hide
                                                                                   2)
                                                                                  (("7"
                                                                                    (typepred
                                                                                     "x!1")
                                                                                    (("7"
                                                                                      (expand
                                                                                       "closed_interval"
                                                                                       -1)
                                                                                      (("7"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (lemma
                                                                     "ode_sol_extend")
                                                                    (("2"
                                                                      (case
                                                                       "ceiling(x!1)< ceiling(x)")
                                                                      (("1"
                                                                        (inst
                                                                         -2
                                                                         "n"
                                                                         "a"
                                                                         "1+ceiling(x!1)"
                                                                         "1+ceiling(x)"
                                                                         "restrict[(hp(a)), (closed_interval(a, 1 + ceiling(x)))]
                                                                           (n, f)"
                                                                         "y0")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (decompose-equality
                                                                             -2)
                                                                            (("1"
                                                                              (inst
                                                                               -1
                                                                               "x!1")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (expand
                                                                                   "restrict")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (hide
                                                                               2)
                                                                              (("2"
                                                                                (hide
                                                                                 2)
                                                                                (("2"
                                                                                  (lemma
                                                                                   "ci_not_one_element")
                                                                                  (("2"
                                                                                    (inst
                                                                                     -1
                                                                                     "(closed_interval(a, 1 + ceiling(x!1)))")
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("3"
                                                                              (hide
                                                                               -)
                                                                              (("3"
                                                                                (hide
                                                                                 2
                                                                                 3)
                                                                                (("3"
                                                                                  (expand
                                                                                   "connected?"
                                                                                   1)
                                                                                  (("3"
                                                                                    (skeep)
                                                                                    (("3"
                                                                                      (typepred
                                                                                       "z")
                                                                                      (("3"
                                                                                        (typepred
                                                                                         "y")
                                                                                        (("3"
                                                                                          (expand
                                                                                           "closed_interval"
                                                                                           -1)
                                                                                          (("3"
                                                                                            (flatten)
                                                                                            (("3"
                                                                                              (expand
                                                                                               "closed_interval"
                                                                                               1
                                                                                               1)
                                                                                              (("3"
                                                                                                (assert)
                                                                                                (("3"
                                                                                                  (typepred
                                                                                                   "z")
                                                                                                  (("3"
                                                                                                    (typepred
                                                                                                     "x!2")
                                                                                                    (("3"
                                                                                                      (expand
                                                                                                       "closed_interval"
                                                                                                       -1)
                                                                                                      (("3"
                                                                                                        (propax)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("4"
                                                                              (hide
                                                                               -)
                                                                              (("4"
                                                                                (lemma
                                                                                 "ci_nonempty")
                                                                                (("4"
                                                                                  (inst
                                                                                   -1
                                                                                   "(closed_interval(a, 1 + ceiling(x!1)))")
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("5"
                                                                              (lemma
                                                                               "ci_ci")
                                                                              (("5"
                                                                                (inst?)
                                                                                (("5"
                                                                                  (lemma
                                                                                   "ci_nonempty")
                                                                                  (("5"
                                                                                    (inst
                                                                                     -1
                                                                                     "(closed_interval(a, 1 + ceiling(x)))")
                                                                                    (("5"
                                                                                      (lemma
                                                                                       "ci_not_one_element")
                                                                                      (("5"
                                                                                        (inst
                                                                                         -1
                                                                                         "(closed_interval(a, 1 + ceiling(x)))")
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("6"
                                                                              (lemma
                                                                               "ci_ci")
                                                                              (("6"
                                                                                (hide
                                                                                 2
                                                                                 3)
                                                                                (("6"
                                                                                  (hide
                                                                                   -)
                                                                                  (("6"
                                                                                    (lemma
                                                                                     "ci_connected")
                                                                                    (("6"
                                                                                      (inst
                                                                                       -1
                                                                                       "(closed_interval(a, 1 + ceiling(x)))")
                                                                                      (("1"
                                                                                        (lemma
                                                                                         "ci_ci")
                                                                                        (("1"
                                                                                          (inst?)
                                                                                          nil
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (typepred
                                                                                         "x")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "hp"
                                                                                           -1)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("7"
                                                                              (hide
                                                                               2
                                                                               3)
                                                                              (("7"
                                                                                (lemma
                                                                                 "ci_nonempty")
                                                                                (("7"
                                                                                  (inst
                                                                                   -1
                                                                                   "(closed_interval(a, 1 + ceiling(x)))")
                                                                                  (("7"
                                                                                    (lemma
                                                                                     "ci_ci")
                                                                                    (("7"
                                                                                      (inst?)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("8"
                                                                              (expand
                                                                               "closed_interval")
                                                                              (("8"
                                                                                (flatten)
                                                                                (("8"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("9"
                                                                              (expand
                                                                               "hp")
                                                                              (("9"
                                                                                (expand
                                                                                 "closed_interval")
                                                                                (("9"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("10"
                                                                              (expand
                                                                               "hp")
                                                                              (("10"
                                                                                (expand
                                                                                 "closed_interval")
                                                                                (("10"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("11"
                                                                              (expand
                                                                               "closed_interval")
                                                                              (("11"
                                                                                (assert)
                                                                                (("11"
                                                                                  (flatten)
                                                                                  (("11"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (skeep)
                                                                          (("2"
                                                                            (expand
                                                                             "hp")
                                                                            (("2"
                                                                              (expand
                                                                               "closed_interval")
                                                                              (("2"
                                                                                (flatten)
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("3"
                                                                          (assert)
                                                                          nil
                                                                          nil)
                                                                         ("4"
                                                                          (typepred
                                                                           "x!1")
                                                                          (("4"
                                                                            (expand
                                                                             "closed_interval"
                                                                             -1)
                                                                            (("4"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (case
                                                                         "NOT ceiling(x) < ceiling(x!1)")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (inst
                                                                           -2
                                                                           "n"
                                                                           "a"
                                                                           "1+ceiling(x)"
                                                                           "1+ceiling(x!1)"
                                                                           "restrict[(hp(a)), (closed_interval(a, 1 + ceiling(x!1)))]
                                                                              (n, f)"
                                                                           "y0")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (decompose-equality
                                                                               -2)
                                                                              (("1"
                                                                                (inst
                                                                                 -1
                                                                                 "x!1")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "restrict")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (hide
                                                                                 -)
                                                                                (("2"
                                                                                  (hide
                                                                                   2)
                                                                                  (("2"
                                                                                    (hide
                                                                                     2)
                                                                                    (("2"
                                                                                      (lemma
                                                                                       "ci_not_one_element")
                                                                                      (("2"
                                                                                        (inst
                                                                                         -1
                                                                                         "(closed_interval(a, 1 + ceiling(x)))")
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("3"
                                                                                (hide
                                                                                 2
                                                                                 3)
                                                                                (("3"
                                                                                  (lemma
                                                                                   "ci_connected")
                                                                                  (("3"
                                                                                    (inst
                                                                                     -1
                                                                                     "(closed_interval(a, 1 + ceiling(x)))")
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("4"
                                                                                (lemma
                                                                                 "ci_ci")
                                                                                (("4"
                                                                                  (lemma
                                                                                   "ci_nonempty")
                                                                                  (("4"
                                                                                    (inst
                                                                                     -1
                                                                                     "(closed_interval(a, 1 + ceiling(x)))")
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("5"
                                                                                (expand
                                                                                 "closed_interval"
                                                                                 1)
                                                                                (("5"
                                                                                  (expand
                                                                                   "closed_interval"
                                                                                   -)
                                                                                  (("5"
                                                                                    (flatten)
                                                                                    (("5"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("6"
                                                                                (hide
                                                                                 -3)
                                                                                (("6"
                                                                                  (lemma
                                                                                   "ci_not_one_element")
                                                                                  (("6"
                                                                                    (inst
                                                                                     -1
                                                                                     "(closed_interval(a, 1 + ceiling(x!1)))")
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("7"
                                                                                (lemma
                                                                                 "ci_connected")
                                                                                (("7"
                                                                                  (inst
                                                                                   -1
                                                                                   "(closed_interval(a, 1 + ceiling(x!1)))")
                                                                                  nil
                                                                                  nil))
                                                                                nil)
                                                                               ("8"
                                                                                (lemma
                                                                                 "ci_nonempty")
                                                                                (("8"
                                                                                  (inst
                                                                                   -1
                                                                                   "(closed_interval(a, 1 + ceiling(x!1)))")
                                                                                  nil
                                                                                  nil))
                                                                                nil)
                                                                               ("9"
                                                                                (lemma
                                                                                 "hp_noe")
                                                                                (("9"
                                                                                  (inst
                                                                                   -1
                                                                                   "a")
                                                                                  nil
                                                                                  nil))
                                                                                nil)
                                                                               ("10"
                                                                                (lemma
                                                                                 "hp_con")
                                                                                (("10"
                                                                                  (inst
                                                                                   -1
                                                                                   "a")
                                                                                  nil
                                                                                  nil))
                                                                                nil)
                                                                               ("11"
                                                                                (lemma
                                                                                 "hp_ne")
                                                                                (("11"
                                                                                  (inst
                                                                                   -1
                                                                                   "a")
                                                                                  nil
                                                                                  nil))
                                                                                nil)
                                                                               ("12"
                                                                                (expand
                                                                                 "closed_interval"
                                                                                 -)
                                                                                (("12"
                                                                                  (expand
                                                                                   "hp")
                                                                                  (("12"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("13"
                                                                                (hide
                                                                                 -4)
                                                                                (("13"
                                                                                  (lemma
                                                                                   "ci_not_one_element")
                                                                                  (("13"
                                                                                    (inst
                                                                                     -1
                                                                                     "(closed_interval(a, 1 + ceiling(x!1)))")
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("14"
                                                                                (lemma
                                                                                 "ci_connected")
                                                                                (("14"
                                                                                  (inst
                                                                                   -1
                                                                                   "(closed_interval(a, 1 + ceiling(x!1)))")
                                                                                  nil
                                                                                  nil))
                                                                                nil)
                                                                               ("15"
                                                                                (lemma
                                                                                 "ci_nonempty")
                                                                                (("15"
                                                                                  (inst
                                                                                   -1
                                                                                   "(closed_interval(a, 1 + ceiling(x!1)))")
                                                                                  nil
                                                                                  nil))
                                                                                nil)
                                                                               ("16"
                                                                                (lemma
                                                                                 "hp_noe")
                                                                                (("16"
                                                                                  (inst
                                                                                   -1
                                                                                   "a")
                                                                                  nil
                                                                                  nil))
                                                                                nil)
                                                                               ("17"
                                                                                (lemma
                                                                                 "hp_con")
                                                                                (("17"
                                                                                  (inst
                                                                                   -1
                                                                                   "a")
                                                                                  nil
                                                                                  nil))
                                                                                nil)
                                                                               ("18"
                                                                                (lemma
                                                                                 "hp_ne")
                                                                                (("18"
                                                                                  (inst
                                                                                   -1
                                                                                   "a")
                                                                                  nil
                                                                                  nil))
                                                                                nil)
                                                                               ("19"
                                                                                (expand
                                                                                 "closed_interval"
                                                                                 -)
                                                                                (("19"
                                                                                  (expand
                                                                                   "hp")
                                                                                  (("19"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("20"
                                                                                (expand
                                                                                 "closed_interval")
                                                                                (("20"
                                                                                  (assert)
                                                                                  (("20"
                                                                                    (flatten)
                                                                                    (("20"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (lemma
                                                                             "ci_not_one_element")
                                                                            (("2"
                                                                              (inst
                                                                               -1
                                                                               "(closed_interval(a, 1 + ceiling(x!1)))")
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("3"
                                                                            (lemma
                                                                             "ci_connected")
                                                                            (("3"
                                                                              (inst
                                                                               -1
                                                                               "(closed_interval(a, 1 + ceiling(x!1)))")
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("4"
                                                                            (assert)
                                                                            (("4"
                                                                              (lemma
                                                                               "ci_nonempty")
                                                                              (("4"
                                                                                (inst
                                                                                 -1
                                                                                 "(closed_interval(a, 1 + ceiling(x!1)))")
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("5"
                                                                            (lemma
                                                                             "hp_noe")
                                                                            (("5"
                                                                              (inst
                                                                               -1
                                                                               "a")
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("6"
                                                                            (lemma
                                                                             "hp_con")
                                                                            (("6"
                                                                              (inst
                                                                               -1
                                                                               "a")
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("7"
                                                                            (lemma
                                                                             "hp_ne")
                                                                            (("7"
                                                                              (inst
                                                                               -1
                                                                               "a")
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("8"
                                                                            (assert)
                                                                            (("8"
                                                                              (skeep)
                                                                              (("8"
                                                                                (expand
                                                                                 "closed_interval")
                                                                                (("8"
                                                                                  (expand
                                                                                   "hp")
                                                                                  (("8"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("9"
                                                                            (assert)
                                                                            nil
                                                                            nil)
                                                                           ("10"
                                                                            (assert)
                                                                            (("10"
                                                                              (typepred
                                                                               "x")
                                                                              (("10"
                                                                                (expand
                                                                                 "hp")
                                                                                (("10"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (skeep)
                                                                  (("2"
                                                                    (typepred
                                                                     "n_1")
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (typepred
                                                                         "deriv[(hp(a))]
                  (LAMBDA (t: (hp(a))):
                     ode_sol(closed_interval(a, 1 + ceiling(t)), n,
                             restrict
                                 [(hp(a)),
                                  (closed_interval(a, 1 + ceiling(t)))]
                                 (n, f))
                            (y0)(t))")
                                                                        (("1"
                                                                          (expand
                                                                           "length"
                                                                           -2)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (skeep)
                                                                              (("1"
                                                                                (inst-cp
                                                                                 -1
                                                                                 "choose[real]((hp(a)))")
                                                                                (("1"
                                                                                  (inst
                                                                                   -1
                                                                                   "x")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (hide
                                                                           2)
                                                                          (("2"
                                                                            (split
                                                                             1)
                                                                            (("1"
                                                                              (inst
                                                                               1
                                                                               "n")
                                                                              (("1"
                                                                                (skeep)
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (lemma
                                                                               "ode_sol_derivable")
                                                                              (("2"
                                                                                (inst?)
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("3"
                                                                          (hide
                                                                           2)
                                                                          (("3"
                                                                            (skeep)
                                                                            (("3"
                                                                              (hide
                                                                               -1)
                                                                              (("3"
                                                                                (typepred
                                                                                 "f")
                                                                                (("3"
                                                                                  (lemma
                                                                                   "restrict_cont[(hp(a)), (closed_interval(a, 1 + ceiling(t)))]")
                                                                                  (("1"
                                                                                    (inst?)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "Lip_hp?"
                                                                                         -3)
                                                                                        (("1"
                                                                                          (inst
                                                                                           -3
                                                                                           "1+ceiling(t)")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (typepred
                                                                                               "t")
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "hp"
                                                                                                 -)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (hide
                                                                                     2)
                                                                                    (("2"
                                                                                      (skeep)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "closed_interval"
                                                                                         -1)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "hp"
                                                                                           1)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("3"
                                                                                    (hide
                                                                                     2)
                                                                                    (("3"
                                                                                      (typepred
                                                                                       "t")
                                                                                      (("3"
                                                                                        (expand
                                                                                         "hp"
                                                                                         -1)
                                                                                        (("3"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("4"
                                                                          (hide
                                                                           2)
                                                                          (("4"
                                                                            (hide
                                                                             -1)
                                                                            (("4"
                                                                              (skeep)
                                                                              (("4"
                                                                                (skeep)
                                                                                (("4"
                                                                                  (expand
                                                                                   "closed_interval"
                                                                                   -1)
                                                                                  (("4"
                                                                                    (expand
                                                                                     "hp"
                                                                                     1)
                                                                                    (("4"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("5"
                                                                          (hide
                                                                           2)
                                                                          (("5"
                                                                            (skeep)
                                                                            (("5"
                                                                              (lemma
                                                                               "ci_ci")
                                                                              (("5"
                                                                                (inst?)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("6"
                                                                          (assert)
                                                                          (("6"
                                                                            (hide
                                                                             2)
                                                                            (("6"
                                                                              (skeep)
                                                                              (("6"
                                                                                (typepred
                                                                                 "t")
                                                                                (("6"
                                                                                  (expand
                                                                                   "closed_interval"
                                                                                   1)
                                                                                  (("6"
                                                                                    (assert)
                                                                                    (("6"
                                                                                      (expand
                                                                                       "hp"
                                                                                       -1)
                                                                                      (("6"
                                                                                        (assert)
                                                                                        (("6"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("7"
                                                                          (hide
                                                                           2)
                                                                          (("7"
                                                                            (skeep)
                                                                            (("7"
                                                                              (typepred
                                                                               "t")
                                                                              (("7"
                                                                                (expand
                                                                                 "hp"
                                                                                 -)
                                                                                (("7"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("3"
                                                                  (skeep)
                                                                  (("3"
                                                                    (typepred
                                                                     "f")
                                                                    (("3"
                                                                      (expand
                                                                       "Lip_hp?"
                                                                       -2)
                                                                      (("3"
                                                                        (inst
                                                                         -2
                                                                         "1+ceiling(x)")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (lemma
                                                                             "restrict_cont[(hp(a)), (closed_interval(a, 1 + ceiling(x)))]")
                                                                            (("1"
                                                                              (inst?)
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (hide
                                                                               2)
                                                                              (("2"
                                                                                (skeep)
                                                                                (("2"
                                                                                  (expand
                                                                                   "hp")
                                                                                  (("2"
                                                                                    (expand
                                                                                     "closed_interval")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (typepred
                                                                           "x")
                                                                          (("2"
                                                                            (expand
                                                                             "hp"
                                                                             -1)
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("4"
                                                                  (skeep*)
                                                                  (("4"
                                                                    (expand
                                                                     "closed_interval"
                                                                     -1)
                                                                    (("4"
                                                                      (expand
                                                                       "hp")
                                                                      (("4"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("5"
                                                                  (skeep)
                                                                  (("5"
                                                                    (lemma
                                                                     "ci_ci")
                                                                    (("5"
                                                                      (inst?)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("6"
                                                                  (skeep)
                                                                  (("6"
                                                                    (typepred
                                                                     "x")
                                                                    (("6"
                                                                      (expand
                                                                       "hp"
                                                                       -1)
                                                                      (("6"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("7"
                                                                  (skeep)
                                                                  (("7"
                                                                    (assert)
                                                                    (("7"
                                                                      (typepred
                                                                       "n_1")
                                                                      (("7"
                                                                        (assert)
                                                                        (("7"
                                                                          (typepred
                                                                           "(deriv[(hp(a))]
                  (LAMBDA (t: (hp(a))):
                     ode_sol(closed_interval(a, 1 + ceiling(t)), n,
                             restrict
                                 [(hp(a)),
                                  (closed_interval(a, 1 + ceiling(t)))]
                                 (n, f))
                            (y0)(t)))")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (expand
                                                                               "length"
                                                                               -2)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (skeep)
                                                                                  (("1"
                                                                                    (inst-cp
                                                                                     -1
                                                                                     "choose[real]((hp(a)))")
                                                                                    (("1"
                                                                                      (inst
                                                                                       -1
                                                                                       "x")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (hide
                                                                             2)
                                                                            (("2"
                                                                              (split
                                                                               1)
                                                                              (("1"
                                                                                (inst
                                                                                 1
                                                                                 "n")
                                                                                (("1"
                                                                                  (skeep)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (lemma
                                                                                 "ode_sol_derivable")
                                                                                (("2"
                                                                                  (inst?)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("3"
                                                                            (hide
                                                                             2)
                                                                            (("3"
                                                                              (skeep)
                                                                              (("3"
                                                                                (lemma
                                                                                 "restrict_cont[(hp(a)), (closed_interval(a, 1 + ceiling(t)))]")
                                                                                (("1"
                                                                                  (inst?)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (typepred
                                                                                       "f")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "Lip_hp?"
                                                                                         -2)
                                                                                        (("1"
                                                                                          (inst?)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (hide
                                                                                               -1
                                                                                               -2)
                                                                                              (("1"
                                                                                                (typepred
                                                                                                 "t")
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "hp"
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (hide
                                                                                   2)
                                                                                  (("2"
                                                                                    (skeep)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "closed_interval"
                                                                                       -1)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "hp")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("3"
                                                                                  (hide
                                                                                   2)
                                                                                  (("3"
                                                                                    (hide
                                                                                     -1)
                                                                                    (("3"
                                                                                      (typepred
                                                                                       "t")
                                                                                      (("3"
                                                                                        (expand
                                                                                         "hp"
                                                                                         -)
                                                                                        (("3"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("4"
                                                                            (hide
                                                                             2)
                                                                            (("4"
                                                                              (skeep*)
                                                                              (("4"
                                                                                (expand
                                                                                 "closed_interval")
                                                                                (("4"
                                                                                  (expand
                                                                                   "hp")
                                                                                  (("4"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("5"
                                                                            (hide
                                                                             2)
                                                                            (("5"
                                                                              (skeep)
                                                                              (("5"
                                                                                (lemma
                                                                                 "ci_ci")
                                                                                (("5"
                                                                                  (inst?)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("6"
                                                                            (hide
                                                                             2)
                                                                            (("6"
                                                                              (skeep)
                                                                              (("6"
                                                                                (expand
                                                                                 "closed_interval")
                                                                                (("6"
                                                                                  (assert)
                                                                                  (("6"
                                                                                    (typepred
                                                                                     "t")
                                                                                    (("6"
                                                                                      (expand
                                                                                       "hp"
                                                                                       -1)
                                                                                      (("6"
                                                                                        (assert)
                                                                                        (("6"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("7"
                                                                            (hide
                                                                             2)
                                                                            (("7"
                                                                              (hide
                                                                               -1)
                                                                              (("7"
                                                                                (skeep)
                                                                                (("7"
                                                                                  (typepred
                                                                                   "t")
                                                                                  (("7"
                                                                                    (expand
                                                                                     "hp"
                                                                                     -)
                                                                                    (("7"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("8"
                                                                  (skeep)
                                                                  (("8"
                                                                    (lemma
                                                                     "restrict_cont[(hp(a)), (closed_interval(a, 1 + ceiling(s)))]")
                                                                    (("1"
                                                                      (inst?)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (typepred
                                                                           "f")
                                                                          (("1"
                                                                            (expand
                                                                             "Lip_hp?"
                                                                             -2)
                                                                            (("1"
                                                                              (inst?)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (hide
                                                                                   2)
                                                                                  (("1"
                                                                                    (typepred
                                                                                     "s")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "closed_interval")
                                                                                      (("1"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide
                                                                       2)
                                                                      (("2"
                                                                        (lemma
                                                                         "ci_not_one_element")
                                                                        (("2"
                                                                          (lemma
                                                                           "ci_ci")
                                                                          (("2"
                                                                            (inst
                                                                             -2
                                                                             "(closed_interval(a, 1 + ceiling(s)))")
                                                                            (("1"
                                                                              (inst?)
                                                                              nil
                                                                              nil)
                                                                             ("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (typepred
                                                                                 "s")
                                                                                (("2"
                                                                                  (expand
                                                                                   "closed_interval"
                                                                                   -1)
                                                                                  (("2"
                                                                                    (propax)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("3"
                                                                      (hide
                                                                       2)
                                                                      (("3"
                                                                        (lemma
                                                                         "ci_connected")
                                                                        (("3"
                                                                          (inst
                                                                           -1
                                                                           "(closed_interval(a, 1 + ceiling(s)))")
                                                                          (("1"
                                                                            (lemma
                                                                             "ci_ci")
                                                                            (("1"
                                                                              (inst?)
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (typepred
                                                                             "s")
                                                                            (("2"
                                                                              (expand
                                                                               "closed_interval")
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("4"
                                                                      (hide
                                                                       2)
                                                                      (("4"
                                                                        (lemma
                                                                         "ci_nonempty")
                                                                        (("4"
                                                                          (inst
                                                                           -1
                                                                           "(closed_interval(a, 1 + ceiling(s)))")
                                                                          (("4"
                                                                            (lemma
                                                                             "ci_ci")
                                                                            (("4"
                                                                              (inst?)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("5"
                                                                      (assert)
                                                                      (("5"
                                                                        (hide
                                                                         2)
                                                                        (("5"
                                                                          (lemma
                                                                           "hp_con")
                                                                          (("5"
                                                                            (inst?)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("6"
                                                                      (hide
                                                                       2)
                                                                      (("6"
                                                                        (lemma
                                                                         "hp_ne")
                                                                        (("6"
                                                                          (inst?)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("7"
                                                                      (hide
                                                                       2)
                                                                      (("7"
                                                                        (skeep)
                                                                        (("7"
                                                                          (expand
                                                                           "closed_interval")
                                                                          (("7"
                                                                            (expand
                                                                             "hp")
                                                                            (("7"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("8"
                                                                      (typepred
                                                                       "s")
                                                                      (("8"
                                                                        (expand
                                                                         "closed_interval")
                                                                        (("8"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("9"
                                                                  (skeep)
                                                                  (("9"
                                                                    (lemma
                                                                     "ci_not_one_element")
                                                                    (("9"
                                                                      (inst
                                                                       -1
                                                                       "(closed_interval(a, 1 + ceiling(s)))")
                                                                      (("1"
                                                                        (lemma
                                                                         "ci_ci")
                                                                        (("1"
                                                                          (inst?)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (typepred
                                                                         "s")
                                                                        (("2"
                                                                          (expand
                                                                           "closed_interval")
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("10"
                                                                  (skeep)
                                                                  (("10"
                                                                    (lemma
                                                                     "ci_connected")
                                                                    (("10"
                                                                      (inst
                                                                       -1
                                                                       "(closed_interval(a, 1 + ceiling(s)))")
                                                                      (("1"
                                                                        (lemma
                                                                         "ci_ci")
                                                                        (("1"
                                                                          (inst?)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (typepred
                                                                           "s")
                                                                          (("2"
                                                                            (expand
                                                                             "closed_interval")
                                                                            (("2"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("11"
                                                                  (skeep)
                                                                  (("11"
                                                                    (lemma
                                                                     "ci_nonempty")
                                                                    (("11"
                                                                      (inst
                                                                       -1
                                                                       "(closed_interval(a, 1 + ceiling(s)))")
                                                                      (("11"
                                                                        (lemma
                                                                         "ci_ci")
                                                                        (("11"
                                                                          (inst?)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("12"
                                                                  (skeep)
                                                                  (("12"
                                                                    (lemma
                                                                     "hp_noe")
                                                                    (("12"
                                                                      (inst?)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("13"
                                                                  (skeep)
                                                                  (("13"
                                                                    (lemma
                                                                     "hp_con")
                                                                    (("13"
                                                                      (inst?)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("14"
                                                                  (skeep)
                                                                  (("14"
                                                                    (lemma
                                                                     "hp_ne")
                                                                    (("14"
                                                                      (inst?)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("15"
                                                                  (skeep*)
                                                                  (("15"
                                                                    (expand
                                                                     "hp")
                                                                    (("15"
                                                                      (expand
                                                                       "closed_interval")
                                                                      (("15"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("16"
                                                                  (skeep)
                                                                  (("16"
                                                                    (lemma
                                                                     "ci_ci")
                                                                    (("16"
                                                                      (inst?)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("17"
                                                                  (skeep)
                                                                  (("17"
                                                                    (typepred
                                                                     "s")
                                                                    (("17"
                                                                      (expand
                                                                       "closed_interval"
                                                                       -1)
                                                                      (("17"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("18"
                                                                  (skeep)
                                                                  (("18"
                                                                    (typepred
                                                                     "s")
                                                                    (("18"
                                                                      (expand
                                                                       "closed_interval")
                                                                      (("18"
                                                                        (assert)
                                                                        (("18"
                                                                          (flatten)
                                                                          (("18"
                                                                            (assert)
                                                                            (("18"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("19"
                                                                  (typepred
                                                                   "x")
                                                                  (("19"
                                                                    (expand
                                                                     "hp")
                                                                    (("19"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("5"
                                                              (hide 2)
                                                              (("5"
                                                                (flatten)
                                                                (("5"
                                                                  (typepred
                                                                   "(ode_sol(closed_interval(a, 1 + ceiling(x)), n,
                          restrict
                              [(hp(a)),
                               (closed_interval(a, 1 + ceiling(x)))]
                              (n, f))
                         (y0))")
                                                                  (("1"
                                                                    (hide
                                                                     -2)
                                                                    (("1"
                                                                      (expand
                                                                       "derivable?"
                                                                       -1)
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         "n_1")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (expand
                                                                             "nth"
                                                                             -1)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (expand
                                                                                 "derivable?"
                                                                                 -1)
                                                                                (("1"
                                                                                  (inst
                                                                                   -1
                                                                                   "x")
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (hide
                                                                           2
                                                                           3)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (typepred
                                                                               "n_1")
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (typepred
                                                                                   "(deriv[(hp(a))]
                                            (LAMBDA (t: (hp(a))):
                                               ode_sol(closed_interval(a, 1 + ceiling(t)), n,
                                                       restrict
                                                           [(hp(a)),
                                                            (closed_interval(a, 1 + ceiling(t)))]
                                                           (n, f))
                                                      (y0)(t)))")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "length"
                                                                                       -2)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (skeep)
                                                                                          (("1"
                                                                                            (inst-cp
                                                                                             -1
                                                                                             "choose[real]((hp(a)))")
                                                                                            (("1"
                                                                                              (inst
                                                                                               -1
                                                                                               "x")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "length"
                                                                                                   1
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (hide
                                                                                     2)
                                                                                    (("2"
                                                                                      (split
                                                                                       1)
                                                                                      (("1"
                                                                                        (inst
                                                                                         1
                                                                                         "n")
                                                                                        (("1"
                                                                                          (skeep)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (lemma
                                                                                         "ode_sol_derivable")
                                                                                        (("2"
                                                                                          (inst?)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("3"
                                                                                    (hide
                                                                                     2)
                                                                                    (("3"
                                                                                      (skeep)
                                                                                      (("3"
                                                                                        (lemma
                                                                                         "restrict_cont[(hp(a)), (closed_interval(a, 1 + ceiling(t)))]")
                                                                                        (("1"
                                                                                          (inst?)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (typepred
                                                                                               "f")
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "Lip_hp?"
                                                                                                 -2)
                                                                                                (("1"
                                                                                                  (inst?)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (hide
                                                                                                       -1
                                                                                                       -2)
                                                                                                      (("1"
                                                                                                        (typepred
                                                                                                         "t")
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "hp"
                                                                                                           -1)
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (hide
                                                                                           2)
                                                                                          (("2"
                                                                                            (skeep)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "closed_interval"
                                                                                               -1)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "hp")
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("3"
                                                                                          (hide
                                                                                           2)
                                                                                          (("3"
                                                                                            (hide
                                                                                             -1)
                                                                                            (("3"
                                                                                              (typepred
                                                                                               "t")
                                                                                              (("3"
                                                                                                (expand
                                                                                                 "hp"
                                                                                                 -)
                                                                                                (("3"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("4"
                                                                                    (hide
                                                                                     2)
                                                                                    (("4"
                                                                                      (skeep*)
                                                                                      (("4"
                                                                                        (expand
                                                                                         "closed_interval")
                                                                                        (("4"
                                                                                          (expand
                                                                                           "hp")
                                                                                          (("4"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("5"
                                                                                    (hide
                                                                                     2)
                                                                                    (("5"
                                                                                      (skeep)
                                                                                      (("5"
                                                                                        (lemma
                                                                                         "ci_ci")
                                                                                        (("5"
                                                                                          (inst?)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("6"
                                                                                    (hide
                                                                                     2)
                                                                                    (("6"
                                                                                      (skeep)
                                                                                      (("6"
                                                                                        (expand
                                                                                         "closed_interval")
                                                                                        (("6"
                                                                                          (assert)
                                                                                          (("6"
                                                                                            (typepred
                                                                                             "t")
                                                                                            (("6"
                                                                                              (expand
                                                                                               "hp"
                                                                                               -1)
                                                                                              (("6"
                                                                                                (assert)
                                                                                                (("6"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("7"
                                                                                    (hide
                                                                                     2)
                                                                                    (("7"
                                                                                      (hide
                                                                                       -1)
                                                                                      (("7"
                                                                                        (skeep)
                                                                                        (("7"
                                                                                          (typepred
                                                                                           "t")
                                                                                          (("7"
                                                                                            (expand
                                                                                             "hp"
                                                                                             -)
                                                                                            (("7"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide
                                                                     2
                                                                     3)
                                                                    (("2"
                                                                      (lemma
                                                                       "restrict_cont[(hp(a)), (closed_interval(a, 1 + ceiling(x)))]")
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         "n"
                                                                         "f")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (typepred
                                                                             "f")
                                                                            (("1"
                                                                              (expand
                                                                               "Lip_hp?"
                                                                               -2)
                                                                              (("1"
                                                                                (inst
                                                                                 -2
                                                                                 "1+ceiling(x)")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (typepred
                                                                                     "x")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "hp")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide
                                                                         2)
                                                                        (("2"
                                                                          (skeep)
                                                                          (("2"
                                                                            (expand
                                                                             "hp")
                                                                            (("2"
                                                                              (expand
                                                                               "closed_interval")
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("3"
                                                                    (hide
                                                                     2)
                                                                    (("3"
                                                                      (skeep)
                                                                      (("3"
                                                                        (expand
                                                                         "hp")
                                                                        (("3"
                                                                          (expand
                                                                           "closed_interval")
                                                                          (("3"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("4"
                                                                    (lemma
                                                                     "ci_ci")
                                                                    (("4"
                                                                      (inst?)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      (("2"
                                                        (hide 2)
                                                        (("2"
                                                          (inst
                                                           1
                                                           "0.5")
                                                          (("2"
                                                            (skeep)
                                                            (("2"
                                                              (expand
                                                               "extend"
                                                               1)
                                                              (("2"
                                                                (expand
                                                                 "fullset")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (split
                                                                     1)
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (expand
                                                                       "closed_interval"
                                                                       1
                                                                       1)
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (typepred
                                                                           "y")
                                                                          (("2"
                                                                            (expand
                                                                             "hp"
                                                                             -1)
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (skeep)
                                                    (("2"
                                                      (typepred "n_1")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (hide 2)
                                                          (("2"
                                                            (typepred
                                                             "(deriv[(hp(a))]
                  (LAMBDA (t: (hp(a))):
                     ode_sol(closed_interval(a, 1 + ceiling(t)), n,
                             restrict
                                 [(hp(a)),
                                  (closed_interval(a, 1 + ceiling(t)))]
                                 (n, f))
                            (y0)(t)))")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (expand
                                                                 "length"
                                                                 -2
                                                                 2)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (skeep)
                                                                    (("1"
                                                                      (expand
                                                                       "length"
                                                                       -2
                                                                       1)
                                                                      (("1"
                                                                        (inst-cp
                                                                         -1
                                                                         "choose[real]((hp(a)))")
                                                                        (("1"
                                                                          (inst
                                                                           -1
                                                                           "x")
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide 2)
                                                              (("2"
                                                                (hide
                                                                 -)
                                                                (("2"
                                                                  (split
                                                                   1)
                                                                  (("1"
                                                                    (inst
                                                                     1
                                                                     "n")
                                                                    (("1"
                                                                      (skeep)
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (lemma
                                                                     "ode_sol_derivable")
                                                                    (("2"
                                                                      (inst?)
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("3"
                                                              (hide 2)
                                                              (("3"
                                                                (hide
                                                                 -1)
                                                                (("3"
                                                                  (skeep)
                                                                  (("3"
                                                                    (lemma
                                                                     "restrict_cont[(hp(a)), (closed_interval(a, 1 + ceiling(t)))]")
                                                                    (("1"
                                                                      (inst
                                                                       -1
                                                                       "n"
                                                                       "f")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (typepred
                                                                           "f")
                                                                          (("1"
                                                                            (expand
                                                                             "Lip_hp?"
                                                                             -2)
                                                                            (("1"
                                                                              (inst
                                                                               -2
                                                                               "1+ceiling(t)")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (typepred
                                                                                   "t")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "hp"
                                                                                     -1)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide
                                                                       2)
                                                                      (("2"
                                                                        (skeep)
                                                                        (("2"
                                                                          (expand
                                                                           "closed_interval")
                                                                          (("2"
                                                                            (expand
                                                                             "hp")
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("3"
                                                                      (hide
                                                                       2)
                                                                      (("3"
                                                                        (typepred
                                                                         "t")
                                                                        (("3"
                                                                          (expand
                                                                           "hp"
                                                                           -1)
                                                                          (("3"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("4"
                                                              (hide 2)
                                                              (("4"
                                                                (skeep)
                                                                (("4"
                                                                  (skeep)
                                                                  (("4"
                                                                    (hide
                                                                     -2)
                                                                    (("4"
                                                                      (expand
                                                                       "closed_interval"
                                                                       -1)
                                                                      (("4"
                                                                        (expand
                                                                         "hp"
                                                                         1)
                                                                        (("4"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("5"
                                                              (hide 2)
                                                              (("5"
                                                                (hide
                                                                 -1)
                                                                (("5"
                                                                  (skeep)
                                                                  (("5"
                                                                    (lemma
                                                                     "ci_ci")
                                                                    (("5"
                                                                      (inst?)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("6"
                                                              (assert)
                                                              (("6"
                                                                (hide
                                                                 2)
                                                                (("6"
                                                                  (hide
                                                                   -1)
                                                                  (("6"
                                                                    (skeep)
                                                                    (("6"
                                                                      (typepred
                                                                       "t")
                                                                      (("6"
                                                                        (expand
                                                                         "closed_interval"
                                                                         1)
                                                                        (("6"
                                                                          (expand
                                                                           "hp"
                                                                           -)
                                                                          (("6"
                                                                            (assert)
                                                                            (("6"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("7"
                                                              (hide 2)
                                                              (("7"
                                                                (hide
                                                                 -)
                                                                (("7"
                                                                  (skeep)
                                                                  (("7"
                                                                    (typepred
                                                                     "t")
                                                                    (("7"
                                                                      (expand
                                                                       "hp"
                                                                       -)
                                                                      (("7"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (hide 2)
                                                    (("3"
                                                      (skeep)
                                                      (("3"
                                                        (lemma
                                                         "restrict_cont[(hp(a)), (closed_interval(a, 1 + ceiling(x)))]")
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "n"
                                                           "f")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (typepred
                                                               "f")
                                                              (("1"
                                                                (expand
                                                                 "Lip_hp?"
                                                                 -2)
                                                                (("1"
                                                                  (inst
                                                                   -2
                                                                   "1 + ceiling(x)")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (typepred
                                                                       "x")
                                                                      (("1"
                                                                        (expand
                                                                         "hp")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide 2)
                                                          (("2"
                                                            (skeep)
                                                            (("2"
                                                              (expand
                                                               "closed_interval")
                                                              (("2"
                                                                (expand
                                                                 "hp")
                                                                (("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("4"
                                                    (hide 2)
                                                    (("4"
                                                      (skeep)
                                                      (("4"
                                                        (skeep)
                                                        (("4"
                                                          (expand
                                                           "closed_interval")
                                                          (("4"
                                                            (expand
                                                             "hp")
                                                            (("4"
                                                              (flatten)
                                                              (("4"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("5"
                                                    (hide 2)
                                                    (("5"
                                                      (skeep)
                                                      (("5"
                                                        (lemma "ci_ci")
                                                        (("5"
                                                          (inst?)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("6"
                                                    (assert)
                                                    (("6"
                                                      (hide 2)
                                                      (("6"
                                                        (skeep)
                                                        (("6"
                                                          (typepred
                                                           "x")
                                                          (("6"
                                                            (expand
                                                             "hp")
                                                            (("6"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("7"
                                                    (hide 2)
                                                    (("7"
                                                      (typepred "x")
                                                      (("7"
                                                        (expand
                                                         "hp"
                                                         -1)
                                                        (("7"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide 2)
                                                  (("2"
                                                    (skeep)
                                                    (("2"
                                                      (typepred "n_1")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (typepred
                                                           "(deriv[(hp(a))]
                                            (LAMBDA (t: (hp(a))):
                                               ode_sol(closed_interval(a, 1 + ceiling(t)), n,
                                                       restrict
                                                           [(hp(a)),
                                                            (closed_interval(a, 1 + ceiling(t)))]
                                                           (n, f))
                                                      (y0)(t)))")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (expand
                                                               "length"
                                                               -2)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (skeep)
                                                                  (("1"
                                                                    (inst-cp
                                                                     -1
                                                                     "choose[real]((hp(a)))")
                                                                    (("1"
                                                                      (inst
                                                                       -1
                                                                       "x")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide 2)
                                                            (("2"
                                                              (split 1)
                                                              (("1"
                                                                (inst
                                                                 1
                                                                 "n")
                                                                (("1"
                                                                  (skeep)
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (lemma
                                                                 "ode_sol_derivable")
                                                                (("2"
                                                                  (inst?)
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("3"
                                                            (hide 2)
                                                            (("3"
                                                              (skeep)
                                                              (("3"
                                                                (lemma
                                                                 "restrict_cont[(hp(a)), (closed_interval(a, 1 + ceiling(t)))]")
                                                                (("1"
                                                                  (inst?)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (typepred
                                                                       "f")
                                                                      (("1"
                                                                        (expand
                                                                         "Lip_hp?"
                                                                         -2)
                                                                        (("1"
                                                                          (inst?)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (hide
                                                                               -1
                                                                               -2)
                                                                              (("1"
                                                                                (typepred
                                                                                 "t")
                                                                                (("1"
                                                                                  (expand
                                                                                   "hp"
                                                                                   -1)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide
                                                                   2)
                                                                  (("2"
                                                                    (skeep)
                                                                    (("2"
                                                                      (expand
                                                                       "closed_interval"
                                                                       -1)
                                                                      (("2"
                                                                        (expand
                                                                         "hp")
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("3"
                                                                  (hide
                                                                   2)
                                                                  (("3"
                                                                    (hide
                                                                     -1)
                                                                    (("3"
                                                                      (typepred
                                                                       "t")
                                                                      (("3"
                                                                        (expand
                                                                         "hp"
                                                                         -)
                                                                        (("3"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("4"
                                                            (hide 2)
                                                            (("4"
                                                              (skeep*)
                                                              (("4"
                                                                (expand
                                                                 "closed_interval")
                                                                (("4"
                                                                  (expand
                                                                   "hp")
                                                                  (("4"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("5"
                                                            (hide 2)
                                                            (("5"
                                                              (skeep)
                                                              (("5"
                                                                (lemma
                                                                 "ci_ci")
                                                                (("5"
                                                                  (inst?)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("6"
                                                            (hide 2)
                                                            (("6"
                                                              (skeep)
                                                              (("6"
                                                                (expand
                                                                 "closed_interval")
                                                                (("6"
                                                                  (assert)
                                                                  (("6"
                                                                    (typepred
                                                                     "t")
                                                                    (("6"
                                                                      (expand
                                                                       "hp"
                                                                       -1)
                                                                      (("6"
                                                                        (assert)
                                                                        (("6"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("7"
                                                            (hide 2)
                                                            (("7"
                                                              (hide -1)
                                                              (("7"
                                                                (skeep)
                                                                (("7"
                                                                  (typepred
                                                                   "t")
                                                                  (("7"
                                                                    (expand
                                                                     "hp"
                                                                     -)
                                                                    (("7"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (hide 2)
                                                  (("3"
                                                    (skeep)
                                                    (("3"
                                                      (lemma
                                                       "restrict_cont[(hp(a)), (closed_interval(a, 1 + ceiling(x!1)))]")
                                                      (("1"
                                                        (inst
                                                         -1
                                                         "n"
                                                         "f")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (typepred
                                                             "f")
                                                            (("1"
                                                              (expand
                                                               "Lip_hp?"
                                                               -2)
                                                              (("1"
                                                                (inst
                                                                 -2
                                                                 "1 + ceiling(x!1)")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (typepred
                                                                     "x!1")
                                                                    (("1"
                                                                      (expand
                                                                       "hp"
                                                                       -)
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide 2)
                                                        (("2"
                                                          (skeep)
                                                          (("2"
                                                            (expand
                                                             "hp")
                                                            (("2"
                                                              (expand
                                                               "closed_interval")
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (hide 2)
                                                        (("3"
                                                          (typepred
                                                           "x!1")
                                                          (("3"
                                                            (expand
                                                             "hp"
                                                             -)
                                                            (("3"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("4"
                                                  (hide 2)
                                                  (("4"
                                                    (skeep)
                                                    (("4"
                                                      (skeep)
                                                      (("4"
                                                        (expand
                                                         "closed_interval")
                                                        (("4"
                                                          (expand "hp")
                                                          (("4"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("5"
                                                  (hide 2)
                                                  (("5"
                                                    (skeep)
                                                    (("5"
                                                      (lemma "ci_ci")
                                                      (("5"
                                                        (inst?)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("6"
                                                  (assert)
                                                  (("6"
                                                    (hide 2)
                                                    (("6"
                                                      (skeep)
                                                      (("6"
                                                        (lemma "ci_ci")
                                                        (("6"
                                                          (inst?)
                                                          (("6"
                                                            (assert)
                                                            (("6"
                                                              (expand
                                                               "closed_interval"
                                                               1)
                                                              (("6"
                                                                (assert)
                                                                (("6"
                                                                  (typepred
                                                                   "x!1")
                                                                  (("6"
                                                                    (expand
                                                                     "hp"
                                                                     -)
                                                                    (("6"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("7"
                                                  (hide 2)
                                                  (("7"
                                                    (skeep)
                                                    (("7"
                                                      (typepred "x")
                                                      (("7"
                                                        (expand "hp")
                                                        (("7"
                                                          (typepred
                                                           "x!1")
                                                          (("7"
                                                            (expand
                                                             "hp"
                                                             -1)
                                                            (("7"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide 2)
                                                (("2"
                                                  (lemma "hp_noe")
                                                  (("2"
                                                    (inst?)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (hide 2)
                                                (("3"
                                                  (lemma "hp_dd")
                                                  (("3"
                                                    (inst?)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("4"
                                                (hide 2)
                                                (("4"
                                                  (skeep)
                                                  (("4"
                                                    (expand "hp")
                                                    (("4"
                                                      (typepred "x1")
                                                      (("4"
                                                        (expand
                                                         "closed_interval"
                                                         -1)
                                                        (("4"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("5"
                                                (hide 2)
                                                (("5"
                                                  (typepred "x")
                                                  (("5"
                                                    (expand "hp" -)
                                                    (("5"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide 2)
                                      (("2"
                                        (hide -4)
                                        (("2"
                                          (typepred "t!1")
                                          (("2"
                                            (expand "closed_interval")
                                            (("2"
                                              (expand "hp" 1 1)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide 2)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (typepred "n_1")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (expand "length" 1)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (typepred
                                                 "(deriv[(hp(a))]
                                            (LAMBDA (t: (hp(a))):
                                               ode_sol(closed_interval(a, 1 + ceiling(t)), n,
                                                       restrict
                                                           [(hp(a)),
                                                            (closed_interval(a, 1 + ceiling(t)))]
                                                           (n, f))
                                                      (y0)(t)))")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand
                                                     "length"
                                                     -2)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (skeep)
                                                        (("1"
                                                          (inst-cp
                                                           -1
                                                           "choose[real]((hp(a)))")
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "x")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (hide 2)
                                                  (("2"
                                                    (split 1)
                                                    (("1"
                                                      (inst 1 "n")
                                                      (("1"
                                                        (skeep)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (lemma
                                                       "ode_sol_derivable")
                                                      (("2"
                                                        (inst?)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (hide 2)
                                                  (("3"
                                                    (skeep)
                                                    (("3"
                                                      (lemma
                                                       "restrict_cont[(hp(a)), (closed_interval(a, 1 + ceiling(t)))]")
                                                      (("1"
                                                        (inst?)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (typepred
                                                             "f")
                                                            (("1"
                                                              (expand
                                                               "Lip_hp?"
                                                               -2)
                                                              (("1"
                                                                (inst?)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (hide
                                                                     -1
                                                                     -2)
                                                                    (("1"
                                                                      (typepred
                                                                       "t")
                                                                      (("1"
                                                                        (expand
                                                                         "hp"
                                                                         -1)
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide 2)
                                                        (("2"
                                                          (skeep)
                                                          (("2"
                                                            (expand
                                                             "closed_interval"
                                                             -1)
                                                            (("2"
                                                              (expand
                                                               "hp")
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (hide 2)
                                                        (("3"
                                                          (hide -1)
                                                          (("3"
                                                            (typepred
                                                             "t")
                                                            (("3"
                                                              (expand
                                                               "hp"
                                                               -)
                                                              (("3"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("4"
                                                  (hide 2)
                                                  (("4"
                                                    (skeep*)
                                                    (("4"
                                                      (expand
                                                       "closed_interval")
                                                      (("4"
                                                        (expand "hp")
                                                        (("4"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("5"
                                                  (hide 2)
                                                  (("5"
                                                    (skeep)
                                                    (("5"
                                                      (lemma "ci_ci")
                                                      (("5"
                                                        (inst?)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("6"
                                                  (hide 2)
                                                  (("6"
                                                    (skeep)
                                                    (("6"
                                                      (expand
                                                       "closed_interval")
                                                      (("6"
                                                        (assert)
                                                        (("6"
                                                          (typepred
                                                           "t")
                                                          (("6"
                                                            (expand
                                                             "hp"
                                                             -1)
                                                            (("6"
                                                              (assert)
                                                              (("6"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("7"
                                                  (hide 2)
                                                  (("7"
                                                    (hide -1)
                                                    (("7"
                                                      (skeep)
                                                      (("7"
                                                        (typepred "t")
                                                        (("7"
                                                          (expand
                                                           "hp"
                                                           -)
                                                          (("7"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (hide 2)
                                    (("3"
                                      (skeep)
                                      (("3"
                                        (expand "closed_interval")
                                        (("3"
                                          (expand "hp")
                                          (("3" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide 2)
                        (("2" (inst 1 "n")
                          (("2" (skeep) (("2" (assert) nil nil)) nil))
                          nil))
                        nil)
                       ("3" (hide 2)
                        (("3" (hide -2)
                          (("3" (lemma "ode_sol_derivable")
                            (("3" (inst?) (("3" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("4" (hide 2)
                        (("4" (inst 1 "n")
                          (("4" (skeep) (("4" (assert) nil nil)) nil))
                          nil))
                        nil)
                       ("5" (hide 2)
                        (("5" (hide -3)
                          (("5"
                            (lemma
                             "restrict_cont[(hp(a)), (closed_interval(a, 1 + ceiling(t!1)))]")
                            (("1" (inst -1 "n" "f")
                              (("1" (assert) nil nil)) nil)
                             ("2" (typepred "f")
                              (("2"
                                (skeep)
                                (("2"
                                  (expand "hp")
                                  (("2"
                                    (expand "closed_interval")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (expand "hp")
                              (("3" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil)
                       ("6" (hide 2)
                        (("6" (hide -3)
                          (("6" (typepred "f")
                            (("6" (expand "Lip_hp?" -2)
                              (("6"
                                (inst -2 "1+ceiling(t!1)")
                                (("6"
                                  (assert)
                                  (("6"
                                    (expand "hp")
                                    (("6" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("7" (hide 2)
                        (("7" (hide -5)
                          (("7" (expand "closed_interval")
                            (("7" (assert)
                              (("7"
                                (expand "hp")
                                (("7" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("8" (hide 2)
                        (("8" (lemma "ci_ci") (("8" (inst?) nil nil))
                          nil))
                        nil)
                       ("9" (hide -)
                        (("9" (typepred "t!1")
                          (("9" (expand "hp") (("9" (assert) nil nil))
                            nil))
                          nil))
                        nil)
                       ("10" (hide 2)
                        (("10" (expand "hp")
                          (("10" (expand "closed_interval")
                            (("10" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide 2)
                      (("2" (assert)
                        (("2" (expand "length" 1 1)
                          (("2" (assert)
                            (("2" (typepred "n_1")
                              (("2"
                                (assert)
                                (("2"
                                  (typepred
                                   "(deriv[(hp(a))]
                                            (LAMBDA (t: (hp(a))):
                                               ode_sol(closed_interval(a, 1 + ceiling(t)), n,
                                                       restrict
                                                           [(hp(a)),
                                                            (closed_interval(a, 1 + ceiling(t)))]
                                                           (n, f))
                                                      (y0)(t)))")
                                  (("1"
                                    (expand "length" -2)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (skeep)
                                        (("1"
                                          (inst-cp
                                           -1
                                           "choose[real]((hp(a)))")
                                          (("1"
                                            (inst -1 "x")
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide 2)
                                    (("2"
                                      (split 1)
                                      (("1"
                                        (inst 1 "n")
                                        (("1"
                                          (skeep)
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (lemma "ode_sol_derivable")
                                        (("2"
                                          (inst?)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (hide 2)
                                    (("3"
                                      (skeep)
                                      (("3"
                                        (lemma
                                         "restrict_cont[(hp(a)), (closed_interval(a, 1 + ceiling(t)))]")
                                        (("1"
                                          (inst?)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (typepred "f")
                                              (("1"
                                                (expand "Lip_hp?" -2)
                                                (("1"
                                                  (inst?)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (hide -1 -2)
                                                      (("1"
                                                        (typepred "t")
                                                        (("1"
                                                          (expand
                                                           "hp"
                                                           -1)
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide 2)
                                          (("2"
                                            (skeep)
                                            (("2"
                                              (expand
                                               "closed_interval"
                                               -1)
                                              (("2"
                                                (expand "hp")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (hide 2)
                                          (("3"
                                            (hide -1)
                                            (("3"
                                              (typepred "t")
                                              (("3"
                                                (expand "hp" -)
                                                (("3"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("4"
                                    (hide 2)
                                    (("4"
                                      (skeep*)
                                      (("4"
                                        (expand "closed_interval")
                                        (("4"
                                          (expand "hp")
                                          (("4" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("5"
                                    (hide 2)
                                    (("5"
                                      (skeep)
                                      (("5"
                                        (lemma "ci_ci")
                                        (("5" (inst?) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("6"
                                    (hide 2)
                                    (("6"
                                      (skeep)
                                      (("6"
                                        (expand "closed_interval")
                                        (("6"
                                          (assert)
                                          (("6"
                                            (typepred "t")
                                            (("6"
                                              (expand "hp" -1)
                                              (("6"
                                                (assert)
                                                (("6"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("7"
                                    (hide 2)
                                    (("7"
                                      (hide -1)
                                      (("7"
                                        (skeep)
                                        (("7"
                                          (typepred "t")
                                          (("7"
                                            (expand "hp" -)
                                            (("7" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (hide 2)
                      (("3" (split 1)
                        (("1" (inst 1 "n")
                          (("1" (skeep) (("1" (assert) nil nil)) nil))
                          nil)
                         ("2" (lemma "ode_sol_derivable")
                          (("2" (inst?) (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("4" (hide 2)
                      (("4" (skeep)
                        (("4"
                          (lemma
                           "restrict_cont[(hp(a)), (closed_interval(a, 1 + ceiling(t)))]")
                          (("1" (inst -1 "n" "f")
                            (("1" (assert)
                              (("1"
                                (typepred "f")
                                (("1"
                                  (expand "Lip_hp?" -2)
                                  (("1"
                                    (inst -2 "1 + ceiling(t)")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand "restrict" -2)
                                        (("1"
                                          (typepred "t")
                                          (("1"
                                            (expand "hp" -)
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide 2)
                            (("2" (skeep)
                              (("2"
                                (expand "closed_interval")
                                (("2"
                                  (expand "hp")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (hide 2)
                            (("3" (typepred "t")
                              (("3"
                                (expand "hp" -)
                                (("3" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("5" (hide 2)
                      (("5" (skeep)
                        (("5" (skeep)
                          (("5" (expand "closed_interval")
                            (("5" (expand "hp")
                              (("5" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("6" (hide 2)
                      (("6" (skeep)
                        (("6" (typepred "t")
                          (("6" (lemma "ci_ci") (("6" (inst?) nil nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("7" (hide 2)
                      (("7" (skeep)
                        (("7" (lemma "ci_ci")
                          (("7" (inst?)
                            (("7" (typepred "t")
                              (("7"
                                (expand "closed_interval")
                                (("7"
                                  (expand "hp")
                                  (("7"
                                    (assert)
                                    (("7" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("8" (hide 2)
                      (("8" (skeep)
                        (("8" (typepred "t")
                          (("8" (expand "hp" -)
                            (("8" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide 2)
          (("2" (skeep)
            (("2" (expand "closed_interval")
              (("2" (expand "hp") (("2" (assert) nil nil)) nil)) nil))
            nil))
          nil)
         ("3" (hide 2)
          (("3" (typepred "x")
            (("3" (expand "hp") (("3" (assert) nil nil)) nil)) nil))
          nil)
         ("4" (hide 2)
          (("4" (split 1)
            (("1" (inst 1 "n")
              (("1" (skeep) (("1" (assert) nil nil)) nil)) nil)
             ("2" (lemma "ode_sol_derivable")
              (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
            nil))
          nil)
         ("5" (hide 2)
          (("5" (skeep)
            (("5" (typepred "f")
              (("5" (assert)
                (("5" (expand "Lip_hp?" -2)
                  (("5" (inst -2 "1+ceiling(t)")
                    (("1" (assert)
                      (("1"
                        (lemma
                         "restrict_cont[(hp(a)), (closed_interval(a, 1 + ceiling(t)))]")
                        (("1" (inst -1 "n" "f")
                          (("1" (assert) nil nil)) nil)
                         ("2" (hide 2)
                          (("2" (skeep)
                            (("2" (expand "hp")
                              (("2"
                                (expand "closed_interval")
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (typepred "t")
                          (("3" (expand "hp") (("3" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (typepred "t")
                      (("2" (expand "hp" -1) (("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("6" (hide 2)
          (("6" (skeep*)
            (("6" (expand "hp")
              (("6" (expand "closed_interval" -1)
                (("6" (assert) nil nil)) nil))
              nil))
            nil))
          nil)
         ("7" (hide 2)
          (("7" (skeep)
            (("7" (typepred "t")
              (("7" (expand "hp" -1) (("7" (assert) nil nil)) nil))
              nil))
            nil))
          nil)
         ("8" (hide 2)
          (("8" (skeep)
            (("8" (lemma "ci_ci") (("8" (inst?) nil nil)) nil)) nil))
          nil)
         ("9" (assert)
          (("9" (hide 2)
            (("9" (skeep)
              (("9" (typepred "t")
                (("9" (expand "hp") (("9" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil)
         ("10" (hide 2)
          (("10" (skeep)
            (("10" (typepred "t")
              (("10" (expand "hp")
                (("10" (assert)
                  (("10" (expand "closed_interval" 1)
                    (("10" (propax) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list_extensionality formula-decl nil more_list_props structures)
    (t skolem-const-decl "(hp(a))" ODE_solution_existence_uniqueness
     nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (nonempty? const-decl "bool" sets nil)
    (choose const-decl "(p)" sets nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (ode_sol_derivable formula-decl nil
     ODE_solution_existence_uniqueness nil)
    (restrict_cont formula-decl nil restrict_ode nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (t skolem-const-decl "(hp(a))" ODE_solution_existence_uniqueness
     nil)
    (TRUE const-decl "bool" booleans nil)
    (ci_ci formula-decl nil interval_def nil)
    (deriv_nth formula-decl nil r2v_analysis nil)
    (t skolem-const-decl "(hp(a))" ODE_solution_existence_uniqueness
     nil)
    (t skolem-const-decl "(hp(a))" ODE_solution_existence_uniqueness
     nil)
    (deriv const-decl "[T -> real]" derivatives analysis)
    (deriv_fun type-eq-decl nil derivatives analysis)
    (derivable? const-decl "bool" derivatives analysis)
    (nth const-decl "[(d) -> real]" r2v_def nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (deriv_subtype_del formula-decl nil derivatives_subtype analysis)
    (deriv_domain? const-decl "bool" deriv_domain_def analysis)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (x!1 skolem-const-decl "(hp(a))" ODE_solution_existence_uniqueness
     nil)
    (t skolem-const-decl "(hp(a))" ODE_solution_existence_uniqueness
     nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (t skolem-const-decl "(hp(a))" ODE_solution_existence_uniqueness
     nil)
    (s skolem-const-decl "(closed_interval(a, 1 + ceiling(x)))"
     ODE_solution_existence_uniqueness nil)
    (s skolem-const-decl "(closed_interval(a, 1 + ceiling(x)))"
     ODE_solution_existence_uniqueness nil)
    (s skolem-const-decl "(closed_interval(a, 1 + ceiling(x)))"
     ODE_solution_existence_uniqueness nil)
    (s skolem-const-decl "(closed_interval(a, 1 + ceiling(x)))"
     ODE_solution_existence_uniqueness nil)
    (t skolem-const-decl "(hp(a))" ODE_solution_existence_uniqueness
     nil)
    (t skolem-const-decl "(hp(a))" ODE_solution_existence_uniqueness
     nil)
    (x!1 skolem-const-decl "(closed_interval(a, 1 + ceiling(x)))"
     ODE_solution_existence_uniqueness nil)
    (ci_connected formula-decl nil interval_def nil)
    (ci_nonempty formula-decl nil interval_def nil)
    (hp_noe formula-decl nil interval_def nil)
    (hp_con formula-decl nil interval_def nil)
    (hp_ne formula-decl nil interval_def nil)
    (ode_sol_extend formula-decl nil ODE_solution_existence_uniqueness
     nil)
    (connected? const-decl "bool" deriv_domain_def analysis)
    (ci_not_one_element formula-decl nil interval_def nil)
    (ci_deriv_domain formula-decl nil interval_def nil)
    (member const-decl "bool" sets nil)
    (fullset const-decl "set" sets nil)
    (extend const-decl "R" extend nil)
    (FALSE const-decl "bool" booleans nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (t skolem-const-decl "(hp(a))" ODE_solution_existence_uniqueness
     nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (hp_dd formula-decl nil interval_def nil)
    (t skolem-const-decl "(hp(a))" ODE_solution_existence_uniqueness
     nil)
    (t!1 skolem-const-decl "(hp(a))" ODE_solution_existence_uniqueness
     nil)
    (n_1 skolem-const-decl "below(length(deriv[(hp(a))]
                 (LAMBDA (t: (hp(a))):
                    ode_sol(closed_interval(a, 1 + ceiling(t)), n,
                            restrict
                                [(hp(a)),
                                 (closed_interval(a, 1 + ceiling(t)))]
                                (n, f))
                           (y0)(t))
                 (x)))" ODE_solution_existence_uniqueness nil)
    (below type-eq-decl nil naturalnumbers nil)
    (deriv def-decl "{ff: r2v | length(ff) = length(f)}" r2v_analysis
     nil)
    (length const-decl "nat" r2v_def nil)
    (x skolem-const-decl "(hp(a))" ODE_solution_existence_uniqueness
     nil)
    (r2v_n type-eq-decl nil r2v_def nil)
    (r2v type-eq-decl nil r2v_def nil)
    (derivable? const-decl "bool" r2v_analysis nil)
    (ivt_s_unique? const-decl "bool" ODE_def nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (d_b const-decl "{dd: list[real] |
   (length(dd) = 2 AND (d(car(dd)) AND d(car(cdr(dd))))) AND
    FORALL (x: real): (car(dd) <= x AND x <= car(cdr(dd))) IFF d(x)}"
     r2v_continuous_extension nil)
    (ode_sol const-decl "{yy: r2v_n[d](n) |
   derivable?[d](yy) AND ivt_s_unique?[d](n, car(d_b[d]), f, y0)(yy)}"
     ODE_solution_existence_uniqueness nil)
    (y0 skolem-const-decl "VectorN(n)"
     ODE_solution_existence_uniqueness nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (VectorN type-eq-decl nil matrices matrices)
    (od_f type-eq-decl nil ODE_def nil)
    (Lip_d? const-decl "bool" ODE_Lipschitz_def nil)
    (n skolem-const-decl "posnat" ODE_solution_existence_uniqueness
     nil)
    (restrict const-decl "VectorN(n)" restrict_ode nil)
    (cont_d? const-decl "bool" ODE_continuous_def nil)
    (Lip_hp? const-decl "bool" ODE_solution_existence_uniqueness nil)
    (f skolem-const-decl
     "{ff: od_f[(hp(a))](n) | cont_d?[(hp(a))](n)(ff) AND Lip_hp?(a, n)(ff)}"
     ODE_solution_existence_uniqueness nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (closed_interval? const-decl "bool" interval_def nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (hp const-decl "bool" interval_def nil)
    (a skolem-const-decl "real" ODE_solution_existence_uniqueness nil)
    (< const-decl "bool" reals nil)
    (closed_interval? const-decl "bool" interval_def nil)
    (closed_interval const-decl "(closed_interval?(a, b))" interval_def
     nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (integer nonempty-type-from-decl nil integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (ceiling const-decl "{i | x <= i & i < x + 1}" floor_ceil nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis))
   shostak))
 (ode_sol_init_TCC1 0
  (ode_sol_init_TCC1-1 nil 3794406686 ("" (subtype-tcc) nil nil)
   ((hp const-decl "bool" interval_def nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil
   (ode_sol_init subtype "ODE_solution_existence_uniqueness.a"
    "(interval_def.hp(ODE_solution_existence_uniqueness.a))")))
 (ode_sol_init 0
  (ode_sol_init-1 nil 3794408482
   ("" (skeep)
    ((""
      (typepred "ode_sol(closed_interval(a, ceiling(a) + 1), n,
                restrict[(hp(a)), (closed_interval(a, 1 + ceiling(a)))](n, f))
               (y0)")
      (("1" (expand "ivt_s_unique?")
        (("1" (flatten)
          (("1" (expand "ivt_s?" -2)
            (("1" (flatten)
              (("1" (expand "od_sol?" -2)
                (("1" (assert)
                  (("1" (hide -4)
                    (("1" (hide -2)
                      (("1" (hide -1)
                        (("1"
                          (case "car(d_b[closed_interval(a, 1 + ceiling(a))])=a")
                          (("1" (assert) nil nil)
                           ("2" (hide 2 -1)
                            (("2"
                              (typepred
                               "d_b[closed_interval(a, 1 + ceiling(a))]")
                              (("2"
                                (hide -1)
                                (("2"
                                  (inst-cp -4 "a")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (flatten)
                                      (("2"
                                        (expand "closed_interval" -2)
                                        (("2"
                                          (flatten)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (expand
                                               "closed_interval"
                                               1)
                                              (("2" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (hide 2 -1)
                            (("3" (lemma "ci_ci")
                              (("3" (inst?) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (assert)
        (("2" (lemma "ci_not_one_element")
          (("2" (inst -1 "(closed_interval(a, 1 + ceiling(a)))") nil
            nil))
          nil))
        nil)
       ("3" (lemma "ci_connected")
        (("3" (inst -1 "(closed_interval(a, 1 + ceiling(a)))")
          (("1" (assert)
            (("1" (lemma "ci_ci") (("1" (inst?) nil nil)) nil)) nil)
           ("2" (assert) nil nil))
          nil))
        nil)
       ("4" (lemma "ci_nonempty")
        (("4" (inst?)
          (("4" (assert)
            (("4" (lemma "ci_ci")
              (("4" (assert) (("4" (inst?) nil nil)) nil)) nil))
            nil))
          nil))
        nil)
       ("5" (assert)
        (("5" (lemma "hp_noe") (("5" (inst?) nil nil)) nil)) nil)
       ("6" (lemma "hp_con") (("6" (inst?) nil nil)) nil)
       ("7" (assert)
        (("7" (lemma "hp_ne") (("7" (inst?) nil nil)) nil)) nil)
       ("8" (skeep)
        (("8" (expand "closed_interval")
          (("8" (expand "hp" 1) (("8" (assert) nil nil)) nil)) nil))
        nil)
       ("9" (assert) nil nil))
      nil))
    nil)
   ((Lip_hp? const-decl "bool" ODE_solution_existence_uniqueness nil)
    (restrict const-decl "VectorN(n)" restrict_ode nil)
    (hp const-decl "bool" interval_def nil)
    (ode_sol const-decl "{yy: r2v_n[d](n) |
   derivable?[d](yy) AND ivt_s_unique?[d](n, car(d_b[d]), f, y0)(yy)}"
     ODE_solution_existence_uniqueness nil)
    (d_b const-decl "{dd: list[real] |
   (length(dd) = 2 AND (d(car(dd)) AND d(car(cdr(dd))))) AND
    FORALL (x: real): (car(dd) <= x AND x <= car(cdr(dd))) IFF d(x)}"
     r2v_continuous_extension nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (ivt_s_unique? const-decl "bool" ODE_def nil)
    (r2v_n type-eq-decl nil r2v_def nil)
    (cont_d? const-decl "bool" ODE_continuous_def nil)
    (Lip_d? const-decl "bool" ODE_Lipschitz_def nil)
    (od_f type-eq-decl nil ODE_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (closed_interval? const-decl "bool" interval_def nil)
    (derivable? const-decl "bool" r2v_analysis nil)
    (r2v type-eq-decl nil r2v_def nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (ceiling const-decl "{i | x <= i & i < x + 1}" floor_ceil nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (integer nonempty-type-from-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (closed_interval const-decl "(closed_interval?(a, b))" interval_def
     nil)
    (closed_interval? const-decl "bool" interval_def nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nonempty? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (connected? const-decl "bool" deriv_domain_def analysis)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ci_ci formula-decl nil interval_def nil)
    (od_sol? const-decl "bool" ODE_def nil)
    (ivt_s? const-decl "bool" ODE_def nil)
    (ci_not_one_element formula-decl nil interval_def nil)
    (a skolem-const-decl "real" ODE_solution_existence_uniqueness nil)
    (ci_connected formula-decl nil interval_def nil)
    (ci_nonempty formula-decl nil interval_def nil)
    (hp_noe formula-decl nil interval_def nil)
    (hp_con formula-decl nil interval_def nil)
    (hp_ne formula-decl nil interval_def nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis))
   shostak))
 (sol_uniq_hp_TCC1 0
  (sol_uniq_hp_TCC1-1 nil 3794569723
   ("" (skeep)
    (("" (lemma "ode_sol_derivable") (("" (inst?) nil nil)) nil)) nil)
   ((ode_sol_derivable formula-decl nil
     ODE_solution_existence_uniqueness nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (hp const-decl "bool" interval_def nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices matrices)
    (od_f type-eq-decl nil ODE_def nil)
    (cont_d? const-decl "bool" ODE_continuous_def nil)
    (Lip_hp? const-decl "bool" ODE_solution_existence_uniqueness nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis))
   nil
   (sol_uniq_hp subtype
    "LAMBDA (t: (interval_def.hp(ODE_solution_existence_uniqueness.a))): ODE_solution_existence_uniqueness.ode_sol(interval_def.closed_interval(ODE_solution_existence_uniqueness.a, (number_fields.+)(floor_ceil.ceiling(t), 1)), ODE_solution_existence_uniqueness.n, restrict_ode[(interval_def.hp(ODE_solution_existence_uniqueness.a)), (interval_def.closed_interval(ODE_solution_existence_uniqueness.a, (number_fields.+)(1, floor_ceil.ceiling(t))))].restrict(ODE_solution_existence_uniqueness.n, ODE_solution_existence_uniqueness.f))(ODE_solution_existence_uniqueness.y0)(t)"
    "{yy: r2v_def[(interval_def.hp(ODE_solution_existence_uniqueness.a))].r2v_n(ODE_solution_existence_uniqueness.n) | r2v_analysis[(interval_def.hp(ODE_solution_existence_uniqueness.a))].derivable?(yy)}")))
 (sol_uniq_hp_TCC2 0
  (sol_uniq_hp_TCC2-1 nil 3794569723 ("" (subtype-tcc) nil nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices matrices)
    (od_f type-eq-decl nil ODE_def nil)
    (cont_d? const-decl "bool" ODE_continuous_def nil)
    (Lip_hp? const-decl "bool" ODE_solution_existence_uniqueness nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (Lip_d? const-decl "bool" ODE_Lipschitz_def nil)
    (restrict const-decl "VectorN(n)" restrict_ode nil)
    (contD? const-decl "bool" continuity_multivar mv_analysis)
    (contp? const-decl "bool" continuity_multivar mv_analysis)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (sub const-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (hp const-decl "bool" interval_def nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil
   (sol_uniq_hp subtype "ODE_solution_existence_uniqueness.a"
    "{aa: (interval_def.hp(ODE_solution_existence_uniqueness.a)) | FORALL (dd: (interval_def.hp(ODE_solution_existence_uniqueness.a))): reals.<=(aa, dd)}")))
 (sol_uniq_hp 0
  (sol_uniq_hp-1 nil 3794570163
   ("" (skeep)
    (("" (expand "ivt_s_unique?" 1)
      (("" (assert)
        (("" (split 1)
          (("1" (expand "ivt_s?" 1)
            (("1" (split 1)
              (("1" (lemma "ode_sol_deriv")
                (("1" (expand "od_sol?" 1)
                  (("1" (decompose-equality 1)
                    (("1" (inst?)
                      (("1" (assert)
                        (("1" (replace -1 1)
                          (("1" (hide -1)
                            (("1"
                              (typepred
                               " (ode_sol(closed_interval(a, 1 + ceiling(x!1)), n,
                            restrict
                                [(hp(a)), (closed_interval(a, 1 + ceiling(x!1)))]
                                (n, f))
                           (y0))")
                              (("1"
                                (expand "ivt_s_unique?" -2)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (hide -3)
                                      (("1"
                                        (expand "ivt_s?" -2)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (hide -3)
                                            (("1"
                                              (expand "od_sol?" -2)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (decompose-equality
                                                   -2)
                                                  (("1"
                                                    (inst -1 "x!1")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (replace
                                                         -1
                                                         1
                                                         rl)
                                                        (("1"
                                                          (expand
                                                           "restrict"
                                                           1)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (expand
                                                               "od_fx"
                                                               1)
                                                              (("1"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide 2)
                                                      (("2"
                                                        (hide -1)
                                                        (("2"
                                                          (typepred
                                                           "d_b[closed_interval(a, 1 + ceiling(x!1))]")
                                                          (("1"
                                                            (hide -1)
                                                            (("1"
                                                              (expand
                                                               "closed_interval"
                                                               -)
                                                              (("1"
                                                                (inst-cp
                                                                 -4
                                                                 "x!1")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (lemma
                                                             "ci_ci")
                                                            (("2"
                                                              (inst?)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide 2)
                                                    (("2"
                                                      (hide -)
                                                      (("2"
                                                        (lemma
                                                         "ci_not_one_element")
                                                        (("2"
                                                          (inst
                                                           -1
                                                           "closed_interval(a,1+ceiling(x!1))")
                                                          (("2"
                                                            (lemma
                                                             "ci_ci")
                                                            (("2"
                                                              (inst?)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (hide 2)
                                                    (("3"
                                                      (hide -)
                                                      (("3"
                                                        (lemma
                                                         "ci_connected")
                                                        (("3"
                                                          (inst
                                                           -1
                                                           "closed_interval(a,1+ceiling(x!1))")
                                                          (("3"
                                                            (lemma
                                                             "ci_ci")
                                                            (("3"
                                                              (inst?)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("4"
                                                    (hide 2)
                                                    (("4"
                                                      (hide -)
                                                      (("4"
                                                        (lemma
                                                         "ci_nonempty")
                                                        (("4"
                                                          (inst
                                                           -1
                                                           "closed_interval(a,1+ceiling(x!1))")
                                                          (("4"
                                                            (lemma
                                                             "ci_ci")
                                                            (("4"
                                                              (inst?)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("5"
                                                    (hide 2)
                                                    (("5"
                                                      (hide -)
                                                      (("5"
                                                        (lemma
                                                         "hp_noe")
                                                        (("5"
                                                          (inst?)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("6"
                                                    (hide 2)
                                                    (("6"
                                                      (hide -)
                                                      (("6"
                                                        (lemma
                                                         "hp_con")
                                                        (("6"
                                                          (inst?)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("7"
                                                    (hide 2)
                                                    (("7"
                                                      (hide -)
                                                      (("7"
                                                        (lemma "hp_ne")
                                                        (("7"
                                                          (inst?)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("8"
                                                    (hide 2)
                                                    (("8"
                                                      (expand
                                                       "closed_interval")
                                                      (("8"
                                                        (expand "hp")
                                                        (("8"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("9"
                                                    (hide 2)
                                                    (("9"
                                                      (hide -)
                                                      (("9"
                                                        (lemma "ci_ci")
                                                        (("9"
                                                          (inst?)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("10"
                                                    (hide 2)
                                                    (("10"
                                                      (hide -)
                                                      (("10"
                                                        (lemma "ci_ci")
                                                        (("10"
                                                          (inst?)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (assert)
                                (("2"
                                  (hide 2)
                                  (("2"
                                    (lemma "ci_not_one_element")
                                    (("2"
                                      (inst
                                       -1
                                       "closed_interval(a,1+ceiling(x!1))")
                                      (("2"
                                        (lemma "ci_ci")
                                        (("2" (inst?) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (assert)
                                (("3"
                                  (hide 2)
                                  (("3"
                                    (lemma "ci_connected")
                                    (("3"
                                      (inst
                                       -1
                                       "closed_interval(a,1+ceiling(x!1))")
                                      (("3"
                                        (lemma "ci_ci")
                                        (("3" (inst?) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("4"
                                (assert)
                                (("4"
                                  (hide 2)
                                  (("4"
                                    (lemma "ci_nonempty")
                                    (("4"
                                      (inst
                                       -1
                                       "closed_interval(a,1+ceiling(x!1))")
                                      (("4"
                                        (lemma "ci_ci")
                                        (("4" (inst?) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("5"
                                (assert)
                                (("5"
                                  (hide 2)
                                  (("5"
                                    (lemma "hp_noe")
                                    (("5" (inst?) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("6"
                                (hide 2)
                                (("6"
                                  (lemma "hp_con")
                                  (("6" (inst?) nil nil))
                                  nil))
                                nil)
                               ("7"
                                (hide 2)
                                (("7"
                                  (lemma "hp_ne")
                                  (("7" (inst?) nil nil))
                                  nil))
                                nil)
                               ("8"
                                (assert)
                                (("8"
                                  (hide 2)
                                  (("8"
                                    (skeep)
                                    (("8"
                                      (expand "closed_interval")
                                      (("8"
                                        (expand "hp" 1)
                                        (("8" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (skeep)
                      (("2" (assert)
                        (("2" (hide -1)
                          (("2"
                            (typepred "(deriv[(hp(a))]
                       (LAMBDA (t: (hp(a))):
                          ode_sol(closed_interval(a, 1 + ceiling(t)), n,
                                  restrict
                                      [(hp(a)),
                                       (closed_interval(a, 1 + ceiling(t)))]
                                      (n, f))
                                 (y0)(t)))")
                            (("1" (expand "length" -2 2)
                              (("1"
                                (assert)
                                (("1"
                                  (expand "length" -2 1)
                                  (("1"
                                    (skeep)
                                    (("1"
                                      (inst-cp
                                       -1
                                       "choose[real]((hp(a)))")
                                      (("1"
                                        (inst -1 "x")
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide 2)
                              (("2"
                                (split 1)
                                (("1"
                                  (inst 1 "n")
                                  (("1"
                                    (skeep)
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (lemma "ode_sol_derivable")
                                  (("2"
                                    (inst?)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (hide 2)
                              (("3"
                                (typepred "f")
                                (("3"
                                  (skeep)
                                  (("3"
                                    (lemma
                                     "restrict_cont[(hp(a)), (closed_interval(a,1+ceiling(t)))]")
                                    (("1"
                                      (inst?)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "Lip_hp?" -3)
                                          (("1"
                                            (inst -3 "1+ceiling(t)")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (typepred "t")
                                                (("1"
                                                  (expand "hp" -1)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide 2)
                                      (("2"
                                        (skeep)
                                        (("2"
                                          (expand "closed_interval")
                                          (("2"
                                            (expand "hp" 1)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (typepred "t")
                                      (("3"
                                        (expand "hp" -1)
                                        (("3" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("4" (hide 2)
                              (("4"
                                (skeep*)
                                (("4"
                                  (expand "closed_interval")
                                  (("4"
                                    (expand "hp" 1)
                                    (("4" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("5" (hide 2)
                              (("5"
                                (skeep)
                                (("5"
                                  (lemma "ci_ci")
                                  (("5" (inst?) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("6" (assert)
                              (("6"
                                (hide 2)
                                (("6"
                                  (skeep)
                                  (("6"
                                    (expand "closed_interval" 1)
                                    (("6"
                                      (assert)
                                      (("6"
                                        (typepred "t")
                                        (("6"
                                          (expand "hp" -1)
                                          (("6"
                                            (assert)
                                            (("6" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("7" (hide 2)
                              (("7"
                                (skeep)
                                (("7"
                                  (typepred "t")
                                  (("7"
                                    (expand "hp" -)
                                    (("7" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (skeep)
                      (("3" (split 1)
                        (("1" (inst 1 "n")
                          (("1" (skeep) (("1" (assert) nil nil)) nil))
                          nil)
                         ("2" (lemma "ode_sol_derivable")
                          (("2" (hide -2)
                            (("2" (inst?) (("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("4" (hide -1)
                      (("4" (skeep)
                        (("4" (typepred "f")
                          (("4"
                            (lemma
                             "restrict_cont[(hp(a)), (closed_interval(a,1+ceiling(t)))]")
                            (("1" (inst?)
                              (("1"
                                (assert)
                                (("1"
                                  (expand "Lip_hp?" -3)
                                  (("1"
                                    (inst -3 "1+ceiling(t)")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (typepred "t")
                                        (("1"
                                          (expand "hp" -1)
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide 2)
                              (("2"
                                (skeep)
                                (("2"
                                  (expand "closed_interval")
                                  (("2"
                                    (expand "hp")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (hide 2)
                              (("3"
                                (typepred "t")
                                (("3"
                                  (expand "hp" -)
                                  (("3" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("5" (skeep*)
                      (("5" (expand "closed_interval" -)
                        (("5" (expand "hp") (("5" (assert) nil nil))
                          nil))
                        nil))
                      nil)
                     ("6" (skeep)
                      (("6" (lemma "ci_ci") (("6" (inst?) nil nil))
                        nil))
                      nil)
                     ("7" (skeep)
                      (("7" (typepred "t")
                        (("7" (expand "hp" -) (("7" (assert) nil nil))
                          nil))
                        nil))
                      nil)
                     ("8" (skeep)
                      (("8" (lemma "ci_ci")
                        (("8" (expand "closed_interval")
                          (("8" (typepred "t")
                            (("8" (expand "hp")
                              (("8"
                                (assert)
                                (("8" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (lemma "ode_sol_init")
                (("2" (inst -1 "a" "n" "f" "y0")
                  (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil)
           ("2" (skeep)
            (("2" (expand "ivt_s?" -1)
              (("2" (flatten)
                (("2" (typepred "y2")
                  (("2" (expand "derivable?" -1)
                    (("2" (decompose-equality 1)
                      (("1" (lemma "ode_sol_restrict_hp")
                        (("1" (inst -1 "n" "a" "f" "y2")
                          (("1" (assert)
                            (("1"
                              (typepred
                               "ode_sol(closed_interval(a, 1 + ceiling(x!1)), n,
                        restrict[(hp(a)), (closed_interval(a, 1 + ceiling(x!1)))]
                            (n, f))
                       (y0)")
                              (("1"
                                (expand "ivt_s_unique?" -2)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (inst
                                     -3
                                     "(LAMBDA (t: (closed_interval(a, 1+ceiling(x!1)))): y2(t))")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (split -3)
                                        (("1"
                                          (decompose-equality -1)
                                          (("1"
                                            (inst -1 "x!1")
                                            nil
                                            nil))
                                          nil)
                                         ("2"
                                          (assert)
                                          (("2"
                                            (hide 2)
                                            (("2"
                                              (expand "ivt_s?" 1)
                                              (("2"
                                                (inst
                                                 -3
                                                 "1+ceiling(x!1)")
                                                (("1"
                                                  (case
                                                   "car(d_b[closed_interval(a, 1 + ceiling(x!1))]) = a")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (hide -)
                                                    (("2"
                                                      (typepred
                                                       "d_b[closed_interval(a, 1 + ceiling(x!1))]")
                                                      (("1"
                                                        (expand
                                                         "closed_interval"
                                                         -)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (inst-cp
                                                               -7
                                                               "a")
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (typepred
                                                         "x!1")
                                                        (("2"
                                                          (expand
                                                           "hp"
                                                           -1)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (hide -)
                                                    (("3"
                                                      (lemma "ci_ci")
                                                      (("3"
                                                        (inst?)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (assert)
                                                  (("2"
                                                    (typepred "x!1")
                                                    (("2"
                                                      (expand "hp" -1)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide 2)
                                      (("2"
                                        (hide -)
                                        (("2"
                                          (lemma
                                           "restrict_derivable[(hp(a)), (closed_interval(a,1+ceiling(x!1)))]")
                                          (("1"
                                            (inst -1 "n" "y2")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand "restrict" -1)
                                                (("1"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (typepred "x!1")
                                            (("2"
                                              (expand "hp" -1)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (hide 2)
                                      (("3"
                                        (hide -)
                                        (("3"
                                          (skeep)
                                          (("3"
                                            (typepred "t")
                                            (("3"
                                              (expand
                                               "closed_interval")
                                              (("3"
                                                (expand "hp")
                                                (("3"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide 2)
                                (("2"
                                  (skeep)
                                  (("2"
                                    (expand "closed_interval")
                                    (("2"
                                      (expand "hp" 1)
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (typepred "y2")
                            (("2" (assert)
                              (("2"
                                (expand "length" 1 1)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (skeep)
                        (("2"
                          (lemma
                           "restrict_cont[(hp(a)),(closed_interval(a,1+ceiling(t)))]")
                          (("1" (inst -1 "n" "f")
                            (("1" (assert)
                              (("1"
                                (typepred "f")
                                (("1"
                                  (expand "Lip_hp?" -2)
                                  (("1"
                                    (inst -2 "1+ceiling(t)")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (typepred "t")
                                        (("1"
                                          (expand "hp" -1)
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide 2)
                            (("2" (skeep)
                              (("2"
                                (expand "closed_interval" -)
                                (("2"
                                  (expand "hp")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (hide 2)
                            (("3" (typepred "t")
                              (("3"
                                (expand "hp" -1)
                                (("3" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("3" (skeep*)
                        (("3" (expand "hp" 1)
                          (("3" (expand "closed_interval" -1)
                            (("3" (assert) nil nil)) nil))
                          nil))
                        nil)
                       ("4" (skeep)
                        (("4" (lemma "ci_ci") (("4" (inst?) nil nil))
                          nil))
                        nil)
                       ("5" (skeep)
                        (("5" (typepred "t")
                          (("5" (expand "hp" -)
                            (("5" (assert) nil nil)) nil))
                          nil))
                        nil)
                       ("6" (skeep)
                        (("6" (expand "closed_interval" 1 1)
                          (("6" (assert)
                            (("6" (typepred "t")
                              (("6"
                                (expand "hp" -1)
                                (("6"
                                  (assert)
                                  (("6" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ivt_s_unique? const-decl "bool" ODE_def nil)
    (od_sol? const-decl "bool" ODE_def nil)
    (t skolem-const-decl "(hp(a))" ODE_solution_existence_uniqueness
     nil)
    (TRUE const-decl "bool" booleans nil)
    (t skolem-const-decl "(hp(a))" ODE_solution_existence_uniqueness
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (restrict_cont formula-decl nil restrict_ode nil)
    (ode_sol_derivable formula-decl nil
     ODE_solution_existence_uniqueness nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (choose const-decl "(p)" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nonempty? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (connected? const-decl "bool" deriv_domain_def analysis)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ci_ci formula-decl nil interval_def nil)
    (x!1 skolem-const-decl "{xx: (hp(a)) | xx >= a}"
     ODE_solution_existence_uniqueness nil)
    (ci_not_one_element formula-decl nil interval_def nil)
    (ci_connected formula-decl nil interval_def nil)
    (ci_nonempty formula-decl nil interval_def nil)
    (hp_noe formula-decl nil interval_def nil)
    (hp_con formula-decl nil interval_def nil)
    (hp_ne formula-decl nil interval_def nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (hp const-decl "bool" interval_def nil)
    (>= const-decl "bool" reals nil) (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (VectorN type-eq-decl nil matrices matrices)
    (od_fx const-decl "{ff: r2v_n(n) | length(ff) = n}" ODE_def nil)
    (length const-decl "nat" r2v_def nil)
    (deriv def-decl "{ff: r2v | length(ff) = length(f)}" r2v_analysis
     nil)
    (r2v_n type-eq-decl nil r2v_def nil)
    (r2v type-eq-decl nil r2v_def nil)
    (derivable? const-decl "bool" r2v_analysis nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (d_b const-decl "{dd: list[real] |
   (length(dd) = 2 AND (d(car(dd)) AND d(car(cdr(dd))))) AND
    FORALL (x: real): (car(dd) <= x AND x <= car(cdr(dd))) IFF d(x)}"
     r2v_continuous_extension nil)
    (ode_sol const-decl "{yy: r2v_n[d](n) |
   derivable?[d](yy) AND ivt_s_unique?[d](n, car(d_b[d]), f, y0)(yy)}"
     ODE_solution_existence_uniqueness nil)
    (y0 skolem-const-decl "VectorN(n)"
     ODE_solution_existence_uniqueness nil)
    (od_f type-eq-decl nil ODE_def nil)
    (Lip_d? const-decl "bool" ODE_Lipschitz_def nil)
    (n skolem-const-decl "posnat" ODE_solution_existence_uniqueness
     nil)
    (restrict const-decl "VectorN(n)" restrict_ode nil)
    (cont_d? const-decl "bool" ODE_continuous_def nil)
    (Lip_hp? const-decl "bool" ODE_solution_existence_uniqueness nil)
    (f skolem-const-decl
     "{ff: od_f[(hp(a))](n) | cont_d?[(hp(a))](n)(ff) AND Lip_hp?(a, n)(ff)}"
     ODE_solution_existence_uniqueness nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (closed_interval? const-decl "bool" interval_def nil)
    (ceiling const-decl "{i | x <= i & i < x + 1}" floor_ceil nil)
    (<= const-decl "bool" reals nil)
    (integer nonempty-type-from-decl nil integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (closed_interval const-decl "(closed_interval?(a, b))" interval_def
     nil)
    (closed_interval? const-decl "bool" interval_def nil)
    (< const-decl "bool" reals nil)
    (a skolem-const-decl "real" ODE_solution_existence_uniqueness nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (ode_sol_deriv formula-decl nil ODE_solution_existence_uniqueness
     nil)
    (ode_sol_init formula-decl nil ODE_solution_existence_uniqueness
     nil)
    (ivt_s? const-decl "bool" ODE_def nil)
    (y2 skolem-const-decl "{yy: r2v_n[(hp(a))](n) | derivable?(yy)}"
     ODE_solution_existence_uniqueness nil)
    (restrict_derivable formula-decl nil restrict_ode nil)
    (restrict const-decl "R" restrict nil)
    (x!1 skolem-const-decl "(hp(a))" ODE_solution_existence_uniqueness
     nil)
    (ode_sol_restrict_hp formula-decl nil
     ODE_solution_existence_uniqueness nil)
    (t skolem-const-decl "(hp(a))" ODE_solution_existence_uniqueness
     nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis))
   shostak))
 (ode_sol_TCC4 0
  (ode_sol_TCC4-1 nil 3794569723 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (length def-decl "nat" list_props nil)
    (r2v type-eq-decl nil r2v_def nil)
    (derivable? const-decl "bool" r2v_analysis nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (derivable? const-decl "bool" derivatives analysis)
    (derivable? const-decl "bool" derivatives_def analysis)
    (convergent? const-decl "bool" lim_of_functions analysis)
    (convergence const-decl "bool" lim_of_functions analysis)
    (convergence const-decl "bool" convergence_functions analysis)
    (NQ const-decl "real" derivatives_def analysis)
    (nth const-decl "[(d) -> real]" r2v_def nil)
    (adh const-decl "setof[real]" convergence_functions analysis)
    (fullset const-decl "set" sets nil)
    (hp const-decl "bool" interval_def nil))
   nil
   (ode_sol subtype "ODE_solution_existence_uniqueness.a"
    "{aa: (interval_def.hp(ODE_solution_existence_uniqueness.a)) | FORALL (dd: (interval_def.hp(ODE_solution_existence_uniqueness.a))): reals.<=(aa, dd)}")))
 (ode_sol_TCC5 0
  (ode_sol_TCC10-1 nil 3794130907
   ("" (skeep)
    (("" (split 1)
      (("1" (inst 1 "n") (("1" (skeep) (("1" (assert) nil nil)) nil))
        nil)
       ("2" (assert)
        (("2" (lemma "ode_sol_derivable")
          (("2" (inst -1 "a" "n" "f" "y0") (("2" (assert) nil nil))
            nil))
          nil))
        nil)
       ("3" (lemma "sol_uniq_hp")
        (("3" (inst -1 "a" "n" "f" "y0") nil nil)) nil))
      nil))
    nil)
   ((int_plus_int_is_int application-judgement "int" integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (ode_sol_derivable formula-decl nil
     ODE_solution_existence_uniqueness nil)
    (Lip_hp? const-decl "bool" ODE_solution_existence_uniqueness nil)
    (cont_d? const-decl "bool" ODE_continuous_def nil)
    (od_f type-eq-decl nil ODE_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (hp const-decl "bool" interval_def nil)
    (sol_uniq_hp formula-decl nil ODE_solution_existence_uniqueness
     nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis))
   nil
   (ode_sol subtype
    "LAMBDA (t: (interval_def.hp(ODE_solution_existence_uniqueness.a))): ODE_solution_existence_uniqueness.ode_sol(interval_def.closed_interval(ODE_solution_existence_uniqueness.a, (number_fields.+)(floor_ceil.ceiling(t), 1)), ODE_solution_existence_uniqueness.n, restrict_ode[(interval_def.hp(ODE_solution_existence_uniqueness.a)), (interval_def.closed_interval(ODE_solution_existence_uniqueness.a, 1 + floor_ceil.ceiling(t)))].restrict(ODE_solution_existence_uniqueness.n, ODE_solution_existence_uniqueness.f))(ODE_solution_existence_uniqueness.y0)(t)"
    "{yy: (r2v_analysis[(interval_def.hp(ODE_solution_existence_uniqueness.a))].derivable?) | ODE_def[(interval_def.hp(ODE_solution_existence_uniqueness.a))].ivt_s_unique?(ODE_solution_existence_uniqueness.n, ODE_solution_existence_uniqueness.a, ODE_solution_existence_uniqueness.f, ODE_solution_existence_uniqueness.y0)(yy)}")))
 (unique_solution_lin1_TCC1 0
  (unique_solution_lin1_TCC1-1 nil 3790688923
   ("" (subtype-tcc) nil nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (closed_interval? const-decl "bool" interval_def nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices matrices)
    (continuous? const-decl "bool" continuous_functions analysis)
    (r2v type-eq-decl nil r2v_def nil)
    (derivable? const-decl "bool" r2v_analysis nil)
    (r2v_n type-eq-decl nil r2v_def nil)
    (d!1 skolem-const-decl "(closed_interval?)"
     ODE_solution_existence_uniqueness nil)
    (y0!1 skolem-const-decl "VectorN(1)"
     ODE_solution_existence_uniqueness nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (< const-decl "bool" reals nil)
    (derivable? const-decl "bool" derivatives analysis)
    (derivable? const-decl "bool" derivatives_def analysis)
    (convergent? const-decl "bool" lim_of_functions analysis)
    (convergence const-decl "bool" lim_of_functions analysis)
    (convergence const-decl "bool" convergence_functions analysis)
    (NQ const-decl "real" derivatives_def analysis)
    (nth const-decl "[(d) -> real]" r2v_def nil)
    (adh const-decl "setof[real]" convergence_functions analysis)
    (fullset const-decl "set" sets nil)
    (continuous? const-decl "bool" continuous_functions analysis)
    (closed_interval? const-decl "bool" interval_def nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil))
   nil
   (unique_solution_lin1 subtype
    "r2v_continuous_extension[ODE_solution_existence_uniqueness.d].d_b"
    "(list_adt[real].cons?)")))
 (unique_solution_lin1_TCC2 0
  (unique_solution_lin1_TCC2-1 nil 3790688923
   ("" (skeep)
    (("" (split 1)
      (("1" (assert) nil nil)
       ("2" (skeep)
        (("2" (typepred "d_b[d]")
          (("2" (inst -5 "dd") (("2" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((d_b const-decl "{dd: list[real] |
   (length(dd) = 2 AND (d(car(dd)) AND d(car(cdr(dd))))) AND
    FORALL (x: real): (car(dd) <= x AND x <= car(cdr(dd))) IFF d(x)}"
     r2v_continuous_extension nil)
    (<= const-decl "bool" reals nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (closed_interval? const-decl "bool" interval_def nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis))
   nil
   (unique_solution_lin1 subtype
    "list_adt[real].car(r2v_continuous_extension[ODE_solution_existence_uniqueness.d].d_b)"
    "{aa: (ODE_solution_existence_uniqueness.d) | FORALL (dd: (ODE_solution_existence_uniqueness.d)): reals.<=(aa, dd)}")))
 (unique_solution_lin1_TCC3 0
  (unique_solution_lin1_TCC3-1 nil 3790688923
   ("" (skeep*)
    (("" (typepred "v")
      (("" (typepred "a!1(x) * v + (: b(x) :)" "a!1(x) * v")
        (("" (assert)
          (("" (replace -2)
            (("" (replace -4 1)
              (("" (replace -6 1)
                (("" (hide -) (("" (grind) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((VectorN type-eq-decl nil matrices matrices)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (length_singleton formula-decl nil more_list_props structures)
    (nzint_max application-judgement "{k: nzint | i <= k AND j <= k}"
     real_defs nil)
    (posint_max application-judgement "{k: posint | i <= k AND j <= k}"
     real_defs nil)
    (posrat_max application-judgement "{s: posrat | s >= q AND s >= r}"
     real_defs nil)
    (Vector type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (* const-decl "VectorN(length(v2))" matrices matrices)
    (closed_interval? const-decl "bool" interval_def nil)
    (continuous? const-decl "bool" continuous_functions analysis)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis))
   nil
   (unique_solution_lin1 subtype
    "(matrices.+)(matrices.*(ODE_solution_existence_uniqueness.a(ODE_solution_existence_uniqueness.x), ODE_solution_existence_uniqueness.v), (: ODE_solution_existence_uniqueness.b(ODE_solution_existence_uniqueness.x) :))"
    "matrices.VectorN(1)")))
 (unique_solution_lin1 0
  (unique_solution_lin1-1 nil 3790689115
   ("" (skeep)
    (("" (lemma "unique_solution")
      ((""
        (inst -1 "d" "1"
         " LAMBDA (x: (d), v: VectorN(1)): a!1(x) * v + (: b(x) :)"
         "y0")
        (("1" (assert)
          (("1" (hide 2)
            (("1" (split 1)
              (("1" (lemma "Lip_norm_od_f[d]")
                (("1" (inst?)
                  (("1" (assert)
                    (("1" (inst -1 "d")
                      (("1" (assert)
                        (("1" (hide 2)
                          (("1" (expand "Lip_d_E?" 1)
                            (("1" (inst 1 "norm_inf(1)")
                              (("1"
                                (lemma "max_in_interval[(d)]")
                                (("1"
                                  (lemma "min_in_interval[(d)]")
                                  (("1"
                                    (inst
                                     -1
                                     "car(d_b[d])"
                                     "car(cdr(d_b[d]))"
                                     "a!1")
                                    (("1"
                                      (inst
                                       -2
                                       "car(d_b[d])"
                                       "car(cdr(d_b[d]))"
                                       "a!1")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (case
                                           "car(d_b[d]) <= car(cdr(d_b[d]))")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (skeep)
                                              (("1"
                                                (skeep)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (inst
                                                     1
                                                     "max(abs(a!1(c)),abs(a!1(c!1)))")
                                                    (("1"
                                                      (skeep)
                                                      (("1"
                                                        (case
                                                         "a!1(t) * y1 + (: b(t) :) - (a!1(t) * y2 + (: b(t) :)) = a!1(t)*(y1-y2)")
                                                        (("1"
                                                          (replace -1)
                                                          (("1"
                                                            (typepred
                                                             "norm_inf(1)")
                                                            (("1"
                                                              (expand
                                                               "norm?"
                                                               -1)
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (inst
                                                                   -2
                                                                   "y1-y2"
                                                                   "a!1(t)")
                                                                  (("1"
                                                                    (replace
                                                                     -2
                                                                     1)
                                                                    (("1"
                                                                      (hide
                                                                       -1
                                                                       -2
                                                                       -3
                                                                       -4
                                                                       -5
                                                                       -6
                                                                       -7
                                                                       -8)
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         "t")
                                                                        (("1"
                                                                          (inst
                                                                           -4
                                                                           "t")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (typepred
                                                                               "d_b[d]")
                                                                              (("1"
                                                                                (inst
                                                                                 -5
                                                                                 "t")
                                                                                (("1"
                                                                                  (flatten)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (flatten)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (case
                                                                                           "norm_inf(1)(y1 - y2)=0")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil)
                                                                                           ("2"
                                                                                            (div-by
                                                                                             2
                                                                                             "norm_inf(1)(y1 - y2)")
                                                                                            (("2"
                                                                                              (grind)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide
                                                                     -)
                                                                    (("2"
                                                                      (typepred
                                                                       "y1-y2"
                                                                       "y1"
                                                                       "y2")
                                                                      (("2"
                                                                        (replace
                                                                         -4)
                                                                        (("2"
                                                                          (replace
                                                                           -6)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (expand
                                                                               "max"
                                                                               -2)
                                                                              (("2"
                                                                                (propax)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          (("2"
                                                            (hide 2)
                                                            (("2"
                                                              (hide -)
                                                              (("2"
                                                                (lemma
                                                                 "quad_move")
                                                                (("2"
                                                                  (inst
                                                                   -1
                                                                   "a!1(t)*y1"
                                                                   "(: b(t) :)"
                                                                   "a!1(t)*y2"
                                                                   "(: b(t) :)")
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (replace
                                                                       -1)
                                                                      (("2"
                                                                        (typepred
                                                                         "y1")
                                                                        (("2"
                                                                          (typepred
                                                                           "y2")
                                                                          (("2"
                                                                            (case
                                                                             "y1 = (: car(y1) :)")
                                                                            (("1"
                                                                              (case
                                                                               "y2 = (: car(y2) :)")
                                                                              (("1"
                                                                                (replace
                                                                                 -1)
                                                                                (("1"
                                                                                  (replace
                                                                                   -2)
                                                                                  (("1"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (hide
                                                                                 2)
                                                                                (("2"
                                                                                  (decompose-equality
                                                                                   1)
                                                                                  (("2"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (hide
                                                                               2)
                                                                              (("2"
                                                                                (decompose-equality
                                                                                 1)
                                                                                (("2"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (assert)
                                            (("2"
                                              (hide -1 -2)
                                              (("2"
                                                (hide 2)
                                                (("2"
                                                  (typepred "d_b[d]")
                                                  (("2"
                                                    (inst
                                                     -5
                                                     "car(d_b[d])")
                                                    (("2"
                                                      (flatten)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (hide -1 -2)
                                            (("3"
                                              (hide 2)
                                              (("3"
                                                (typepred "d_b[d]")
                                                (("3" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (typepred "d_b[d]")
                                        (("2" (propax) nil nil))
                                        nil)
                                       ("3"
                                        (typepred "d_b[d]")
                                        (("3" (grind) nil nil))
                                        nil)
                                       ("4"
                                        (typepred "d_b[d]")
                                        (("4" (propax) nil nil))
                                        nil)
                                       ("5" (grind) nil nil))
                                      nil)
                                     ("2"
                                      (typepred "d_b[d]")
                                      (("2" (propax) nil nil))
                                      nil)
                                     ("3"
                                      (typepred "d_b[d]")
                                      (("3"
                                        (assert)
                                        (("3" (grind) nil nil))
                                        nil))
                                      nil)
                                     ("4"
                                      (typepred "d_b[d]")
                                      (("4" (propax) nil nil))
                                      nil)
                                     ("5"
                                      (typepred "d_b[d]")
                                      (("5" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide 2)
                                  (("2"
                                    (skeep)
                                    (("2"
                                      (typepred "x" "y")
                                      (("2"
                                        (typepred "d")
                                        (("2"
                                          (expand
                                           "closed_interval?"
                                           -1)
                                          (("2"
                                            (skeep)
                                            (("2"
                                              (expand
                                               "closed_interval?"
                                               -1)
                                              (("2"
                                                (inst-cp -1 "x")
                                                (("2"
                                                  (inst-cp -1 "y")
                                                  (("2"
                                                    (inst-cp -1 "z")
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide 2)
                    (("2" (skeep)
                      (("2" (typepred "v")
                        (("2"
                          (typepred "a!1(x) * v + (: b(x) :)"
                           "a!1(x) * v" "(: b(x) :)")
                          (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (expand "cont_d?" 1)
                (("2" (skeep)
                  (("2" (expand "contD?" 1)
                    (("2" (skeep)
                      (("2" (lemma "contp_norms_v2v")
                        (("2"
                          (inst -1
                           "(LAMBDA (x: VectorN(1)): d(car(x)))" "1"
                           "LAMBDA (x_1: {x: VectorN(1) | d(car(x))}):
               a!1(car(x_1)) * y1 + (: b(car(x_1)) :)" "p")
                          (("1" (assert)
                            (("1" (hide 2)
                              (("1"
                                (inst 1 "norm_inf(1)" "norm_inf(1)")
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "contp?" 1)
                                    (("1"
                                      (skeep)
                                      (("1"
                                        (typepred "b")
                                        (("1"
                                          (typepred "a!1")
                                          (("1"
                                            (expand "continuous?")
                                            (("1"
                                              (inst -1 "car(p)")
                                              (("1"
                                                (inst -2 "car(p)")
                                                (("1"
                                                  (expand
                                                   "continuous?")
                                                  (("1"
                                                    (typepred "y1")
                                                    (("1"
                                                      (hide -1)
                                                      (("1"
                                                        (case
                                                         "norm_inf(1)(y1)=0")
                                                        (("1"
                                                          (inst
                                                           -4
                                                           "eps/2")
                                                          (("1"
                                                            (skeep)
                                                            (("1"
                                                              (inst
                                                               1
                                                               "delta")
                                                              (("1"
                                                                (skeep)
                                                                (("1"
                                                                  (inst
                                                                   -4
                                                                   "car(x_2)")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (split
                                                                       -4)
                                                                      (("1"
                                                                        (case
                                                                         "norm_inf(1)
              (a!1(car(x_2)) * y1 + (: b(car(x_2)) :) -
                (a!1(car(p)) * y1 + (: b(car(p)) :))) <= abs(a!1(car(x_2))-a!1(car(p)))*norm_inf(1)(y1) + abs(b(car(x_2)) - b(car(p)))")
                                                                        (("1"
                                                                          (replace
                                                                           -3
                                                                           -1)
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (hide
                                                                           2)
                                                                          (("2"
                                                                            (case
                                                                             "norm_inf(1)
              (a!1(car(x_2)) * y1 + (: b(car(x_2)) :) -
                (a!1(car(p)) * y1 + (: b(car(p)) :))) = norm_inf(1)
              (a!1(car(x_2)) * y1 +(a!1(car(p)) * y1) + (: b(car(x_2)) :) -
                (: b(car(p)) :))")
                                                                            (("1"
                                                                              (replace
                                                                               -1)
                                                                              (("1"
                                                                                (hide
                                                                                 -)
                                                                                (("1"
                                                                                  (typepred
                                                                                   "norm_inf(1)")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "norm?"
                                                                                     -1)
                                                                                    (("1"
                                                                                      (flatten)
                                                                                      (("1"
                                                                                        (inst
                                                                                         -4
                                                                                         " (a!1(car(x_2)) * y1 + (a!1(car(p)) * y1))"
                                                                                         "(: b(car(x_2)) :)
                - (: b(car(p)) :)")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (case
                                                                                             "  norm_inf(1)((a!1(car(x_2)) * y1 + (a!1(car(p)) * y1))) =   abs(a!1(car(x_2)) - a!1(car(p))) * norm_inf(1)(y1)")
                                                                                            (("1"
                                                                                              (case
                                                                                               " abs(b(car(x_2)) - b(car(p))) =    norm_inf(1)((: b(car(x_2)) :) - (: b(car(p)) :))")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (replace
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (replace
                                                                                                     -2)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (hide
                                                                                                         -1
                                                                                                         -2
                                                                                                         -3
                                                                                                         -4
                                                                                                         -5)
                                                                                                        (("1"
                                                                                                          (case
                                                                                                           "((a!1(car(x_2)) * y1 + (a!1(car(p)) * y1)) +
                ((: b(car(x_2)) :) - (: b(car(p)) :))) =  (a!1(car(x_2)) * y1 + (a!1(car(p)) * y1) + (: b(car(x_2)) :)
                - (: b(car(p)) :))")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (hide
                                                                                                             2)
                                                                                                            (("2"
                                                                                                              (hide
                                                                                                               -1)
                                                                                                              (("2"
                                                                                                                (typepred
                                                                                                                 "y1")
                                                                                                                (("2"
                                                                                                                  (case
                                                                                                                   "y1=(: car(y1) :)")
                                                                                                                  (("1"
                                                                                                                    (replace
                                                                                                                     -1)
                                                                                                                    (("1"
                                                                                                                      (grind)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (hide
                                                                                                                     2)
                                                                                                                    (("2"
                                                                                                                      (decompose-equality
                                                                                                                       1)
                                                                                                                      (("2"
                                                                                                                        (grind)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (hide
                                                                                                 2)
                                                                                                (("2"
                                                                                                  (hide
                                                                                                   -)
                                                                                                  (("2"
                                                                                                    (grind)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (hide
                                                                                               2)
                                                                                              (("2"
                                                                                                (lemma
                                                                                                 "dist_scalar")
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   -1
                                                                                                   "a!1(car(x_2))"
                                                                                                   "a!1(car(p))"
                                                                                                   "y1")
                                                                                                  (("2"
                                                                                                    (replace
                                                                                                     -1
                                                                                                     1
                                                                                                     rl)
                                                                                                    (("2"
                                                                                                      (replace
                                                                                                       -1
                                                                                                       1
                                                                                                       lr)
                                                                                                      (("2"
                                                                                                        (case
                                                                                                         "norm_inf(1)(a!1(car(x_2)) * y1 + a!1(car(p)) * y1) = norm_inf(1)((a!1(car(x_2)) + a!1(car(p))) * y1)")
                                                                                                        (("1"
                                                                                                          (replace
                                                                                                           -1)
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (postpone)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (postpone)
                                                                                                          nil
                                                                                                          nil)
                                                                                                         ("3"
                                                                                                          (postpone)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (postpone)
                                                                                          nil
                                                                                          nil)
                                                                                         ("3"
                                                                                          (postpone)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (postpone)
                                                                              nil
                                                                              nil)
                                                                             ("3"
                                                                              (postpone)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (postpone)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (postpone)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (postpone) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (postpone) nil nil))
        nil))
      nil))
    nil)
   nil shostak)))

