(continuous_function_complete_rho
 (IMP_metric_rho_TCC1 0
  (IMP_metric_rho_TCC1-1 nil 3789411799
   ("" (lemma "closed_interval") (("" (propax) nil nil)) nil)
   ((closed_interval formula-decl nil continuous_function_complete_rho
     nil))
   nil
   (IMP_metric_rho assuming
    "metric_rho[continuous_function_complete_rho.d].metric_rho"
    "closed_interval: ASSUMPTION interval_def.closed_interval?(metric_rho.d)")))
 (IMP_r2v_sequence_convergence_TCC1 0
  (IMP_r2v_sequence_convergence_TCC1-1 nil 3789411799
   ("" (lemma "ci_nonempty")
    (("" (inst?)
      (("" (lemma "closed_interval") (("" (propax) nil nil)) nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (closed_interval? const-decl "bool" interval_def nil)
    (d formal-const-decl "[real -> bool]"
       continuous_function_complete_rho nil)
    (closed_interval formula-decl nil continuous_function_complete_rho
     nil)
    (ci_nonempty formula-decl nil interval_def nil))
   nil
   (IMP_r2v_sequence_convergence assuming
    "r2v_sequence_convergence[continuous_function_complete_rho.d].r2v_sequence_convergence"
    "non_empty: ASSUMPTION sets[real].nonempty?(r2v_sequence_convergence.d)")))
 (IMP_r2v_sequence_convergence_TCC2 0
  (IMP_r2v_sequence_convergence_TCC2-1 nil 3789411799
   ("" (lemma "ci_connected")
    (("" (inst -1 "d")
      (("" (lemma "closed_interval") (("" (propax) nil nil)) nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (closed_interval? const-decl "bool" interval_def nil)
    (d formal-const-decl "[real -> bool]"
       continuous_function_complete_rho nil)
    (closed_interval formula-decl nil continuous_function_complete_rho
     nil)
    (ci_connected formula-decl nil interval_def nil))
   nil
   (IMP_r2v_sequence_convergence assuming
    "r2v_sequence_convergence[continuous_function_complete_rho.d].r2v_sequence_convergence"
    "connected: ASSUMPTION deriv_domain_def[(r2v_sequence_convergence.d)].connected?")))
 (IMP_r2v_sequence_convergence_TCC3 0
  (IMP_r2v_sequence_convergence_TCC3-1 nil 3789411799
   ("" (lemma "ci_not_one_element")
    (("" (lemma "closed_interval") (("" (inst -2 "d") nil nil)) nil))
    nil)
   ((closed_interval formula-decl nil continuous_function_complete_rho
     nil)
    (d formal-const-decl "[real -> bool]"
       continuous_function_complete_rho nil)
    (closed_interval? const-decl "bool" interval_def nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (ci_not_one_element formula-decl nil interval_def nil))
   nil
   (IMP_r2v_sequence_convergence assuming
    "r2v_sequence_convergence[continuous_function_complete_rho.d].r2v_sequence_convergence"
    "not_one_element: ASSUMPTION deriv_domain_def[(r2v_sequence_convergence.d)].not_one_element?")))
 (Cfs_complete 0
  (Cfs_complete-1 nil 3789411979
   ("" (skeep)
    (("" (expand "complete_metric_space?" 1)
      (("" (split 1)
        (("1" (expand "metric_space?" 1)
          (("1" (lemma "rho_metric")
            (("1" (inst -1 "n" " K" "norm_inf(n)")
              (("1" (expand "metric?" -1)
                (("1" (flatten)
                  (("1" (split 1)
                    (("1" (expand "metric_zero?")
                      (("1" (skeep) (("1" (inst?) nil nil)) nil)) nil)
                     ("2" (expand "metric_symmetric?")
                      (("2" (skeep) (("2" (inst?) nil nil)) nil)) nil)
                     ("3" (assert)
                      (("3" (expand "metric_triangle?" -3)
                        (("3" (expand "metric_triangle?" 1)
                          (("3" (skeep) (("3" (inst?) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (expand "metric_complete?" 1)
          (("2" (skeep 1)
            (("2" (lemma "cauchy_u_conv_u")
              (("2" (typepred "u(0)")
                (("2" (inst -3 "u")
                  (("1" (assert)
                    (("1" (split -3)
                      (("1" (expand "metric_convergent?" 1)
                        (("1" (expand "conv_u?" -1)
                          (("1" (skeep)
                            (("1" (inst 1 "f")
                              (("1"
                                (assert)
                                (("1"
                                  (expand "metric_converges_to" 1)
                                  (("1"
                                    (expand "conv_u?" -1)
                                    (("1"
                                      (skeep)
                                      (("1"
                                        (expand "member" 1)
                                        (("1"
                                          (expand "ball" 1)
                                          (("1"
                                            (expand "rho" 1)
                                            (("1"
                                              (inst -1 "norm_inf(n)")
                                              (("1"
                                                (expand "pre_rho" 1)
                                                (("1"
                                                  (inst -1 "r")
                                                  (("1"
                                                    (skeep)
                                                    (("1"
                                                      (inst 1 "N")
                                                      (("1"
                                                        (skeep)
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "i"
                                                           "_")
                                                          (("1"
                                                            (typepred
                                                             "max(LAMBDA (x: VectorN(1)): d(car(x)))
                                                                                             (LAMBDA (x: VectorN(1)):
                                                                                                ext_c(LAMBDA (x: (d)) -> nnreal:
                                                                                                        exp(x * -(K) -
                                                                                                             car(d_b) * -(K))
                                                                                                         * norm_inf(n)(f(x) - u(i)(x)))
                                                                                                     (car(x)))")
                                                            (("1"
                                                              (hide -1)
                                                              (("1"
                                                                (skeep)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (replace
                                                                     -1
                                                                     1
                                                                     rl)
                                                                    (("1"
                                                                      (typepred
                                                                       "v")
                                                                      (("1"
                                                                        (typepred
                                                                         "d_b")
                                                                        (("1"
                                                                          (inst
                                                                           -5
                                                                           "car(v)")
                                                                          (("1"
                                                                            (flatten)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (expand
                                                                                   "ext_c"
                                                                                   1
                                                                                   1)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (inst
                                                                                       -12
                                                                                       "car(v)")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (case
                                                                                           " exp(car(v) * -(K) -
                                                                                                                                                car(d_b) * -(K))<=1")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (case
                                                                                               " norm_inf(n)(u(i)(car(v)) - f(car(v))) =  norm_inf(n)(f(car(v)) - u(i)(car(v)))")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (replace
                                                                                                   -1
                                                                                                   1
                                                                                                   rl)
                                                                                                  (("1"
                                                                                                    (case
                                                                                                     "NOT exp(car(v) * -(K) -
                                                                                                                                                                            car(d_b) * -(K))
                                                                                                                                                                        * norm_inf(n)(u(i)(car(v)) - f(car(v))) <= norm_inf(n)(u(i)(car(v)) - f(car(v)))")
                                                                                                    (("1"
                                                                                                      (hide
                                                                                                       2)
                                                                                                      (("1"
                                                                                                        (case
                                                                                                         "FORALL(a:{aa:real| aa<=1 AND 0<=aa}, b:nnreal): a*b<=b")
                                                                                                        (("1"
                                                                                                          (inst
                                                                                                           -1
                                                                                                           "exp(car(v) * -(K) -
                                                                                                                                                                     car(d_b) * -(K))"
                                                                                                           "norm_inf(n)(u(i)(car(v)) - f(car(v)))")
                                                                                                          nil
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (assert)
                                                                                                          (("2"
                                                                                                            (hide
                                                                                                             -)
                                                                                                            (("2"
                                                                                                              (hide
                                                                                                               2)
                                                                                                              (("2"
                                                                                                                (skeep)
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  (("2"
                                                                                                                    (typepred
                                                                                                                     "a"
                                                                                                                     "b")
                                                                                                                    (("2"
                                                                                                                      (grind)
                                                                                                                      (("2"
                                                                                                                        (case
                                                                                                                         "b=0")
                                                                                                                        (("1"
                                                                                                                          (div-by
                                                                                                                           1
                                                                                                                           "b")
                                                                                                                          nil
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (div-by
                                                                                                                           2
                                                                                                                           "b")
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (hide
                                                                                                 -)
                                                                                                (("2"
                                                                                                  (hide
                                                                                                   2)
                                                                                                  (("2"
                                                                                                    (lemma
                                                                                                     "norm_reflex")
                                                                                                    (("2"
                                                                                                      (inst?)
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (hide
                                                                                                           2)
                                                                                                          (("2"
                                                                                                            (typepred
                                                                                                             "f")
                                                                                                            (("2"
                                                                                                              (typepred
                                                                                                               "f(car(v))")
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                (("2"
                                                                                                                  (typepred
                                                                                                                   "u(0)")
                                                                                                                  (("2"
                                                                                                                    (expand
                                                                                                                     "length"
                                                                                                                     -5
                                                                                                                     2)
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      (("2"
                                                                                                                        (expand
                                                                                                                         "length"
                                                                                                                         -5
                                                                                                                         1)
                                                                                                                        (("2"
                                                                                                                          (skeep
                                                                                                                           -4)
                                                                                                                          (("2"
                                                                                                                            (inst-cp
                                                                                                                             -4
                                                                                                                             "choose[real]((d))")
                                                                                                                            (("2"
                                                                                                                              (inst-cp
                                                                                                                               -4
                                                                                                                               "car(v)")
                                                                                                                              (("2"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (hide
                                                                                               -)
                                                                                              (("2"
                                                                                                (hide
                                                                                                 2)
                                                                                                (("2"
                                                                                                  (case
                                                                                                   "car(v) * -(K) -
                                                                                                                                                              car(d_b) * -(K) <= 0")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (case
                                                                                                       "car(v) * -(K) - car(d_b) * -(K) = 0")
                                                                                                      (("1"
                                                                                                        (lemma
                                                                                                         "exp_0")
                                                                                                        (("1"
                                                                                                          (replace
                                                                                                           -2
                                                                                                           1)
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (lemma
                                                                                                         "exp_strict_increasing")
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "strict_increasing?"
                                                                                                           -1)
                                                                                                          (("2"
                                                                                                            (inst
                                                                                                             -1
                                                                                                             " car(v) * -(K) - car(d_b) * -(K)"
                                                                                                             "0")
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (hide
                                                                                                     2)
                                                                                                    (("2"
                                                                                                      (reveal
                                                                                                       +)
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (hide
                                                                                                           1
                                                                                                           2
                                                                                                           3
                                                                                                           4)
                                                                                                          (("2"
                                                                                                            (case
                                                                                                             "NOT car(v) * -(K) - car(d_b) * -(K) = -(car(v)-car(d_b))*(K)")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (replace
                                                                                                               -1
                                                                                                               1)
                                                                                                              (("2"
                                                                                                                (typepred
                                                                                                                 "d_b")
                                                                                                                (("2"
                                                                                                                  (inst
                                                                                                                   -5
                                                                                                                   "car(v)")
                                                                                                                  (("2"
                                                                                                                    (flatten)
                                                                                                                    (("2"
                                                                                                                      (split
                                                                                                                       -6)
                                                                                                                      (("1"
                                                                                                                        (flatten)
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          (("1"
                                                                                                                            (case
                                                                                                                             "car(v)-car(d_b)=0")
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              nil
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (case
                                                                                                                               "NOT car(v)-car(d_b) > 0")
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (assert)
                                                                                                                                (("2"
                                                                                                                                  (typepred
                                                                                                                                   "K")
                                                                                                                                  (("2"
                                                                                                                                    (div-by
                                                                                                                                     2
                                                                                                                                     "K")
                                                                                                                                    (("2"
                                                                                                                                      (assert)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (typepred
                                                                                                                         "v")
                                                                                                                        (("2"
                                                                                                                          (propax)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (lemma
                                                               "d_three")
                                                              (("2"
                                                                (inst?)
                                                                (("2"
                                                                  (lemma
                                                                   "closed_interval")
                                                                  (("2"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("3"
                                                              (assert)
                                                              (("3"
                                                                (lemma
                                                                 "ext_cont_D")
                                                                (("3"
                                                                  (inst?)
                                                                  (("1"
                                                                    (hide
                                                                     2
                                                                     3)
                                                                    (("1"
                                                                      (lemma
                                                                       "pre_rho_cont")
                                                                      (("1"
                                                                        (expand
                                                                         "pre_rho")
                                                                        (("1"
                                                                          (inst?)
                                                                          (("1"
                                                                            (hide
                                                                             2)
                                                                            (("1"
                                                                              (typepred
                                                                               "u(i)")
                                                                              (("1"
                                                                                (expand
                                                                                 "continuous?")
                                                                                (("1"
                                                                                  (skeep)
                                                                                  (("1"
                                                                                    (inst
                                                                                     -1
                                                                                     "i_1")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "nth")
                                                                                      (("1"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (typepred
                                                                                       "i_1")
                                                                                      (("2"
                                                                                        (expand
                                                                                         "length")
                                                                                        (("2"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (hide
                                                                             2)
                                                                            (("2"
                                                                              (split
                                                                               1)
                                                                              (("1"
                                                                                (skeep)
                                                                                (("1"
                                                                                  (typepred
                                                                                   "f")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "length"
                                                                                     -2
                                                                                     2)
                                                                                    (("1"
                                                                                      (skeep
                                                                                       -1)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "length"
                                                                                         -2
                                                                                         1)
                                                                                        (("1"
                                                                                          (inst-cp
                                                                                           -1
                                                                                           "choose[real]((d))")
                                                                                          (("1"
                                                                                            (inst
                                                                                             -1
                                                                                             "x1")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (typepred
                                                                                 "f")
                                                                                (("2"
                                                                                  (typepred
                                                                                   "r")
                                                                                  (("2"
                                                                                    (reveal
                                                                                     -)
                                                                                    (("2"
                                                                                      (lemma
                                                                                       "conv_u_cont")
                                                                                      (("2"
                                                                                        (hide
                                                                                         -2
                                                                                         -3
                                                                                         -4)
                                                                                        (("2"
                                                                                          (inst
                                                                                           -1
                                                                                           "u"
                                                                                           "f")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil)
                                                                                           ("2"
                                                                                            (split
                                                                                             1)
                                                                                            (("1"
                                                                                              (inst
                                                                                               1
                                                                                               "n")
                                                                                              (("1"
                                                                                                (skeep)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "length"
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (expand
                                                                                               "consf?"
                                                                                               1)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "length"
                                                                                                 1
                                                                                                 1)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (typepred
                                                                     "u(0)(choose[real]((d)))")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (hide
                                                                         2
                                                                         3)
                                                                        (("1"
                                                                          (skeep)
                                                                          (("1"
                                                                            (typepred
                                                                             "f(x)-u(i)(x)")
                                                                            (("1"
                                                                              (typepred
                                                                               "f")
                                                                              (("1"
                                                                                (typepred
                                                                                 "u(i)(x)")
                                                                                (("1"
                                                                                  (replace
                                                                                   -2)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "length"
                                                                                     -4)
                                                                                    (("1"
                                                                                      (skeep
                                                                                       -3)
                                                                                      (("1"
                                                                                        (inst-cp
                                                                                         -3
                                                                                         "choose[real]((d))")
                                                                                        (("1"
                                                                                          (inst
                                                                                           -3
                                                                                           "x")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide
                                                                       2
                                                                       3)
                                                                      (("2"
                                                                        (typepred
                                                                         "d_b")
                                                                        (("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("3"
                                                                    (hide
                                                                     2)
                                                                    (("3"
                                                                      (skeep)
                                                                      (("3"
                                                                        (typepred
                                                                         "d_b")
                                                                        (("3"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("4"
                                                              (hide 2)
                                                              (("4"
                                                                (assert)
                                                                (("4"
                                                                  (skeep)
                                                                  (("4"
                                                                    (typepred
                                                                     "f(x1)"
                                                                     "u(i)(x1)"
                                                                     "f(x1) - u(i)(x1)")
                                                                    (("4"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("5"
                                                              (hide 2)
                                                              (("5"
                                                                (hide
                                                                 -)
                                                                (("5"
                                                                  (skeep)
                                                                  (("5"
                                                                    (typepred
                                                                     "d_b")
                                                                    (("5"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("6"
                                                              (skeep 1)
                                                              (("6"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide 2)
                                                (("2"
                                                  (expand "length" 1 1)
                                                  (("2"
                                                    (expand
                                                     "length"
                                                     1
                                                     1)
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (split 1)
                                (("1"
                                  (skeep)
                                  (("1"
                                    (typepred "f")
                                    (("1"
                                      (skeep -1)
                                      (("1"
                                        (expand "length" -2)
                                        (("1"
                                          (inst-cp
                                           -1
                                           "choose[real]((d))")
                                          (("1"
                                            (inst -1 "x1")
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (lemma "conv_u_cont")
                                  (("2"
                                    (inst?)
                                    (("1" (assert) nil nil)
                                     ("2"
                                      (expand "consf?" 1)
                                      (("2"
                                        (expand "length" 1 1)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (typepred "(u(0)(choose[real](d)))")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "fullset" 1)
                                      (("1" (propax) nil nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (lemma "non_empty")
                                    (("2" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide -1 -2)
                        (("2" (hide 2)
                          (("2" (lemma "cauchy_u_equiv")
                            (("2" (inst?)
                              (("1"
                                (assert)
                                (("1"
                                  (hide 2)
                                  (("1"
                                    (inst 1 "norm_inf(length(u))")
                                    (("1"
                                      (expand "cauchy_u?" 1 1)
                                      (("1"
                                        (expand "cauchy?" -1)
                                        (("1"
                                          (skeep 1)
                                          (("1"
                                            (expand "member" -1)
                                            (("1"
                                              (expand "ball" -1)
                                              (("1"
                                                (expand "rho" -1)
                                                (("1"
                                                  (expand "pre_rho" -1)
                                                  (("1"
                                                    (inst
                                                     -1
                                                     "eps*exp(car(cdr(d_b)) * -(K) - car(d_b) * -(K))")
                                                    (("1"
                                                      (skeep)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (inst
                                                           1
                                                           "n!1")
                                                          (("1"
                                                            (skeep)
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "i"
                                                               "j")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (typepred
                                                                     "max(LAMBDA (x: VectorN(1)): d(car(x)))
                                                   (LAMBDA (x: VectorN(1)):
                                                      ext_c(LAMBDA (x: (d)) -> nnreal:
                                                              exp(x * -(K) -
                                                                   car(d_b) * -(K))
                                                               * norm_inf(n)(u(j)(x) - u(i)(x)))
                                                           (car(x)))")
                                                                    (("1"
                                                                      (expand
                                                                       "is_glob_max?"
                                                                       -1)
                                                                      (("1"
                                                                        (skeep)
                                                                        (("1"
                                                                          (inst
                                                                           -2
                                                                           "(: x :)")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (typepred
                                                                               "d_b")
                                                                              (("1"
                                                                                (inst
                                                                                 -5
                                                                                 "x")
                                                                                (("1"
                                                                                  (flatten)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (flatten)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "ext_c"
                                                                                         -9
                                                                                         1)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (case
                                                                                             "NOT  exp(x * -(K) - car(d_b) * -(K)) *
                                                                      norm_inf(n)(u(j)(x) - u(i)(x)) <  eps *
                                                                       exp(car(cdr(d_b)) * -(K) -
                                                                            car(d_b) * -(K))")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil)
                                                                                             ("2"
                                                                                              (hide
                                                                                               -11)
                                                                                              (("2"
                                                                                                (hide
                                                                                                 -11)
                                                                                                (("2"
                                                                                                  (hide
                                                                                                   -10)
                                                                                                  (("2"
                                                                                                    (case
                                                                                                     "exp(car(cdr(d_b)) * -(K) -
                                                                                  car(d_b) * -(K)) <= exp(x * -(K) - car(d_b) * -(K))")
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (div-by
                                                                                                         -2
                                                                                                         "exp(x * -(K) - car(d_b) * -(K)) ")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (div-by
                                                                                                             -1
                                                                                                             "exp(x * -(K) - car(d_b) * -(K)) ")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (case
                                                                                                                 "FORALL(a,b:posreal): b<=1 IMPLIES b*a<=a")
                                                                                                                (("1"
                                                                                                                  (inst
                                                                                                                   -1
                                                                                                                   "eps"
                                                                                                                   "exp(car(cdr(d_b)) * -(K) -
                                                         car(d_b) * -(K))
                                                    /
                                                    exp(x * -(K) - car(d_b) * -(K))")
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    (("1"
                                                                                                                      (case
                                                                                                                       "NOT  eps *
                                                              exp(car(cdr(d_b)) * -(K) -
                                                                   car(d_b) * -(K))
                                                              /
                                                              exp(x * -(K) - car(d_b) * -(K)) = exp(car(cdr(d_b)) * -(K) -
                                                                 car(d_b) * -(K))
                                                             /
                                                             exp(x * -(K) - car(d_b) * -(K))
                                                             * eps")
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (case
                                                                                                                         " norm_inf(length(u))(u(i)(x) - u(j)(x)) =  norm_inf(n)(u(j)(x) - u(i)(x)) ")
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (hide
                                                                                                                           2)
                                                                                                                          (("2"
                                                                                                                            (hide
                                                                                                                             -)
                                                                                                                            (("2"
                                                                                                                              (lemma
                                                                                                                               "norm_reflex")
                                                                                                                              (("2"
                                                                                                                                (inst
                                                                                                                                 -1
                                                                                                                                 "n"
                                                                                                                                 "norm_inf(n)"
                                                                                                                                 "u(j)(x)"
                                                                                                                                 "u(i)(x)")
                                                                                                                                (("2"
                                                                                                                                  (expand
                                                                                                                                   "norm_inf")
                                                                                                                                  (("2"
                                                                                                                                    (assert)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (hide
                                                                                                                   2)
                                                                                                                  (("2"
                                                                                                                    (hide
                                                                                                                     -)
                                                                                                                    (("2"
                                                                                                                      (skeep)
                                                                                                                      (("2"
                                                                                                                        (assert)
                                                                                                                        (("2"
                                                                                                                          (typepred
                                                                                                                           "b")
                                                                                                                          (("2"
                                                                                                                            (typepred
                                                                                                                             "a")
                                                                                                                            (("2"
                                                                                                                              (grind)
                                                                                                                              (("2"
                                                                                                                                (div-by
                                                                                                                                 1
                                                                                                                                 "a")
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (hide
                                                                                                       -)
                                                                                                      (("2"
                                                                                                        (hide
                                                                                                         2)
                                                                                                        (("2"
                                                                                                          (lemma
                                                                                                           "exp_strict_increasing")
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "strict_increasing?"
                                                                                                             -1)
                                                                                                            (("2"
                                                                                                              (inst
                                                                                                               -1
                                                                                                               "car(cdr(d_b)) * -(K) -
                                                   car(d_b) * -(K)"
                                                                                                               "x * -(K) - car(d_b) * -(K)")
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                (("2"
                                                                                                                  (hide
                                                                                                                   2)
                                                                                                                  (("2"
                                                                                                                    (case
                                                                                                                     "-(K)*(car(cdr(d_b)) - car(d_b)) <=-(K)* (x- car(d_b))")
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (hide
                                                                                                                       2)
                                                                                                                      (("2"
                                                                                                                        (case
                                                                                                                         "(car(cdr(d_b)) - car(d_b)) >= (x - car(d_b))")
                                                                                                                        (("1"
                                                                                                                          (hide
                                                                                                                           -1)
                                                                                                                          (("1"
                                                                                                                            (case
                                                                                                                             "-(K) >= 0")
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              nil
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (flip-ineq
                                                                                                                               1)
                                                                                                                              (("2"
                                                                                                                                (typepred
                                                                                                                                 "d_b")
                                                                                                                                (("2"
                                                                                                                                  (inst
                                                                                                                                   -5
                                                                                                                                   "x")
                                                                                                                                  (("2"
                                                                                                                                    (flatten)
                                                                                                                                    (("2"
                                                                                                                                      (typepred
                                                                                                                                       "d_b")
                                                                                                                                      (("2"
                                                                                                                                        (inst
                                                                                                                                         -5
                                                                                                                                         "car(d_b)")
                                                                                                                                        (("2"
                                                                                                                                          (flatten)
                                                                                                                                          (("2"
                                                                                                                                            (split
                                                                                                                                             -12)
                                                                                                                                            (("1"
                                                                                                                                              (flatten)
                                                                                                                                              (("1"
                                                                                                                                                (split
                                                                                                                                                 -8)
                                                                                                                                                (("1"
                                                                                                                                                  (flatten)
                                                                                                                                                  (("1"
                                                                                                                                                    (case
                                                                                                                                                     "car(cdr(d_b))=x")
                                                                                                                                                    (("1"
                                                                                                                                                      (grind)
                                                                                                                                                      nil
                                                                                                                                                      nil)
                                                                                                                                                     ("2"
                                                                                                                                                      (lemma
                                                                                                                                                       " both_sides_times_neg_lt1")
                                                                                                                                                      (("2"
                                                                                                                                                        (inst
                                                                                                                                                         -1
                                                                                                                                                         "-(K)"
                                                                                                                                                         "(car(cdr(d_b)) - car(d_b))"
                                                                                                                                                         "(x - car(d_b))")
                                                                                                                                                        (("2"
                                                                                                                                                          (assert)
                                                                                                                                                          nil
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil)
                                                                                                                                                 ("2"
                                                                                                                                                  (propax)
                                                                                                                                                  nil
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil)
                                                                                                                                             ("2"
                                                                                                                                              (typepred
                                                                                                                                               "x")
                                                                                                                                              (("2"
                                                                                                                                                (propax)
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (lemma
                                                                       "d_three")
                                                                      (("2"
                                                                        (inst?)
                                                                        (("2"
                                                                          (lemma
                                                                           "ext_cont_D")
                                                                          (("2"
                                                                            (inst?)
                                                                            (("1"
                                                                              (hide
                                                                               2)
                                                                              (("1"
                                                                                (lemma
                                                                                 "closed_interval")
                                                                                (("1"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (lemma
                                                                               "ext_cont_D")
                                                                              (("2"
                                                                                (inst?)
                                                                                (("1"
                                                                                  (hide
                                                                                   2)
                                                                                  (("1"
                                                                                    (lemma
                                                                                     "pre_rho_cont")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "pre_rho"
                                                                                       -1)
                                                                                      (("1"
                                                                                        (inst?)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (typepred
                                                                                             "u(i)")
                                                                                            (("1"
                                                                                              (hide
                                                                                               -2
                                                                                               -3
                                                                                               2
                                                                                               3)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "continuous?")
                                                                                                (("1"
                                                                                                  (skeep)
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     -1
                                                                                                     "i_1")
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "continuous?")
                                                                                                      (("1"
                                                                                                        (skeep)
                                                                                                        (("1"
                                                                                                          (inst
                                                                                                           -1
                                                                                                           "x0")
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "nth"
                                                                                                             -1)
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "nth"
                                                                                                                 1)
                                                                                                                (("1"
                                                                                                                  (propax)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (typepred
                                                                                                       "i_1")
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "length")
                                                                                                        (("2"
                                                                                                          (propax)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (hide
                                                                                           2
                                                                                           3)
                                                                                          (("2"
                                                                                            (hide
                                                                                             -1)
                                                                                            (("2"
                                                                                              (typepred
                                                                                               "u(j)")
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "continuous?")
                                                                                                (("2"
                                                                                                  (skeep)
                                                                                                  (("2"
                                                                                                    (inst
                                                                                                     -1
                                                                                                     "i!1")
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "nth")
                                                                                                      (("1"
                                                                                                        (propax)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (typepred
                                                                                                       "i!1")
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "length")
                                                                                                        (("2"
                                                                                                          (propax)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (lemma
                                                                                   "closed_interval")
                                                                                  (("2"
                                                                                    (propax)
                                                                                    nil
                                                                                    nil))
                                                                                  nil)
                                                                                 ("3"
                                                                                  (lemma
                                                                                   "closed_interval")
                                                                                  (("3"
                                                                                    (propax)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("3"
                                                                              (lemma
                                                                               "closed_interval")
                                                                              (("3"
                                                                                (propax)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("3"
                                                                      (lemma
                                                                       "ext_cont_D")
                                                                      (("3"
                                                                        (inst?)
                                                                        (("1"
                                                                          (hide
                                                                           2)
                                                                          (("1"
                                                                            (lemma
                                                                             "pre_rho_cont")
                                                                            (("1"
                                                                              (expand
                                                                               "pre_rho"
                                                                               -1)
                                                                              (("1"
                                                                                (inst?)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (typepred
                                                                                     "u(i)")
                                                                                    (("1"
                                                                                      (hide
                                                                                       -2
                                                                                       -3
                                                                                       2
                                                                                       3)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "continuous?")
                                                                                        (("1"
                                                                                          (skeep)
                                                                                          (("1"
                                                                                            (inst
                                                                                             -1
                                                                                             "i_1")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "continuous?")
                                                                                              (("1"
                                                                                                (skeep)
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -1
                                                                                                   "x0")
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "nth"
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "nth"
                                                                                                         1)
                                                                                                        (("1"
                                                                                                          (propax)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (typepred
                                                                                               "i_1")
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "length")
                                                                                                (("2"
                                                                                                  (propax)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (hide
                                                                                   2
                                                                                   3)
                                                                                  (("2"
                                                                                    (hide
                                                                                     -1)
                                                                                    (("2"
                                                                                      (typepred
                                                                                       "u(j)")
                                                                                      (("2"
                                                                                        (expand
                                                                                         "continuous?")
                                                                                        (("2"
                                                                                          (skeep)
                                                                                          (("2"
                                                                                            (inst
                                                                                             -1
                                                                                             "i!1")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "nth")
                                                                                              (("1"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (typepred
                                                                                               "i!1")
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "length")
                                                                                                (("2"
                                                                                                  (propax)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (hide
                                                                           2)
                                                                          (("2"
                                                                            (hide
                                                                             -)
                                                                            (("2"
                                                                              (hide
                                                                               2)
                                                                              (("2"
                                                                                (skeep)
                                                                                (("2"
                                                                                  (typepred
                                                                                   "u(j)(x!1)-u(i)(x!1)")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("4"
                                                                      (skeep
                                                                       1)
                                                                      (("4"
                                                                        (typepred
                                                                         "u(j)(x1)-u(i)(x1)")
                                                                        (("4"
                                                                          (hide
                                                                           -1)
                                                                          (("4"
                                                                            (typepred
                                                                             "u(j)(x1)"
                                                                             "u(i)(x1)")
                                                                            (("4"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (typepred "d_b")
                                                      (("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (typepred "d_b")
                                                      (("3"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (expand "length" 1 1)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (typepred "u(0)")
                                          (("2"
                                            (expand "length" 1 1)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (typepred
                                       "u(0)(choose[real]((d)))")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (typepred "u(0)")
                                          (("1"
                                            (inst 1 "n")
                                            (("1"
                                              (skeep)
                                              (("1"
                                                (expand "length" 1)
                                                (("1"
                                                  (typepred
                                                   "u(i)(choose[real]((d)))")
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (lemma "non_empty")
                                        (("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (expand "consf?" 1)
                                (("2"
                                  (expand "length" 1)
                                  (("2"
                                    (typepred
                                     "u(0)(choose[real]((d)))")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (split 1)
                    (("1" (inst 1 "n")
                      (("1" (skeep)
                        (("1" (expand "length" 1)
                          (("1" (typepred "u(i)(choose[real]((d)))")
                            (("1" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert)
                      (("2" (expand "consf?" 1)
                        (("2" (expand "length" 1 1)
                          (("2" (typepred "u(0)(choose[real]((d)))")
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((complete_metric_space? const-decl "bool" metric_space_def
     metric_space)
    (metric_complete? const-decl "bool" metric_space_def metric_space)
    (cauchy_u_conv_u formula-decl nil r2v_sequence_convergence nil)
    (consf? const-decl "bool" r2v_sequence_convergence nil)
    (r2v_seq type-eq-decl nil r2v_sequence_convergence nil)
    (u skolem-const-decl "sequence[(fullset[S[d](n)])]"
     continuous_function_complete_rho nil)
    (n skolem-const-decl "posnat" continuous_function_complete_rho nil)
    (length const-decl "nat" r2v_def nil)
    (conv_u? const-decl "bool" r2v_sequence_convergence nil)
    (f skolem-const-decl "{ff: r2v[d] | length(ff) = length(u(0))}"
     continuous_function_complete_rho nil)
    (metric_converges_to const-decl "bool" metric_space_def
     metric_space)
    (ball const-decl "set[T]" metric_space_def metric_space)
    (length const-decl "nat" r2v_sequence_convergence nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (i skolem-const-decl "nat" continuous_function_complete_rho nil)
    (N skolem-const-decl "nat" continuous_function_complete_rho nil)
    (continuous? const-decl "bool" continuous_functions analysis)
    (K skolem-const-decl "posreal" continuous_function_complete_rho
     nil)
    (pre_rho_cont formula-decl nil metric_rho nil)
    (nth const-decl "[(d) -> real]" r2v_def nil)
    (i_1 skolem-const-decl
     "{ii: nat | ii < length(LAMBDA (x: (d)): u(i)(x))}"
     continuous_function_complete_rho nil)
    (< const-decl "bool" reals nil)
    (conv_u_cont formula-decl nil r2v_sequence_convergence nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (empty? const-decl "bool" sets nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (continuous? const-decl "bool" continuous_functions analysis)
    (sub const-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (norm_inf const-decl "[(cons?) -> nonneg_real]" norms
     Optimization_Dev)
    (cauchy? const-decl "bool" metric_space_def metric_space)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (ext_cont_D formula-decl nil r2v_continuous_extension nil)
    (d_three formula-decl nil interval_def nil)
    (closed_interval formula-decl nil continuous_function_complete_rho
     nil)
    (closed_interval? const-decl "bool" interval_def nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (times_div_cancel2 formula-decl nil extra_real_props nil)
    (div_simp formula-decl nil real_props nil)
    (/= const-decl "boolean" notequal nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (both_sides_div_pos_le1 formula-decl nil real_props nil)
    (nnreal type-eq-decl nil real_types nil)
    (v skolem-const-decl "(LAMBDA (x: VectorN(1)): d(car(x)))"
     continuous_function_complete_rho nil)
    (choose const-decl "(p)" sets nil)
    (norm_reflex formula-decl nil norms Optimization_Dev)
    (exp_0 formula-decl nil ln_exp lnexp)
    (strict_increasing? const-decl "bool" real_fun_preds reals)
    (exp_strict_increasing formula-decl nil ln_exp lnexp)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     Optimization_Dev)
    (max const-decl
         "{c: real | is_glob_max?(f, D)(c) AND EXISTS (v: (D)): f(v) = c}"
         max_function Optimization_Dev)
    (contD? const-decl "bool" continuity_multivar Optimization_Dev)
    (nonempty? const-decl "bool" sets nil)
    (bounded_domain? const-decl "bool" closed_bounded_domain
     Optimization_Dev)
    (closed_domain? const-decl "bool" closed_bounded_domain
     Optimization_Dev)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (Vector type-eq-decl nil matrices matrices)
    (d_b const-decl "{dd: list[real] |
   (length(dd) = 2 AND (d(car(dd)) AND d(car(cdr(dd))))) AND
    FORALL (x: real): (car(dd) <= x AND x <= car(cdr(dd))) IFF d(x)}"
     r2v_continuous_extension nil)
    (<= const-decl "bool" reals nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (exp const-decl "{py | x = ln(py)}" ln_exp lnexp)
    (ln const-decl "real" ln_exp lnexp)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (ext_c const-decl
     "{ff: [real -> real] | FORALL (x: (d)): ff(x) = f(x)}"
     r2v_continuous_extension nil)
    (is_glob_max? const-decl "bool" unconstrained_global_extrema
     Optimization_Dev)
    (domain type-eq-decl nil domain_vec2real_def Optimization_Dev)
    (vec2real_f type-eq-decl nil domain_vec2real_def Optimization_Dev)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (pre_rho const-decl "nnreal" metric_rho nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (rho const-decl "nnreal" metric_rho nil)
    (member const-decl "bool" sets nil)
    (conv_u? const-decl "bool" r2v_sequence_convergence nil)
    (non_empty formula-decl nil r2v_sequence_convergence nil)
    (metric_convergent? const-decl "bool" metric_space_def
     metric_space)
    (cauchy_u? const-decl "bool" r2v_sequence_convergence nil)
    (i!1 skolem-const-decl
     "{ii: nat | ii < length(LAMBDA (x: (d)): u(j)(x))}"
     continuous_function_complete_rho nil)
    (i_1 skolem-const-decl
     "{ii: nat | ii < length(LAMBDA (x: (d)): u(i)(x))}"
     continuous_function_complete_rho nil)
    (i!1 skolem-const-decl
     "{ii: nat | ii < length(LAMBDA (x: (d)): u(j)(x))}"
     continuous_function_complete_rho nil)
    (i_1 skolem-const-decl
     "{ii: nat | ii < length(LAMBDA (x: (d)): u(i)(x))}"
     continuous_function_complete_rho nil)
    (i skolem-const-decl "{ii: nat | ii >= n!1}"
       continuous_function_complete_rho nil)
    (j skolem-const-decl "{ii: nat | ii >= n!1}"
     continuous_function_complete_rho nil)
    (n!1 skolem-const-decl "nat" continuous_function_complete_rho nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (length_singleton formula-decl nil more_list_props structures)
    (both_sides_times_neg_lt1 formula-decl nil real_props nil)
    (nonpos_real nonempty-type-eq-decl nil real_types nil)
    (negreal nonempty-type-eq-decl nil real_types nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (times_div_cancel1 formula-decl nil extra_real_props nil)
    (both_sides_div_pos_lt1 formula-decl nil real_props nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (cauchy_u_equiv formula-decl nil r2v_sequence_convergence nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (sequence type-eq-decl nil sequences nil)
    (metric_space? const-decl "bool" metric_space_def metric_space)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (norm? const-decl "bool" norms Optimization_Dev)
    (norm_inf const-decl "(norm?(m))" norms Optimization_Dev)
    (metric_triangle? const-decl "bool" metric_space_def metric_space)
    (metric_triangle? const-decl "bool" metric_def metric_space)
    (metric_symmetric? const-decl "bool" metric_def metric_space)
    (metric_symmetric? const-decl "bool" metric_space_def metric_space)
    (metric_zero? const-decl "bool" metric_def metric_space)
    (metric_zero? const-decl "bool" metric_space_def metric_space)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices matrices)
    (r2v_n type-eq-decl nil r2v_def nil)
    (r2v type-eq-decl nil r2v_def nil)
    (continuous? const-decl "bool" r2v_analysis nil)
    (S type-eq-decl nil metric_rho nil) (set type-eq-decl nil sets nil)
    (fullset const-decl "set" sets nil)
    (metric? const-decl "bool" metric_def metric_space)
    (rho_metric formula-decl nil metric_rho nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (d formal-const-decl "[real -> bool]"
       continuous_function_complete_rho nil))
   shostak)))

