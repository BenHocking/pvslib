(exp_analysis
 (deriv_domain_exp_a 0
  (deriv_domain_exp_a-1 nil 3792169362
   ("" (expand "deriv_domain?" 1)
    (("" (skeep)
      (("" (typepred "x")
        (("" (lemma "not_one_element")
          (("" (expand "not_one_element?" -1)
            (("" (inst -1 "x")
              (("" (skeep)
                (("" (lemma "connected")
                  (("" (expand "connected?" -1)
                    (("" (case "x<y")
                      (("1" (inst 2 "min(y-x, e)/2")
                        (("1" (grind) nil nil)
                         ("2" (split 1)
                          (("1" (expand "min" 1 1)
                            (("1" (lift-if 1)
                              (("1"
                                (split 1)
                                (("1"
                                  (flatten)
                                  (("1" (assert) nil nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2"
                            (inst -2 "x" "y" "min(y - x, e) / 2 + x")
                            (("2" (assert)
                              (("2"
                                (expand "min" 2)
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert)
                        (("2" (case "NOT x>y")
                          (("1" (assert) nil nil)
                           ("2" (inst 3 "-min(e,x-y)/2")
                            (("1" (grind) nil nil)
                             ("2" (split 1)
                              (("1"
                                (expand "min" 1 1)
                                (("1"
                                  (assert)
                                  (("1"
                                    (lift-if -1)
                                    (("1" (grind) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (inst
                                 -2
                                 "y"
                                 "x"
                                 "-min(e, x - y) / 2 + x")
                                (("2"
                                  (assert)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((not_one_element formula-decl nil exp_analysis nil)
    (connected formula-decl nil exp_analysis nil)
    (< const-decl "bool" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (<= const-decl "bool" reals nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (y skolem-const-decl "(d)" exp_analysis nil)
    (x skolem-const-decl "(d)" exp_analysis nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (e skolem-const-decl "posreal" exp_analysis nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (connected? const-decl "bool" deriv_domain_def analysis)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (d formal-const-decl "[real -> bool]" exp_analysis nil)
    (deriv_domain? const-decl "bool" deriv_domain_def analysis)
    (real_plus_real_is_real application-judgement "real" reals nil))
   nil))
 (IMP_chain_rule_TCC1 0
  (IMP_chain_rule_TCC1-1 nil 3795300695
   ("" (expand "deriv_domain?" 1)
    (("" (skeep)
      (("" (typepred "x")
        (("" (lemma "not_one_element")
          (("" (expand "not_one_element?" -1)
            (("" (inst -1 "x")
              (("" (skeep)
                (("" (lemma "connected")
                  (("" (expand "connected?" -1)
                    (("" (case "x<y")
                      (("1" (inst 2 "min(y-x, e)/2")
                        (("1" (grind) nil nil)
                         ("2" (split 1)
                          (("1" (expand "min" 1 1)
                            (("1" (lift-if 1)
                              (("1"
                                (split 1)
                                (("1"
                                  (flatten)
                                  (("1" (assert) nil nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2"
                            (inst -2 "x" "y" "min(y - x, e) / 2 + x")
                            (("2" (assert)
                              (("2"
                                (expand "min" 2)
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert)
                        (("2" (case "NOT x>y")
                          (("1" (assert) nil nil)
                           ("2" (inst 3 "-min(e,x-y)/2")
                            (("1" (grind) nil nil)
                             ("2" (split 1)
                              (("1"
                                (expand "min" 1 1)
                                (("1"
                                  (assert)
                                  (("1"
                                    (lift-if -1)
                                    (("1" (grind) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (inst
                                 -2
                                 "y"
                                 "x"
                                 "-min(e, x - y) / 2 + x")
                                (("2"
                                  (assert)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((not_one_element formula-decl nil exp_analysis nil)
    (connected formula-decl nil exp_analysis nil)
    (< const-decl "bool" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (<= const-decl "bool" reals nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (y skolem-const-decl "(d)" exp_analysis nil)
    (x skolem-const-decl "(d)" exp_analysis nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (e skolem-const-decl "posreal" exp_analysis nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (connected? const-decl "bool" deriv_domain_def analysis)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (d formal-const-decl "[real -> bool]" exp_analysis nil)
    (deriv_domain? const-decl "bool" deriv_domain_def analysis)
    (real_plus_real_is_real application-judgement "real" reals nil))
   nil
   (IMP_chain_rule assuming
    "analysis@chain_rule[(exp_analysis.d), real].chain_rule"
    "deriv_domain1: ASSUMPTION deriv_domain_def[T1].deriv_domain?")))
 (IMP_chain_rule_TCC2 0
  (IMP_chain_rule_TCC2-1 nil 3795300695
   ("" (lemma "not_one_element") (("" (propax) nil nil)) nil)
   ((not_one_element formula-decl nil exp_analysis nil)) nil
   (IMP_chain_rule assuming
    "analysis@chain_rule[(exp_analysis.d), real].chain_rule"
    "not_one_element1: ASSUMPTION deriv_domain_def[T1].not_one_element?")))
 (IMP_chain_rule_TCC3 0
  (IMP_chain_rule_TCC3-1 nil 3795300695
   ("" (expand "deriv_domain?" 1)
    (("" (skeep) (("" (inst 1 "e/2") (("" (grind) nil nil)) nil)) nil))
    nil)
   ((abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (deriv_domain? const-decl "bool" deriv_domain_def analysis)
    (real_plus_real_is_real application-judgement "real" reals nil))
   nil
   (IMP_chain_rule assuming
    "analysis@chain_rule[(exp_analysis.d), real].chain_rule"
    "deriv_domain2: ASSUMPTION deriv_domain_def[T2].deriv_domain?")))
 (IMP_chain_rule_TCC4 0
  (IMP_chain_rule_TCC4-1 nil 3795300695
   ("" (expand "not_one_element?" 1)
    (("" (skeep) (("" (inst 1 "x+1") (("" (assert) nil nil)) nil))
      nil))
    nil)
   ((+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (not_one_element? const-decl "bool" deriv_domain_def analysis))
   nil
   (IMP_chain_rule assuming
    "analysis@chain_rule[(exp_analysis.d), real].chain_rule"
    "not_one_element2: ASSUMPTION deriv_domain_def[T2].not_one_element?")))
 (IMP_fundamental_theorem_TCC1 0
  (IMP_fundamental_theorem_TCC1-1 nil 3795300695
   ("" (lemma "non_empty")
    (("" (expand "nonempty?" -1)
      (("" (expand "empty?")
        (("" (skeep)
          (("" (inst 1 "x")
            (("" (expand "member" -1) (("" (propax) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nonempty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (x skolem-const-decl "real" exp_analysis nil)
    (d formal-const-decl "[real -> bool]" exp_analysis nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (empty? const-decl "bool" sets nil)
    (non_empty formula-decl nil exp_analysis nil))
   nil (IMP_fundamental_theorem existence "" "(exp_analysis.d)")))
 (IMP_fundamental_theorem_TCC2 0
  (IMP_fundamental_theorem_TCC2-1 nil 3795300695
   ("" (lemma "connected") (("" (propax) nil nil)) nil)
   ((connected formula-decl nil exp_analysis nil)) nil
   (IMP_fundamental_theorem assuming
    "analysis@fundamental_theorem[(exp_analysis.d)].fundamental_theorem"
    "connected_domain: ASSUMPTION deriv_domain_def[T].connected?")))
 (derivable_exp_lin 0
  (derivable_exp_lin-1 nil 3788704411
   ("" (lemma "id_derivable_fun[(d)]")
    (("" (lemma "scal_derivable_fun[(d)]")
      (("" (lemma "const_derivable_fun[(d)]")
        (("" (lemma "diff_derivable_fun[(d)]")
          (("" (skeep)
            (("" (inst -1 "LAMBDA(x:(d)): c1*x" "LAMBDA(x:(d)): c2")
              (("" (assert)
                (("" (split -1)
                  (("1" (expand " -" -1)
                    (("1" (lemma "scal_derivable_fun[(d)]")
                      (("1" (inst -1 "c1" "LAMBDA(x:(d)): x")
                        (("1" (assert)
                          (("1" (expand "*" -1)
                            (("1" (assert)
                              (("1"
                                (lemma "derivable_exp")
                                (("1"
                                  (expand "derivable?" -1)
                                  (("1"
                                    (expand "derivable?" 1)
                                    (("1"
                                      (skeep)
                                      (("1"
                                        (case
                                         "exp = LAMBDA(x:real): exp(x)")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (lemma "derivable_exp")
                                            (("1"
                                              (case
                                               "exp = LAMBDA(x:real): exp(x)")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand
                                                   "derivable?"
                                                   -6)
                                                  (("1"
                                                    (inst -6 "x_1")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (lemma
                                                         "composition_derivable")
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "LAMBDA(x:(d)): c1*x-c2"
                                                           "LAMBDA(x:real): exp(x)"
                                                           "x_1")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (inst
                                                               -5
                                                               "c1*x_1-c2")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (expand
                                                                   "o ")
                                                                  (("1"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (decompose-equality 1)
                                          nil
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert)
                    (("2" (inst -2 "c1" "LAMBDA(x:(d)): x")
                      (("2" (assert)
                        (("2" (expand "*" -2) (("2" (propax) nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (inst -1 "c2") nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((scal_derivable_fun formula-decl nil derivatives analysis)
    (diff_derivable_fun formula-decl nil derivatives analysis)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (derivable? const-decl "bool" derivatives analysis)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (O const-decl "T3" function_props nil)
    (composition_derivable formula-decl nil chain_rule analysis)
    (exp const-decl "{py | x = ln(py)}" ln_exp lnexp)
    (ln const-decl "real" ln_exp lnexp)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (derivable_exp formula-decl nil ln_exp lnexp)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (- const-decl "[T -> real]" real_fun_ops reals)
    (real_times_real_is_real application-judgement "real" reals nil)
    (const_derivable_fun formula-decl nil derivatives analysis)
    (id_derivable_fun formula-decl nil derivatives analysis)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (d formal-const-decl "[real -> bool]" exp_analysis nil))
   shostak))
 (deriv_exp_lin_TCC1 0
  (deriv_exp_lin_TCC1-1 nil 3788700066
   ("" (lemma "derivable_exp_lin") (("" (propax) nil nil)) nil)
   ((derivable_exp_lin formula-decl nil exp_analysis nil)) nil
   (deriv_exp_lin subtype
    "LAMBDA (x: (exp_analysis.d)): ln_exp.exp((number_fields.-)(number_fields.*(exp_analysis.c1, x), exp_analysis.c2))"
    "deriv_fun[(d)]")))
 (deriv_exp_lin 0
  (deriv_exp_lin-1 nil 3788700138
   ("" (skeep)
    (("" (lemma "chain_rule")
      (("" (inst -1 "LAMBDA(x: (d)): c1*x-c2" "LAMBDA(x:real): exp(x)")
        (("1" (assert)
          (("1" (replace -1 1)
            (("1" (decompose-equality 1)
              (("1" (expand "*" 1)
                (("1" (typepred "x!1")
                  (("1" (lemma "derivative_exp")
                    (("1" (expand "deriv" -1)
                      (("1" (expand "deriv" 1 1)
                        (("1" (decompose-equality -1)
                          (("1" (inst -1 "c1*x!1-c2")
                            (("1" (case "exp = LAMBDA(x:real): exp(x)")
                              (("1"
                                (assert)
                                (("1"
                                  (replace -1 1 rl)
                                  (("1"
                                    (replace -2 1)
                                    (("1"
                                      (div-by 1 "exp(c1*x!1 - c2)")
                                      (("1"
                                        (lemma "deriv_diff_fun[(d)]")
                                        (("1"
                                          (inst
                                           -1
                                           "LAMBDA(x:(d)): c1*x "
                                           "LAMBDA(x:(d)): c2")
                                          (("1"
                                            (decompose-equality -1)
                                            (("1"
                                              (inst -1 "x!1")
                                              (("1"
                                                (expand "-" -1 1)
                                                (("1"
                                                  (replace -1 1)
                                                  (("1"
                                                    (lemma
                                                     "deriv_const_fun[(d)]")
                                                    (("1"
                                                      (inst -1 "c2")
                                                      (("1"
                                                        (decompose-equality
                                                         -1)
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "x!1")
                                                          (("1"
                                                            (expand
                                                             "-"
                                                             1
                                                             1)
                                                            (("1"
                                                              (replace
                                                               -1
                                                               1)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (lemma
                                                                   "deriv_scal_fun[(d)]")
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     "c1"
                                                                     "LAMBDA(x:(d)): x")
                                                                    (("1"
                                                                      (decompose-equality
                                                                       -1)
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         "x!1")
                                                                        (("1"
                                                                          (expand
                                                                           "*"
                                                                           -1)
                                                                          (("1"
                                                                            (replace
                                                                             -1
                                                                             1)
                                                                            (("1"
                                                                              (lemma
                                                                               "deriv_id_fun[(d)]")
                                                                              (("1"
                                                                                (decompose-equality
                                                                                 -1)
                                                                                (("1"
                                                                                  (inst
                                                                                   -1
                                                                                   "x!1")
                                                                                  (("1"
                                                                                    (replace
                                                                                     -1
                                                                                     1)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (lemma
                                                                         "id_derivable_fun[(d)]")
                                                                        (("2"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (lemma
                                                                       "id_derivable_fun[(d)]")
                                                                      (("2"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (lemma
                                                           "const_derivable_fun[(d)]")
                                                          (("2"
                                                            (inst?)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (lemma
                                               "const_derivable_fun[(d)]")
                                              (("2" (inst?) nil nil))
                                              nil)
                                             ("3"
                                              (lemma
                                               "scal_derivable_fun[(d)]")
                                              (("3"
                                                (inst
                                                 -1
                                                 "c1"
                                                 "LAMBDA(x:(d)):x")
                                                (("3"
                                                  (assert)
                                                  (("3"
                                                    (split -1)
                                                    (("1"
                                                      (expand "*" -1)
                                                      (("1"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      (("2"
                                                        (lemma
                                                         "id_derivable_fun[(d)]")
                                                        (("2"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (lemma
                                             "const_derivable_fun[(d)]")
                                            (("2" (inst?) nil nil))
                                            nil)
                                           ("3"
                                            (lemma
                                             "scal_derivable_fun[(d)]")
                                            (("3"
                                              (inst
                                               -1
                                               "c1"
                                               "LAMBDA(x:(d)):x")
                                              (("3"
                                                (assert)
                                                (("3"
                                                  (split -1)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand "*" -1)
                                                      (("1"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    (("2"
                                                      (lemma
                                                       "id_derivable_fun[(d)]")
                                                      (("2"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (lemma "id_derivable_fun[(d)]")
                                        (("2"
                                          (lemma
                                           "scal_derivable_fun[(d)]")
                                          (("2"
                                            (lemma
                                             "const_derivable_fun[(d)]")
                                            (("2"
                                              (lemma
                                               "diff_derivable_fun[(d)]")
                                              (("2"
                                                (inst
                                                 -1
                                                 "LAMBDA(x:(d)): c1*x"
                                                 "LAMBDA(x:(d)): c2")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (split -1)
                                                    (("1"
                                                      (expand " -" -1)
                                                      (("1"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (lemma
                                                       "scal_derivable_fun[(d)]")
                                                      (("2"
                                                        (inst
                                                         -1
                                                         "c1"
                                                         "LAMBDA(x:(d)): x")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (expand
                                                             "*"
                                                             -1)
                                                            (("2"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (assert)
                                                      (("3"
                                                        (inst -1 "c2")
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (lemma "id_derivable_fun[(d)]")
                                        (("3"
                                          (lemma
                                           "scal_derivable_fun[(d)]")
                                          (("3"
                                            (lemma
                                             "const_derivable_fun[(d)]")
                                            (("3"
                                              (lemma
                                               "diff_derivable_fun[(d)]")
                                              (("3"
                                                (lemma
                                                 "not_one_element")
                                                (("3"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("4"
                                        (lemma "deriv_domain_exp_a")
                                        (("4" (propax) nil nil))
                                        nil)
                                       ("5"
                                        (lemma "id_derivable_fun[(d)]")
                                        (("5"
                                          (lemma
                                           "scal_derivable_fun[(d)]")
                                          (("5"
                                            (lemma
                                             "const_derivable_fun[(d)]")
                                            (("5"
                                              (lemma
                                               "diff_derivable_fun[(d)]")
                                              (("5"
                                                (inst
                                                 -1
                                                 "LAMBDA(x:(d)): c1*x"
                                                 "LAMBDA(x:(d)): c2")
                                                (("5"
                                                  (assert)
                                                  (("5"
                                                    (split -1)
                                                    (("1"
                                                      (expand " -" -1)
                                                      (("1"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (lemma
                                                       "scal_derivable_fun[(d)]")
                                                      (("2"
                                                        (inst
                                                         -1
                                                         "c1"
                                                         "LAMBDA(x:(d)): x")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (expand
                                                             "*"
                                                             -1)
                                                            (("2"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (assert)
                                                      (("3"
                                                        (inst -1 "c2")
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (decompose-equality 1) nil nil))
                              nil))
                            nil)
                           ("2" (lemma "derivable_exp")
                            (("2" (expand "derivable?" -1)
                              (("2" (inst -1 "x1!1") nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (lemma "id_derivable_fun[(d)]")
                (("2" (lemma "scal_derivable_fun[(d)]")
                  (("2" (lemma "const_derivable_fun[(d)]")
                    (("2" (lemma "diff_derivable_fun[(d)]")
                      (("2"
                        (inst -1 "LAMBDA(x:(d)): c1*x"
                         "LAMBDA(x:(d)): c2")
                        (("2" (assert)
                          (("2" (split -1)
                            (("1" (expand " -" -1)
                              (("1" (propax) nil nil)) nil)
                             ("2" (lemma "scal_derivable_fun[(d)]")
                              (("2"
                                (inst -1 "c1" "LAMBDA(x:(d)): x")
                                (("2"
                                  (assert)
                                  (("2"
                                    (expand "*" -1)
                                    (("2" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (assert)
                              (("3" (inst -1 "c2") nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (skeep 1)
                (("3" (lemma "derivable_exp")
                  (("3" (expand "derivable?" -1)
                    (("3" (expand "derivable?" 1)
                      (("3" (skeep)
                        (("3" (inst -1 "x_1!1")
                          (("3" (case "exp = LAMBDA(x:real): exp(x)")
                            (("1" (assert) nil nil)
                             ("2" (decompose-equality 1) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (lemma "derivable_exp")
          (("2" (case "exp = LAMBDA(x:real): exp(x)")
            (("1" (assert) nil nil)
             ("2" (decompose-equality 1) nil nil))
            nil))
          nil)
         ("3" (lemma "id_derivable_fun[(d)]")
          (("3" (lemma "scal_derivable_fun[(d)]")
            (("3" (lemma "const_derivable_fun[(d)]")
              (("3" (lemma "diff_derivable_fun[(d)]")
                (("3"
                  (inst -1 "LAMBDA(x:(d)): c1*x" "LAMBDA(x:(d)): c2")
                  (("3" (assert)
                    (("3" (split -1)
                      (("1" (expand " -" -1) (("1" (propax) nil nil))
                        nil)
                       ("2" (lemma "scal_derivable_fun[(d)]")
                        (("2" (inst -1 "c1" "LAMBDA(x:(d)): x")
                          (("2" (assert)
                            (("2" (expand "*" -1)
                              (("2" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil)
                       ("3" (assert) (("3" (inst -1 "c2") nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((d formal-const-decl "[real -> bool]" exp_analysis nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (chain_rule formula-decl nil chain_rule analysis)
    (deriv const-decl "[T -> real]" derivatives analysis)
    (deriv_fun type-eq-decl nil derivatives analysis)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (deriv const-decl "real" derivatives_def analysis)
    (derivable? const-decl "bool" derivatives_def analysis)
    (both_sides_div1 formula-decl nil real_props nil)
    (/= const-decl "boolean" notequal nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (deriv_domain? const-decl "bool" deriv_domain_def analysis)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (times_div_cancel1 formula-decl nil extra_real_props nil)
    (times_div_cancel2 formula-decl nil extra_real_props nil)
    (scal_derivable_fun formula-decl nil derivatives analysis)
    (const_derivable_fun formula-decl nil derivatives analysis)
    (deriv_scal_fun formula-decl nil derivatives analysis)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (deriv_id_fun formula-decl nil derivatives analysis)
    (id_derivable_fun formula-decl nil derivatives analysis)
    (deriv_const_fun formula-decl nil derivatives analysis)
    (- const-decl "[T -> real]" real_fun_ops reals)
    (deriv_diff_fun formula-decl nil derivatives analysis)
    (diff_derivable_fun formula-decl nil derivatives analysis)
    (not_one_element formula-decl nil exp_analysis nil)
    (deriv_domain_exp_a formula-decl nil exp_analysis nil)
    (derivable_exp formula-decl nil ln_exp lnexp)
    (derivative_exp formula-decl nil ln_exp lnexp)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (ln const-decl "real" ln_exp lnexp)
    (exp const-decl "{py | x = ln(py)}" ln_exp lnexp)
    (derivable? const-decl "bool" derivatives analysis)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (c1 skolem-const-decl "real" exp_analysis nil)
    (c2 skolem-const-decl "real" exp_analysis nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   shostak))
 (derivable_exp_lin_r 0
  (derivable_exp_lin_r-1 nil 3788705446
   ("" (skeep)
    (("" (lemma "derivable_exp_lin")
      (("" (assert)
        (("" (inst -1 "c1" "c2")
          (("" (lemma "scal_derivable_fun[(d)]")
            (("" (inst -1 "1/c1" "LAMBDA (x: (d)): exp(c1 * x - c2)")
              (("" (assert)
                (("" (expand "*" -1) (("" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((derivable_exp_lin formula-decl nil exp_analysis nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (ln const-decl "real" ln_exp lnexp)
    (exp const-decl "{py | x = ln(py)}" ln_exp lnexp)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (d formal-const-decl "[real -> bool]" exp_analysis nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (scal_derivable_fun formula-decl nil derivatives analysis)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   shostak))
 (deriv_exp_lin_r_TCC1 0
  (deriv_exp_lin_r_TCC2-1 nil 3788704373
   ("" (lemma "derivable_exp_lin")
    (("" (assert)
      (("" (skeep 1)
        (("" (inst -1 "c1" "c2")
          (("" (lemma "scal_derivable_fun[(d)]")
            (("" (inst -1 "1/c1" "LAMBDA (x: (d)): exp(c1 * x - c2)")
              (("" (assert)
                (("" (expand "*" -1) (("" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (ln const-decl "real" ln_exp lnexp)
    (exp const-decl "{py | x = ln(py)}" ln_exp lnexp)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (d formal-const-decl "[real -> bool]" exp_analysis nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (scal_derivable_fun formula-decl nil derivatives analysis)
    (derivable_exp_lin formula-decl nil exp_analysis nil))
   nil
   (deriv_exp_lin_r subtype
    "LAMBDA (x: (exp_analysis.d)): number_fields./(ln_exp.exp((number_fields.-)(number_fields.*(exp_analysis.c1, x), exp_analysis.c2)), exp_analysis.c1)"
    "deriv_fun[(d)]")))
 (deriv_exp_lin_r 0
  (deriv_exp_lin_r-1 nil 3788704895
   ("" (lemma "deriv_exp_lin")
    (("" (skeep)
      (("" (inst -1 "c1" "c2")
        (("" (lemma "deriv_scal_fun[(d)]")
          (("" (lemma "scal_derivable_fun[(d)]")
            (("" (inst -1 "1/c1" "LAMBDA (x: (d)): exp(c1 * x - c2)")
              (("" (inst -2 "1/c1" "LAMBDA (x: (d)): exp(c1 * x - c2)")
                (("1" (assert)
                  (("1" (expand "*" -2 1)
                    (("1" (assert)
                      (("1" (replace -3 -2)
                        (("1" (expand "*" -2) (("1" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (lemma "derivable_exp_lin")
                  (("2" (inst -1 "c1" "c2") nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_times_real_is_real application-judgement "real" reals nil)
    (d formal-const-decl "[real -> bool]" exp_analysis nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (deriv_scal_fun formula-decl nil derivatives analysis)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (ln const-decl "real" ln_exp lnexp)
    (exp const-decl "{py | x = ln(py)}" ln_exp lnexp)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (derivable_exp_lin formula-decl nil exp_analysis nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (deriv_fun type-eq-decl nil derivatives analysis)
    (c2 skolem-const-decl "real" exp_analysis nil)
    (c1 skolem-const-decl "{rr: real | rr /= 0}" exp_analysis nil)
    (derivable? const-decl "bool" derivatives analysis)
    (scal_derivable_fun formula-decl nil derivatives analysis)
    (/= const-decl "boolean" notequal nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (deriv_exp_lin formula-decl nil exp_analysis nil))
   shostak))
 (cont_exp_lin 0
  (cont_exp_lin-1 nil 3788705606
   ("" (lemma "composition_cont[(d),real]")
    (("" (skeep 1)
      (("" (expand "continuous?" 1 1)
        (("" (skeep 1)
          (("" (inst -1 "LAMBDA(x:(d)): c1*x-c2" "_" "_")
            (("" (inst -1 "LAMBDA(x:real): exp(x)" "_")
              (("" (inst -1 "x0")
                (("" (assert)
                  (("" (split -1)
                    (("1" (expand "o") (("1" (propax) nil nil)) nil)
                     ("2" (hide 2)
                      (("2" (expand "continuous?" 1)
                        (("2" (skeep)
                          (("2" (case "c1=0")
                            (("1" (inst 1 "epsilon")
                              (("1"
                                (skeep 1)
                                (("1"
                                  (assert)
                                  (("1"
                                    (replace -1 1)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (assert)
                                        (("1" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (inst 2 "epsilon/abs(c1)")
                              (("1"
                                (assert)
                                (("1"
                                  (skeep)
                                  (("1"
                                    (case "c1*x_1-c1*x0 = c1*(x_1-x0)")
                                    (("1"
                                      (replace -1)
                                      (("1"
                                        (hide -1)
                                        (("1"
                                          (lemma "abs_mult")
                                          (("1"
                                            (inst -1 "c1" "(x_1-x0)")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (replace -1 2)
                                                (("1"
                                                  (div-by 2 "abs(c1)")
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (assert)
                                (("2"
                                  (split 1)
                                  (("1"
                                    (mult-by 1 "abs(c1)")
                                    (("1" (assert) nil nil))
                                    nil)
                                   ("2"
                                    (mult-by 1 "abs(c1)")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("3" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (hide 2)
                      (("3" (lemma "exp_continuous")
                        (("3" (expand "continuous?" -1)
                          (("3" (inst -1 "c1*x0-c2")
                            (("3" (case "exp = LAMBDA(x:real): exp(x)")
                              (("1" (assert) nil nil)
                               ("2" (decompose-equality 1) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_times_real_is_real application-judgement "real" reals nil)
    (exp const-decl "{py | x = ln(py)}" ln_exp lnexp)
    (ln const-decl "real" ln_exp lnexp)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (exp_continuous formula-decl nil ln_exp lnexp)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (/= const-decl "boolean" notequal nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (c1 skolem-const-decl "real" exp_analysis nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (epsilon skolem-const-decl "posreal" exp_analysis nil)
    (abs_mult formula-decl nil real_props nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (times_div_cancel1 formula-decl nil extra_real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (both_sides_div_pos_lt1 formula-decl nil real_props nil)
    (div_cancel2 formula-decl nil real_props nil)
    (both_sides_times_pos_ge1 formula-decl nil real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (both_sides_times_pos_le1_imp formula-decl nil extra_real_props
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (continuous? const-decl "bool" continuous_functions analysis)
    (O const-decl "T3" function_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (continuous? const-decl "bool" continuous_functions analysis)
    (composition_cont formula-decl nil composition_continuous analysis)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (d formal-const-decl "[real -> bool]" exp_analysis nil))
   shostak))
 (deriv_Int_lin_TCC1 0
  (deriv_Int_lin_TCC3-1 nil 3788704373
   ("" (skeep 1)
    (("" (lemma "continuous_Integrable?[(d)]")
      (("1" (inst -1 "a" "b" "LAMBDA (x: (d)): exp(c1 * x - c2)")
        (("1" (assert)
          (("1" (lemma "cont_exp_lin")
            (("1" (inst -1 "c1" "c2")
              (("1" (skeep 1)
                (("1" (expand "continuous?" -1)
                  (("1" (inst -1 "x_1") nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (lemma "not_one_element") (("2" (propax) nil nil)) nil)
       ("3" (lemma "connected") (("3" (propax) nil nil)) nil))
      nil))
    nil)
   ((d formal-const-decl "[real -> bool]" exp_analysis nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (continuous_Integrable? formula-decl nil integral analysis)
    (connected? const-decl "bool" deriv_domain_def analysis)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (continuous? const-decl "bool" continuous_functions analysis)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (Closed_interval type-eq-decl nil intervals_real reals)
    (cont_exp_lin formula-decl nil exp_analysis nil)
    (/= const-decl "boolean" notequal nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (exp const-decl "{py | x = ln(py)}" ln_exp lnexp)
    (ln const-decl "real" ln_exp lnexp)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (not_one_element formula-decl nil exp_analysis nil)
    (connected formula-decl nil exp_analysis nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   nil
   (deriv_Int_lin subtype
    "LAMBDA (x: (exp_analysis.d)): ln_exp.exp((number_fields.-)(number_fields.*(exp_analysis.c1, x), exp_analysis.c2))"
    "integral_def[(exp_analysis.d)].Integrable_funs(exp_analysis.a, exp_analysis.b)")))
 (deriv_Int_lin 0
  (deriv_Int_lin-1 nil 3788706530
   ("" (skeep)
    (("" (lemma "fundamental3")
      ((""
        (inst -1 "LAMBDA(x:(d)): exp(c1*x-c2)/c1" "a" "b"
         "LAMBDA(x:(d)): exp(c1*x-c2)")
        (("" (assert)
          (("" (hide 2)
            (("" (split 1)
              (("1" (lemma "derivable_exp_lin_r")
                (("1" (inst -1 "c1" "c2") nil nil)) nil)
               ("2" (lemma "deriv_exp_lin_r")
                (("2" (inst -1 "c1" "c2") nil nil)) nil)
               ("3" (assert)
                (("3" (lemma "cont_exp_lin")
                  (("3" (inst -1 "c1" "c2") nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((d formal-const-decl "[real -> bool]" exp_analysis nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (fundamental3 formula-decl nil fundamental_theorem analysis)
    (derivable_exp_lin_r formula-decl nil exp_analysis nil)
    (deriv_exp_lin_r formula-decl nil exp_analysis nil)
    (cont_exp_lin formula-decl nil exp_analysis nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (exp const-decl "{py | x = ln(py)}" ln_exp lnexp)
    (ln const-decl "real" ln_exp lnexp)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   shostak))
 (derivable_exp_ln_TCC1 0
  (derivable_exp_ln_TCC1-1 nil 3792170296 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (/= const-decl "boolean" notequal nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (d formal-const-decl "[real -> bool]" exp_analysis nil))
   nil (derivable_exp_ln subtype "exp_analysis.x" "posreal")))
 (derivable_exp_ln 0
  (derivable_exp_ln-1 nil 3792170320
   ("" (skeep*)
    (("" (lemma "scal_derivable_fun[(d)]")
      (("" (lemma "composition_derivable")
        (("" (expand "derivable?" 1)
          (("" (skeep)
            ((""
              (inst -1 "LAMBDA(x:(d)): c1*ln(x)"
               "LAMBDA(x:real): exp(x)" "x_1")
              (("1" (assert)
                (("1" (split -1)
                  (("1" (expand "o ") (("1" (propax) nil nil)) nil)
                   ("2" (hide 2)
                    (("2" (inst -1 "c1" "LAMBDA(x:(d)): ln(x)")
                      (("1" (assert)
                        (("1" (split -1)
                          (("1" (expand "derivable?" -1)
                            (("1" (inst -1 "x_1")
                              (("1"
                                (expand "*")
                                (("1" (propax) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide 2)
                            (("2" (lemma "ln_derivable")
                              (("2"
                                (flatten)
                                (("2"
                                  (lemma
                                   "derivable_subtype[posreal,(d)]")
                                  (("1"
                                    (inst -1 "ln")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (split -1)
                                        (("1"
                                          (expand "restrict" -1)
                                          (("1" (propax) nil nil))
                                          nil)
                                         ("2"
                                          (lemma "deriv_domain_exp_a")
                                          (("2" (propax) nil nil))
                                          nil)
                                         ("3"
                                          (lemma "not_one_element")
                                          (("3" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (skeep)
                                    (("2"
                                      (inst -3 "x")
                                      (("2"
                                        (assert)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (skeep)
                        (("2" (inst -1 "x")
                          (("2" (assert) (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (lemma "derivable_exp")
                    (("3" (expand "derivable?" -1)
                      (("3" (inst -1 "c1*ln(x_1)")
                        (("1" (assert)
                          (("1" (case "exp = LAMBDA (x: real): exp(x)")
                            (("1" (assert) nil nil)
                             ("2" (decompose-equality 1) nil nil))
                            nil))
                          nil)
                         ("2" (typepred "x_1")
                          (("2" (inst -3 "x_1")
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (skeep)
                (("2" (inst -2 "x")
                  (("2" (assert) (("2" (assert) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((d formal-const-decl "[real -> bool]" exp_analysis nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (scal_derivable_fun formula-decl nil derivatives analysis)
    (derivable? const-decl "bool" derivatives analysis)
    (real_times_real_is_real application-judgement "real" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil) (> const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (ln const-decl "real" ln_exp lnexp)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (exp const-decl "{py | x = ln(py)}" ln_exp lnexp)
    (O const-decl "T3" function_props nil)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (ln_derivable formula-decl nil ln_exp lnexp)
    (derivable_subtype formula-decl nil derivatives_subtype analysis)
    (deriv_domain? const-decl "bool" deriv_domain_def analysis)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (not_one_element formula-decl nil exp_analysis nil)
    (deriv_domain_exp_a formula-decl nil exp_analysis nil)
    (restrict const-decl "R" restrict nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (x_1 skolem-const-decl "(d)" exp_analysis nil)
    (derivable_exp formula-decl nil ln_exp lnexp)
    (composition_derivable formula-decl nil chain_rule analysis)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil))
 (deriv_exp_ln_TCC1 0
  (deriv_exp_ln_TCC1-1 nil 3792170741
   ("" (skeep)
    (("" (lemma "derivable_exp_ln")
      (("" (inst -1 "c1") (("" (assert) nil nil)) nil)) nil))
    nil)
   ((derivable_exp_ln formula-decl nil exp_analysis nil)
    (/= const-decl "boolean" notequal nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil
   (deriv_exp_ln subtype
    "LAMBDA (x: (exp_analysis.d)): ln_exp.exp(number_fields.*(exp_analysis.c1, ln_exp.ln(x)))"
    "deriv_fun[(d)]")))
 (deriv_exp_ln_TCC2 0
  (deriv_exp_ln_TCC4-1 nil 3792170741 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (d formal-const-decl "[real -> bool]" exp_analysis nil)
    (/= const-decl "boolean" notequal nil))
   nil (deriv_exp_ln subtype "exp_analysis.x" "nznum")))
 (deriv_exp_ln 0
  (deriv_exp_ln-1 nil 3792171171
   ("" (skeep)
    (("" (lemma "chain_rule")
      ((""
        (inst -1 "LAMBDA(x: (d)): c1*ln(x)" "LAMBDA(x:real): exp(x)")
        (("1" (assert)
          (("1" (replace -1 1)
            (("1" (decompose-equality 1)
              (("1" (expand "*" 1)
                (("1" (lemma "derivative_exp")
                  (("1" (expand "deriv" -1)
                    (("1" (expand "deriv" 1 1)
                      (("1" (decompose-equality -1)
                        (("1" (inst -1 "c1*ln(x!1)")
                          (("1" (case "exp = LAMBDA(x:real): exp(x)")
                            (("1" (assert)
                              (("1"
                                (replace -1 1 rl)
                                (("1"
                                  (replace -2 1)
                                  (("1"
                                    (lemma "deriv_scal_fun[(d)]")
                                    (("1"
                                      (inst
                                       -1
                                       "c1"
                                       "LAMBDA(x:(d)): ln(x)")
                                      (("1"
                                        (decompose-equality -1)
                                        (("1"
                                          (inst -1 "x!1")
                                          (("1"
                                            (expand "*" -1)
                                            (("1"
                                              (replace -1 1)
                                              (("1"
                                                (lemma "ln_derivable")
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (lemma
                                                       "deriv_subtype_dd[posreal,(d)]")
                                                      (("1"
                                                        (inst -1 "ln")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (split -1)
                                                            (("1"
                                                              (expand
                                                               "restrict"
                                                               -1)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (decompose-equality
                                                                   -3)
                                                                  (("1"
                                                                    (decompose-equality
                                                                     -2)
                                                                    (("1"
                                                                      (inst
                                                                       -2
                                                                       "x!1")
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         "x!1")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide
                                                                         2)
                                                                        (("2"
                                                                          (hide
                                                                           -)
                                                                          (("2"
                                                                            (typepred
                                                                             "x!1")
                                                                            (("2"
                                                                              (reveal
                                                                               -)
                                                                              (("2"
                                                                                (inst
                                                                                 -7
                                                                                 "x!1")
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (inst
                                                                       -10
                                                                       "x!2")
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("3"
                                                                      (inst
                                                                       -10
                                                                       "x!2")
                                                                      (("3"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("4"
                                                                      (hide
                                                                       -1
                                                                       -2
                                                                       -3
                                                                       -5
                                                                       -6
                                                                       -7
                                                                       -8
                                                                       -9)
                                                                      (("4"
                                                                        (lemma
                                                                         "derivable_subtype[posreal,(d)]")
                                                                        (("4"
                                                                          (inst
                                                                           -1
                                                                           "ln")
                                                                          (("4"
                                                                            (assert)
                                                                            (("4"
                                                                              (split
                                                                               -1)
                                                                              (("1"
                                                                                (expand
                                                                                 "restrict"
                                                                                 -1)
                                                                                (("1"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (hide
                                                                                 2
                                                                                 3)
                                                                                (("2"
                                                                                  (lemma
                                                                                   "deriv_domain_exp_a")
                                                                                  (("2"
                                                                                    (propax)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("3"
                                                                                (hide
                                                                                 2
                                                                                 3)
                                                                                (("3"
                                                                                  (lemma
                                                                                   "not_one_element")
                                                                                  (("3"
                                                                                    (propax)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("5"
                                                                      (inst
                                                                       -10
                                                                       "s!1")
                                                                      (("5"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("6"
                                                                      (inst
                                                                       -10
                                                                       "s!1")
                                                                      (("6"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (lemma
                                                               "deriv_domain_exp_a")
                                                              (("2"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("3"
                                                              (lemma
                                                               "not_one_element")
                                                              (("3"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (skeep 1)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (inst
                                                             -7
                                                             "x")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide 2)
                                          (("2"
                                            (hide -)
                                            (("2"
                                              (lemma
                                               "derivable_subtype[posreal,(d)]")
                                              (("1"
                                                (inst -1 "ln")
                                                (("1"
                                                  (lemma
                                                   "ln_derivable")
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (split -3)
                                                      (("1"
                                                        (expand
                                                         "restrict"
                                                         -1)
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (propax)
                                                        nil
                                                        nil)
                                                       ("3"
                                                        (lemma
                                                         "deriv_domain_exp_a")
                                                        (("3"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("4"
                                                        (lemma
                                                         "not_one_element")
                                                        (("4"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (skeep)
                                                (("2"
                                                  (reveal -)
                                                  (("2"
                                                    (inst -6 "x")
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (inst -7 "x!2")
                                          (("3" (assert) nil nil))
                                          nil)
                                         ("4"
                                          (inst -7 "x!2")
                                          (("4" (assert) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (lemma
                                         "derivable_subtype[posreal,(d)]")
                                        (("1"
                                          (inst -1 "ln")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (split -1)
                                              (("1"
                                                (expand "restrict")
                                                (("1"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil)
                                               ("2"
                                                (lemma "ln_derivable")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil)
                                               ("3"
                                                (lemma
                                                 "deriv_domain_exp_a")
                                                (("3"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil)
                                               ("4"
                                                (lemma
                                                 "not_one_element")
                                                (("4"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (skeep)
                                          (("2"
                                            (inst -4 "x")
                                            (("2"
                                              (assert)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (skeep)
                                        (("3"
                                          (inst -4 "x")
                                          (("3"
                                            (assert)
                                            (("3" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (decompose-equality 1) nil nil))
                            nil)
                           ("2" (inst -2 "x!1")
                            (("2" (assert) nil nil)) nil))
                          nil)
                         ("2" (lemma "derivable_exp")
                          (("2" (assert)
                            (("2" (expand "derivable?" -1)
                              (("2" (inst -1 "x1!1") nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (skeep 1)
                (("2" (inst -3 "x") (("2" (assert) nil nil)) nil)) nil)
               ("3" (lemma "derivable_scal[(d)]")
                (("3" (inst -1 "c1" "LAMBDA(x:(d)): ln(x)")
                  (("1" (expand "*") (("1" (propax) nil nil)) nil)
                   ("2" (hide 2)
                    (("2" (lemma "ln_derivable")
                      (("2" (flatten)
                        (("2" (assert)
                          (("2"
                            (lemma "derivable_subtype[posreal,(d)]")
                            (("1" (inst -1 "ln")
                              (("1"
                                (assert)
                                (("1"
                                  (split -1)
                                  (("1"
                                    (expand "restrict")
                                    (("1" (propax) nil nil))
                                    nil)
                                   ("2"
                                    (lemma "deriv_domain_exp_a")
                                    (("2" (propax) nil nil))
                                    nil)
                                   ("3"
                                    (lemma "not_one_element")
                                    (("3" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (skeep)
                              (("2"
                                (inst -4 "x")
                                (("2"
                                  (assert)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (skeep)
                    (("3" (inst -2 "x")
                      (("3" (assert) (("3" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("4" (skeep 1)
                (("4" (lemma "derivable_exp")
                  (("4" (case "exp = LAMBDA(x:real): exp(x)")
                    (("1" (assert) nil nil)
                     ("2" (decompose-equality 1) nil nil))
                    nil))
                  nil))
                nil)
               ("5" (skeep)
                (("5" (inst -2 "x_1")
                  (("5" (assert) (("5" (assert) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide 2)
          (("2" (lemma "derivable_exp")
            (("2" (assert)
              (("2" (case "exp = LAMBDA(x:real): exp(x)")
                (("1" (assert) nil nil)
                 ("2" (decompose-equality 1) nil nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (hide 2)
          (("3" (lemma "derivable_scal[(d)]")
            (("3" (inst -1 "c1" "LAMBDA(x:(d)): ln(x)")
              (("1" (expand "*") (("1" (propax) nil nil)) nil)
               ("2" (hide 2)
                (("2" (lemma "ln_derivable")
                  (("2" (flatten)
                    (("2" (assert)
                      (("2" (lemma "derivable_subtype[posreal,(d)]")
                        (("1" (inst -1 "ln")
                          (("1" (assert)
                            (("1" (split -1)
                              (("1"
                                (expand "restrict")
                                (("1" (propax) nil nil))
                                nil)
                               ("2"
                                (lemma "deriv_domain_exp_a")
                                (("2" (propax) nil nil))
                                nil)
                               ("3"
                                (lemma "not_one_element")
                                (("3" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (skeep)
                          (("2" (assert)
                            (("2" (inst -3 "x")
                              (("2"
                                (assert)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (skeep)
                (("3" (inst -1 "x")
                  (("3" (assert) (("3" (assert) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil)
         ("4" (hide 2)
          (("4" (skeep)
            (("4" (inst -1 "x")
              (("4" (assert) (("4" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((d formal-const-decl "[real -> bool]" exp_analysis nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (chain_rule formula-decl nil chain_rule analysis)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (deriv const-decl "[T -> real]" derivatives analysis)
    (deriv_fun type-eq-decl nil derivatives analysis)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (derivative_exp formula-decl nil ln_exp lnexp)
    (derivable_exp formula-decl nil ln_exp lnexp)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (x!1 skolem-const-decl "(d)" exp_analysis nil)
    (deriv_subtype_dd formula-decl nil derivatives_subtype analysis)
    (deriv_domain? const-decl "bool" deriv_domain_def analysis)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (restrict const-decl "R" restrict nil)
    (deriv_domain_exp_a formula-decl nil exp_analysis nil)
    (not_one_element formula-decl nil exp_analysis nil)
    (derivable_subtype formula-decl nil derivatives_subtype analysis)
    (deriv_domain_posreal formula-decl nil deriv_domain analysis)
    (not_one_element_posreal formula-decl nil deriv_domain analysis)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (ln_derivable formula-decl nil ln_exp lnexp)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (deriv_scal_fun formula-decl nil derivatives analysis)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (derivable? const-decl "bool" derivatives_def analysis)
    (deriv const-decl "real" derivatives_def analysis)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (derivable_scal judgement-tcc nil derivatives analysis)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (exp const-decl "{py | x = ln(py)}" ln_exp lnexp)
    (derivable? const-decl "bool" derivatives analysis)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (c1 skolem-const-decl "{rr: real | rr /= 0}" exp_analysis nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (ln const-decl "real" ln_exp lnexp)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil) (> const-decl "bool" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   shostak)))

