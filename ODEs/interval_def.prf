(interval_def
 (closed_interval_TCC1 0
  (closed_interval_TCC1-1 nil 3790595797 ("" (subtype-tcc) nil nil)
   ((closed_interval? const-decl "bool" interval_def nil)) nil
   (closed_interval subtype
    "LAMBDA (r: reals.real): booleans.AND(reals.<=(interval_def.a, r), reals.<=(r, interval_def.b))"
    "(interval_def.closed_interval?(interval_def.a, interval_def.b))")))
 (ci_ci 0
  (ci_ci-1 nil 3790595861
   ("" (skeep)
    (("" (expand "closed_interval?" 1)
      (("" (inst 1 "a" "b") (("" (assert) nil nil)) nil)) nil))
    nil)
   ((closed_interval? const-decl "bool" interval_def nil)
    (< const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (ci_nonempty 0
  (ci_nonempty-1 nil 3789122078
   ("" (skeep)
    (("" (typepred "d")
      (("" (expand "closed_interval?" -1)
        (("" (expand "nonempty?" 1)
          (("" (skeep)
            (("" (expand "empty?" -2)
              (("" (expand "closed_interval?" -1)
                (("" (inst -2 "a")
                  (("" (inst -1 "a")
                    (("" (assert)
                      (("" (expand "member" 1) (("" (propax) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((closed_interval? const-decl "bool" interval_def nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (nonempty? const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (closed_interval? const-decl "bool" interval_def nil))
   shostak))
 (ci_connected 0
  (ci_connected-1 nil 3789122132
   ("" (skeep)
    (("" (expand "connected?" 1)
      (("" (typepred "d")
        (("" (expand "closed_interval?" -1)
          (("" (skeep)
            (("" (skeep)
              (("" (expand "closed_interval?" -1)
                (("" (inst-cp -1 "x")
                  (("" (inst-cp -1 "y")
                    (("" (inst-cp -1 "z")
                      (("" (assert)
                        (("" (flatten) (("" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((connected? const-decl "bool" deriv_domain_def analysis)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (closed_interval? const-decl "bool" interval_def nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (closed_interval? const-decl "bool" interval_def nil))
   shostak))
 (ci_not_one_element 0
  (ci_not_one_element-1 nil 3789122181
   ("" (skeep)
    (("" (typepred "d")
      (("" (expand "closed_interval?" -1)
        (("" (expand "not_one_element?")
          (("" (skeep)
            (("" (skeep -1)
              (("" (typepred "a" "b")
                (("" (case "x=a")
                  (("1" (inst 1 "b")
                    (("1" (expand "closed_interval?" -4)
                      (("1" (inst -4 "b") (("1" (assert) nil nil))
                        nil))
                      nil)
                     ("2" (expand "closed_interval?" -4)
                      (("2" (inst -4 "b") (("2" (assert) nil nil))
                        nil))
                      nil))
                    nil)
                   ("2" (inst 2 "a")
                    (("1" (assert) nil nil)
                     ("2" (expand "closed_interval?" -3)
                      (("2" (inst -3 "a") (("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((closed_interval? const-decl "bool" interval_def nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (closed_interval? const-decl "bool" interval_def nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (d skolem-const-decl "(closed_interval?)" interval_def nil)
    (a skolem-const-decl "real" interval_def nil)
    (b skolem-const-decl "{b: real | a < b}" interval_def nil)
    (< const-decl "bool" reals nil))
   shostak))
 (ci_deriv_domain 0
  (ci_deriv_domain-1 nil 3790595903
   ("" (expand "deriv_domain?" 1)
    (("" (skeep)
      (("" (skeep)
        (("" (typepred "x")
          (("" (lemma "ci_not_one_element")
            (("" (inst?)
              (("" (expand "not_one_element?" -1)
                (("" (inst -1 "x")
                  (("" (skeep)
                    (("" (lemma "ci_connected")
                      (("" (inst?)
                        (("" (expand "connected?" -1)
                          (("" (case "x<y")
                            (("1" (inst 2 "min(y-x, e)/2")
                              (("1" (grind) nil nil)
                               ("2"
                                (split 1)
                                (("1"
                                  (expand "min" 1 1)
                                  (("1"
                                    (lift-if 1)
                                    (("1"
                                      (split 1)
                                      (("1"
                                        (flatten)
                                        (("1" (assert) nil nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (inst
                                   -2
                                   "x"
                                   "y"
                                   "min(y - x, e) / 2 + x")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (expand "min" 2)
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert)
                              (("2"
                                (case "NOT x>y")
                                (("1" (assert) nil nil)
                                 ("2"
                                  (inst 3 "-min(e,x-y)/2")
                                  (("1" (grind) nil nil)
                                   ("2"
                                    (split 1)
                                    (("1"
                                      (expand "min" 1 1)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (lift-if -1)
                                          (("1" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (inst
                                       -2
                                       "y"
                                       "x"
                                       "-min(e, x - y) / 2 + x")
                                      (("2"
                                        (assert)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((closed_interval? const-decl "bool" interval_def nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (ci_connected formula-decl nil interval_def nil)
    (connected? const-decl "bool" deriv_domain_def analysis)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (e skolem-const-decl "posreal" interval_def nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (x skolem-const-decl "(d)" interval_def nil)
    (y skolem-const-decl "(d)" interval_def nil)
    (d skolem-const-decl "(closed_interval?)" interval_def nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (<= const-decl "bool" reals nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (< const-decl "bool" reals nil)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (ci_not_one_element formula-decl nil interval_def nil)
    (deriv_domain? const-decl "bool" deriv_domain_def analysis)
    (real_plus_real_is_real application-judgement "real" reals nil))
   shostak))
 (ci_closed_D_TCC1 0
  (ci_closed_D_TCC1-1 nil 3789121857 ("" (subtype-tcc) nil nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (closed_interval? const-decl "bool" interval_def nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices matrices)
    (closed_interval? const-decl "bool" interval_def nil))
   nil
   (ci_closed_D subtype "interval_def.x" "(list_adt[real].cons?)")))
 (ci_closed_D 0
  (ci_closed_D-1 nil 3789122483
   ("" (skeep)
    (("" (expand "closed_domain?" 1)
      (("" (skeep)
        (("" (typepred "V")
          (("" (expand "convergence?" -2)
            (("" (expand "convergence?" -2)
              (("" (inst -2 "norm_inf(1)")
                (("" (typepred "d")
                  (("" (expand "closed_interval?" -1)
                    (("" (skeep -1)
                      (("" (expand "closed_interval?" -1)
                        (("" (inst -1 "car(L)")
                          (("" (assert)
                            (("" (split 1)
                              (("1"
                                (flip-ineq 1)
                                (("1"
                                  (inst -3 "(a-car(L))/2")
                                  (("1"
                                    (skeep -3)
                                    (("1"
                                      (inst -3 "N+1")
                                      (("1"
                                        (inst -2 "N+1")
                                        (("1"
                                          (reveal -)
                                          (("1"
                                            (hide -1)
                                            (("1"
                                              (hide -1)
                                              (("1"
                                                (hide -1)
                                                (("1"
                                                  (hide -2)
                                                  (("1"
                                                    (inst
                                                     -1
                                                     "car(V(N+1))")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (expand
                                                           "norm_inf"
                                                           -5)
                                                          (("1"
                                                            (expand
                                                             "norm_inf"
                                                             -5)
                                                            (("1"
                                                              (expand
                                                               "abs"
                                                               -5)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (expand
                                                                   "length"
                                                                   -5)
                                                                  (("1"
                                                                    (typepred
                                                                     "V(1+N)-L"
                                                                     "V(1+N)"
                                                                     "L")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (replace
                                                                         -4)
                                                                        (("1"
                                                                          (replace
                                                                           -6)
                                                                          (("1"
                                                                            (expand
                                                                             "max"
                                                                             -2)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (expand
                                                                                 "length"
                                                                                 -2)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "max"
                                                                                     -11)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "length"
                                                                                       -11)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "abs"
                                                                                           -11)
                                                                                          (("1"
                                                                                            (lift-if
                                                                                             -11)
                                                                                            (("1"
                                                                                              (split
                                                                                               -11)
                                                                                              (("1"
                                                                                                (flatten)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (grind)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (flatten)
                                                                                                (("2"
                                                                                                  (grind)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (assert) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (flip-ineq 1)
                                (("2"
                                  (inst -3 "(car(L)-b)/2")
                                  (("1"
                                    (skeep -3)
                                    (("1"
                                      (inst -3 "N+1")
                                      (("1"
                                        (inst -2 "N+1")
                                        (("1"
                                          (reveal -)
                                          (("1"
                                            (inst -4 "car(V(N+1))")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (hide -2)
                                                    (("1"
                                                      (hide -2)
                                                      (("1"
                                                        (expand
                                                         "norm_inf"
                                                         -7)
                                                        (("1"
                                                          (expand
                                                           "norm_inf"
                                                           -7)
                                                          (("1"
                                                            (expand
                                                             "abs"
                                                             -7)
                                                            (("1"
                                                              (typepred
                                                               "V(1+N)-L"
                                                               "V(1+N)"
                                                               "L")
                                                              (("1"
                                                                (replace
                                                                 -4)
                                                                (("1"
                                                                  (replace
                                                                   -6)
                                                                  (("1"
                                                                    (expand
                                                                     "max"
                                                                     -2)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (expand
                                                                         "max"
                                                                         -13)
                                                                        (("1"
                                                                          (expand
                                                                           "length"
                                                                           -13)
                                                                          (("1"
                                                                            (expand
                                                                             "abs"
                                                                             -13)
                                                                            (("1"
                                                                              (lift-if
                                                                               -13)
                                                                              (("1"
                                                                                (split
                                                                                 -13)
                                                                                (("1"
                                                                                  (flatten)
                                                                                  (("1"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (flatten)
                                                                                  (("2"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((closed_domain? const-decl "bool" closed_bounded_domain
     mv_analysis)
    (vec_seq type-eq-decl nil domain_vec2real_def mv_analysis)
    (VectorN type-eq-decl nil matrices matrices)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (closed_interval? const-decl "bool" interval_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (convergence? const-decl "bool" vector_sequences mv_analysis)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (a skolem-const-decl "real" interval_def nil)
    (L skolem-const-decl "VectorN(1)" interval_def nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (above nonempty-type-eq-decl nil integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (abs def-decl "{l: list | length(l) = length(ll)}" norms
         mv_analysis)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (sub const-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (add def-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (scal def-decl "VectorN(length(v2))" matrices matrices)
    (max def-decl "real" norms mv_analysis)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (Vector type-eq-decl nil matrices matrices)
    (norm_inf const-decl "[(cons?) -> nonneg_real]" norms mv_analysis)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (b skolem-const-decl "{b: real | a < b}" interval_def nil)
    (< const-decl "bool" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (closed_interval? const-decl "bool" interval_def nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (norm? const-decl "bool" norms mv_analysis)
    (norm_inf const-decl "(norm?(m))" norms mv_analysis)
    (convergence? const-decl "bool" vector_sequences mv_analysis)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis))
   shostak))
 (ci_bounded_D 0
  (ci_bounded_D-1 nil 3789123033
   ("" (skeep)
    (("" (lemma "bounded_equiv")
      (("" (inst?)
        (("1" (assert)
          (("1" (hide 2)
            (("1" (inst 1 "norm_inf(1)")
              (("1" (expand "bounded_domain?" 1)
                (("1" (typepred "d")
                  (("1" (expand "closed_interval?" -1)
                    (("1" (skeep)
                      (("1" (inst 1 "2*max(abs(a),abs(b))")
                        (("1" (skeep)
                          (("1" (expand "closed_interval?" -1)
                            (("1" (inst -1 "car(v)")
                              (("1"
                                (assert)
                                (("1"
                                  (flatten)
                                  (("1"
                                    (expand "norm_inf" 1)
                                    (("1"
                                      (expand "norm_inf" 1)
                                      (("1"
                                        (expand "abs" 1 1)
                                        (("1"
                                          (expand "max" 1 1)
                                          (("1"
                                            (expand "length" 1 1)
                                            (("1"
                                              (assert)
                                              (("1" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide 2) (("2" (skeep) (("2" (grind) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((bounded_equiv formula-decl nil closed_bounded_domain mv_analysis)
    (norm_inf const-decl "(norm?(m))" norms mv_analysis)
    (norm? const-decl "bool" norms mv_analysis)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis)
    (norm_inf const-decl "[(cons?) -> nonneg_real]" norms mv_analysis)
    (max def-decl "real" norms mv_analysis)
    (minus_real_is_real application-judgement "real" reals nil)
    (abs def-decl "{l: list | length(l) = length(ll)}" norms
         mv_analysis)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (closed_interval? const-decl "bool" interval_def nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (b skolem-const-decl "{b: real | a < b}" interval_def nil)
    (< const-decl "bool" reals nil)
    (a skolem-const-decl "real" interval_def nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonneg_real_max application-judgement
     "{z: nonneg_real | z >= x AND z >= y}" real_defs nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (bounded_domain? const-decl "bool" closed_bounded_domain
     mv_analysis)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (closed_interval? const-decl "bool" interval_def nil)
    (domain type-eq-decl nil domain_vec2real_def mv_analysis)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices matrices)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil))
   shostak))
 (ci_nonempty_D 0
  (ci_nonempty_D-1 nil 3789132599
   ("" (skeep)
    (("" (expand "nonempty?" 1)
      (("" (typepred "d")
        (("" (expand "closed_interval?" -1)
          (("" (expand "empty?" -2)
            (("" (skeep)
              (("" (expand "closed_interval?" -1)
                (("" (inst -1 "a")
                  (("" (flatten)
                    (("" (assert)
                      (("" (inst -3 "(: a :)") (("" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nonempty? const-decl "bool" sets nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (member const-decl "bool" sets nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (VectorN type-eq-decl nil matrices matrices)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (length_singleton formula-decl nil more_list_props structures)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis)
    (closed_interval? const-decl "bool" interval_def nil)
    (empty? const-decl "bool" sets nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (closed_interval? const-decl "bool" interval_def nil))
   shostak))
 (d_three 0
  (d_three-1 nil 3789132713
   ("" (skeep)
    (("" (rewrite "ci_closed_D")
      (("" (rewrite "ci_bounded_D")
        (("" (rewrite "ci_nonempty_D") nil nil)) nil))
      nil))
    nil)
   ((ci_closed_D formula-decl nil interval_def nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (closed_interval? const-decl "bool" interval_def nil)
    (ci_nonempty_D formula-decl nil interval_def nil)
    (ci_bounded_D formula-decl nil interval_def nil))
   shostak))
 (hp_noe 0
  (hp_noe-1 nil 3795271874
   ("" (skeep)
    (("" (expand "not_one_element?" 1)
      (("" (skeep)
        (("" (inst 1 "x+1")
          (("1" (assert) nil nil)
           ("2" (typepred "x")
            (("2" (expand "hp") (("2" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((not_one_element? const-decl "bool" deriv_domain_def analysis)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (x skolem-const-decl "(hp(a))" interval_def nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (a skolem-const-decl "real" interval_def nil)
    (hp const-decl "bool" interval_def nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil))
   shostak))
 (hp_dd 0
  (hp_dd-1 nil 3795271917
   ("" (skeep)
    (("" (expand "deriv_domain?" 1)
      (("" (skeep*)
        (("" (typepred "x")
          (("" (inst 1 "e/2")
            (("1" (grind) nil nil)
             ("2" (expand "hp") (("2" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_plus_real_is_real application-judgement "real" reals nil)
    (deriv_domain? const-decl "bool" deriv_domain_def analysis)
    (hp const-decl "bool" interval_def nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (a skolem-const-decl "real" interval_def nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (e skolem-const-decl "posreal" interval_def nil)
    (x skolem-const-decl "(hp(a))" interval_def nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (hp_con 0
  (hp_con-1 nil 3795271988
   ("" (skeep)
    (("" (expand "connected?" 1)
      (("" (skeep)
        (("" (expand "hp" 1)
          (("" (typepred "x" "y")
            (("" (expand "hp" -) (("" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((connected? const-decl "bool" deriv_domain_def analysis)
    (hp const-decl "bool" interval_def nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil))
   shostak))
 (hp_ne 0
  (hp_ne-1 nil 3795272031
   ("" (skeep)
    (("" (expand "nonempty?" 1)
      (("" (expand "empty?" -1)
        (("" (inst -1 "a")
          (("" (expand "member" 1)
            (("" (expand "hp" 1) (("" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((nonempty? const-decl "bool" sets nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (hp const-decl "bool" interval_def nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil))
   shostak)))

