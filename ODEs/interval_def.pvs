interval_def  % Welcome
		: THEORY

%Created by                     JTS
%	 	           Jan 2020
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%| This defines a closed interval|%
%| and shows it is connected,    |%
%| closed, nonempty, has two     |%
%| elements, and it a            |%
%| deriv_domain. Also it can be  |%
%| lifted to a domain in Rl      |%
%| (lists) with similar          |%
%| properties			 |%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%Last updated	           Jan 2020

%-----     %
  BEGIN
%     -----%

%-------------------------------------------------------------------------
%% Importing deriv_domain_def to have the domain
%-------------------------------------------------------------------------

IMPORTING analysis@deriv_domain_def
IMPORTING mv_analysis@max_function[1]

%-------------------------------------------------------------------------
%% Define non-empty closed interval
%-------------------------------------------------------------------------

closed_interval?(a:real, ( b:real | a < b ))
 ( d :[real->bool]): bool =
  FORALL(x:real): d(x) IFF  (a <= x AND x <= b)

closed_interval?(d:[real->bool]): bool =
 EXISTS(a:real, ( b:real | a < b )):
  closed_interval?(a, b)(d)

closed_interval(a:real, (b:real | a<b)): (closed_interval?(a,b)) =
 LAMBDA(r:real): a<=r AND r<= b

ci_ci: LEMMA
 FORALL(a:real, (b:real | a < b)):
 closed_interval?(closed_interval(a,b))
%-------------------------------------------------------------------------
%% Show non-empty closed interval is nonempty, connected, and has
%  more than one element
%-------------------------------------------------------------------------

ci_nonempty: LEMMA
 FORALL(d:(closed_interval?)):
  nonempty?(d)

ci_connected: LEMMA
 FORALL(d:(closed_interval?)):
  connected?[(d)]

ci_not_one_element: LEMMA
 FORALL(d:(closed_interval?)):
  not_one_element?[(d)]

ci_deriv_domain: LEMMA
 FORALL(d:(closed_interval?)):
  deriv_domain?[(d)]

%-------------------------------------------------------------------------
%% Show non-empty closed interval is nonempty, connected, and has
%  more than one element in the multivariate semantics
%-------------------------------------------------------------------------

ci_closed_D: LEMMA
 FORALL(d:(closed_interval?)):
  closed_domain?[1]
   (LAMBDA (x: VectorN(1)): d(car[real](x)))

ci_bounded_D: LEMMA
 FORALL(d:(closed_interval?)):
  bounded_domain?[1]
   (LAMBDA (x: VectorN(1)): d(car[real](x)))

ci_nonempty_D: LEMMA
 FORALL(d:(closed_interval?)):
  nonempty?[VectorN(1)]
   (LAMBDA (x: VectorN(1)): d(car[real](x)))

d_three: LEMMA
 FORALL (d:(closed_interval?)):
  closed_domain?[1](LAMBDA (x: VectorN(1)): d(car[real](x))) AND
   bounded_domain?[1](LAMBDA (x: VectorN(1)): d(car[real](x))) AND
    nonempty?[VectorN(1)](LAMBDA (x: VectorN(1)): d(car[real](x)))

%-------------------------------------------------------------------------
%% Half-plane definition
%-------------------------------------------------------------------------

hp(a:real)(r:real): bool = r >= a

hp_noe: LEMMA
 FORALL(a:real):
   not_one_element?[(hp(a))]

hp_dd: LEMMA
 FORALL(a:real):
   deriv_domain?[(hp(a))]

hp_con: LEMMA
 FORALL(a:real):
   connected?[(hp(a))]

hp_ne: LEMMA
 FORALL(a:real):
   nonempty?((hp(a)))

%-------------------------------------------------------------------------
%% Half-plane definition
%-------------------------------------------------------------------------

%open_round?(a:real, M:real)
%  (d:[real->bool]): bool =
  
  



  %~~~    End ~~%
  END interval_def
