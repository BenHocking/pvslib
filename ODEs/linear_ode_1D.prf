(linear_ode_1D
 (od_ln_TCC1 0
  (od_ln_TCC1-1 nil 3867520702 ("" (skeep*) (("" (grind) nil nil)) nil)
   ((add def-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (length def-decl "nat" list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis))
   nil
   (od_ln subtype
    "(matrices.+)((: number_fields.*(linear_ode_1D.af(linear_ode_1D.t), list_adt[real].car(linear_ode_1D.v)) :), (: linear_ode_1D.bf(linear_ode_1D.t) :))"
    "matrices.VectorN(1)")))
 (od_ln_TCC2 0
  (od_ln_TCC2-1 nil 3867528905 ("" (skeep) (("" (grind) nil nil)) nil)
   ((add def-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (length def-decl "nat" list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis))
   nil
   (od_ln subtype
    "(matrices.+)((: number_fields.*(linear_ode_1D.af(linear_ode_1D.t), list_adt[real].car(linear_ode_1D.v)) :), (: linear_ode_1D.bf(linear_ode_1D.t) :))"
    "matrices.VectorN(1)")))
 (lin_lip_TCC1 0
  (lin_lip_TCC1-1 nil 3867520702 ("" (assuming-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (closed_interval? const-decl "bool" interval_def nil)
    (continuous? const-decl "bool" continuous_functions analysis)
    (< const-decl "bool" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil)
    (a!1 skolem-const-decl "real" linear_ode_1D nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (delta!1 skolem-const-decl "posreal" linear_ode_1D nil)
    (d!1 skolem-const-decl "(closed_interval?)" linear_ode_1D nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (continuous? const-decl "bool" continuous_functions analysis)
    (closed_interval? const-decl "bool" interval_def nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (nonempty? const-decl "bool" sets nil))
   nil
   (lin_lip assuming
    "ODE_Lipschitz_def[linear_ode_1D.d].ODE_Lipschitz_def"
    "non_empty: ASSUMPTION sets[real].nonempty?(ODE_Lipschitz_def.d)")))
 (lin_lip_TCC2 0
  (lin_lip_TCC2-1 nil 3867520702
   ("" (skeep) (("" (lemma "ci_connected") (("" (inst?) nil nil)) nil))
    nil)
   ((ci_connected formula-decl nil interval_def nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (closed_interval? const-decl "bool" interval_def nil))
   nil
   (lin_lip assuming
    "ODE_Lipschitz_def[linear_ode_1D.d].ODE_Lipschitz_def"
    "connected: ASSUMPTION deriv_domain_def[(ODE_Lipschitz_def.d)].connected?")))
 (lin_lip_TCC3 0
  (lin_lip_TCC3-1 nil 3867520702
   ("" (skeep)
    (("" (lemma "ci_not_one_element") (("" (inst?) nil nil)) nil)) nil)
   ((ci_not_one_element formula-decl nil interval_def nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (closed_interval? const-decl "bool" interval_def nil))
   nil
   (lin_lip assuming
    "ODE_Lipschitz_def[linear_ode_1D.d].ODE_Lipschitz_def"
    "not_one_element: ASSUMPTION deriv_domain_def[(ODE_Lipschitz_def.d)].not_one_element?")))
 (lin_lip 0
  (lin_lip-1 nil 3867520780
   ("" (skeep*)
    (("" (lemma "Lip_norm_od_f[(d)]")
      (("" (inst?)
        (("" (assert)
          (("" (hide 2)
            (("" (expand "Lip_d_E?" 1)
              (("" (typepred "af" "bf")
                (("" (inst 1 "norm_inf(1)")
                  (("" (lemma "max_in_interval[(d)]")
                    (("1" (lemma "min_in_interval[(d)]")
                      (("1" (typepred "d")
                        (("1" (expand "closed_interval?" -1)
                          (("1" (skeep)
                            (("1" (inst -2 "a" "b" "af")
                              (("1"
                                (inst -3 "a" "b" "af")
                                (("1"
                                  (assert)
                                  (("1"
                                    (skeep*)
                                    (("1"
                                      (name
                                       "L"
                                       "max(abs(af(c)),abs(af(c!1)))")
                                      (("1"
                                        (inst 1 "L")
                                        (("1"
                                          (skeep)
                                          (("1"
                                            (expand "od_ln" 1)
                                            (("1"
                                              (expand "+" 1)
                                              (("1"
                                                (expand "add" 1)
                                                (("1"
                                                  (expand "add" 1)
                                                  (("1"
                                                    (expand "-" 1 1)
                                                    (("1"
                                                      (expand "sub" 1)
                                                      (("1"
                                                        (expand
                                                         "scal"
                                                         1)
                                                        (("1"
                                                          (expand
                                                           "scal"
                                                           1)
                                                          (("1"
                                                            (expand
                                                             "add"
                                                             1)
                                                            (("1"
                                                              (expand
                                                               "add"
                                                               1)
                                                              (("1"
                                                                (case
                                                                 " norm_inf(1)(cons(af(t) * car(y1) - af(t) * car(y2), (: :))) = abs(af(t))*norm_inf(1)( (: car(y1) - car(y2):))")
                                                                (("1"
                                                                  (replace
                                                                   -1)
                                                                  (("1"
                                                                    (case
                                                                     "abs(af(t))<=L")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (expand
                                                                         "-"
                                                                         1
                                                                         2)
                                                                        (("1"
                                                                          (expand
                                                                           "sub"
                                                                           1)
                                                                          (("1"
                                                                            (expand
                                                                             "scal"
                                                                             1)
                                                                            (("1"
                                                                              (typepred
                                                                               "y1"
                                                                               "y2")
                                                                              (("1"
                                                                                (case
                                                                                 "cdr(y1)=null")
                                                                                (("1"
                                                                                  (case
                                                                                   "cdr(y2)=null")
                                                                                  (("1"
                                                                                    (replace
                                                                                     -1)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "scal"
                                                                                       1)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "add"
                                                                                         1)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "add"
                                                                                           1)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (case
                                                                                                 "(: car(y1) - car(y2) :) = cons(car(y1) - car(y2), null)")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (replace
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (mult-by
                                                                                                       -8
                                                                                                       " norm_inf(1)(cons(car(y1) - car(y2), null))")
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (propax)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (hide
                                                                                     -2
                                                                                     -4
                                                                                     -6
                                                                                     -7
                                                                                     -8
                                                                                     -9
                                                                                     -10
                                                                                     -11
                                                                                     -12
                                                                                     -13
                                                                                     -14
                                                                                     -15
                                                                                     -16
                                                                                     -17
                                                                                     2)
                                                                                    (("2"
                                                                                      (grind)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (hide
                                                                                   -1
                                                                                   -3
                                                                                   -5
                                                                                   -6
                                                                                   -7
                                                                                   -8
                                                                                   -9
                                                                                   -10
                                                                                   -11
                                                                                   -12
                                                                                   -13
                                                                                   -14
                                                                                   -15
                                                                                   -16)
                                                                                  (("2"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (inst
                                                                         -6
                                                                         "t")
                                                                        (("2"
                                                                          (inst
                                                                           -9
                                                                           "t")
                                                                          (("2"
                                                                            (typepred
                                                                             "t")
                                                                            (("2"
                                                                              (expand
                                                                               "closed_interval?"
                                                                               -4)
                                                                              (("2"
                                                                                (inst
                                                                                 -4
                                                                                 "t")
                                                                                (("2"
                                                                                  (flatten)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (flatten)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide
                                                                   2)
                                                                  (("2"
                                                                    (hide
                                                                     -9
                                                                     -10)
                                                                    (("2"
                                                                      (hide
                                                                       -4
                                                                       -8)
                                                                      (("2"
                                                                        (typepred
                                                                         "norm_inf(1)")
                                                                        (("2"
                                                                          (expand
                                                                           "norm?"
                                                                           -1)
                                                                          (("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (inst
                                                                               -2
                                                                               "(: car(y1) - car(y2) :)"
                                                                               "af(t)")
                                                                              (("2"
                                                                                (replace
                                                                                 -2
                                                                                 1
                                                                                 rl)
                                                                                (("2"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand "closed_interval?")
                                  (("2"
                                    (inst -1 "b")
                                    (("2"
                                      (flatten)
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (expand "closed_interval?")
                                  (("3"
                                    (inst -1 "a")
                                    (("3" (assert) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (assert)
                                (("2"
                                  (expand "closed_interval?" -1)
                                  (("2"
                                    (inst -1 "b")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (expand "closed_interval?" -1)
                                (("3"
                                  (inst -1 "a")
                                  (("3" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (lemma "ci_connected")
                      (("2" (inst -1 "d")
                        (("2" (expand "connected?")
                          (("2" (propax) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((closed_interval? const-decl "bool" interval_def nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (Lip_norm_od_f formula-decl nil ODE_Lipschitz_def nil)
    (Lip_d_E? const-decl "bool" ODE_Lipschitz_def nil)
    (norm_inf const-decl "(norm?(m))" norms mv_analysis)
    (norm? const-decl "bool" norms mv_analysis)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (ci_connected formula-decl nil interval_def nil)
    (connected? const-decl "bool" deriv_domain_def analysis)
    (min_in_interval formula-decl nil continuous_functions_props
     analysis)
    (d skolem-const-decl "(closed_interval?)" linear_ode_1D nil)
    (a skolem-const-decl "real" linear_ode_1D nil)
    (< const-decl "bool" reals nil)
    (b skolem-const-decl "{b: real | a < b}" linear_ode_1D nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nonneg_real_max application-judgement
     "{z: nonneg_real | z >= x AND z >= y}" real_defs nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (sub const-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (length_singleton formula-decl nil more_list_props structures)
    (* const-decl "VectorN(length(v2))" matrices matrices)
    (closed_interval? const-decl "bool" interval_def nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (continuous? const-decl "bool" continuous_functions analysis)
    (norm_inf const-decl "[(cons?) -> nonneg_real]" norms mv_analysis)
    (max def-decl "real" norms mv_analysis)
    (abs def-decl "{l: list | length(l) = length(ll)}" norms
         mv_analysis)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (both_sides_times_pos_le1_imp formula-decl nil extra_real_props
     nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (scal def-decl "VectorN(length(v2))" matrices matrices)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (add def-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (real_times_real_is_real application-judgement "real" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (max_in_interval formula-decl nil continuous_functions_props
     analysis)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (od_ln const-decl "VectorN(1)" linear_ode_1D nil)
    (continuous? const-decl "bool" continuous_functions analysis)
    (od_f type-eq-decl nil ODE_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (lin_cont_d 0
  (lin_cont_d-1 nil 3867521723
   ("" (skeep*)
    (("" (expand "cont_d?" 1)
      (("" (skeep)
        (("" (lemma "cont_lift")
          (("" (inst -1 "d" "_")
            (("" (assert)
              (("" (expand "od_ln" 1)
                (("" (inst -1 "LAMBDA(t:(d)): af(t)*car(y1)+bf(t)")
                  (("" (flatten)
                    (("" (hide -2)
                      (("" (split -1)
                        (("1"
                          (case "(LAMBDA (v: {vv: VectorN(1) | d(car(vv))}):
               (: af(car(v)) * car(y1) + bf(car(v)) :)) = (LAMBDA (x: {x: VectorN(1) | d(car(x))}):
             (: af(car(x)) * car(y1) :) + (: bf(car(x)) :))")
                          (("1" (assert) nil nil)
                           ("2" (hide 2)
                            (("2" (decompose-equality 1)
                              (("1"
                                (assert)
                                (("1"
                                  (hide -1)
                                  (("1" (grind) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (hide 2)
                                (("2"
                                  (skeep)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (hide -1)
                                      (("2"
                                        (expand "+" 1)
                                        (("2"
                                          (expand "add" 1)
                                          (("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide 2)
                          (("2" (typepred "af" "bf")
                            (("2" (lemma "sum_cont_fun[(d)]")
                              (("2"
                                (inst -1 "car(y1)*af" "bf")
                                (("2"
                                  (split -1)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (hide -2 -3)
                                      (("1" (grind) nil nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide 2)
                                    (("2"
                                      (lemma "scal_cont_fun[(d)]")
                                      (("2"
                                        (inst?)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cont_d? const-decl "bool" ODE_continuous_def nil)
    (cont_lift formula-decl nil continuity_multivar mv_analysis)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (continuous? const-decl "bool" continuous_functions analysis)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices matrices)
    (sum_cont_fun formula-decl nil continuous_functions analysis)
    (continuous? const-decl "bool" continuous_functions analysis)
    (+ const-decl "[T -> real]" real_fun_ops reals)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (sum_fun_continuous application-judgement "continuous_fun"
     continuous_functions analysis)
    (scal_fun_continuous application-judgement "continuous_fun"
     continuous_functions analysis)
    (scal_cont_fun formula-decl nil continuous_functions analysis)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (Vector type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (real_times_real_is_real application-judgement "real" reals nil)
    (d skolem-const-decl "(closed_interval?)" linear_ode_1D nil)
    (af skolem-const-decl "{f: [(d) -> real] | continuous?[(d)](f)}"
     linear_ode_1D nil)
    (y1 skolem-const-decl "VectorN(1)" linear_ode_1D nil)
    (bf skolem-const-decl "{f: [(d) -> real] | continuous?[(d)](f)}"
     linear_ode_1D nil)
    (add def-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (od_ln const-decl "VectorN(1)" linear_ode_1D nil)
    (closed_interval? const-decl "bool" interval_def nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (lin_cont_d_hp_TCC1 0
  (lin_cont_d_hp_TCC1-1 nil 3867528905
   ("" (skeep) (("" (lemma "hp_ne") (("" (inst?) nil nil)) nil)) nil)
   ((hp_ne formula-decl nil interval_def nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil))
   nil
   (lin_cont_d_hp assuming
    "ODE_continuous_def[(interval_def.hp(linear_ode_1D.aa))].ODE_continuous_def"
    "non_empty: ASSUMPTION sets[real].nonempty?(ODE_continuous_def.d)")))
 (lin_cont_d_hp_TCC2 0
  (lin_cont_d_hp_TCC2-1 nil 3867528905 ("" (assuming-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (continuous? const-decl "bool" continuous_functions analysis)
    (continuous? const-decl "bool" continuous_functions analysis)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (hp const-decl "bool" interval_def nil)
    (connected? const-decl "bool" deriv_domain_def analysis))
   nil
   (lin_cont_d_hp assuming
    "ODE_continuous_def[(interval_def.hp(linear_ode_1D.aa))].ODE_continuous_def"
    "connected: ASSUMPTION deriv_domain_def[(ODE_continuous_def.d)].connected?")))
 (lin_cont_d_hp_TCC3 0
  (lin_cont_d_hp_TCC3-1 nil 3867528905
   ("" (skeep*) (("" (lemma "hp_noe") (("" (inst?) nil nil)) nil)) nil)
   ((hp_noe formula-decl nil interval_def nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (lin_cont_d_hp assuming
    "ODE_continuous_def[(interval_def.hp(linear_ode_1D.aa))].ODE_continuous_def"
    "not_one_element: ASSUMPTION deriv_domain_def[(ODE_continuous_def.d)].not_one_element?")))
 (lin_cont_d_hp 0
  (lin_cont_d_hp-1 nil 3867529028
   ("" (skeep*)
    (("" (expand "cont_d?" 1)
      (("" (skeep)
        (("" (lemma "cont_lift")
          (("" (inst -1 "hp(aa)" "_")
            (("" (assert)
              (("" (expand "od_ln" 1)
                ((""
                  (inst -1 "LAMBDA(t:(hp(aa))): af(t)*car(y1)+bf(t)")
                  (("" (flatten)
                    (("" (hide -2)
                      (("" (split -1)
                        (("1" (assert)
                          (("1"
                            (case "(LAMBDA (v: {vv: VectorN(1) | hp(aa)(car(vv))}):
                        (: af(car(v)) * car(y1) + bf(car(v)) :)) = (LAMBDA (x: {x: VectorN(1) | hp(aa)(car(x))}):
                      (: af(car(x)) * car(y1) :) + (: bf(car(x)) :))")
                            (("1" (assert) nil nil)
                             ("2" (hide 2)
                              (("2"
                                (decompose-equality 1)
                                (("1"
                                  (hide -1)
                                  (("1" (grind) nil nil))
                                  nil)
                                 ("2"
                                  (hide 2)
                                  (("2"
                                    (skeep)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (hide -1)
                                        (("2"
                                          (expand "+" 1)
                                          (("2"
                                            (expand "add" 1)
                                            (("2" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide 2)
                          (("2" (typepred "af" "bf")
                            (("2" (lemma "sum_cont_fun[(hp(aa))]")
                              (("2"
                                (inst -1 "car(y1)*af" "bf")
                                (("2"
                                  (split -1)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (hide -2 -3)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "*" -1)
                                          (("1"
                                            (expand "+" -1)
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide 2)
                                    (("2"
                                      (lemma "scal_cont_fun[(hp(aa))]")
                                      (("2"
                                        (inst?)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cont_d? const-decl "bool" ODE_continuous_def nil)
    (cont_lift formula-decl nil continuity_multivar mv_analysis)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (continuous? const-decl "bool" continuous_functions analysis)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices matrices)
    (sum_cont_fun formula-decl nil continuous_functions analysis)
    (+ const-decl "[T -> real]" real_fun_ops reals)
    (sum_fun_continuous application-judgement "continuous_fun"
     continuous_functions analysis)
    (scal_fun_continuous application-judgement "continuous_fun"
     continuous_functions analysis)
    (scal_cont_fun formula-decl nil continuous_functions analysis)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (add def-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (bf skolem-const-decl
     "{f: [(hp(aa)) -> real] | continuous?[(hp(aa))](f)}" linear_ode_1D
     nil)
    (y1 skolem-const-decl "VectorN(1)" linear_ode_1D nil)
    (af skolem-const-decl
     "{f: [(hp(aa)) -> real] | continuous?[(hp(aa))](f)}" linear_ode_1D
     nil)
    (aa skolem-const-decl "real" linear_ode_1D nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (Vector type-eq-decl nil matrices matrices)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (od_ln const-decl "VectorN(1)" linear_ode_1D nil)
    (hp const-decl "bool" interval_def nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (lin_unique_solution_TCC1 0
  (lin_unique_solution_TCC1-1 nil 3867528391
   ("" (assuming-tcc) nil nil) nil nil
   (lin_unique_solution assuming
    "r2v_continuous_extension[linear_ode_1D.d].r2v_continuous_extension"
    "closed_interval: ASSUMPTION interval_def.closed_interval?(r2v_continuous_extension.d)")))
 (lin_unique_solution_TCC2 0
  (lin_unique_solution_TCC2-1 nil 3867528391 ("" (subtype-tcc) nil nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (closed_interval? const-decl "bool" interval_def nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices matrices)
    (continuous? const-decl "bool" continuous_functions analysis)
    (r2v type-eq-decl nil r2v_def nil)
    (derivable? const-decl "bool" r2v_analysis nil)
    (r2v_n type-eq-decl nil r2v_def nil)
    (d!1 skolem-const-decl "(closed_interval?)" linear_ode_1D nil)
    (y0!1 skolem-const-decl "VectorN(1)" linear_ode_1D nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (< const-decl "bool" reals nil)
    (derivable? const-decl "bool" derivatives analysis)
    (derivable? const-decl "bool" derivatives_def analysis)
    (convergent? const-decl "bool" lim_of_functions analysis)
    (convergence const-decl "bool" lim_of_functions analysis)
    (convergence const-decl "bool" convergence_functions analysis)
    (NQ const-decl "real" derivatives_def analysis)
    (nth const-decl "[(d) -> real]" r2v_def nil)
    (adh const-decl "setof[real]" convergence_functions analysis)
    (fullset const-decl "set" sets nil)
    (continuous? const-decl "bool" continuous_functions analysis)
    (closed_interval? const-decl "bool" interval_def nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil))
   nil
   (lin_unique_solution subtype
    "r2v_continuous_extension[linear_ode_1D.d].d_b"
    "(list_adt[real].cons?)")))
 (lin_unique_solution_TCC3 0
  (lin_unique_solution_TCC3-1 nil 3867528391
   ("" (skeep*)
    (("" (assert)
      (("" (typepred "d_b[d]")
        (("" (assert)
          (("" (skeep)
            (("" (inst -5 "dd") (("" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (closed_interval? const-decl "bool" interval_def nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (d_b const-decl "{dd: list[real] |
   (length(dd) = 2 AND (d(car(dd)) AND d(car(cdr(dd))))) AND
    FORALL (x: real): (car(dd) <= x AND x <= car(cdr(dd))) IFF d(x)}"
     r2v_continuous_extension nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis))
   nil
   (lin_unique_solution subtype
    "list_adt[real].car(r2v_continuous_extension[linear_ode_1D.d].d_b)"
    "{aa: (linear_ode_1D.d) | FORALL (dd: (linear_ode_1D.d)): reals.<=(aa, dd)}")))
 (lin_unique_solution 0
  (lin_unique_solution-1 nil 3867528454
   ("" (skeep)
    (("" (lemma "unique_solution")
      (("" (inst?)
        (("" (lemma "lin_lip")
          (("" (lemma "lin_cont_d")
            (("" (inst?) (("" (inst?) (("" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((unique_solution formula-decl nil ODE_solution_existence_uniqueness
     nil)
    (lin_lip formula-decl nil linear_ode_1D nil)
    (lin_cont_d formula-decl nil linear_ode_1D nil)
    (d skolem-const-decl "(closed_interval?)" linear_ode_1D nil)
    (af skolem-const-decl "{f: [(d) -> real] | continuous?[(d)](f)}"
     linear_ode_1D nil)
    (bf skolem-const-decl "{f: [(d) -> real] | continuous?[(d)](f)}"
     linear_ode_1D nil)
    (od_ln const-decl "VectorN(1)" linear_ode_1D nil)
    (continuous? const-decl "bool" continuous_functions analysis)
    (cont_d? const-decl "bool" ODE_continuous_def nil)
    (Lip_d? const-decl "bool" ODE_Lipschitz_def nil)
    (od_f type-eq-decl nil ODE_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (closed_interval? const-decl "bool" interval_def nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis))
   shostak))
 (lin_unique_solution_hp_TCC1 0
  (lin_unique_solution_hp_TCC1-1 nil 3867528905
   ("" (subtype-tcc) nil nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices matrices)
    (continuous? const-decl "bool" continuous_functions analysis)
    (r2v type-eq-decl nil r2v_def nil)
    (derivable? const-decl "bool" r2v_analysis nil)
    (r2v_n type-eq-decl nil r2v_def nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (derivable? const-decl "bool" derivatives analysis)
    (derivable? const-decl "bool" derivatives_def analysis)
    (convergent? const-decl "bool" lim_of_functions analysis)
    (convergence const-decl "bool" lim_of_functions analysis)
    (convergence const-decl "bool" convergence_functions analysis)
    (NQ const-decl "real" derivatives_def analysis)
    (nth const-decl "[(d) -> real]" r2v_def nil)
    (adh const-decl "setof[real]" convergence_functions analysis)
    (fullset const-decl "set" sets nil)
    (continuous? const-decl "bool" continuous_functions analysis)
    (hp const-decl "bool" interval_def nil))
   nil
   (lin_unique_solution_hp subtype "linear_ode_1D.aa"
    "{aa1: (interval_def.hp(linear_ode_1D.aa)) | FORALL (dd: (interval_def.hp(linear_ode_1D.aa))): reals.<=(aa1, dd)}")))
 (lin_unique_solution_hp 0
  (lin_unique_solution_hp-1 nil 3867529325
   ("" (skeep*)
    (("" (lemma "sol_uniq_hp")
      (("" (inst?)
        (("1" (with-tccs (inst?)) nil nil)
         ("2" (lemma "lin_cont_d_hp")
          (("2" (inst?)
            (("2" (assert)
              (("2" (expand "Lip_hp?" 1)
                (("2" (skeep)
                  (("2" (hide 2)
                    (("2" (lemma "lin_lip")
                      (("2" (inst?)
                        (("1" (assert)
                          (("1" (expand "restrict" 1)
                            (("1" (typepred "af" "bf")
                              (("1"
                                (inst
                                 -3
                                 "LAMBDA(x:(closed_interval(aa,b))): af(x)"
                                 "_")
                                (("1"
                                  (inst
                                   -3
                                   "LAMBDA(x:(closed_interval(aa,b))): bf(x)")
                                  (("1"
                                    (hide -1 -2)
                                    (("1"
                                      (expand "od_ln")
                                      (("1" (propax) nil nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (assert)
                                    (("2"
                                      (hide 2)
                                      (("2"
                                        (hide -1 -3)
                                        (("2"
                                          (expand "continuous?")
                                          (("2"
                                            (skeep)
                                            (("2"
                                              (inst -1 "x0")
                                              (("1"
                                                (expand "continuous?")
                                                (("1"
                                                  (skeep)
                                                  (("1"
                                                    (inst -1 "epsilon")
                                                    (("1"
                                                      (skeep)
                                                      (("1"
                                                        (inst
                                                         1
                                                         "delta")
                                                        (("1"
                                                          (skeep)
                                                          (("1"
                                                            (inst
                                                             -2
                                                             "x_1")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand "hp")
                                                (("2"
                                                  (typepred "x0")
                                                  (("2"
                                                    (expand
                                                     "closed_interval"
                                                     -1)
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (hide 2)
                                    (("3"
                                      (skeep)
                                      (("3"
                                        (typepred "x")
                                        (("3"
                                          (expand "hp" 1)
                                          (("3"
                                            (expand
                                             "closed_interval"
                                             -1)
                                            (("3" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (hide 2)
                                  (("2"
                                    (hide -2 -3)
                                    (("2"
                                      (expand "continuous?")
                                      (("2"
                                        (skeep)
                                        (("2"
                                          (inst?)
                                          (("1"
                                            (expand "continuous?")
                                            (("1"
                                              (skeep)
                                              (("1"
                                                (inst -1 "epsilon")
                                                (("1"
                                                  (skeep)
                                                  (("1"
                                                    (inst 1 "delta")
                                                    (("1"
                                                      (skeep)
                                                      (("1"
                                                        (inst -2 "x_1")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (expand "hp" 1)
                                            (("2"
                                              (typepred "x0")
                                              (("2"
                                                (expand
                                                 "closed_interval"
                                                 -1)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (hide 2)
                                  (("3"
                                    (skeep)
                                    (("3"
                                      (typepred "x")
                                      (("3"
                                        (expand "closed_interval" -)
                                        (("3"
                                          (assert)
                                          (("3"
                                            (flatten)
                                            (("3"
                                              (expand "hp")
                                              (("3" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (lemma "ci_ci") (("2" (inst?) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((sol_uniq_hp formula-decl nil ODE_solution_existence_uniqueness
     nil)
    (lin_cont_d_hp formula-decl nil linear_ode_1D nil)
    (lin_lip formula-decl nil linear_ode_1D nil)
    (ci_ci formula-decl nil interval_def nil)
    (x0 skolem-const-decl "(closed_interval(aa, b))" linear_ode_1D nil)
    (od_ln const-decl "VectorN(1)" linear_ode_1D nil)
    (x0 skolem-const-decl "(closed_interval(aa, b))" linear_ode_1D nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (continuous? const-decl "bool" continuous_functions analysis)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (b skolem-const-decl "{bb: real | bb > aa}" linear_ode_1D nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (set type-eq-decl nil sets nil)
    (nonempty? const-decl "bool" sets nil)
    (connected? const-decl "bool" deriv_domain_def analysis)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (r2v type-eq-decl nil r2v_def nil)
    (derivable? const-decl "bool" r2v_analysis nil)
    (closed_interval? const-decl "bool" interval_def nil)
    (Lip_d? const-decl "bool" ODE_Lipschitz_def nil)
    (r2v_n type-eq-decl nil r2v_def nil)
    (<= const-decl "bool" reals nil)
    (ivt_s_unique? const-decl "bool" ODE_def nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (d_b const-decl "{dd: list[real] |
   (length(dd) = 2 AND (d(car(dd)) AND d(car(cdr(dd))))) AND
    FORALL (x: real): (car(dd) <= x AND x <= car(cdr(dd))) IFF d(x)}"
     r2v_continuous_extension nil)
    (ode_sol const-decl "{yy: r2v_n[d](n) |
   derivable?[d](yy) AND ivt_s_unique?[d](n, car(d_b[d]), f, y0)(yy)}"
     ODE_solution_existence_uniqueness nil)
    (< const-decl "bool" reals nil)
    (closed_interval? const-decl "bool" interval_def nil)
    (closed_interval const-decl "(closed_interval?(a, b))" interval_def
     nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (integer nonempty-type-from-decl nil integers nil)
    (ceiling const-decl "{i | x <= i & i < x + 1}" floor_ceil nil)
    (restrict const-decl "VectorN(n)" restrict_ode nil)
    (y0 skolem-const-decl "VectorN(1)" linear_ode_1D nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (hp const-decl "bool" interval_def nil)
    (aa skolem-const-decl "real" linear_ode_1D nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (VectorN type-eq-decl nil matrices matrices)
    (od_f type-eq-decl nil ODE_def nil)
    (cont_d? const-decl "bool" ODE_continuous_def nil)
    (continuous? const-decl "bool" continuous_functions analysis)
    (od_ln const-decl "VectorN(1)" linear_ode_1D nil)
    (af skolem-const-decl
     "{f: [(hp(aa)) -> real] | continuous?[(hp(aa))](f)}" linear_ode_1D
     nil)
    (bf skolem-const-decl
     "{f: [(hp(aa)) -> real] | continuous?[(hp(aa))](f)}" linear_ode_1D
     nil)
    (Lip_hp? const-decl "bool" ODE_solution_existence_uniqueness nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis))
   shostak))
 (lin_1D_unique_ci_TCC1 0
  (lin_1D_unique_ci_TCC1-1 nil 3867530226
   ("" (skeep)
    (("" (lemma "ci_deriv_domain") (("" (inst?) nil nil)) nil)) nil)
   ((ci_deriv_domain formula-decl nil interval_def nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (closed_interval? const-decl "bool" interval_def nil))
   nil
   (lin_1D_unique_ci assuming
    "analysis@derivatives[(linear_ode_1D.d)].derivatives"
    "deriv_domain: ASSUMPTION deriv_domain_def[T].deriv_domain?")))
 (lin_1D_unique_ci_TCC2 0
  (lin_1D_unique_ci_TCC2-1 nil 3867530411 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (closed_interval? const-decl "bool" interval_def nil)
    (continuous? const-decl "bool" continuous_functions analysis)
    (derivable? const-decl "bool" derivatives analysis)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (closed_interval? const-decl "bool" interval_def nil)
    (continuous? const-decl "bool" continuous_functions analysis)
    (fullset const-decl "set" sets nil)
    (adh const-decl "setof[real]" convergence_functions analysis)
    (NQ const-decl "real" derivatives_def analysis)
    (convergence const-decl "bool" convergence_functions analysis)
    (convergence const-decl "bool" lim_of_functions analysis)
    (convergent? const-decl "bool" lim_of_functions analysis)
    (derivable? const-decl "bool" derivatives_def analysis)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (< const-decl "bool" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   nil
   (lin_1D_unique_ci subtype
    "r2v_continuous_extension[linear_ode_1D.d].d_b"
    "(list_adt[real].cons?)")))
 (lin_1D_unique_ci_TCC3 0
  (lin_1D_unique_ci_TCC3-1 nil 3867530411 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (closed_interval? const-decl "bool" interval_def nil)
    (continuous? const-decl "bool" continuous_functions analysis)
    (derivable? const-decl "bool" derivatives analysis)
    (closed_interval? const-decl "bool" interval_def nil)
    (continuous? const-decl "bool" continuous_functions analysis)
    (fullset const-decl "set" sets nil)
    (adh const-decl "setof[real]" convergence_functions analysis)
    (NQ const-decl "real" derivatives_def analysis)
    (convergence const-decl "bool" convergence_functions analysis)
    (convergence const-decl "bool" lim_of_functions analysis)
    (convergent? const-decl "bool" lim_of_functions analysis)
    (derivable? const-decl "bool" derivatives_def analysis)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   nil
   (lin_1D_unique_ci subtype
    "list_adt[real].car(r2v_continuous_extension[linear_ode_1D.d].d_b)"
    "(linear_ode_1D.d)")))
 (lin_1D_unique_ci 0
  (lin_1D_unique_ci-1 nil 3867530264
   ("" (lemma "lin_unique_solution")
    (("" (skeep)
      (("" (inst?)
        (("" (inst -1 "(: y0 :)" "af" "bf")
          (("" (skeep)
            (("" (typepred "y")
              (("" (inst 1 "LAMBDA(t:(d)): car(y(t))")
                (("1" (assert)
                  (("1" (expand "ivt_s_unique?" -2)
                    (("1" (flatten)
                      (("1" (expand "ivt_s?" -2)
                        (("1" (assert)
                          (("1" (flatten)
                            (("1" (split 1)
                              (("1"
                                (expand "od_sol?" -2)
                                (("1"
                                  (with-tccs (decompose-equality 1))
                                  (("1"
                                    (with-tccs (decompose-equality -2))
                                    (("1"
                                      (inst -1 "x!1")
                                      (("1"
                                        (expand "od_fx" -1)
                                        (("1"
                                          (expand "od_ln" -1)
                                          (("1"
                                            (expand "deriv" -1)
                                            (("1"
                                              (lift-if -1)
                                              (("1"
                                                (split -1)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (typepred "y")
                                                      (("1"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (flatten)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (expand
                                                       "cons"
                                                       -1)
                                                      (("2"
                                                        (decompose-equality
                                                         -1)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (expand
                                                             "+"
                                                             -2)
                                                            (("2"
                                                              (expand
                                                               "add"
                                                               -2)
                                                              (("2"
                                                                (replace
                                                                 -2)
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (expand
                                                                     "car"
                                                                     2
                                                                     2)
                                                                    (("2"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (typepred "x!1")
                                        (("2"
                                          (typepred "d_b[d]")
                                          (("2"
                                            (inst -5 "x!1")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (assert)
                                (("2" (decompose-equality -3) nil nil))
                                nil)
                               ("3"
                                (skeep)
                                (("3"
                                  (typepred "f")
                                  (("3"
                                    (inst
                                     -7
                                     "Lambda(t:(d)): (: f(t) :)")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (split -7)
                                        (("1"
                                          (decompose-equality 1)
                                          (("1"
                                            (decompose-equality -1)
                                            (("1"
                                              (inst -1 "x!1")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (decompose-equality
                                                   -1)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (skeep)
                                            (("2"
                                              (assert)
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand "ivt_s?" 1)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (expand "od_sol?" 1)
                                              (("2"
                                                (decompose-equality 1)
                                                (("1"
                                                  (expand "od_fx" 1)
                                                  (("1"
                                                    (expand "od_ln" 1)
                                                    (("1"
                                                      (expand
                                                       "deriv"
                                                       1)
                                                      (("1"
                                                        (lift-if 1)
                                                        (("1"
                                                          (split 1)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (hide
                                                               -2
                                                               -3
                                                               -4
                                                               -5
                                                               -6
                                                               -7
                                                               1
                                                               2)
                                                              (("1"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (flatten)
                                                            (("2"
                                                              (expand
                                                               "cons"
                                                               2)
                                                              (("2"
                                                                (decompose-equality
                                                                 2)
                                                                (("1"
                                                                  (expand
                                                                   "car"
                                                                   1)
                                                                  (("1"
                                                                    (expand
                                                                     "+"
                                                                     1)
                                                                    (("1"
                                                                      (expand
                                                                       "add"
                                                                       1)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (decompose-equality
                                                                           -2)
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             "x!1")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (replace
                                                                                 -1
                                                                                 1
                                                                                 rl)
                                                                                (("1"
                                                                                  (case
                                                                                   "f = LAMBDA (x: (d)) -> real: f(x)")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil)
                                                                                   ("2"
                                                                                    (decompose-equality
                                                                                     1)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (typepred
                                                                             "d")
                                                                            (("2"
                                                                              (rewrite
                                                                               "ci_not_one_element")
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("3"
                                                                            (rewrite
                                                                             "ci_deriv_domain")
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (grind)
                                                                  nil
                                                                  nil)
                                                                 ("3"
                                                                  (split
                                                                   1)
                                                                  (("1"
                                                                    (inst
                                                                     1
                                                                     "1")
                                                                    (("1"
                                                                      (skeep)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("4"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (skeep)
                                                  (("2"
                                                    (hide -)
                                                    (("2"
                                                      (hide 2)
                                                      (("2"
                                                        (grind)
                                                        (("2"
                                                          (expand
                                                           "deriv"
                                                           1)
                                                          (("2"
                                                            (lift-if 1)
                                                            (("2"
                                                              (split 1)
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (reveal
                                                                   -)
                                                                  (("1"
                                                                    (expand
                                                                     "null?"
                                                                     -11)
                                                                    (("1"
                                                                      (inst
                                                                       -11
                                                                       "car(d_b[d])")
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (flatten)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (skeep)
                                                  (("3"
                                                    (split 1)
                                                    (("1"
                                                      (inst 1 "1")
                                                      (("1"
                                                        (skeep)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (expand
                                                       "derivable?"
                                                       1)
                                                      (("2"
                                                        (skeep)
                                                        (("2"
                                                          (typepred
                                                           "i")
                                                          (("2"
                                                            (expand
                                                             "length"
                                                             -1)
                                                            (("2"
                                                              (expand
                                                               "length"
                                                               -1)
                                                              (("2"
                                                                (expand
                                                                 "length"
                                                                 -1)
                                                                (("2"
                                                                  (expand
                                                                   "nth"
                                                                   1)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (expand
                                                                       "nth"
                                                                       1)
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (case
                                                                           "f = LAMBDA (x: (d)) -> real: f(x)")
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil)
                                                                           ("2"
                                                                            (decompose-equality
                                                                             1)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (case
                                       "f = LAMBDA (x: (d)) -> real: f(x)")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "derivable?" 1)
                                          (("1"
                                            (skeep)
                                            (("1"
                                              (typepred "i")
                                              (("1"
                                                (expand "length" -1)
                                                (("1"
                                                  (expand "length" -1)
                                                  (("1"
                                                    (expand
                                                     "length"
                                                     -1)
                                                    (("1"
                                                      (expand "nth" 1)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (expand
                                                           "nth"
                                                           1)
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (decompose-equality 1)
                                        nil
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "derivable?" -1)
                  (("2" (inst -1 "0")
                    (("1" (expand "nth" -1)
                      (("1" (expand "nth" -1) (("1" (propax) nil nil))
                        nil))
                      nil)
                     ("2" (grind) nil nil))
                    nil))
                  nil)
                 ("3" (skeep) (("3" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis)
    (length_singleton formula-decl nil more_list_props structures)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices matrices)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (continuous? const-decl "bool" continuous_functions analysis)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (r2v type-eq-decl nil r2v_def nil)
    (derivable? const-decl "bool" r2v_analysis nil)
    (r2v_n type-eq-decl nil r2v_def nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (d_b const-decl "{dd: list[real] |
   (length(dd) = 2 AND (d(car(dd)) AND d(car(cdr(dd))))) AND
    FORALL (x: real): (car(dd) <= x AND x <= car(cdr(dd))) IFF d(x)}"
     r2v_continuous_extension nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (deriv_domain? const-decl "bool" deriv_domain_def analysis)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (deriv_fun type-eq-decl nil derivatives analysis)
    (deriv const-decl "[T -> real]" derivatives analysis)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (x!1 skolem-const-decl "(d)" linear_ode_1D nil)
    (cons const-decl "r2v" r2v_def nil)
    (Vector type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (cons? const-decl "bool" r2v_def nil)
    (car const-decl "real" r2v_def nil)
    (cdr const-decl "r2v" r2v_def nil)
    (fullset const-decl "set" sets nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (adh const-decl "setof[real]" convergence_functions analysis)
    (nth const-decl "[(d) -> real]" r2v_def nil)
    (NQ const-decl "real" derivatives_def analysis)
    (convergence const-decl "bool" convergence_functions analysis)
    (convergence const-decl "bool" lim_of_functions analysis)
    (convergent? const-decl "bool" lim_of_functions analysis)
    (derivable? const-decl "bool" derivatives_def analysis)
    (null? const-decl "bool" r2v_def nil)
    (add def-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (deriv def-decl "{ff: r2v | length(ff) = length(f)}" r2v_analysis
     nil)
    (od_ln const-decl "VectorN(1)" linear_ode_1D nil)
    (od_fx const-decl "{ff: r2v_n(n) | length(ff) = n}" ODE_def nil)
    (length const-decl "nat" r2v_def nil)
    (od_f type-eq-decl nil ODE_def nil)
    (od_sol? const-decl "bool" ODE_def nil)
    (< const-decl "bool" reals nil) (nth def-decl "T" list_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (deriv const-decl "real" derivatives_def analysis)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (ci_not_one_element formula-decl nil interval_def nil)
    (ci_deriv_domain formula-decl nil interval_def nil)
    (list_cons_extensionality formula-decl nil list_adt nil)
    (bf skolem-const-decl "{f: [(d) -> real] | continuous?[(d)](f)}"
     linear_ode_1D nil)
    (x!1 skolem-const-decl "{xx: (d) | xx >= car(d_b[d])}"
     linear_ode_1D nil)
    (af skolem-const-decl "{f: [(d) -> real] | continuous?[(d)](f)}"
     linear_ode_1D nil)
    (f skolem-const-decl "{f: [(d) -> real] | derivable?[(d)](f)}"
     linear_ode_1D nil)
    (ivt_s? const-decl "bool" ODE_def nil)
    (ivt_s_unique? const-decl "bool" ODE_def nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (derivable? const-decl "bool" derivatives analysis)
    (y skolem-const-decl "{yy: r2v_n[d](1) | derivable?[d](yy)}"
     linear_ode_1D nil)
    (d skolem-const-decl "(closed_interval?)" linear_ode_1D nil)
    (closed_interval? const-decl "bool" interval_def nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (lin_unique_solution formula-decl nil linear_ode_1D nil))
   shostak))
 (lin_1D_unique_hp_TCC1 0
  (lin_1D_unique_hp_TCC1-1 nil 3867531611
   ("" (skeep) (("" (lemma "hp_dd") (("" (inst?) nil nil)) nil)) nil)
   ((hp_dd formula-decl nil interval_def nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil))
   nil
   (lin_1D_unique_hp assuming
    "analysis@derivatives[(interval_def.hp(linear_ode_1D.aa))].derivatives"
    "deriv_domain: ASSUMPTION deriv_domain_def[T].deriv_domain?")))
 (lin_1D_unique_hp_TCC2 0
  (lin_1D_unique_hp_TCC2-1 nil 3867531611 ("" (subtype-tcc) nil nil)
   ((hp const-decl "bool" interval_def nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   nil
   (lin_1D_unique_hp subtype "linear_ode_1D.aa"
    "(interval_def.hp(linear_ode_1D.aa))")))
 (lin_1D_unique_hp 0
  (lin_1D_unique_hp-1 nil 3867531663
   ("" (lemma "lin_unique_solution_hp")
    (("" (skeep)
      (("" (inst?)
        (("" (inst -1 "(: y0 :)" "af" "bf")
          (("" (skeep)
            (("" (typepred "y")
              (("" (inst 1 "LAMBDA(t:(hp(aa))): car(y(t))")
                (("1" (assert)
                  (("1" (expand "ivt_s_unique?" -2)
                    (("1" (flatten)
                      (("1" (expand "ivt_s?" -2)
                        (("1" (assert)
                          (("1" (flatten)
                            (("1" (split 1)
                              (("1"
                                (expand "od_sol?" -2)
                                (("1"
                                  (with-tccs (decompose-equality 1))
                                  (("1"
                                    (with-tccs (decompose-equality -2))
                                    (("1"
                                      (inst -1 "x!1")
                                      (("1"
                                        (expand "od_fx" -1)
                                        (("1"
                                          (expand "od_ln" -1)
                                          (("1"
                                            (expand "deriv" -1)
                                            (("1"
                                              (lift-if -1)
                                              (("1"
                                                (split -1)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (typepred "y")
                                                      (("1"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (flatten)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (expand
                                                       "cons"
                                                       -1)
                                                      (("2"
                                                        (decompose-equality
                                                         -1)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (expand
                                                             "+"
                                                             -2)
                                                            (("2"
                                                              (expand
                                                               "add"
                                                               -2)
                                                              (("2"
                                                                (replace
                                                                 -2)
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (expand
                                                                     "car"
                                                                     2
                                                                     2)
                                                                    (("2"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (typepred "x!1")
                                        (("2"
                                          (expand "hp" -1)
                                          (("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (assert)
                                (("2" (decompose-equality -3) nil nil))
                                nil)
                               ("3"
                                (skeep)
                                (("3"
                                  (typepred "f")
                                  (("3"
                                    (inst
                                     -7
                                     "Lambda(t:(hp(aa))): (: f(t) :)")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (split -7)
                                        (("1"
                                          (decompose-equality 1)
                                          (("1"
                                            (decompose-equality -1)
                                            (("1"
                                              (inst -1 "x!1")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (decompose-equality
                                                   -1)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (skeep)
                                            (("2"
                                              (assert)
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand "ivt_s?" 1)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (expand "od_sol?" 1)
                                              (("2"
                                                (decompose-equality 1)
                                                (("1"
                                                  (expand "od_fx" 1)
                                                  (("1"
                                                    (expand "od_ln" 1)
                                                    (("1"
                                                      (expand
                                                       "deriv"
                                                       1)
                                                      (("1"
                                                        (lift-if 1)
                                                        (("1"
                                                          (split 1)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (hide
                                                               -2
                                                               -3
                                                               -4
                                                               -5
                                                               -6
                                                               -7
                                                               1
                                                               2)
                                                              (("1"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (flatten)
                                                            (("2"
                                                              (expand
                                                               "cons"
                                                               2)
                                                              (("2"
                                                                (decompose-equality
                                                                 2)
                                                                (("1"
                                                                  (expand
                                                                   "car"
                                                                   1)
                                                                  (("1"
                                                                    (expand
                                                                     "+"
                                                                     1)
                                                                    (("1"
                                                                      (expand
                                                                       "add"
                                                                       1)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (decompose-equality
                                                                           -2)
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             "x!1")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (replace
                                                                                 -1
                                                                                 1
                                                                                 rl)
                                                                                (("1"
                                                                                  (case
                                                                                   "f = LAMBDA (x: (hp(aa))) -> real: f(x)")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil)
                                                                                   ("2"
                                                                                    (decompose-equality
                                                                                     1)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (lemma
                                                                             "hp_noe")
                                                                            (("2"
                                                                              (inst
                                                                               -1
                                                                               "aa")
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("3"
                                                                            (lemma
                                                                             "hp_dd")
                                                                            (("3"
                                                                              (inst
                                                                               -1
                                                                               "aa")
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (grind)
                                                                  nil
                                                                  nil)
                                                                 ("3"
                                                                  (split
                                                                   1)
                                                                  (("1"
                                                                    (inst
                                                                     1
                                                                     "1")
                                                                    (("1"
                                                                      (skeep)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("4"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (skeep)
                                                  (("2"
                                                    (hide -)
                                                    (("2"
                                                      (hide 2)
                                                      (("2"
                                                        (grind)
                                                        (("2"
                                                          (expand
                                                           "deriv"
                                                           1)
                                                          (("2"
                                                            (lift-if 1)
                                                            (("2"
                                                              (split 1)
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (reveal
                                                                   -)
                                                                  (("1"
                                                                    (expand
                                                                     "null?"
                                                                     -11)
                                                                    (("1"
                                                                      (inst
                                                                       -11
                                                                       "aa")
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (flatten)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (skeep)
                                                  (("3"
                                                    (split 1)
                                                    (("1"
                                                      (inst 1 "1")
                                                      (("1"
                                                        (skeep)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (expand
                                                       "derivable?"
                                                       1)
                                                      (("2"
                                                        (skeep)
                                                        (("2"
                                                          (typepred
                                                           "i")
                                                          (("2"
                                                            (expand
                                                             "length"
                                                             -1)
                                                            (("2"
                                                              (expand
                                                               "length"
                                                               -1)
                                                              (("2"
                                                                (expand
                                                                 "length"
                                                                 -1)
                                                                (("2"
                                                                  (expand
                                                                   "nth"
                                                                   1)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (expand
                                                                       "nth"
                                                                       1)
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (case
                                                                           "f = LAMBDA (x: (hp(aa))) -> real: f(x)")
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil)
                                                                           ("2"
                                                                            (decompose-equality
                                                                             1)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (case
                                       "f = LAMBDA (x: (hp(aa))) -> real: f(x)")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "derivable?" 1)
                                          (("1"
                                            (skeep)
                                            (("1"
                                              (typepred "i")
                                              (("1"
                                                (expand "length" -1)
                                                (("1"
                                                  (expand "length" -1)
                                                  (("1"
                                                    (expand
                                                     "length"
                                                     -1)
                                                    (("1"
                                                      (expand "nth" 1)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (expand
                                                           "nth"
                                                           1)
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (decompose-equality 1)
                                        nil
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "derivable?" -1)
                  (("2" (inst -1 "0")
                    (("1" (expand "nth" -1)
                      (("1" (expand "nth" -1) (("1" (propax) nil nil))
                        nil))
                      nil)
                     ("2" (grind) nil nil))
                    nil))
                  nil)
                 ("3" (skeep) (("3" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis)
    (length_singleton formula-decl nil more_list_props structures)
    (list type-decl nil list_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices matrices)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (hp const-decl "bool" interval_def nil)
    (continuous? const-decl "bool" continuous_functions analysis)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (r2v type-eq-decl nil r2v_def nil)
    (derivable? const-decl "bool" r2v_analysis nil)
    (r2v_n type-eq-decl nil r2v_def nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (deriv_domain? const-decl "bool" deriv_domain_def analysis)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (deriv_fun type-eq-decl nil derivatives analysis)
    (deriv const-decl "[T -> real]" derivatives analysis)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (x!1 skolem-const-decl "(hp(aa))" linear_ode_1D nil)
    (cons const-decl "r2v" r2v_def nil)
    (Vector type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (cons? const-decl "bool" r2v_def nil)
    (car const-decl "real" r2v_def nil)
    (cdr const-decl "r2v" r2v_def nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (fullset const-decl "set" sets nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (adh const-decl "setof[real]" convergence_functions analysis)
    (nth const-decl "[(d) -> real]" r2v_def nil)
    (NQ const-decl "real" derivatives_def analysis)
    (convergence const-decl "bool" convergence_functions analysis)
    (convergence const-decl "bool" lim_of_functions analysis)
    (convergent? const-decl "bool" lim_of_functions analysis)
    (derivable? const-decl "bool" derivatives_def analysis)
    (null? const-decl "bool" r2v_def nil)
    (add def-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (deriv def-decl "{ff: r2v | length(ff) = length(f)}" r2v_analysis
     nil)
    (od_ln const-decl "VectorN(1)" linear_ode_1D nil)
    (od_fx const-decl "{ff: r2v_n(n) | length(ff) = n}" ODE_def nil)
    (length const-decl "nat" r2v_def nil)
    (od_f type-eq-decl nil ODE_def nil)
    (od_sol? const-decl "bool" ODE_def nil)
    (< const-decl "bool" reals nil) (nth def-decl "T" list_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (deriv const-decl "real" derivatives_def analysis)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (hp_noe formula-decl nil interval_def nil)
    (hp_dd formula-decl nil interval_def nil)
    (list_cons_extensionality formula-decl nil list_adt nil)
    (bf skolem-const-decl
     "{f: [(hp(aa)) -> real] | continuous?[(hp(aa))](f)}" linear_ode_1D
     nil)
    (x!1 skolem-const-decl "{xx: (hp(aa)) | xx >= aa}" linear_ode_1D
     nil)
    (af skolem-const-decl
     "{f: [(hp(aa)) -> real] | continuous?[(hp(aa))](f)}" linear_ode_1D
     nil)
    (f skolem-const-decl
     "{f: [(hp(aa)) -> real] | derivable?[(hp(aa))](f)}" linear_ode_1D
     nil)
    (ivt_s? const-decl "bool" ODE_def nil)
    (ivt_s_unique? const-decl "bool" ODE_def nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (derivable? const-decl "bool" derivatives analysis)
    (y skolem-const-decl
     "{yy: r2v_n[hp(aa)](1) | derivable?[hp(aa)](yy)}" linear_ode_1D
     nil)
    (aa skolem-const-decl "real" linear_ode_1D nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (lin_unique_solution_hp formula-decl nil linear_ode_1D nil))
   shostak))
 (lin_1D_unique_hp_ci_TCC1 0
  (lin_1D_unique_hp_ci_TCC1-1 nil 3867611246 ("" (subtype-tcc) nil nil)
   nil nil
   (lin_1D_unique_hp_ci subtype "linear_ode_1D.b"
    "{b: reals.real | reals.<(linear_ode_1D.aa, b)}")))
 (lin_1D_unique_hp_ci_TCC2 0
  (lin_1D_unique_hp_ci_TCC2-1 nil 3867611246
   ("" (skeep)
    (("" (rewrite "ci_deriv_domain")
      (("" (typepred "d")
        (("" (lemma "hp_dd")
          (("" (inst -1 "aa")
            (("" (assert)
              (("" (split -2)
                (("1" (assert)
                  (("1" (replace -1)
                    (("1" (hide 1)
                      (("1" (expand "deriv_domain?")
                        (("1" (skeep)
                          (("1" (inst -2 "e!1" "x")
                            (("1" (skeep) (("1" (inst 1 "y") nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert)
                  (("2" (skeep)
                    (("2" (expand "closed_interval?" 1)
                      (("2" (inst 1 "aa" "b")
                        (("2" (expand "closed_interval?")
                          (("2" (expand "closed_interval")
                            (("2" (skeep)
                              (("2"
                                (replace -1)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ci_deriv_domain formula-decl nil interval_def nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (closed_interval? const-decl "bool" interval_def nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (hp const-decl "bool" interval_def nil)
    (> const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (closed_interval? const-decl "bool" interval_def nil)
    (closed_interval const-decl "(closed_interval?(a, b))" interval_def
     nil)
    (hp_dd formula-decl nil interval_def nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (/= const-decl "boolean" notequal nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (deriv_domain? const-decl "bool" deriv_domain_def analysis)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil))
   nil
   (lin_1D_unique_hp_ci assuming
    "analysis@derivatives[(linear_ode_1D.d)].derivatives"
    "deriv_domain: ASSUMPTION deriv_domain_def[T].deriv_domain?")))
 (lin_1D_unique_hp_ci_TCC3 0
  (lin_1D_unique_hp_ci_TCC3-1 nil 3867611246
   ("" (skeep)
    (("" (typepred "d")
      (("" (split -1)
        (("1" (expand "not_one_element?")
          (("1" (skeep)
            (("1" (inst 1 "x+1")
              (("1" (assert) nil nil)
               ("2" (typepred "x") (("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil)
         ("2" (skeep)
          (("2" (lemma "ci_not_one_element")
            (("2" (inst?)
              (("2" (hide 2)
                (("2" (expand "closed_interval?")
                  (("2" (expand "closed_interval")
                    (("2" (inst 1 "aa" "b")
                      (("2" (replace -1) (("2" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((closed_interval const-decl "(closed_interval?(a, b))" interval_def
     nil)
    (closed_interval? const-decl "bool" interval_def nil)
    (< const-decl "bool" reals nil) (> const-decl "bool" reals nil)
    (hp const-decl "bool" interval_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (closed_interval? const-decl "bool" interval_def nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (ci_not_one_element formula-decl nil interval_def nil)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (x skolem-const-decl "(d)" linear_ode_1D nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (d skolem-const-decl "{d: [real -> bool] |
   d = hp(aa) OR EXISTS (b: real | b > aa): d = closed_interval(aa, b)}"
       linear_ode_1D nil)
    (aa skolem-const-decl "real" linear_ode_1D nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil
   (lin_1D_unique_hp_ci assuming
    "analysis@derivatives[(linear_ode_1D.d)].derivatives"
    "not_one_element: ASSUMPTION deriv_domain_def[T].not_one_element?")))
 (lin_1D_unique_hp_ci_TCC4 0
  (lin_1D_unique_hp_ci_TCC4-1 nil 3867611246 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (hp const-decl "bool" interval_def nil)
    (> const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (closed_interval? const-decl "bool" interval_def nil)
    (closed_interval const-decl "(closed_interval?(a, b))" interval_def
     nil)
    (continuous? const-decl "bool" continuous_functions analysis)
    (derivable? const-decl "bool" derivatives analysis)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (continuous? const-decl "bool" continuous_functions analysis)
    (fullset const-decl "set" sets nil)
    (adh const-decl "setof[real]" convergence_functions analysis)
    (NQ const-decl "real" derivatives_def analysis)
    (convergence const-decl "bool" convergence_functions analysis)
    (convergence const-decl "bool" lim_of_functions analysis)
    (convergent? const-decl "bool" lim_of_functions analysis)
    (derivable? const-decl "bool" derivatives_def analysis)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   nil
   (lin_1D_unique_hp_ci subtype "linear_ode_1D.aa"
    "(linear_ode_1D.d)")))
 (lin_1D_unique_hp_ci_TCC5 0
  (lin_1D_unique_hp_ci_TCC5-1 nil 3867611246 ("" (subtype-tcc) nil nil)
   ((real_times_real_is_real application-judgement "real" reals nil))
   nil
   (lin_1D_unique_hp_ci subtype "linear_ode_1D.b"
    "{b: reals.real | reals.<(linear_ode_1D.aa, b)}")))
 (lin_1D_unique_hp_ci_TCC6 0
  (lin_1D_unique_hp_ci_TCC9-1 nil 3867611246 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (hp const-decl "bool" interval_def nil)
    (> const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (closed_interval? const-decl "bool" interval_def nil)
    (closed_interval const-decl "(closed_interval?(a, b))" interval_def
     nil)
    (continuous? const-decl "bool" continuous_functions analysis)
    (derivable? const-decl "bool" derivatives analysis)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (continuous? const-decl "bool" continuous_functions analysis)
    (fullset const-decl "set" sets nil)
    (adh const-decl "setof[real]" convergence_functions analysis)
    (NQ const-decl "real" derivatives_def analysis)
    (convergence const-decl "bool" convergence_functions analysis)
    (convergence const-decl "bool" lim_of_functions analysis)
    (convergent? const-decl "bool" lim_of_functions analysis)
    (derivable? const-decl "bool" derivatives_def analysis)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   nil
   (lin_1D_unique_hp_ci subtype "linear_ode_1D.t"
    "(linear_ode_1D.d)")))
 (lin_1D_unique_hp_ci_TCC7 0
  (lin_1D_unique_hp_ci_TCC7-1 nil 3867611246
   ("" (skeep)
    (("" (skeep)
      (("" (hide -1 -2)
        (("" (typepred "dd")
          (("" (split -1)
            (("1" (hide -2)
              (("1" (lemma "hp_dd")
                (("1" (inst -1 "aa")
                  (("1" (expand "deriv_domain?")
                    (("1" (skeep)
                      (("1" (inst -1 "e!1" "x")
                        (("1" (skeep)
                          (("1" (inst 1 "y!1") (("1" (assert) nil nil))
                            nil))
                          nil)
                         ("2" (typepred "x")
                          (("2" (hide 2) (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skeep)
              (("2" (lemma "ci_deriv_domain")
                (("2" (inst?)
                  (("2" (hide 2 -2)
                    (("2" (lemma "ci_ci")
                      (("2" (inst?) (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (closed_interval const-decl "(closed_interval?(a, b))" interval_def
     nil)
    (closed_interval? const-decl "bool" interval_def nil)
    (< const-decl "bool" reals nil) (> const-decl "bool" reals nil)
    (hp const-decl "bool" interval_def nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (closed_interval? const-decl "bool" interval_def nil)
    (ci_ci formula-decl nil interval_def nil)
    (ci_deriv_domain formula-decl nil interval_def nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (y!1 skolem-const-decl "{u: nzreal | hp(aa)(u + x)}" linear_ode_1D
     nil)
    (/= const-decl "boolean" notequal nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (aa skolem-const-decl "real" linear_ode_1D nil)
    (d skolem-const-decl "{d: [real -> bool] |
   d = hp(aa) OR EXISTS (b: real | b > aa): d = closed_interval(aa, b)}"
       linear_ode_1D nil)
    (dd skolem-const-decl "{dd: [real -> bool] |
   (dd = hp(aa) OR EXISTS (b: real | b > aa): dd = closed_interval(aa, b))
    AND FORALL (x: real): dd(x) IMPLIES d(x)}" linear_ode_1D nil)
    (x skolem-const-decl "(dd)" linear_ode_1D nil)
    (deriv_domain? const-decl "bool" deriv_domain_def analysis)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (hp_dd formula-decl nil interval_def nil))
   nil
   (lin_1D_unique_hp_ci assuming
    "analysis@derivatives[(linear_ode_1D.dd)].derivatives"
    "deriv_domain: ASSUMPTION deriv_domain_def[T].deriv_domain?")))
 (lin_1D_unique_hp_ci_TCC8 0
  (lin_1D_unique_hp_ci_TCC8-1 nil 3867611246
   ("" (skeep)
    (("" (skeep)
      (("" (typepred "dd")
        (("" (split -1)
          (("1" (hide -2 -3 -4)
            (("1" (expand "not_one_element?")
              (("1" (skeep)
                (("1" (inst 1 "x+1")
                  (("1" (assert) nil nil)
                   ("2" (grind)
                    (("2" (typepred "x") (("2" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (lemma "ci_not_one_element")
            (("2" (inst?)
              (("2" (lemma "ci_ci")
                (("2" (inst?)
                  (("2" (skeep)
                    (("2" (inst -1 "b") (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((not_one_element? const-decl "bool" deriv_domain_def analysis)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (x skolem-const-decl "(dd)" linear_ode_1D nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (dd skolem-const-decl "{dd: [real -> bool] |
   (dd = hp(aa) OR EXISTS (b: real | b > aa): dd = closed_interval(aa, b))
    AND FORALL (x: real): dd(x) IMPLIES d(x)}" linear_ode_1D nil)
    (d skolem-const-decl "{d: [real -> bool] |
   d = hp(aa) OR EXISTS (b: real | b > aa): d = closed_interval(aa, b)}"
       linear_ode_1D nil)
    (aa skolem-const-decl "real" linear_ode_1D nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (closed_interval? const-decl "bool" interval_def nil)
    (ci_ci formula-decl nil interval_def nil)
    (ci_not_one_element formula-decl nil interval_def nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (hp const-decl "bool" interval_def nil)
    (> const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (closed_interval? const-decl "bool" interval_def nil)
    (closed_interval const-decl "(closed_interval?(a, b))" interval_def
     nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil))
   nil
   (lin_1D_unique_hp_ci assuming
    "analysis@derivatives[(linear_ode_1D.dd)].derivatives"
    "not_one_element: ASSUMPTION deriv_domain_def[T].not_one_element?")))
 (lin_1D_unique_hp_ci_TCC9 0
  (lin_1D_unique_hp_ci_TCC10-1 nil 3867611246
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (hp const-decl "bool" interval_def nil)
    (> const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (closed_interval? const-decl "bool" interval_def nil)
    (closed_interval const-decl "(closed_interval?(a, b))" interval_def
     nil)
    (continuous? const-decl "bool" continuous_functions analysis)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (continuous? const-decl "bool" continuous_functions analysis)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (fullset const-decl "set" sets nil)
    (adh const-decl "setof[real]" convergence_functions analysis)
    (NQ const-decl "real" derivatives_def analysis)
    (convergence const-decl "bool" convergence_functions analysis)
    (convergence const-decl "bool" lim_of_functions analysis)
    (convergent? const-decl "bool" lim_of_functions analysis)
    (derivable? const-decl "bool" derivatives_def analysis)
    (derivable? const-decl "bool" derivatives analysis)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil))
   nil
   (lin_1D_unique_hp_ci subtype "linear_ode_1D.aa"
    "(linear_ode_1D.dd)")))
 (lin_1D_unique_hp_ci 0
  (lin_1D_unique_hp_ci-1 nil 3867616005
   ("" (skeep*)
    (("" (typepred "d")
      (("" (split -1)
        (("1" (lemma "lin_1D_unique_hp")
          (("1" (inst?)
            (("1" (inst -1 "y0" "af" "bf")
              (("1" (skeep)
                (("1" (inst 1 "y")
                  (("1" (assert)
                    (("1" (split 1)
                      (("1" (assert)
                        (("1" (decompose-equality 1)
                          (("1" (decompose-equality -1)
                            (("1" (inst -1 "x!1")
                              (("1"
                                (assert)
                                (("1"
                                  (lemma
                                   "deriv_subtype_dd[(hp(aa)),(d)]")
                                  (("1"
                                    (inst -1 "y")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (split -1)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (decompose-equality -1)
                                            (("1"
                                              (inst -1 "x!1")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand
                                                   "restrict"
                                                   -1)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (case
                                                       "(LAMBDA (s: (d)): y(s)) = y")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (decompose-equality
                                                         1)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide -1 -2 -3)
                                          (("2"
                                            (lemma "hp_dd")
                                            (("2"
                                              (inst -1 "aa")
                                              (("2"
                                                (expand
                                                 "deriv_domain?")
                                                (("2"
                                                  (hide 2)
                                                  (("2"
                                                    (skeep)
                                                    (("2"
                                                      (inst
                                                       -1
                                                       "e!1"
                                                       "x")
                                                      (("2"
                                                        (skeep)
                                                        (("2"
                                                          (inst
                                                           1
                                                           "y!1")
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (lemma "hp_noe")
                                          (("3"
                                            (hide -2 -3 -4 2)
                                            (("3"
                                              (inst -1 "aa")
                                              (("3"
                                                (expand
                                                 "not_one_element?")
                                                (("3"
                                                  (skeep)
                                                  (("3"
                                                    (inst -1 "x")
                                                    (("3"
                                                      (skeep)
                                                      (("3"
                                                        (inst 2 "y!1")
                                                        (("3"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (lemma "hp_noe")
                                    (("2" (inst -1 "aa") nil nil))
                                    nil)
                                   ("3"
                                    (lemma "hp_dd")
                                    (("3" (inst -1 "aa") nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (lemma "hp_noe")
                              (("2" (inst -1 "aa") nil nil)) nil)
                             ("3" (lemma "hp_dd")
                              (("3" (inst -1 "aa") nil nil)) nil))
                            nil))
                          nil))
                        nil)
                       ("2" (skeep)
                        (("2"
                          (case "not_one_element?[(dd)] AND deriv_domain?[(dd)]")
                          (("1"
                            (case "not_one_element?[(hp(aa))] AND deriv_domain?[(hp(aa))]")
                            (("1" (typepred "y")
                              (("1"
                                (lemma
                                 "derivable_subtype[(hp(aa)),(dd)]")
                                (("1"
                                  (inst?)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (split -1)
                                      (("1"
                                        (expand "restrict")
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (lemma
                                               "deriv_subtype_dd[(hp(aa)),(dd)]")
                                              (("1"
                                                (inst?)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand
                                                     "restrict"
                                                     -1)
                                                    (("1"
                                                      (replace -1)
                                                      (("1"
                                                        (replace -8 1)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (case
                                                             "dd = hp(aa)")
                                                            (("1"
                                                              (lemma
                                                               "lin_1D_unique_hp")
                                                              (("1"
                                                                (inst
                                                                 -1
                                                                 "aa"
                                                                 "y0"
                                                                 "LAMBDA(t:(dd)): af(t)"
                                                                 "LAMBDA(t:(dd)): bf(t)")
                                                                (("1"
                                                                  (skeep
                                                                   1)
                                                                  (("1"
                                                                    (skeep
                                                                     -1)
                                                                    (("1"
                                                                      (inst-cp
                                                                       -3
                                                                       "f")
                                                                      (("1"
                                                                        (inst
                                                                         -3
                                                                         "(LAMBDA (t: (dd)): y(t))")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (split
                                                                             -4)
                                                                            (("1"
                                                                              (split
                                                                               -4)
                                                                              (("1"
                                                                                (replace
                                                                                 -1)
                                                                                (("1"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (hide
                                                                                 -16)
                                                                                (("2"
                                                                                  (lemma
                                                                                   "deriv_subtype_dd[(hp(aa)),(dd)]")
                                                                                  (("2"
                                                                                    (inst?)
                                                                                    (("2"
                                                                                      (split
                                                                                       -1)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "restrict"
                                                                                         -1)
                                                                                        (("1"
                                                                                          (replace
                                                                                           -1)
                                                                                          (("1"
                                                                                            (replace
                                                                                             -14
                                                                                             -1)
                                                                                            (("1"
                                                                                              (decompose-equality
                                                                                               1)
                                                                                              (("1"
                                                                                                (decompose-equality
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -1
                                                                                                   "x!1")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (replace
                                                                                                       -1
                                                                                                       1
                                                                                                       rl)
                                                                                                      (("1"
                                                                                                        (case
                                                                                                         "(LAMBDA (t: (dd)): y(t)) = (LAMBDA (s: (dd)): y(s))")
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "deriv"
                                                                                                           1)
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (replace
                                                                                                               -1)
                                                                                                              (("1"
                                                                                                                (lemma
                                                                                                                 "deriv_subtype_dd[(hp(aa)),(dd)]")
                                                                                                                (("1"
                                                                                                                  (inst
                                                                                                                   -1
                                                                                                                   "y")
                                                                                                                  (("1"
                                                                                                                    (split
                                                                                                                     -1)
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "restrict"
                                                                                                                       -1)
                                                                                                                      (("1"
                                                                                                                        (decompose-equality
                                                                                                                         -1)
                                                                                                                        (("1"
                                                                                                                          (inst
                                                                                                                           -1
                                                                                                                           "x!1")
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            (("1"
                                                                                                                              (replace
                                                                                                                               -1)
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 "deriv"
                                                                                                                                 -1)
                                                                                                                                (("1"
                                                                                                                                  (assert)
                                                                                                                                  (("1"
                                                                                                                                    (replace
                                                                                                                                     -1
                                                                                                                                     1)
                                                                                                                                    (("1"
                                                                                                                                      (case
                                                                                                                                       "y = (LAMBDA (s: (dd)): y(s))")
                                                                                                                                      (("1"
                                                                                                                                        (assert)
                                                                                                                                        nil
                                                                                                                                        nil)
                                                                                                                                       ("2"
                                                                                                                                        (decompose-equality
                                                                                                                                         1)
                                                                                                                                        (("2"
                                                                                                                                          (skeep)
                                                                                                                                          (("2"
                                                                                                                                            (replace
                                                                                                                                             -6)
                                                                                                                                            (("2"
                                                                                                                                              (assert)
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil)
                                                                                                                                       ("3"
                                                                                                                                        (skeep)
                                                                                                                                        (("3"
                                                                                                                                          (replace
                                                                                                                                           -6)
                                                                                                                                          (("3"
                                                                                                                                            (assert)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (propax)
                                                                                                                      nil
                                                                                                                      nil)
                                                                                                                     ("3"
                                                                                                                      (propax)
                                                                                                                      nil
                                                                                                                      nil)
                                                                                                                     ("4"
                                                                                                                      (propax)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (propax)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (case
                                                                                                 "(LAMBDA (t: (dd)): y(t)) = y")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (decompose-equality
                                                                                                   1)
                                                                                                  nil
                                                                                                  nil)
                                                                                                 ("3"
                                                                                                  (skeep)
                                                                                                  (("3"
                                                                                                    (replace
                                                                                                     -5)
                                                                                                    (("3"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("3"
                                                                                                (skeep)
                                                                                                (("3"
                                                                                                  (replace
                                                                                                   -5)
                                                                                                  (("3"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil)
                                                                                       ("3"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil)
                                                                                       ("4"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (lemma
                                                                               "deriv_subtype_dd[(hp(aa)),(dd)]")
                                                                              (("2"
                                                                                (inst
                                                                                 -1
                                                                                 "f")
                                                                                (("2"
                                                                                  (split
                                                                                   -1)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "restrict"
                                                                                     -1)
                                                                                    (("1"
                                                                                      (decompose-equality
                                                                                       1)
                                                                                      (("1"
                                                                                        (decompose-equality
                                                                                         -1)
                                                                                        (("1"
                                                                                          (inst
                                                                                           -1
                                                                                           "x!1")
                                                                                          (("1"
                                                                                            (replace
                                                                                             -1
                                                                                             1
                                                                                             rl)
                                                                                            (("1"
                                                                                              (decompose-equality
                                                                                               -13)
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -1
                                                                                                 "x!1")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (case
                                                                                                     "(LAMBDA (s: (dd)): f(s)) = f")
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (decompose-equality
                                                                                                       1)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (typepred
                                                                                           "f")
                                                                                          (("2"
                                                                                            (case
                                                                                             "f = (LAMBDA (s: (dd)): f(s))")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil)
                                                                                             ("2"
                                                                                              (decompose-equality
                                                                                               1)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("3"
                                                                                          (typepred
                                                                                           "f")
                                                                                          (("3"
                                                                                            (case
                                                                                             "f = (LAMBDA (s: (dd)): f(s))")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil)
                                                                                             ("2"
                                                                                              (decompose-equality
                                                                                               1)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (hide
                                                                                     -1
                                                                                     -2
                                                                                     -3)
                                                                                    (("2"
                                                                                      (hide
                                                                                       -13)
                                                                                      (("2"
                                                                                        (typepred
                                                                                         "f")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "derivable?")
                                                                                          (("2"
                                                                                            (skeep)
                                                                                            (("2"
                                                                                              (inst
                                                                                               -1
                                                                                               "x")
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "derivable?")
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "convergent?")
                                                                                                  (("2"
                                                                                                    (skeep)
                                                                                                    (("2"
                                                                                                      (inst
                                                                                                       1
                                                                                                       "l")
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "convergence")
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "convergence")
                                                                                                          (("2"
                                                                                                            (flatten)
                                                                                                            (("2"
                                                                                                              (hide
                                                                                                               -5
                                                                                                               -6)
                                                                                                              (("2"
                                                                                                                (split
                                                                                                                 1)
                                                                                                                (("1"
                                                                                                                  (hide
                                                                                                                   -2)
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "adh")
                                                                                                                    (("1"
                                                                                                                      (skeep)
                                                                                                                      (("1"
                                                                                                                        (inst
                                                                                                                         -1
                                                                                                                         "e!1")
                                                                                                                        (("1"
                                                                                                                          (skeep)
                                                                                                                          (("1"
                                                                                                                            (inst
                                                                                                                             1
                                                                                                                             "x2")
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              nil
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (typepred
                                                                                                                               "x2")
                                                                                                                              (("2"
                                                                                                                                (expand
                                                                                                                                 "A")
                                                                                                                                (("2"
                                                                                                                                  (replace
                                                                                                                                   -5)
                                                                                                                                  (("2"
                                                                                                                                    (propax)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (skeep)
                                                                                                                  (("2"
                                                                                                                    (inst
                                                                                                                     -2
                                                                                                                     "epsilon")
                                                                                                                    (("2"
                                                                                                                      (skeep)
                                                                                                                      (("2"
                                                                                                                        (inst
                                                                                                                         1
                                                                                                                         "delta")
                                                                                                                        (("2"
                                                                                                                          (skeep)
                                                                                                                          (("2"
                                                                                                                            (inst
                                                                                                                             -4
                                                                                                                             "x2")
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 "NQ")
                                                                                                                                (("1"
                                                                                                                                  (propax)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (typepred
                                                                                                                               "x2")
                                                                                                                              (("2"
                                                                                                                                (expand
                                                                                                                                 "A")
                                                                                                                                (("2"
                                                                                                                                  (assert)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("3"
                                                                                    (propax)
                                                                                    nil
                                                                                    nil)
                                                                                   ("4"
                                                                                    (propax)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (case
                                                                           "y = (LAMBDA (t: (dd)): y(t))")
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil)
                                                                           ("2"
                                                                            (decompose-equality
                                                                             1)
                                                                            (("2"
                                                                              (skeep)
                                                                              (("2"
                                                                                (replace
                                                                                 -4)
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("3"
                                                                            (skeep)
                                                                            (("3"
                                                                              (replace
                                                                               -4
                                                                               1)
                                                                              (("3"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("3"
                                                                          (skeep)
                                                                          (("3"
                                                                            (replace
                                                                             -4)
                                                                            (("3"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("4"
                                                                          (skeep)
                                                                          (("4"
                                                                            (typepred
                                                                             "t")
                                                                            (("4"
                                                                              (replace
                                                                               -5)
                                                                              (("4"
                                                                                (propax)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (split
                                                                           1)
                                                                          (("1"
                                                                            (skeep)
                                                                            (("1"
                                                                              (replace
                                                                               -3)
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (typepred
                                                                             "f")
                                                                            (("2"
                                                                              (hide
                                                                               -16)
                                                                              (("2"
                                                                                (hide
                                                                                 -6
                                                                                 -7)
                                                                                (("2"
                                                                                  (hide
                                                                                   -2)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "derivable?")
                                                                                    (("2"
                                                                                      (skeep)
                                                                                      (("2"
                                                                                        (inst
                                                                                         -1
                                                                                         "x")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "derivable?")
                                                                                          (("2"
                                                                                            (expand
                                                                                             "convergent?")
                                                                                            (("2"
                                                                                              (skeep)
                                                                                              (("2"
                                                                                                (inst
                                                                                                 1
                                                                                                 "l")
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "convergence")
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "convergence")
                                                                                                    (("2"
                                                                                                      (flatten)
                                                                                                      (("2"
                                                                                                        (split
                                                                                                         1)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "adh")
                                                                                                          (("1"
                                                                                                            (skeep)
                                                                                                            (("1"
                                                                                                              (inst
                                                                                                               -1
                                                                                                               "e!1")
                                                                                                              (("1"
                                                                                                                (skeep)
                                                                                                                (("1"
                                                                                                                  (inst
                                                                                                                   1
                                                                                                                   "x2")
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (typepred
                                                                                                                     "x2")
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       "A")
                                                                                                                      (("2"
                                                                                                                        (replace
                                                                                                                         -7)
                                                                                                                        (("2"
                                                                                                                          (propax)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (assert)
                                                                                                          (("2"
                                                                                                            (skeep)
                                                                                                            (("2"
                                                                                                              (inst
                                                                                                               -2
                                                                                                               "epsilon")
                                                                                                              (("2"
                                                                                                                (skeep)
                                                                                                                (("2"
                                                                                                                  (inst
                                                                                                                   1
                                                                                                                   "delta")
                                                                                                                  (("2"
                                                                                                                    (skeep)
                                                                                                                    (("2"
                                                                                                                      (inst
                                                                                                                       -4
                                                                                                                       "x2")
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           "NQ")
                                                                                                                          (("1"
                                                                                                                            (propax)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (typepred
                                                                                                                         "x2")
                                                                                                                        (("2"
                                                                                                                          (expand
                                                                                                                           "A")
                                                                                                                          (("2"
                                                                                                                            (replace
                                                                                                                             -7)
                                                                                                                            (("2"
                                                                                                                              (propax)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (hide
                                                                     -2
                                                                     -11)
                                                                    (("2"
                                                                      (typepred
                                                                       "bf")
                                                                      (("2"
                                                                        (expand
                                                                         "continuous?")
                                                                        (("2"
                                                                          (skeep)
                                                                          (("2"
                                                                            (inst
                                                                             -1
                                                                             "x0")
                                                                            (("2"
                                                                              (expand
                                                                               "continuous?")
                                                                              (("2"
                                                                                (skeep)
                                                                                (("2"
                                                                                  (inst
                                                                                   -1
                                                                                   "epsilon")
                                                                                  (("2"
                                                                                    (hide
                                                                                     2)
                                                                                    (("2"
                                                                                      (skeep)
                                                                                      (("2"
                                                                                        (inst
                                                                                         1
                                                                                         "delta")
                                                                                        (("2"
                                                                                          (skeep)
                                                                                          (("2"
                                                                                            (inst
                                                                                             -1
                                                                                             "x")
                                                                                            (("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("3"
                                                                  (typepred
                                                                   "af")
                                                                  (("3"
                                                                    (hide
                                                                     2)
                                                                    (("3"
                                                                      (expand
                                                                       "continuous?")
                                                                      (("3"
                                                                        (skeep)
                                                                        (("3"
                                                                          (inst
                                                                           -1
                                                                           "x0")
                                                                          (("3"
                                                                            (expand
                                                                             "continuous?")
                                                                            (("3"
                                                                              (skeep)
                                                                              (("3"
                                                                                (inst
                                                                                 -1
                                                                                 "epsilon")
                                                                                (("3"
                                                                                  (skeep)
                                                                                  (("3"
                                                                                    (inst
                                                                                     1
                                                                                     "delta")
                                                                                    (("3"
                                                                                      (skeep)
                                                                                      (("3"
                                                                                        (inst
                                                                                         -1
                                                                                         "x")
                                                                                        (("3"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("4"
                                                                  (hide
                                                                   2)
                                                                  (("4"
                                                                    (skeep)
                                                                    (("4"
                                                                      (replace
                                                                       -1)
                                                                      (("4"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("5"
                                                                  (skeep)
                                                                  (("5"
                                                                    (typepred
                                                                     "t")
                                                                    (("5"
                                                                      (replace
                                                                       -13)
                                                                      (("5"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (typepred
                                                               "dd")
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (skeep)
                                                                  (("2"
                                                                    (skeep)
                                                                    (("2"
                                                                      (hide
                                                                       1)
                                                                      (("2"
                                                                        (lemma
                                                                         " lin_1D_unique_ci")
                                                                        (("2"
                                                                          (inst
                                                                           -1
                                                                           "dd"
                                                                           "y0"
                                                                           "LAMBDA(t:(dd)): af(t)"
                                                                           "LAMBDA(t:(dd)): bf(t)")
                                                                          (("1"
                                                                            (skeep
                                                                             -1)
                                                                            (("1"
                                                                              (inst-cp
                                                                               -3
                                                                               "f")
                                                                              (("1"
                                                                                (inst
                                                                                 -3
                                                                                 "(LAMBDA (t: (dd)): y(t))")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (split
                                                                                     -4)
                                                                                    (("1"
                                                                                      (split
                                                                                       -4)
                                                                                      (("1"
                                                                                        (replace
                                                                                         -1)
                                                                                        (("1"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (lemma
                                                                                         "deriv_subtype_dd[(hp(aa)),(dd)]")
                                                                                        (("2"
                                                                                          (inst?)
                                                                                          (("2"
                                                                                            (split
                                                                                             -1)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "restrict"
                                                                                               -1)
                                                                                              (("1"
                                                                                                (replace
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (replace
                                                                                                   -15
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (decompose-equality
                                                                                                     1)
                                                                                                    (("1"
                                                                                                      (decompose-equality
                                                                                                       -15)
                                                                                                      (("1"
                                                                                                        (inst
                                                                                                         -1
                                                                                                         "x!1")
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (propax)
                                                                                              nil
                                                                                              nil)
                                                                                             ("3"
                                                                                              (propax)
                                                                                              nil
                                                                                              nil)
                                                                                             ("4"
                                                                                              (propax)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("3"
                                                                                        (typepred
                                                                                         "d_b[dd]")
                                                                                        (("1"
                                                                                          (replace
                                                                                           -9)
                                                                                          (("1"
                                                                                            (hide
                                                                                             -1)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (case
                                                                                                 "car(d_b[dd]) = aa")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (hide
                                                                                                   2)
                                                                                                  (("2"
                                                                                                    (hide
                                                                                                     -21)
                                                                                                    (("2"
                                                                                                      (inst-cp
                                                                                                       -4
                                                                                                       "aa")
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (flatten)
                                                                                                          (("2"
                                                                                                            (split
                                                                                                             -6)
                                                                                                            (("1"
                                                                                                              (flatten)
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (inst
                                                                                                                   -6
                                                                                                                   "car(d_b[dd])")
                                                                                                                  (("1"
                                                                                                                    (flatten)
                                                                                                                    (("1"
                                                                                                                      (split
                                                                                                                       -6)
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         "closed_interval"
                                                                                                                         -5)
                                                                                                                        (("1"
                                                                                                                          (propax)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil)
                                                                                                                       ("3"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (lemma
                                                                                                                     "ci_ci")
                                                                                                                    (("2"
                                                                                                                      (inst?)
                                                                                                                      (("2"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (expand
                                                                                                               "closed_interval"
                                                                                                               1)
                                                                                                              (("2"
                                                                                                                (propax)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (lemma
                                                                                           "ci_ci")
                                                                                          (("2"
                                                                                            (inst?)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (case
                                                                                       "car(d_b[dd]) = aa")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil)
                                                                                       ("2"
                                                                                        (typepred
                                                                                         "d_b[dd]")
                                                                                        (("2"
                                                                                          (inst-cp
                                                                                           -5
                                                                                           "aa")
                                                                                          (("2"
                                                                                            (inst
                                                                                             -5
                                                                                             "car(d_b[dd])")
                                                                                            (("1"
                                                                                              (flatten)
                                                                                              (("1"
                                                                                                (replace
                                                                                                 -12)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "closed_interval")
                                                                                                    (("1"
                                                                                                      (flatten)
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (lemma
                                                                                               "ci_ci")
                                                                                              (("2"
                                                                                                (inst?)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("3"
                                                                                        (lemma
                                                                                         "ci_ci")
                                                                                        (("3"
                                                                                          (inst?)
                                                                                          (("3"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (skeep)
                                                                                  (("2"
                                                                                    (typepred
                                                                                     "t")
                                                                                    (("2"
                                                                                      (typepred
                                                                                       "dd")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (inst
                                                                                           -2
                                                                                           "t")
                                                                                          (("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (typepred
                                                                             "bf")
                                                                            (("2"
                                                                              (expand
                                                                               "continuous?")
                                                                              (("2"
                                                                                (skeep)
                                                                                (("2"
                                                                                  (inst
                                                                                   -1
                                                                                   "x0")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "continuous?")
                                                                                    (("1"
                                                                                      (skeep)
                                                                                      (("1"
                                                                                        (inst
                                                                                         -1
                                                                                         "epsilon")
                                                                                        (("1"
                                                                                          (skeep)
                                                                                          (("1"
                                                                                            (inst
                                                                                             1
                                                                                             "delta")
                                                                                            (("1"
                                                                                              (skeep)
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -1
                                                                                                 "x")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (typepred
                                                                                     "x0")
                                                                                    (("2"
                                                                                      (typepred
                                                                                       "dd")
                                                                                      (("2"
                                                                                        (inst
                                                                                         -2
                                                                                         "x0")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("3"
                                                                            (typepred
                                                                             "af")
                                                                            (("3"
                                                                              (expand
                                                                               "continuous?")
                                                                              (("3"
                                                                                (skeep)
                                                                                (("3"
                                                                                  (inst
                                                                                   -1
                                                                                   "x0")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "continuous?")
                                                                                    (("1"
                                                                                      (skeep)
                                                                                      (("1"
                                                                                        (inst
                                                                                         -1
                                                                                         "epsilon")
                                                                                        (("1"
                                                                                          (skeep)
                                                                                          (("1"
                                                                                            (inst
                                                                                             1
                                                                                             "delta")
                                                                                            (("1"
                                                                                              (skeep)
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -1
                                                                                                 "x")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (typepred
                                                                                     "x0"
                                                                                     "dd")
                                                                                    (("2"
                                                                                      (inst
                                                                                       -3
                                                                                       "x0")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("4"
                                                                            (skeep)
                                                                            (("4"
                                                                              (typepred
                                                                               "dd")
                                                                              (("4"
                                                                                (assert)
                                                                                (("4"
                                                                                  (inst
                                                                                   -2
                                                                                   "t")
                                                                                  (("4"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("5"
                                                                            (lemma
                                                                             "ci_ci")
                                                                            (("5"
                                                                              (assert)
                                                                              (("5"
                                                                                (inst?)
                                                                                (("5"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide 2)
                                        (("2"
                                          (hide -6)
                                          (("2"
                                            (typepred "dd")
                                            (("2"
                                              (split -1)
                                              (("1"
                                                (lemma "hp_dd")
                                                (("1"
                                                  (inst -1 "aa")
                                                  (("1"
                                                    (expand
                                                     "deriv_domain?")
                                                    (("1"
                                                      (skeep)
                                                      (("1"
                                                        (inst
                                                         -1
                                                         "e!1"
                                                         "x")
                                                        (("1"
                                                          (skeep)
                                                          (("1"
                                                            (inst
                                                             1
                                                             "y!1")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (typepred
                                                           "x")
                                                          (("2"
                                                            (inst
                                                             -3
                                                             "x")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2" (skeep) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("3" (flatten) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (assert) nil nil)
                                 ("3" (assert) nil nil)
                                 ("4"
                                  (flatten)
                                  (("4"
                                    (assert)
                                    (("4"
                                      (skeep)
                                      (("4"
                                        (typepred "x")
                                        (("4"
                                          (typepred "dd")
                                          (("4"
                                            (inst -2 "x")
                                            (("4" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (lemma "hp_noe")
                              (("2"
                                (inst?)
                                (("2"
                                  (assert)
                                  (("2"
                                    (lemma "hp_dd")
                                    (("2" (inst?) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert)
                            (("2" (hide 2)
                              (("2"
                                (typepred "dd")
                                (("2"
                                  (split -1)
                                  (("1"
                                    (replace -1)
                                    (("1"
                                      (split 1)
                                      (("1"
                                        (expand "not_one_element?" 1)
                                        (("1"
                                          (skeep)
                                          (("1"
                                            (inst 1 "x+1")
                                            (("1" (assert) nil nil)
                                             ("2"
                                              (replace -1)
                                              (("2"
                                                (typepred "x")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (replace -2)
                                                    (("2"
                                                      (expand "hp")
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (lemma "hp_dd")
                                        (("2"
                                          (inst?)
                                          (("2"
                                            (expand "deriv_domain?")
                                            (("2"
                                              (skeep)
                                              (("2"
                                                (inst -1 "e!1" "x")
                                                (("1"
                                                  (skeep)
                                                  (("1"
                                                    (inst 1 "y!1")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (typepred "x")
                                                  (("2"
                                                    (inst -3 "x")
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (skeep)
                                    (("2"
                                      (lemma "ci_not_one_element")
                                      (("2"
                                        (inst?)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (lemma "ci_deriv_domain")
                                            (("1"
                                              (inst?)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (lemma "ci_ci")
                                                  (("1"
                                                    (inst?)
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (assert)
                                          (("2"
                                            (lemma "ci_ci")
                                            (("2"
                                              (inst?)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (split 1)
                    (("1" (skeep)
                      (("1" (assert)
                        (("1" (replace -4) (("1" (assert) nil nil))
                          nil))
                        nil))
                      nil)
                     ("2" (typepred "y")
                      (("2" (expand "derivable?")
                        (("2" (skeep)
                          (("2" (inst -1 "x")
                            (("1" (expand "derivable?")
                              (("1"
                                (expand "convergent?")
                                (("1"
                                  (skeep)
                                  (("1"
                                    (inst 1 "l")
                                    (("1"
                                      (expand "convergence")
                                      (("1"
                                        (expand "convergence")
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (split 1)
                                              (("1"
                                                (expand "adh")
                                                (("1"
                                                  (skeep)
                                                  (("1"
                                                    (inst -1 "e!1")
                                                    (("1"
                                                      (skeep)
                                                      (("1"
                                                        (inst 1 "x2")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (typepred
                                                           "x2")
                                                          (("2"
                                                            (expand
                                                             "A")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (skeep)
                                                (("2"
                                                  (inst -2 "epsilon")
                                                  (("2"
                                                    (skeep)
                                                    (("2"
                                                      (inst 1 "delta")
                                                      (("2"
                                                        (skeep)
                                                        (("2"
                                                          (inst
                                                           -4
                                                           "x2")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (expand
                                                               "NQ")
                                                              (("1"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            (("2"
                                                              (typepred
                                                               "x2")
                                                              (("2"
                                                                (expand
                                                                 "A")
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (typepred "x")
                              (("2"
                                (replace -5)
                                (("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (assert)
                (("2" (hide 2)
                  (("2" (split 1)
                    (("1" (skeep)
                      (("1" (replace -1) (("1" (assert) nil nil)) nil))
                      nil)
                     ("2" (typepred "bf")
                      (("2" (expand "continuous?")
                        (("2" (skeep)
                          (("2" (inst -1 "x0")
                            (("2" (expand "continuous?")
                              (("2"
                                (skeep)
                                (("2"
                                  (inst -1 "epsilon")
                                  (("2"
                                    (skeep)
                                    (("2"
                                      (inst 1 "delta")
                                      (("2"
                                        (skeep)
                                        (("2"
                                          (inst -1 "x")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (hide 2)
                (("3" (split 1)
                  (("1" (skeep)
                    (("1" (replace -1) (("1" (assert) nil nil)) nil))
                    nil)
                   ("2" (typepred "af")
                    (("2" (expand "continuous?")
                      (("2" (skeep)
                        (("2" (inst -1 "x0")
                          (("1" (assert)
                            (("1" (expand "continuous?")
                              (("1"
                                (skeep)
                                (("1"
                                  (inst -1 "epsilon")
                                  (("1"
                                    (skeep)
                                    (("1"
                                      (inst 1 "delta")
                                      (("1"
                                        (skeep)
                                        (("1"
                                          (inst -1 "x")
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (replace -1)
                            (("2" (typepred "x0")
                              (("2" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (skeep)
          (("2" (lemma "lin_1D_unique_ci")
            (("2" (inst -1 "d" "y0" "af" "bf")
              (("1" (skeep)
                (("1" (inst 1 "y")
                  (("1" (assert)
                    (("1" (split 1)
                      (("1" (assert)
                        (("1" (case "car(d_b[d]) = aa")
                          (("1" (assert) nil nil)
                           ("2" (typepred "d_b[d]")
                            (("2" (inst-cp -5 "aa")
                              (("2"
                                (inst -5 "car(d_b[d])")
                                (("1"
                                  (flatten)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (replace -12)
                                      (("1" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (lemma "ci_ci")
                                  (("2"
                                    (inst?)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (lemma "ci_ci")
                            (("3" (inst?) (("3" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (skeep)
                        (("2" (typepred "dd")
                          (("2" (split -1)
                            (("1" (inst -2 "b+1")
                              (("1"
                                (replace -1)
                                (("1"
                                  (replace -6 -2)
                                  (("1"
                                    (hide -5)
                                    (("1"
                                      (hide 1)
                                      (("1" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (skeep)
                              (("2"
                                (case
                                 "not_one_element?[(dd)] AND deriv_domain?[(dd)]")
                                (("1"
                                  (case
                                   "not_one_element?[(d)] AND deriv_domain?[(d)]")
                                  (("1"
                                    (typepred "y")
                                    (("1"
                                      (lemma
                                       "derivable_subtype[(d),(dd)]")
                                      (("1"
                                        (inst?)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (split -1)
                                            (("1"
                                              (expand "restrict")
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (lemma
                                                     "deriv_subtype_dd[(d),(dd)]")
                                                    (("1"
                                                      (inst?)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (expand
                                                           "restrict"
                                                           -1)
                                                          (("1"
                                                            (replace
                                                             -1)
                                                            (("1"
                                                              (replace
                                                               -10
                                                               1)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (split
                                                                   1)
                                                                  (("1"
                                                                    (case
                                                                     "car(d_b[d]) = aa")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (typepred
                                                                       "d_b[d]
")
                                                                      (("2"
                                                                        (inst-cp
                                                                         -5
                                                                         "aa")
                                                                        (("2"
                                                                          (inst
                                                                           -5
                                                                           "car(d_b[d])")
                                                                          (("1"
                                                                            (replace
                                                                             -19)
                                                                            (("1"
                                                                              (expand
                                                                               "closed_interval")
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (lemma
                                                                             "ci_ci")
                                                                            (("2"
                                                                              (inst
                                                                               -1
                                                                               "aa"
                                                                               "b")
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("3"
                                                                      (lemma
                                                                       "ci_ci")
                                                                      (("3"
                                                                        (inst
                                                                         -1
                                                                         "aa"
                                                                         "b")
                                                                        (("3"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (lemma
                                                                     " lin_1D_unique_ci")
                                                                    (("2"
                                                                      (inst
                                                                       -1
                                                                       "dd"
                                                                       "y0"
                                                                       "LAMBDA(t:(dd)): af(t)"
                                                                       "LAMBDA(t:(dd)): bf(t)")
                                                                      (("1"
                                                                        (skeep
                                                                         -1)
                                                                        (("1"
                                                                          (skeep
                                                                           1)
                                                                          (("1"
                                                                            (inst-cp
                                                                             -3
                                                                             "f")
                                                                            (("1"
                                                                              (inst
                                                                               -3
                                                                               "(LAMBDA (t: (dd)): y(t))")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (split
                                                                                   -4)
                                                                                  (("1"
                                                                                    (split
                                                                                     -4)
                                                                                    (("1"
                                                                                      (replace
                                                                                       -1)
                                                                                      (("1"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (lemma
                                                                                       "deriv_subtype_dd[(d),(dd)]")
                                                                                      (("2"
                                                                                        (inst?)
                                                                                        (("2"
                                                                                          (split
                                                                                           -1)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "restrict"
                                                                                             -1)
                                                                                            (("1"
                                                                                              (replace
                                                                                               -1)
                                                                                              (("1"
                                                                                                (replace
                                                                                                 -15
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (decompose-equality
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (decompose-equality
                                                                                                     -15)
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       -1
                                                                                                       "x!1")
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil)
                                                                                           ("3"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil)
                                                                                           ("4"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("3"
                                                                                      (case
                                                                                       "car(d_b[d]) = aa")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (typepred
                                                                                           "d_b[dd]")
                                                                                          (("1"
                                                                                            (inst-cp
                                                                                             -5
                                                                                             "car(d_b[dd])")
                                                                                            (("1"
                                                                                              (inst
                                                                                               -5
                                                                                               "car(d_b[d])")
                                                                                              (("1"
                                                                                                (flatten)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (replace
                                                                                                     -27)
                                                                                                    (("1"
                                                                                                      (replace
                                                                                                       -21)
                                                                                                      (("1"
                                                                                                        (typepred
                                                                                                         "d_b[d]")
                                                                                                        (("1"
                                                                                                          (inst-cp
                                                                                                           -5
                                                                                                           "car(d_b[dd])")
                                                                                                          (("1"
                                                                                                            (inst
                                                                                                             -5
                                                                                                             "car(d_b[d])")
                                                                                                            (("1"
                                                                                                              (replace
                                                                                                               -32)
                                                                                                              (("1"
                                                                                                                (flatten)
                                                                                                                (("1"
                                                                                                                  (grind)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (lemma
                                                                                                               "ci_ci")
                                                                                                              (("2"
                                                                                                                (inst
                                                                                                                 -1
                                                                                                                 "aa"
                                                                                                                 "b")
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (lemma
                                                                                                             "ci_ci")
                                                                                                            (("2"
                                                                                                              (inst
                                                                                                               -1
                                                                                                               "aa"
                                                                                                               "b!1")
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (lemma
                                                                                                 "ci_ci")
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   -1
                                                                                                   "aa"
                                                                                                   "b")
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (lemma
                                                                                               "ci_ci")
                                                                                              (("2"
                                                                                                (inst
                                                                                                 -1
                                                                                                 "aa"
                                                                                                 "b!1")
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (lemma
                                                                                             "ci_ci")
                                                                                            (("2"
                                                                                              (inst
                                                                                               -1
                                                                                               "aa"
                                                                                               "b!1")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (typepred
                                                                                           "d_b[d]")
                                                                                          (("2"
                                                                                            (inst-cp
                                                                                             -5
                                                                                             "car(d_b[d])")
                                                                                            (("1"
                                                                                              (inst
                                                                                               -5
                                                                                               "aa")
                                                                                              (("1"
                                                                                                (replace
                                                                                                 -24)
                                                                                                (("1"
                                                                                                  (flatten)
                                                                                                  (("1"
                                                                                                    (grind)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (lemma
                                                                                               "ci_ci")
                                                                                              (("2"
                                                                                                (inst
                                                                                                 -1
                                                                                                 "aa"
                                                                                                 "b")
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("3"
                                                                                        (lemma
                                                                                         "ci_ci")
                                                                                        (("3"
                                                                                          (inst
                                                                                           -1
                                                                                           "aa"
                                                                                           "b")
                                                                                          (("3"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (case
                                                                                     "car(d_b[dd]) = aa")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil)
                                                                                     ("2"
                                                                                      (typepred
                                                                                       "d_b[dd]")
                                                                                      (("2"
                                                                                        (inst-cp
                                                                                         -5
                                                                                         "aa")
                                                                                        (("2"
                                                                                          (inst
                                                                                           -5
                                                                                           "car(d_b[dd])")
                                                                                          (("1"
                                                                                            (replace
                                                                                             -24)
                                                                                            (("1"
                                                                                              (replace
                                                                                               -19)
                                                                                              (("1"
                                                                                                (hide
                                                                                                 -23)
                                                                                                (("1"
                                                                                                  (grind)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (lemma
                                                                                             "ci_ci")
                                                                                            (("2"
                                                                                              (inst?)
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("3"
                                                                                      (lemma
                                                                                       "ci_ci")
                                                                                      (("3"
                                                                                        (inst?)
                                                                                        (("3"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (skeep)
                                                                                (("2"
                                                                                  (inst
                                                                                   -14
                                                                                   "t")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (typepred
                                                                         "bf")
                                                                        (("2"
                                                                          (expand
                                                                           "continuous?")
                                                                          (("2"
                                                                            (skeep)
                                                                            (("2"
                                                                              (inst
                                                                               -1
                                                                               "x0")
                                                                              (("1"
                                                                                (expand
                                                                                 "continuous?")
                                                                                (("1"
                                                                                  (skeep)
                                                                                  (("1"
                                                                                    (inst
                                                                                     -1
                                                                                     "epsilon")
                                                                                    (("1"
                                                                                      (skeep)
                                                                                      (("1"
                                                                                        (skeep)
                                                                                        (("1"
                                                                                          (inst
                                                                                           1
                                                                                           "delta")
                                                                                          (("1"
                                                                                            (skeep)
                                                                                            (("1"
                                                                                              (inst
                                                                                               -1
                                                                                               "x")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (typepred
                                                                                 "x0")
                                                                                (("2"
                                                                                  (inst
                                                                                   -10
                                                                                   "x0")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("3"
                                                                        (typepred
                                                                         "af")
                                                                        (("3"
                                                                          (expand
                                                                           "continuous?")
                                                                          (("3"
                                                                            (skeep)
                                                                            (("3"
                                                                              (inst
                                                                               -1
                                                                               "x0")
                                                                              (("1"
                                                                                (expand
                                                                                 "continuous?")
                                                                                (("1"
                                                                                  (skeep)
                                                                                  (("1"
                                                                                    (inst
                                                                                     -1
                                                                                     "epsilon")
                                                                                    (("1"
                                                                                      (skeep)
                                                                                      (("1"
                                                                                        (skeep)
                                                                                        (("1"
                                                                                          (inst
                                                                                           1
                                                                                           "delta")
                                                                                          (("1"
                                                                                            (skeep)
                                                                                            (("1"
                                                                                              (inst
                                                                                               -1
                                                                                               "x")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (inst
                                                                                 -9
                                                                                 "x0")
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("4"
                                                                        (skeep)
                                                                        (("4"
                                                                          (inst
                                                                           -9
                                                                           "t")
                                                                          (("4"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("5"
                                                                        (lemma
                                                                         "ci_ci")
                                                                        (("5"
                                                                          (inst?)
                                                                          (("5"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2" (flatten) nil nil)
                                             ("3" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (flatten) nil nil)
                                       ("3" (assert) nil nil)
                                       ("4"
                                        (assert)
                                        (("4"
                                          (skeep)
                                          (("4"
                                            (inst -7 "x")
                                            (("4" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (assert)
                                    (("2"
                                      (lemma "ci_not_one_element")
                                      (("2"
                                        (inst?)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (lemma
                                             "ci_not_one_element")
                                            (("1"
                                              (inst -1 "d")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (lemma
                                                   "ci_deriv_domain")
                                                  (("1"
                                                    (inst -1 "d")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (lemma "ci_ci")
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "aa"
                                                           "b")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (lemma "ci_ci")
                                                (("2"
                                                  (inst -1 "aa" "b")
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (lemma "ci_ci")
                                          (("2"
                                            (inst?)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (lemma "ci_not_one_element")
                                  (("2"
                                    (inst?)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (lemma "ci_deriv_domain")
                                        (("1"
                                          (inst?)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (lemma "ci_ci")
                                              (("1"
                                                (inst?)
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (lemma "ci_ci")
                                      (("2"
                                        (inst?)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (lemma "ci_ci")
                (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (x0 skolem-const-decl "(hp(aa))" linear_ode_1D nil)
    (x skolem-const-decl "(d)" linear_ode_1D nil)
    (x2 skolem-const-decl "(A(x))" linear_ode_1D nil)
    (x2 skolem-const-decl "(A(x))" linear_ode_1D nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (ci_deriv_domain formula-decl nil interval_def nil)
    (ci_not_one_element formula-decl nil interval_def nil)
    (x skolem-const-decl "(dd)" linear_ode_1D nil)
    (y!1 skolem-const-decl "{u: nzreal | hp(aa)(u + x)}" linear_ode_1D
     nil)
    (x skolem-const-decl "(dd)" linear_ode_1D nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (derivable_subtype formula-decl nil derivatives_subtype analysis)
    (x skolem-const-decl "(dd)" linear_ode_1D nil)
    (y!1 skolem-const-decl "{u: nzreal | hp(aa)(u + x)}" linear_ode_1D
     nil)
    (dd skolem-const-decl "{dd: [real -> bool] |
   (dd = hp(aa) OR EXISTS (b: real | b > aa): dd = closed_interval(aa, b))
    AND FORALL (x: real): dd(x) IMPLIES d(x)}" linear_ode_1D nil)
    (x2 skolem-const-decl "(A(x))" linear_ode_1D nil)
    (x skolem-const-decl "(hp(aa))" linear_ode_1D nil)
    (x2 skolem-const-decl "(A(x))" linear_ode_1D nil)
    (derivable? const-decl "bool" derivatives_def analysis)
    (convergence const-decl "bool" lim_of_functions analysis)
    (adh const-decl "setof[real]" convergence_functions analysis)
    (setof type-eq-decl nil defined_types nil)
    (A const-decl "setof[nzreal]" derivatives_def analysis)
    (x skolem-const-decl "(hp(aa))" linear_ode_1D nil)
    (x2 skolem-const-decl "(A(x))" linear_ode_1D nil)
    (real_is_complete name-judgement "metric_complete" real_topology
     metric_space)
    (fullset_is_clopen name-judgement
     "clopen[real, (metric_induced_topology)]" real_topology
     metric_space)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (x2 skolem-const-decl "(A(x))" linear_ode_1D nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (NQ const-decl "real" derivatives_def analysis)
    (convergence const-decl "bool" convergence_functions analysis)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (convergent? const-decl "bool" lim_of_functions analysis)
    (f skolem-const-decl "{f: [(dd) -> real] | derivable?[(dd)](f)}"
     linear_ode_1D nil)
    (continuous? const-decl "bool" continuous_functions analysis)
    (lin_1D_unique_ci formula-decl nil linear_ode_1D nil)
    (x0 skolem-const-decl "(dd)" linear_ode_1D nil)
    (x0 skolem-const-decl "(dd)" linear_ode_1D nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (<= const-decl "bool" reals nil)
    (d_b const-decl "{dd: list[real] |
   (length(dd) = 2 AND (d(car(dd)) AND d(car(cdr(dd))))) AND
    FORALL (x: real): (car(dd) <= x AND x <= car(cdr(dd))) IFF d(x)}"
     r2v_continuous_extension nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ci_ci formula-decl nil interval_def nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis)
    (closed_interval? const-decl "bool" interval_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (deriv_domain? const-decl "bool" deriv_domain_def analysis)
    (restrict const-decl "R" restrict nil)
    (hp_dd formula-decl nil interval_def nil)
    (/= const-decl "boolean" notequal nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (hp_noe formula-decl nil interval_def nil)
    (deriv_subtype_dd formula-decl nil derivatives_subtype analysis)
    (deriv_fun type-eq-decl nil derivatives analysis)
    (deriv const-decl "[T -> real]" derivatives analysis)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (y skolem-const-decl
     "{y: [(hp(aa)) -> real] | derivable?[(hp(aa))](y)}" linear_ode_1D
     nil)
    (derivable? const-decl "bool" derivatives analysis)
    (bf skolem-const-decl "{f: [(d) -> real] | continuous?[(d)](f)}"
     linear_ode_1D nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (aa skolem-const-decl "real" linear_ode_1D nil)
    (d skolem-const-decl "{d: [real -> bool] |
   d = hp(aa) OR EXISTS (b: real | b > aa): d = closed_interval(aa, b)}"
       linear_ode_1D nil)
    (continuous? const-decl "bool" continuous_functions analysis)
    (af skolem-const-decl "{f: [(d) -> real] | continuous?[(d)](f)}"
     linear_ode_1D nil)
    (lin_1D_unique_hp formula-decl nil linear_ode_1D nil)
    (x0 skolem-const-decl "(dd)" linear_ode_1D nil)
    (x0 skolem-const-decl "(dd)" linear_ode_1D nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (fullset const-decl "set" sets nil)
    (deriv const-decl "real" derivatives_def analysis)
    (dd skolem-const-decl "{dd: [real -> bool] |
   (dd = hp(aa) OR EXISTS (b: real | b > aa): dd = closed_interval(aa, b))
    AND FORALL (x: real): dd(x) IMPLIES d(x)}" linear_ode_1D nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (hp const-decl "bool" interval_def nil)
    (> const-decl "bool" reals nil) (< const-decl "bool" reals nil)
    (closed_interval? const-decl "bool" interval_def nil)
    (closed_interval const-decl "(closed_interval?(a, b))" interval_def
     nil))
   shostak)))

