linear_ode_1D   % Welcome!
		: THEORY

%Created by                     JTS
%	 	           Feb 2022
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%| Show that an ODE with a single|%
%| variable, whose derivative is |%
%| a linear function of the value|%
%| of the variable, has a unique |%
%| solution.                     |%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%Last Updated	           Nov 2020

%-----     %
 BEGIN
%     -----%

%-------------------------------------------------------------------------
%% Importing ODE_solution_existence_uniquess to have the PL existance
%  and uniqueness theorem
%% Importing continuity of multivariate functions for the functions in the
%  expression x' = a(t)x + b(t)
%-------------------------------------------------------------------------

  IMPORTING ODE_solution_existence_uniqueness,
  	    mv_analysis@continuity_multivar[1]

%-------------------------------------------------------------------------
%% Define linear ode for single variable
%-------------------------------------------------------------------------
%closed interval
od_ln(d:(closed_interval?),af,bf:{f:[(d)->real] | continuous?[(d)](f)})(t:(d),
  v:VectorN(1)): VectorN(1) =  (: af(t) * car(v) :) + (: bf(t) :)
%hp
od_ln(aa:real,af,bf:{f:[(hp(aa))->real] | continuous?[(hp(aa))](f)})(t:(hp(aa)),
  v:VectorN(1)): VectorN(1) =  (: af(t) * car(v) :) + (: bf(t) :)

%-------------------------------------------------------------------------
%% The linear function is Lipschitz and Continuous 
%-------------------------------------------------------------------------

 lin_lip: LEMMA
 FORALL(d:(closed_interval?), af,bf:{f:[(d)->real] | continuous?[(d)](f)}):
   Lip_d?(1)(od_ln(d,af,bf))
 
 lin_cont_d: LEMMA
  FORALL(d:(closed_interval?), af,bf:{f:[(d)->real] | continuous?[(d)](f)}):
  cont_d?[(d)](1)(od_ln(d,af,bf))

 lin_cont_d_hp: LEMMA
  FORALL(aa:real, af,bf:{f:[(hp(aa))->real] | continuous?[(hp(aa))](f)}):
  cont_d?[(hp(aa))](1)(od_ln(aa,af,bf))

%-------------------------------------------------------------------------
%% A unique solution exists, in the ODE library format
%-------------------------------------------------------------------------

 lin_unique_solution: LEMMA
 FORALL(d:(closed_interval?),y0:VectorN(1),
 af,bf:{f:[(d)->real] | continuous?[(d)](f)}):
  EXISTS(y:{yy:r2v_n[d](1) | derivable?[d](yy)}):
    ivt_s_unique?[d](1, car(d_b[d]), od_ln(d,af,bf), y0)(y)

 lin_unique_solution_hp: LEMMA
 FORALL(aa:real,y0:VectorN(1),
 af,bf:{f:[(hp(aa))->real] | continuous?[(hp(aa))](f)}):
  EXISTS(y:{yy:r2v_n[hp(aa)](1) | derivable?[hp(aa)](yy)}):
    ivt_s_unique?[hp(aa)](1, aa, od_ln(aa,af,bf), y0)(y)
    
%-------------------------------------------------------------------------
%% A unique solution exists, in the Real library format
%-------------------------------------------------------------------------

 lin_1D_unique_ci: LEMMA
 FORALL(d:(closed_interval?),y0:real, af,bf:{f:[(d)->real] | continuous?[(d)](f)}):
 EXISTS(y:[(d)->real] | derivable?[(d)](y)):
 ((deriv(y) = LAMBDA(t:(d)): af(t) * y(t) + bf(t)) AND y(car(d_b[d]))=y0)
 AND
 (FORALL(f:[(d)->real] | derivable?[(d)](f)):
 ((deriv(f) =  LAMBDA(t:(d)): af(t)*f(t) + bf(t)) AND f(car(d_b[d]))=y0)
 IMPLIES
 y = f)

 lin_1D_unique_hp: LEMMA
 FORALL(aa:real,y0:real, af,bf:{f:[(hp(aa))->real] | continuous?[(hp(aa))](f)}):
 EXISTS(y:[(hp(aa))->real] | derivable?[(hp(aa))](y)):
 ((deriv(y) = LAMBDA(t:(hp(aa))): af(t) * y(t) + bf(t)) AND y(aa)=y0)
 AND
 (FORALL(f:[(hp(aa))->real] | derivable?[(hp(aa))](f)):
 ((deriv(f) =  LAMBDA(t:(hp(aa))): af(t)*f(t) + bf(t)) AND f(aa)=y0)
 IMPLIES
 y = f)

%-------------------------------------------------------------------------
%% A unique solution exists, very strong form
%-------------------------------------------------------------------------

 lin_1D_unique_hp_ci: LEMMA
 FORALL(aa:real,d:[real->bool] | d = hp(aa) OR EXISTS(b:real| b > aa): d = closed_interval(aa,b), y0:real,af,bf:{f:[(d)->real] | continuous?[(d)](f)}):
 EXISTS(y:[(d)->real] | derivable?[(d)](y)):
 ((deriv(y) = LAMBDA(t:(d)): af(t) * y(t) + bf(t)) AND y(aa)=y0)
 AND
 (FORALL(dd:[real->bool] | (dd = hp(aa) OR EXISTS(b:real | b > aa): dd= closed_interval(aa,b)) AND (FORALL(x:real): dd(x) IMPLIES d(x))):
 (derivable?[(dd)]( LAMBDA(t:(dd)): y(t)) AND
 deriv[(dd)]( LAMBDA(t:(dd)): y(t)) = LAMBDA(t:(dd)): af(t) * y(t) + bf(t)) AND y(aa)=y0
 AND
 (FORALL(f:[(dd)->real] | derivable?[(dd)](f)):
 ((deriv(f) =  LAMBDA(t:(dd)): af(t)*f(t) + bf(t)) AND f(aa)=y0)
 IMPLIES
 (LAMBDA(t:(dd)): y(t) ) =  f))

 
  %~~~ The End ~~~%
  END linear_ode_1D
