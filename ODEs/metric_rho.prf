(metric_rho
 (IMP_r2v_continuous_extension_TCC1 0
  (IMP_r2v_continuous_extension_TCC1-1 nil 3789407246
   ("" (lemma "closed_interval") (("" (propax) nil nil)) nil)
   ((closed_interval formula-decl nil metric_rho nil)) nil
   (IMP_r2v_continuous_extension assuming
    "r2v_continuous_extension[metric_rho.d].r2v_continuous_extension"
    "closed_interval: ASSUMPTION interval_def.closed_interval?(r2v_continuous_extension.d)")))
 (pre_rho_TCC1 0
  (pre_rho_TCC1-1 nil 3789407246 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (norm? const-decl "bool" norms Optimization_Dev)
    (d formal-const-decl "[real -> bool]" metric_rho nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices matrices)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic Optimization_Dev)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (* const-decl "VectorN(length(v2))" matrices matrices)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     Optimization_Dev))
   nil
   (pre_rho subtype "r2v_continuous_extension[metric_rho.d].d_b"
    "(list_adt[real].cons?)")))
 (pre_rho_TCC2 0
  (pre_rho_TCC2-2 nil 3789407539
   ("" (skeep)
    (("" (typepred "f(x)" "g(x)")
      (("" (assert)
        (("" (typepred "f(x)-g(x)") (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((r2v_n type-eq-decl nil r2v_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (d formal-const-decl "[real -> bool]" metric_rho nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (Vector type-eq-decl nil matrices matrices)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     Optimization_Dev))
   nil
   (pre_rho subtype
    "(matrices.-)(metric_rho.f(metric_rho.x), metric_rho.g(metric_rho.x))"
    "(list_adt[real].cons?)"))
  (pre_rho_TCC2-1 nil 3789407246 ("" (subtype-tcc) nil nil) nil nil
   (pre_rho subtype
    "(matrices.-)(metric_rho.f(metric_rho.x), metric_rho.g(metric_rho.x))"
    "(list_adt[real].cons?)")))
 (pre_rho_cont 0
  (pre_rho_cont-2 nil 3789408960
   ("" (skeep)
    (("" (typepred "f" "g")
      (("" (expand "pre_rho")
        (("" (lemma "prod_cont_fun[(d)]")
          ((""
            (inst -1 "LAMBDA (x: (d)) -> nnreal:
                 exp(x * -K - car(d_b) * -K)"
             "(LAMBDA (x: (d)) -> nnreal:
                 nn(f(x) - g(x)))")
            (("1" (assert)
              (("1" (split -1)
                (("1" (assert)
                  (("1" (expand "continuous?" -1)
                    (("1" (expand "continuous?" 1)
                      (("1" (expand "*" -1) (("1" (propax) nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (lemma "composition_cont_fun[(d),real]")
                  (("2"
                    (inst -1
                     "LAMBDA (x: (d)) -> real: x * -K - car(d_b) * -K"
                     "_")
                    (("1"
                      (inst -1 "(LAMBDA (x: real) -> nnreal: exp(x))")
                      (("1" (assert)
                        (("1" (split -1)
                          (("1" (hide -2 -3 2)
                            (("1" (expand "continuous?")
                              (("1"
                                (assert)
                                (("1"
                                  (expand "o")
                                  (("1" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide 2 3)
                            (("2" (hide -1 -2)
                              (("2"
                                (expand "continuous?")
                                (("2"
                                  (skeep 1)
                                  (("2"
                                    (expand "continuous?")
                                    (("2"
                                      (skeep 1)
                                      (("2"
                                        (inst 1 "epsilon/K")
                                        (("2"
                                          (skeep 1)
                                          (("2"
                                            (case
                                             "NOT -K*(x_1-x0) = x_1 * -K - x0 * -K")
                                            (("1" (assert) nil nil)
                                             ("2"
                                              (replace -1 1)
                                              (("2"
                                                (replace -1 1 rl)
                                                (("2"
                                                  (lemma "abs_mult")
                                                  (("2"
                                                    (inst
                                                     -1
                                                     "-K"
                                                     "(x_1-x0)")
                                                    (("2"
                                                      (replace -1 1)
                                                      (("2"
                                                        (expand
                                                         "abs"
                                                         1
                                                         1)
                                                        (("2"
                                                          (div-by
                                                           1
                                                           "--K")
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (hide 2 3)
                            (("3" (lemma "exp_continuous")
                              (("3"
                                (expand "continuous?")
                                (("3"
                                  (assert)
                                  (("3"
                                    (skeep 1)
                                    (("3"
                                      (inst -1 "x0")
                                      (("3"
                                        (hide -2 -3)
                                        (("3"
                                          (expand "continuous?")
                                          (("3" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide 2 3)
                      (("2" (skeep 1)
                        (("2" (typepred "d_b") (("2" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (hide 2)
                  (("3" (lemma "cont_sub")
                    (("3" (typepred "n")
                      (("3" (inst -2 "n" "f" "g")
                        (("3" (lemma "norm_cont_v2v")
                          (("3" (lemma "cont_comp")
                            (("3" (lemma "norm_cont_v2v[n]")
                              (("3"
                                (hide -3)
                                (("3"
                                  (inst
                                   -2
                                   "1"
                                   "n"
                                   "1"
                                   "LAMBDA(v:VectorN(1)): d(car(v))"
                                   "LAMBDA(v:{vv:VectorN(1)| d(car(vv))}): f(car(v))-g(car(v))"
                                   "LAMBDA(v:VectorN(n)): (: nn(v) :)")
                                  (("1"
                                    (split -2)
                                    (("1"
                                      (lemma "cont_triv")
                                      (("1"
                                        (inst
                                         -1
                                         "(LAMBDA (x: (d)) -> nnreal: nn(f(x) - g(x)))")
                                        (("1" (assert) nil nil)
                                         ("2"
                                          (skeep 1)
                                          (("2"
                                            (typepred
                                             "f(x)"
                                             "g(x)"
                                             "f(x)-g(x)")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (lemma "cont_entry_v")
                                      (("2"
                                        (inst
                                         -1
                                         "LAMBDA (x: (d)): f(x) - g(x)")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (case
                                             " length(LAMBDA (x: (d)): f(x) - g(x)) = n")
                                            (("1" (assert) nil nil)
                                             ("2"
                                              (expand "length" 1 1)
                                              (("2"
                                                (typepred
                                                 "f(choose(d))-g(choose(d))"
                                                 "f(choose(d))"
                                                 "g(choose(d))")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (hide -1 -3 -5)
                                                    (("2"
                                                      (replace -2 -1)
                                                      (("2"
                                                        (replace -3 -1)
                                                        (("2"
                                                          (expand
                                                           "max"
                                                           -1)
                                                          (("2"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (assert)
                                              (("3"
                                                (inst 1 "n")
                                                (("3"
                                                  (skeep 1)
                                                  (("3"
                                                    (typepred
                                                     "f(x_1)-g(x_1)"
                                                     "f(x_1)"
                                                     "g(x_1)")
                                                    (("3"
                                                      (hide -1 -3 -5)
                                                      (("3"
                                                        (replace -2)
                                                        (("3"
                                                          (replace -3)
                                                          (("3"
                                                            (assert)
                                                            (("3"
                                                              (expand
                                                               "max"
                                                               -1)
                                                              (("3"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (assert)
                                          (("2"
                                            (split 1)
                                            (("1"
                                              (inst 1 "n")
                                              (("1"
                                                (skeep 1)
                                                (("1"
                                                  (typepred
                                                   "f(x_1)"
                                                   "g(x_1)"
                                                   "f(x_1)-g(x_1)")
                                                  (("1"
                                                    (replace -2)
                                                    (("1"
                                                      (replace -4)
                                                      (("1"
                                                        (expand
                                                         "max"
                                                         -6)
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (assert)
                                              (("2"
                                                (expand "cons?" 1)
                                                (("2"
                                                  (skeep 1)
                                                  (("2"
                                                    (typepred
                                                     "f(x_1)"
                                                     "g(x_1)"
                                                     "f(x_1)-g(x_1)")
                                                    (("2"
                                                      (replace -4)
                                                      (("2"
                                                        (replace -2)
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (hide 2)
                                      (("3"
                                        (inst
                                         -1
                                         "LAMBDA (v_1: VectorN(n)): TRUE"
                                         "nn")
                                        (("3"
                                          (lemma "contD_norms_v2v[n]")
                                          (("3"
                                            (inst
                                             -1
                                             "LAMBDA (v_1: VectorN(n)): TRUE"
                                             "1"
                                             "LAMBDA (v: VectorN(n)): (: nn(v) :)")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (hide 2)
                                                (("1"
                                                  (inst
                                                   1
                                                   "norm_inf(n)"
                                                   "norm_inf(1)")
                                                  (("1"
                                                    (expand "contD?")
                                                    (("1"
                                                      (skeep 1)
                                                      (("1"
                                                        (inst -1 "p")
                                                        (("1"
                                                          (expand
                                                           "contp?")
                                                          (("1"
                                                            (skeep 1)
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "norm_inf(n)")
                                                              (("1"
                                                                (inst
                                                                 -1
                                                                 "eps")
                                                                (("1"
                                                                  (skeep
                                                                   -1)
                                                                  (("1"
                                                                    (inst
                                                                     1
                                                                     "delta")
                                                                    (("1"
                                                                      (skeep
                                                                       1)
                                                                      (("1"
                                                                        (inst
                                                                         -2
                                                                         "x")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (skeep 1)
                                              (("2"
                                                (hide-all-but 1)
                                                (("2"
                                                  (typepred "v")
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide-all-but 1)
                                    (("2"
                                      (skeep 1)
                                      (("2"
                                        (typepred "v")
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (skeep 1)
                                    (("3"
                                      (hide-all-but 1)
                                      (("3"
                                        (typepred "v")
                                        (("3"
                                          (typepred
                                           "f(car(v))-g(car(v))")
                                          (("3"
                                            (typepred "f(car(v))")
                                            (("3"
                                              (assert)
                                              (("3"
                                                (typepred "g")
                                                (("3"
                                                  (replace -3)
                                                  (("3"
                                                    (expand "max" -5)
                                                    (("3"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("4"
                                    (skeep 1)
                                    (("4"
                                      (typepred "v")
                                      (("4" (grind) nil nil))
                                      nil))
                                    nil)
                                   ("5"
                                    (skeep 1)
                                    (("5"
                                      (hide-all-but 1)
                                      (("5"
                                        (typepred "v")
                                        (("5" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skeep 1)
              (("2" (typepred "f(x)-g(x)" "f(x)" "g(x)")
                (("2" (replace -4)
                  (("2" (replace -6)
                    (("2" (expand "max" -2) (("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (skeep 1)
              (("3" (typepred "d_b") (("3" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((r2v_n type-eq-decl nil r2v_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (continuous? const-decl "bool" r2v_analysis nil)
    (r2v type-eq-decl nil r2v_def nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (d formal-const-decl "[real -> bool]" metric_rho nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (prod_cont_fun formula-decl nil continuous_functions analysis)
    (norm_cont_v2v formula-decl nil continuity_multivar
     Optimization_Dev)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (domain type-eq-decl nil domain_vec2real_def Optimization_Dev)
    (length_singleton formula-decl nil more_list_props structures)
    (contD_norms_v2v formula-decl nil continuity_multivar
     Optimization_Dev)
    (norm_inf const-decl "(norm?(m))" norms Optimization_Dev)
    (contp? const-decl "bool" continuity_multivar Optimization_Dev)
    (contp? const-decl "bool" continuity_multivar Optimization_Dev)
    (minus_real_is_real application-judgement "real" reals nil)
    (norm_inf const-decl "[(cons?) -> nonneg_real]" norms
     Optimization_Dev)
    (abs def-decl "{l: list | length(l) = length(ll)}" norms
         Optimization_Dev)
    (max def-decl "real" norms Optimization_Dev)
    (nth const-decl "[(d) -> real]" r2v_def nil)
    (contD? const-decl "bool" continuity_multivar Optimization_Dev)
    (contD? const-decl "bool" continuity_multivar Optimization_Dev)
    (TRUE const-decl "bool" booleans nil)
    (cont_entry_v formula-decl nil r2v_analysis nil)
    (scal def-decl "VectorN(length(v2))" matrices matrices)
    (add def-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (sub const-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (posint_max application-judgement "{k: posint | i <= k AND j <= k}"
     real_defs nil)
    (posrat_max application-judgement "{s: posrat | s >= q AND s >= r}"
     real_defs nil)
    (choose const-decl "(p)" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (length const-decl "nat" r2v_def nil)
    (cons? const-decl "bool" r2v_def nil)
    (cont_triv formula-decl nil r2v_analysis nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (cont_comp formula-decl nil composition_function Optimization_Dev)
    (cont_sub formula-decl nil r2v_analysis nil)
    (composition_cont_fun formula-decl nil composition_continuous
     analysis)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     Optimization_Dev)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (O const-decl "T3" function_props nil)
    (abs_mult formula-decl nil real_props nil)
    (both_sides_div_pos_lt1 formula-decl nil real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (times_div_cancel1 formula-decl nil extra_real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (continuous? const-decl "bool" continuous_functions analysis)
    (exp_continuous formula-decl nil ln_exp lnexp)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (continuous? const-decl "bool" continuous_functions analysis)
    (norm? const-decl "bool" norms Optimization_Dev)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (exp const-decl "{py | x = ln(py)}" ln_exp lnexp)
    (ln const-decl "real" ln_exp lnexp)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (Vector type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (n skolem-const-decl "posnat" metric_rho nil)
    (f skolem-const-decl "{ff: r2v_n(n) | continuous?(ff)}" metric_rho
     nil)
    (g skolem-const-decl "{ff: r2v_n(n) | continuous?(ff)}" metric_rho
     nil)
    (d_b const-decl "{dd: list[real] |
   (length(dd) = 2 AND (d(car(dd)) AND d(car(cdr(dd))))) AND
    FORALL (x: real): (car(dd) <= x AND x <= car(cdr(dd))) IFF d(x)}"
     r2v_continuous_extension nil)
    (<= const-decl "bool" reals nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (pre_rho const-decl "nnreal" metric_rho nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil))
   nil)
  (pre_rho_cont-1 nil 3789407573
   ("" (skeep)
    (("" (typepred "f" "g")
      (("" (expand "pre_rho")
        (("" (lemma "prod_cont_fun[(d)]")
          ((""
            (inst -1 "LAMBDA (x: (d)) -> nnreal:
                 exp(x * -K - car(d_b) * -K)"
             "(LAMBDA (x: (d)) -> nnreal:
                 nn(f(x) - g(x)))")
            (("1" (assert)
              (("1" (split -1)
                (("1" (assert)
                  (("1" (expand "continuous?" -1)
                    (("1" (expand "continuous?" 1)
                      (("1" (expand "*" -1) (("1" (propax) nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (lemma "composition_cont_fun[(d),real]")
                  (("2"
                    (inst -1
                     "LAMBDA (x: (d)) -> real: x * -K - car(d_b) * -K"
                     "_")
                    (("1"
                      (inst -1 "(LAMBDA (x: real) -> nnreal: exp(x))")
                      (("1" (assert)
                        (("1" (split -1)
                          (("1" (hide -2 -3 2)
                            (("1" (expand "continuous?")
                              (("1"
                                (assert)
                                (("1"
                                  (expand "o")
                                  (("1" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide 2 3)
                            (("2" (hide -1 -2)
                              (("2"
                                (expand "continuous?")
                                (("2"
                                  (skeep 1)
                                  (("2"
                                    (expand "continuous?")
                                    (("2"
                                      (skeep 1)
                                      (("2"
                                        (inst 1 "epsilon/K")
                                        (("2"
                                          (skeep 1)
                                          (("2"
                                            (case
                                             "NOT -K*(x_1-x0) = x_1 * -K - x0 * -K")
                                            (("1" (assert) nil nil)
                                             ("2"
                                              (replace -1 1)
                                              (("2"
                                                (replace -1 1 rl)
                                                (("2"
                                                  (lemma "abs_mult")
                                                  (("2"
                                                    (inst
                                                     -1
                                                     "-K"
                                                     "(x_1-x0)")
                                                    (("2"
                                                      (replace -1 1)
                                                      (("2"
                                                        (expand
                                                         "abs"
                                                         1
                                                         1)
                                                        (("2"
                                                          (div-by
                                                           1
                                                           "--K")
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (hide 2 3)
                            (("3" (lemma "exp_continuous")
                              (("3"
                                (expand "continuous?")
                                (("3"
                                  (assert)
                                  (("3"
                                    (skeep 1)
                                    (("3"
                                      (inst -1 "x0")
                                      (("3"
                                        (hide -2 -3)
                                        (("3"
                                          (expand "continuous?")
                                          (("3" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide 2 3)
                      (("2" (skeep 1)
                        (("2" (typepred "d_b") (("2" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (hide 2)
                  (("3" (lemma "cont_sub")
                    (("3" (typepred "n")
                      (("3" (inst -2 "n" "f" "g")
                        (("3" (lemma "norm_cont_v2v")
                          (("3" (postpone) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (postpone) nil nil) ("3" (postpone) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil))
 (pre_rho_cont_D_TCC1 0
  (pre_rho_cont_D_TCC1-1 nil 3789407246 ("" (subtype-tcc) nil nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic
     Optimization_Dev)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (norm? const-decl "bool" norms Optimization_Dev)
    (d formal-const-decl "[real -> bool]" metric_rho nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (r2v type-eq-decl nil r2v_def nil)
    (continuous? const-decl "bool" r2v_analysis nil)
    (VectorN type-eq-decl nil matrices matrices)
    (r2v_n type-eq-decl nil r2v_def nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (continuous? const-decl "bool" continuous_functions analysis)
    (continuous? const-decl "bool" continuous_functions analysis)
    (nth const-decl "[(d) -> real]" r2v_def nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (* const-decl "VectorN(length(v2))" matrices matrices))
   nil
   (pre_rho_cont_D subtype "metric_rho.x" "(list_adt[real].cons?)")))
 (pre_rho_cont_D 0
  (pre_rho_cont_D-1 nil 3789409004
   ("" (skeep)
    (("" (lemma "cont_triv")
      ((""
        (inst -1 "(LAMBDA (x: real):
                 ext_c(pre_rho(n, K, nn)(f, g))(x))")
        (("" (assert)
          (("" (flatten)
            (("" (split -1)
              (("1" (hide -2)
                (("1" (expand "contD?")
                  (("1" (skeep)
                    (("1" (inst -1 "p")
                      (("1" (expand "contp?")
                        (("1" (skeep 1)
                          (("1" (inst -1 "nn_1" "norm_inf(1)")
                            (("1" (skeep)
                              (("1"
                                (inst -1 "eps")
                                (("1"
                                  (skeep -1)
                                  (("1"
                                    (inst 1 "delta")
                                    (("1"
                                      (skeep)
                                      (("1"
                                        (inst -1 "x_1")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "restrict")
                                            (("1"
                                              (expand "ext_c")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (typepred "x_1")
                                                  (("1"
                                                    (typepred "d_b")
                                                    (("1"
                                                      (inst-cp
                                                       -5
                                                       "car(x_1)")
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (inst-cp
                                                                   -5
                                                                   "car(p)")
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (hide
                                                                             -1
                                                                             -2
                                                                             -3
                                                                             -4
                                                                             -5
                                                                             -6
                                                                             -7
                                                                             -8
                                                                             -9
                                                                             -10
                                                                             -11
                                                                             -12
                                                                             -13
                                                                             -14)
                                                                            (("1"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (expand "restrict" 1 1)
                (("2" (assert)
                  (("2" (lemma "ext_cont_r")
                    (("2" (inst -1 "pre_rho(n, K, nn)(f, g)")
                      (("1" (assert)
                        (("1" (hide -2 2)
                          (("1" (expand "continuous?")
                            (("1" (skeep 1)
                              (("1"
                                (inst -1 "x0")
                                (("1"
                                  (expand "continuous?")
                                  (("1"
                                    (skeep)
                                    (("1"
                                      (inst -1 "epsilon")
                                      (("1"
                                        (skeep -1)
                                        (("1"
                                          (inst 1 "delta")
                                          (("1"
                                            (skeep 1)
                                            (("1"
                                              (inst -1 "x")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide -1)
                        (("2" (lemma "pre_rho_cont")
                          (("2" (inst -1 "n" "K" "nn" "f" "g") nil
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((d formal-const-decl "[real -> bool]" metric_rho nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (cont_triv formula-decl nil r2v_analysis nil)
    (contD? const-decl "bool" continuity_multivar Optimization_Dev)
    (contD? const-decl "bool" continuity_multivar Optimization_Dev)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (sub const-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (scal def-decl "VectorN(length(v2))" matrices matrices)
    (add def-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (abs def-decl "{l: list | length(l) = length(ll)}" norms
         Optimization_Dev)
    (max def-decl "real" norms Optimization_Dev)
    (norm_inf const-decl "[(cons?) -> nonneg_real]" norms
     Optimization_Dev)
    (d_b const-decl "{dd: list[real] |
   (length(dd) = 2 AND (d(car(dd)) AND d(car(cdr(dd))))) AND
    FORALL (x: real): (car(dd) <= x AND x <= car(cdr(dd))) IFF d(x)}"
     r2v_continuous_extension nil)
    (<= const-decl "bool" reals nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (norm_inf const-decl "(norm?(m))" norms Optimization_Dev)
    (contp? const-decl "bool" continuity_multivar Optimization_Dev)
    (contp? const-decl "bool" continuity_multivar Optimization_Dev)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     Optimization_Dev)
    (g skolem-const-decl "{ff: r2v_n[d](n) | continuous?[d](ff)}"
     metric_rho nil)
    (f skolem-const-decl "{ff: r2v_n[d](n) | continuous?[d](ff)}"
     metric_rho nil)
    (nn skolem-const-decl "(norm?(n))" metric_rho nil)
    (K skolem-const-decl "posreal" metric_rho nil)
    (n skolem-const-decl "posnat" metric_rho nil)
    (continuous? const-decl "bool" continuous_functions analysis)
    (continuous? const-decl "bool" continuous_functions analysis)
    (pre_rho_cont formula-decl nil metric_rho nil)
    (ext_cont_r formula-decl nil r2v_continuous_extension nil)
    (continuous? const-decl "bool" r2v_analysis nil)
    (r2v type-eq-decl nil r2v_def nil)
    (pre_rho const-decl "nnreal" metric_rho nil)
    (nnreal type-eq-decl nil real_types nil)
    (r2v_n type-eq-decl nil r2v_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (norm? const-decl "bool" norms Optimization_Dev)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (ext_c const-decl
     "{ff: [real -> real] | FORALL (x: (d)): ff(x) = f(x)}"
     r2v_continuous_extension nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (restrict const-decl "R" restrict nil))
   nil))
 (rho_TCC1 0
  (rho_TCC1-2 nil 3789410094
   ("" (skeep)
    (("" (lemma "cont_triv")
      ((""
        (inst -1 "(LAMBDA (x: real):
               ext_c(pre_rho(n, K, nn)(f, g))(x))")
        (("" (assert)
          (("" (flatten)
            (("" (split -1)
              (("1" (hide -2)
                (("1" (expand "contD?")
                  (("1" (skeep)
                    (("1" (inst -1 "p")
                      (("1" (expand "contp?")
                        (("1" (skeep 1)
                          (("1" (inst -1 "nn_1" "norm_inf(1)")
                            (("1" (skeep)
                              (("1"
                                (inst -1 "eps")
                                (("1"
                                  (skeep -1)
                                  (("1"
                                    (inst 1 "delta")
                                    (("1"
                                      (skeep)
                                      (("1"
                                        (inst -1 "x_1")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "restrict")
                                            (("1"
                                              (expand "ext_c")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (typepred "x_1")
                                                  (("1"
                                                    (typepred "d_b")
                                                    (("1"
                                                      (inst-cp
                                                       -5
                                                       "car(x_1)")
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (inst-cp
                                                                   -5
                                                                   "car(p)")
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (flatten)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (hide
                                                                             -1
                                                                             -2
                                                                             -3
                                                                             -4
                                                                             -5
                                                                             -6
                                                                             -7
                                                                             -8
                                                                             -9
                                                                             -10
                                                                             -11
                                                                             -12
                                                                             -13
                                                                             -14)
                                                                            (("1"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (expand "restrict" 1 1)
                (("2" (assert)
                  (("2" (lemma "ext_cont_r")
                    (("2" (inst -1 "pre_rho(n, K, nn)(f, g)")
                      (("1" (assert)
                        (("1" (hide -2 2)
                          (("1" (expand "continuous?")
                            (("1" (skeep 1)
                              (("1"
                                (inst -1 "x0")
                                (("1"
                                  (expand "continuous?")
                                  (("1"
                                    (skeep)
                                    (("1"
                                      (inst -1 "epsilon")
                                      (("1"
                                        (skeep -1)
                                        (("1"
                                          (inst 1 "delta")
                                          (("1"
                                            (skeep 1)
                                            (("1"
                                              (inst -1 "x")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide -1)
                        (("2" (lemma "pre_rho_cont")
                          (("2" (inst -1 "n" "K" "nn" "f" "g") nil
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((restrict const-decl "R" restrict nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (ext_c const-decl
     "{ff: [real -> real] | FORALL (x: (d)): ff(x) = f(x)}"
     r2v_continuous_extension nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (norm? const-decl "bool" norms Optimization_Dev)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices matrices)
    (r2v_n type-eq-decl nil r2v_def nil)
    (nnreal type-eq-decl nil real_types nil)
    (pre_rho const-decl "nnreal" metric_rho nil)
    (r2v type-eq-decl nil r2v_def nil)
    (continuous? const-decl "bool" r2v_analysis nil)
    (ext_cont_r formula-decl nil r2v_continuous_extension nil)
    (pre_rho_cont formula-decl nil metric_rho nil)
    (continuous? const-decl "bool" continuous_functions analysis)
    (continuous? const-decl "bool" continuous_functions analysis)
    (n skolem-const-decl "posnat" metric_rho nil)
    (K skolem-const-decl "posreal" metric_rho nil)
    (nn skolem-const-decl "(norm?(n))" metric_rho nil)
    (f skolem-const-decl "{ff: r2v_n(n) | continuous?(ff)}" metric_rho
     nil)
    (g skolem-const-decl "{ff: r2v_n(n) | continuous?(ff)}" metric_rho
     nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     Optimization_Dev)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (contp? const-decl "bool" continuity_multivar Optimization_Dev)
    (contp? const-decl "bool" continuity_multivar Optimization_Dev)
    (norm_inf const-decl "(norm?(m))" norms Optimization_Dev)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (d_b const-decl "{dd: list[real] |
   (length(dd) = 2 AND (d(car(dd)) AND d(car(cdr(dd))))) AND
    FORALL (x: real): (car(dd) <= x AND x <= car(cdr(dd))) IFF d(x)}"
     r2v_continuous_extension nil)
    (norm_inf const-decl "[(cons?) -> nonneg_real]" norms
     Optimization_Dev)
    (max def-decl "real" norms Optimization_Dev)
    (abs def-decl "{l: list | length(l) = length(ll)}" norms
         Optimization_Dev)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (add def-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (scal def-decl "VectorN(length(v2))" matrices matrices)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (sub const-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (contD? const-decl "bool" continuity_multivar Optimization_Dev)
    (contD? const-decl "bool" continuity_multivar Optimization_Dev)
    (cont_triv formula-decl nil r2v_analysis nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (d formal-const-decl "[real -> bool]" metric_rho nil))
   nil
   (rho subtype
    "LAMBDA (x: matrices.VectorN(1)): r2v_continuous_extension[metric_rho.d].ext_c(metric_rho.pre_rho(metric_rho.n, metric_rho.K, metric_rho.nn)(metric_rho.f, metric_rho.g))(list_adt[real].car(x))"
    "{ff: domain_vec2real_def[1].vec2real_f | continuity_multivar[1].contD?(LAMBDA (x: matrices.VectorN(1)): metric_rho.d(list_adt[real].car(x)))(ff)}"))
  (rho_TCC1-1 nil 3789407246 ("" (subtype-tcc) nil nil) nil nil
   (rho subtype
    "LAMBDA (x: matrices.VectorN(1)): r2v_continuous_extension[metric_rho.d].ext_c(metric_rho.pre_rho(metric_rho.n, metric_rho.K, metric_rho.nn)(metric_rho.f, metric_rho.g))(list_adt[real].car(x))"
    "{ff: domain_vec2real_def[1].vec2real_f | continuity_multivar[1].contD?(LAMBDA (x: matrices.VectorN(1)): metric_rho.d(list_adt[real].car(x)))(ff)}")))
 (rho_TCC2 0
  (rho_TCC2-2 nil 3789410126
   ("" (skeep 1)
    (("" (lemma "ci_closed_D")
      (("" (lemma "ci_bounded_D")
        (("" (lemma "ci_nonempty_D")
          (("" (inst?)
            (("1" (inst?)
              (("1" (inst?)
                (("1" (assert) nil nil)
                 ("2" (lemma "closed_interval")
                  (("2" (propax) nil nil)) nil))
                nil)
               ("2" (lemma "closed_interval") (("2" (propax) nil nil))
                nil))
              nil)
             ("2" (lemma "closed_interval") (("2" (propax) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ci_bounded_D formula-decl nil interval_def nil)
    (d formal-const-decl "[real -> bool]" metric_rho nil)
    (closed_interval? const-decl "bool" interval_def nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (closed_interval formula-decl nil metric_rho nil)
    (ci_nonempty_D formula-decl nil interval_def nil)
    (ci_closed_D formula-decl nil interval_def nil))
   nil
   (rho subtype
    "LAMBDA (x: matrices.VectorN(1)): metric_rho.d(list_adt[real].car(x))"
    "{DD: (closed_bounded_domain[1].closed_domain?) | booleans.AND(closed_bounded_domain[1].bounded_domain?(DD), sets[matrices.VectorN(1)].nonempty?(DD))}"))
  (rho_TCC2-1 nil 3789407246 ("" (subtype-tcc) nil nil) nil nil
   (rho subtype
    "LAMBDA (x: matrices.VectorN(1)): metric_rho.d(list_adt[real].car(x))"
    "{DD: (closed_bounded_domain[1].closed_domain?) | booleans.AND(closed_bounded_domain[1].bounded_domain?(DD), sets[matrices.VectorN(1)].nonempty?(DD))}")))
 (rho_TCC3 0
  (rho_TCC3-2 nil 3789410152
   ("" (skeep)
    (("" (assert)
      ((""
        (typepred " max[1]
              (LAMBDA (x: VectorN(1)): d(car[real](x)))
              (LAMBDA (x: VectorN(1)):
                 ext_c(pre_rho(n, K, nn)(f, g))(car[real](x)))")
        (("1" (expand "is_glob_max?")
          (("1" (skeep -2)
            (("1" (case "d(car(v))")
              (("1" (typepred "d_b")
                (("1" (inst -5 "car(v)")
                  (("1" (flatten)
                    (("1" (expand "ext_c" -9)
                      (("1" (assert)
                        (("1" (flatten)
                          (("1" (assert)
                            (("1"
                              (typepred
                               "pre_rho(n, K, nn)(f, g)(car[real](v))")
                              (("1"
                                (expand "ext_c" 1 1)
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (typepred "d_b")
                (("2" (inst-cp -5 "car(v)")
                  (("2" (inst -5 "car(d_b)")
                    (("2" (flatten) (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide 2)
          (("2" (lemma "closed_interval")
            (("2" (lemma "ci_closed_D")
              (("2" (lemma "ci_bounded_D")
                (("2" (lemma "ci_nonempty_D")
                  (("2" (inst?)
                    (("2" (inst?)
                      (("2" (inst?) (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (hide 2)
          (("3" (lemma "pre_rho_cont_D") (("3" (inst?) nil nil)) nil))
          nil)
         ("4" (skeep 1)
          (("4" (typepred "x")
            (("4" (hide 2) (("4" (grind) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((max const-decl
         "{c: real | is_glob_max?(f, D)(c) AND EXISTS (v: (D)): f(v) = c}"
         max_function Optimization_Dev)
    (contD? const-decl "bool" continuity_multivar Optimization_Dev)
    (nonempty? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (bounded_domain? const-decl "bool" closed_bounded_domain
     Optimization_Dev)
    (closed_domain? const-decl "bool" closed_bounded_domain
     Optimization_Dev)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (continuous? const-decl "bool" r2v_analysis nil)
    (r2v type-eq-decl nil r2v_def nil)
    (pre_rho const-decl "nnreal" metric_rho nil)
    (nnreal type-eq-decl nil real_types nil)
    (r2v_n type-eq-decl nil r2v_def nil)
    (norm? const-decl "bool" norms Optimization_Dev)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (ext_c const-decl
     "{ff: [real -> real] | FORALL (x: (d)): ff(x) = f(x)}"
     r2v_continuous_extension nil)
    (d formal-const-decl "[real -> bool]" metric_rho nil)
    (is_glob_max? const-decl "bool" unconstrained_global_extrema
     Optimization_Dev)
    (domain type-eq-decl nil domain_vec2real_def Optimization_Dev)
    (vec2real_f type-eq-decl nil domain_vec2real_def Optimization_Dev)
    (VectorN type-eq-decl nil matrices matrices)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     Optimization_Dev)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (d_b const-decl "{dd: list[real] |
   (length(dd) = 2 AND (d(car(dd)) AND d(car(cdr(dd))))) AND
    FORALL (x: real): (car(dd) <= x AND x <= car(cdr(dd))) IFF d(x)}"
     r2v_continuous_extension nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (closed_interval formula-decl nil metric_rho nil)
    (ci_bounded_D formula-decl nil interval_def nil)
    (closed_interval? const-decl "bool" interval_def nil)
    (ci_nonempty_D formula-decl nil interval_def nil)
    (ci_closed_D formula-decl nil interval_def nil)
    (pre_rho_cont_D formula-decl nil metric_rho nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (rho subtype
    "max_function[1].max(LAMBDA (x: matrices.VectorN(1)): metric_rho.d(list_adt[real].car(x)))(LAMBDA (x: matrices.VectorN(1)): r2v_continuous_extension[metric_rho.d].ext_c(metric_rho.pre_rho(metric_rho.n, metric_rho.K, metric_rho.nn)(metric_rho.f, metric_rho.g))(list_adt[real].car(x)))"
    "nnreal"))
  (rho_TCC3-1 nil 3789407246 ("" (subtype-tcc) nil nil) nil nil
   (rho subtype
    "max_function[1].max(LAMBDA (x: matrices.VectorN(1)): metric_rho.d(list_adt[real].car(x)))(LAMBDA (x: matrices.VectorN(1)): r2v_continuous_extension[metric_rho.d].ext_c(metric_rho.pre_rho(metric_rho.n, metric_rho.K, metric_rho.nn)(metric_rho.f, metric_rho.g))(list_adt[real].car(x)))"
    "nnreal")))
 (rho_zero 0
  (rho_zero-1 nil 3789409088
   ("" (skeep)
    (("" (expand "metric_zero?" 1)
      (("" (skeep 1)
        (("" (typepred "x")
          (("" (typepred "y")
            (("" (expand "rho" 1)
              (("" (split 1)
                (("1" (flatten)
                  (("1" (decompose-equality 1)
                    (("1"
                      (typepred "max(LAMBDA (x: VectorN(1)): d(car(x)))
                     (LAMBDA (x_1: VectorN(1)):
                        ext_c(pre_rho(n, K, nn)(x, y))(car(x_1)))")
                      (("1" (expand "is_glob_max?" -1)
                        (("1" (skeep -1)
                          (("1" (typepred "x!1")
                            (("1" (inst -3 "(: x!1 :)")
                              (("1"
                                (assert)
                                (("1"
                                  (case
                                   " ext_c(pre_rho(n, K, nn)(x, y))(x!1)=0")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "pre_rho" -1)
                                      (("1"
                                        (typepred "d_b")
                                        (("1"
                                          (inst -5 "x!1")
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand "ext_c" -8)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (div-by
                                                         -8
                                                         "exp(x!1 * -K - car(d_b) * -K)")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (typepred
                                                             "nn")
                                                            (("1"
                                                              (expand
                                                               "norm?"
                                                               -1)
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (inst
                                                                   -3
                                                                   "x(x!1) - y(x!1)")
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (lemma
                                                                         "diff_zero")
                                                                        (("1"
                                                                          (inst
                                                                           -1
                                                                           "n"
                                                                           "x(x!1)"
                                                                           "y(x!1)")
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (typepred
                                                                     "x(x!1) - y(x!1)"
                                                                     "y(x!1)"
                                                                     "x(x!1)")
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (replace
                                                                         -4)
                                                                        (("2"
                                                                          (replace
                                                                           -6)
                                                                          (("2"
                                                                            (expand
                                                                             "max"
                                                                             -2)
                                                                            (("2"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (assert)
                                    (("2"
                                      (typepred "d_b")
                                      (("2"
                                        (inst -5 "x!1")
                                        (("2"
                                          (flatten)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (flatten)
                                              (("2"
                                                (expand "ext_c" -10 1)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (expand
                                                     "ext_c"
                                                     1
                                                     1)
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (lemma "closed_interval")
                        (("2" (lemma "ci_closed_D")
                          (("2" (lemma "ci_bounded_D")
                            (("2" (lemma "ci_nonempty_D")
                              (("2"
                                (inst?)
                                (("2"
                                  (inst?)
                                  (("2"
                                    (inst?)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("3" (lemma "pre_rho_cont_D")
                        (("3" (inst?) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2"
                    (typepred "max(LAMBDA (x: VectorN(1)): d(car(x)))
                     (LAMBDA (x_1: VectorN(1)):
                        ext_c(pre_rho(n, K, nn)(x, y))(car(x_1)))")
                    (("1" (skeep -2)
                      (("1" (replace -2 1 rl)
                        (("1" (decompose-equality -3)
                          (("1" (typepred "v")
                            (("1" (case "d(car(v))")
                              (("1"
                                (lemma "sub_self")
                                (("1"
                                  (inst -1 "x(car(v))")
                                  (("1"
                                    (case
                                     "NOT x(car(v))-y(car(v))= zero_vec(length(x(car(v))))")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (hide -2)
                                        (("1"
                                          (inst -5 "car(v)")
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide -2)
                                      (("2"
                                        (expand "ext_c" 1 1)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (typepred "d_b")
                                            (("2"
                                              (inst -5 "car(v)")
                                              (("2"
                                                (flatten)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (flatten)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (expand
                                                         "pre_rho"
                                                         1
                                                         1)
                                                        (("2"
                                                          (div-by
                                                           1
                                                           "exp(car(v) * -K - car(d_b) * -K)")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (typepred
                                                               "nn")
                                                              (("2"
                                                                (expand
                                                                 "norm?"
                                                                 -1)
                                                                (("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (inst
                                                                     -3
                                                                     "x(car(v))-y(car(v))")
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (typepred "x(car(v))")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2" (propax) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (typepred "d_b")
                      (("2" (assert)
                        (("2" (hide -5)
                          (("2" (split 1)
                            (("1" (assert)
                              (("1"
                                (lemma "sub_self")
                                (("1"
                                  (inst -1 "x(car(d_b))")
                                  (("1"
                                    (case
                                     "NOT x(car(d_b)) - y(car(d_b)) = zero_vec(length(x(car(d_b))))")
                                    (("1" (assert) nil nil)
                                     ("2"
                                      (assert)
                                      (("2"
                                        (typepred "nn")
                                        (("2"
                                          (expand "norm?" -1)
                                          (("2"
                                            (flatten)
                                            (("2"
                                              (inst
                                               -3
                                               "x(car(d_b)) - y(car(d_b))")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (lemma "ci_closed_D")
                                                  (("2"
                                                    (inst?)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (lemma
                                                         "closed_interval")
                                                        (("2"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (lemma "ci_bounded_D")
                              (("2"
                                (inst?)
                                (("2"
                                  (lemma "closed_interval")
                                  (("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (assert)
                              (("3"
                                (lemma "ci_nonempty_D")
                                (("3"
                                  (inst?)
                                  (("3"
                                    (lemma "closed_interval")
                                    (("3" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (assert)
                      (("3" (lemma "pre_rho_cont_D")
                        (("3" (inst?) nil nil)) nil))
                      nil)
                     ("4" (skeep 1)
                      (("4" (typepred "x_1") (("4" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((metric_zero? const-decl "bool" metric_def metric_space)
    (S type-eq-decl nil metric_rho nil)
    (r2v_n type-eq-decl nil r2v_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (continuous? const-decl "bool" r2v_analysis nil)
    (r2v type-eq-decl nil r2v_def nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (d formal-const-decl "[real -> bool]" metric_rho nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (rho const-decl "nnreal" metric_rho nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (continuous? const-decl "bool" continuous_functions analysis)
    (continuous? const-decl "bool" continuous_functions analysis)
    (nth const-decl "[(d) -> real]" r2v_def nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (add def-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (exp_0 formula-decl nil ln_exp lnexp)
    (convergence? const-decl "bool" vector_sequences Optimization_Dev)
    (convergence? const-decl "bool" vector_sequences Optimization_Dev)
    (sub const-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (scal def-decl "VectorN(length(v2))" matrices matrices)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (v skolem-const-decl "(LAMBDA (x: VectorN(1)): d(car(x)))"
     metric_rho nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic Optimization_Dev)
    (sub_self formula-decl nil vector_arithmetic Optimization_Dev)
    (max const-decl
         "{c: real | is_glob_max?(f, D)(c) AND EXISTS (v: (D)): f(v) = c}"
         max_function Optimization_Dev)
    (contD? const-decl "bool" continuity_multivar Optimization_Dev)
    (nonempty? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (bounded_domain? const-decl "bool" closed_bounded_domain
     Optimization_Dev)
    (closed_domain? const-decl "bool" closed_bounded_domain
     Optimization_Dev)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (pre_rho const-decl "nnreal" metric_rho nil)
    (nnreal type-eq-decl nil real_types nil)
    (norm? const-decl "bool" norms Optimization_Dev)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (ext_c const-decl
     "{ff: [real -> real] | FORALL (x: (d)): ff(x) = f(x)}"
     r2v_continuous_extension nil)
    (is_glob_max? const-decl "bool" unconstrained_global_extrema
     Optimization_Dev)
    (domain type-eq-decl nil domain_vec2real_def Optimization_Dev)
    (vec2real_f type-eq-decl nil domain_vec2real_def Optimization_Dev)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (length_singleton formula-decl nil more_list_props structures)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (n skolem-const-decl "posnat" metric_rho nil)
    (x skolem-const-decl "S(n)" metric_rho nil)
    (x!1 skolem-const-decl "(d)" metric_rho nil)
    (y skolem-const-decl "S(n)" metric_rho nil)
    (diff_zero formula-decl nil vector_arithmetic Optimization_Dev)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (times_div_cancel1 formula-decl nil extra_real_props nil)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (Vector type-eq-decl nil matrices matrices)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (exp const-decl "{py | x = ln(py)}" ln_exp lnexp)
    (ln const-decl "real" ln_exp lnexp)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (both_sides_div1 formula-decl nil real_props nil)
    (d_b const-decl "{dd: list[real] |
   (length(dd) = 2 AND (d(car(dd)) AND d(car(cdr(dd))))) AND
    FORALL (x: real): (car(dd) <= x AND x <= car(cdr(dd))) IFF d(x)}"
     r2v_continuous_extension nil)
    (<= const-decl "bool" reals nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ci_closed_D formula-decl nil interval_def nil)
    (ci_nonempty_D formula-decl nil interval_def nil)
    (closed_interval? const-decl "bool" interval_def nil)
    (ci_bounded_D formula-decl nil interval_def nil)
    (closed_interval formula-decl nil metric_rho nil)
    (pre_rho_cont_D formula-decl nil metric_rho nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     Optimization_Dev))
   nil))
 (rho_symmetric 0
  (rho_symmetric-1 nil 3789409127
   ("" (skeep)
    (("" (expand "metric_symmetric?")
      (("" (skeep)
        (("" (expand "rho" 1)
          ((""
            (case "(LAMBDA (x_1: VectorN(1)):
                   ext_c(pre_rho(n, K, nn)(x, y))(car(x_1))) = (LAMBDA (x_1: VectorN(1)):
                    ext_c(pre_rho(n, K, nn)(y, x))(car(x_1)))")
            (("1" (assert) nil nil)
             ("2" (hide 2)
              (("2" (decompose-equality 1)
                (("1" (typepred "x!1")
                  (("1" (hide -1 -2)
                    (("1" (typepred "d_b")
                      (("1" (inst-cp -5 "car(x!1)")
                        (("1" (inst -5 "car(d_b)")
                          (("1" (flatten)
                            (("1" (hide -1)
                              (("1"
                                (case "d(car(x!1))")
                                (("1"
                                  (replace -1)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (expand "ext_c")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "pre_rho" 1)
                                          (("1"
                                            (div-by
                                             1
                                             " exp(car(x!1) * -K - car(d_b) * -K)")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (lemma "norm_reflex")
                                                (("1"
                                                  (typepred "nn")
                                                  (("1"
                                                    (inst
                                                     -2
                                                     "n"
                                                     "nn"
                                                     "x(car(x!1))"
                                                     "y(car(x!1))")
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (assert)
                                  (("2"
                                    (hide -6)
                                    (("2"
                                      (hide -4)
                                      (("2"
                                        (split 2)
                                        (("1"
                                          (expand "ext_c" 3)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "pre_rho" 3)
                                              (("1"
                                                (div-by 3 "exp(0)")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (lemma
                                                     "norm_reflex")
                                                    (("1"
                                                      (inst
                                                       -1
                                                       "n"
                                                       "nn"
                                                       "x(car(d_b))"
                                                       "y(car(d_b))")
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (assert)
                                          (("2"
                                            (expand "ext_c" 3)
                                            (("2"
                                              (expand "pre_rho" 3)
                                              (("2"
                                                (div-by
                                                 3
                                                 " exp(car(cdr(d_b)) * -K - car(d_b) * -K)")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (lemma
                                                     "norm_reflex")
                                                    (("2"
                                                      (inst
                                                       -1
                                                       "n"
                                                       "nn"
                                                       "(x(car(cdr(d_b))))"
                                                       " y(car(cdr(d_b)))")
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (skeep 1)
                  (("2" (typepred "x_1") (("2" (grind) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("3" (hide 2)
              (("3" (skeep)
                (("3" (typepred "x_1") (("3" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((metric_symmetric? const-decl "bool" metric_def metric_space)
    (rho const-decl "nnreal" metric_rho nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (d_b const-decl "{dd: list[real] |
   (length(dd) = 2 AND (d(car(dd)) AND d(car(cdr(dd))))) AND
    FORALL (x: real): (car(dd) <= x AND x <= car(cdr(dd))) IFF d(x)}"
     r2v_continuous_extension nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (norm_reflex formula-decl nil norms Optimization_Dev)
    (times_div_cancel1 formula-decl nil extra_real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (Vector type-eq-decl nil matrices matrices)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (exp const-decl "{py | x = ln(py)}" ln_exp lnexp)
    (ln const-decl "real" ln_exp lnexp)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (both_sides_div1 formula-decl nil real_props nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     Optimization_Dev)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices matrices)
    (d formal-const-decl "[real -> bool]" metric_rho nil)
    (ext_c const-decl
     "{ff: [real -> real] | FORALL (x: (d)): ff(x) = f(x)}"
     r2v_continuous_extension nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (norm? const-decl "bool" norms Optimization_Dev)
    (r2v_n type-eq-decl nil r2v_def nil)
    (nnreal type-eq-decl nil real_types nil)
    (pre_rho const-decl "nnreal" metric_rho nil)
    (r2v type-eq-decl nil r2v_def nil)
    (continuous? const-decl "bool" r2v_analysis nil)
    (S type-eq-decl nil metric_rho nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil))
   nil))
 (rho_triangle 0
  (rho_triangle-1 nil 3789409151
   ("" (skeep)
    (("" (expand "metric_triangle?")
      (("" (skeep 1)
        (("" (expand "rho")
          (("" (lemma "max_ineq")
            (("" (inst -1 "LAMBDA (x: VectorN(1)): d(car(x))" "_" "_")
              (("1"
                (case "FORALL (x_1: (LAMBDA (x: VectorN(1)): d(car(x)))): ext_c(pre_rho(n, K, nn)(x, z))(car(x_1)) <= ext_c(pre_rho(n, K, nn)(x, y))(car(x_1)) +  ext_c(pre_rho(n, K, nn)(y, z))(car(x_1))")
                (("1"
                  (inst -2 "LAMBDA (x_1: VectorN(1)):
                  ext_c(pre_rho(n, K, nn)(x, z))(car(x_1))"
                   "LAMBDA(x_1: VectorN(1)): ext_c(pre_rho(n, K, nn)(x, y))(car(x_1)) +
                ext_c(pre_rho(n, K, nn)(y, z))(car(x_1))")
                  (("1" (split -2)
                    (("1" (lemma "max_plus")
                      (("1"
                        (inst -1 "(LAMBDA (x: VectorN(1)): d(car(x)))"
                         "(LAMBDA (x_1: VectorN(1)):
                       ext_c(pre_rho(n, K, nn)(x, y))(car(x_1)))"
                         "(LAMBDA (x_1: VectorN(1)):
                       ext_c(pre_rho(n, K, nn)(y, z))(car(x_1)))")
                        (("1" (assert)
                          (("1" (expand "+" -1 1)
                            (("1" (assert) nil nil)) nil))
                          nil)
                         ("2" (lemma "pre_rho_cont_D")
                          (("2" (inst?) nil nil)) nil)
                         ("3" (lemma "pre_rho_cont_D")
                          (("3" (inst?) nil nil)) nil)
                         ("4" (lemma "d_three")
                          (("4" (inst -1 "d")
                            (("4" (lemma "closed_interval")
                              (("4" (propax) nil nil)) nil))
                            nil))
                          nil)
                         ("5" (hide-all-but 1)
                          (("5" (skeep 1)
                            (("5" (typepred "x!1")
                              (("5" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (propax) nil nil))
                    nil)
                   ("2" (lemma "cont_sum")
                    (("2"
                      (inst -1
                       "(LAMBDA (x: VectorN(1)): d(car[real](x)))"
                       "LAMBDA (x_1: VectorN(1)):
                     ext_c(pre_rho(n, K, nn)(x, y))(car[real](x_1))"
                       "LAMBDA (x_1: VectorN(1)):
                     ext_c(pre_rho(n, K, nn)(y, z))(car[real](x_1))")
                      (("1" (assert)
                        (("1" (split -1)
                          (("1" (assert)
                            (("1" (expand "+" -1 1)
                              (("1"
                                (assert)
                                (("1"
                                  (hide -2 2)
                                  (("1"
                                    (expand "contD?")
                                    (("1"
                                      (skeep)
                                      (("1"
                                        (inst -1 "p")
                                        (("1"
                                          (expand "contp?")
                                          (("1" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide 2 3)
                            (("2" (lemma "pre_rho_cont_D")
                              (("2"
                                (typepred "nn")
                                (("2"
                                  (inst -2 "n" "K" "nn" "x" "y")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (expand "contD?")
                                      (("2"
                                        (skeep)
                                        (("2"
                                          (inst -2 "p")
                                          (("2"
                                            (expand "contp?")
                                            (("2" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (hide 2 3)
                            (("3" (hide -1)
                              (("3"
                                (lemma "pre_rho_cont_D")
                                (("3"
                                  (inst?)
                                  (("3"
                                    (expand "contD?")
                                    (("3"
                                      (skeep)
                                      (("3"
                                        (inst -1 "p")
                                        (("3"
                                          (expand "contp?")
                                          (("3" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide-all-but 1)
                        (("2" (skeep)
                          (("2" (typepred "x!1")
                            (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (hide -1 2)
                    (("3" (lemma "pre_rho_cont_D")
                      (("3" (inst?) nil nil)) nil))
                    nil)
                   ("4" (hide 2 -1)
                    (("4" (skeep)
                      (("4" (typepred "x_1") (("4" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide 2 -1)
                  (("2" (skeep 1)
                    (("2" (typepred "x_1")
                      (("2" (typepred "d_b")
                        (("2" (inst-cp -5 "car(x_1)")
                          (("2" (inst -5 "car(d_b)")
                            (("2" (flatten)
                              (("2"
                                (expand "ext_c" 1)
                                (("2"
                                  (assert)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (flatten)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (expand "pre_rho" 1)
                                          (("2"
                                            (case
                                             "nn(x(car(x_1)) - z(car(x_1))) <= nn(x(car(x_1)) - y(car(x_1)))+ nn(y(car(x_1)) - z(car(x_1)))")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (mult-by
                                                 -1
                                                 "  exp(car(x_1) * -K - car(d_b) * -K)")
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide 2)
                                              (("2"
                                                (typepred "nn")
                                                (("2"
                                                  (expand "norm?" -1)
                                                  (("2"
                                                    (flatten)
                                                    (("2"
                                                      (case
                                                       "x(car(x_1)) - z(car(x_1)) = (x(car(x_1)) - y(car(x_1))) + (y(car(x_1)) - z(car(x_1)))")
                                                      (("1"
                                                        (replace -1 1)
                                                        (("1"
                                                          (inst
                                                           -5
                                                           "(x(car(x_1)) - y(car(x_1)))"
                                                           " (y(car(x_1)) - z(car(x_1)))")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (hide 2)
                                                              (("1"
                                                                (typepred
                                                                 "(y(car[real](x_1)) - z(car[real](x_1)))"
                                                                 "y(car(x_1))"
                                                                 "z(car(x_1))")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (replace
                                                                     -4)
                                                                    (("1"
                                                                      (replace
                                                                       -6)
                                                                      (("1"
                                                                        (expand
                                                                         "max"
                                                                         -2)
                                                                        (("1"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            (("2"
                                                              (typepred
                                                               "(x(car[real](x_1)) - y(car[real](x_1)))"
                                                               "x(car(x_1))"
                                                               "y(car(x_1))")
                                                              (("2"
                                                                (replace
                                                                 -4)
                                                                (("2"
                                                                  (replace
                                                                   -6)
                                                                  (("2"
                                                                    (expand
                                                                     "max"
                                                                     -2)
                                                                    (("2"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        (("2"
                                                          (hide 2)
                                                          (("2"
                                                            (lemma
                                                             "quad_cancel_plus")
                                                            (("2"
                                                              (inst?)
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (hide-all-but 1)
                  (("3" (skeep)
                    (("3" (typepred "x_1") (("3" (grind) nil nil))
                      nil))
                    nil))
                  nil)
                 ("4" (hide 2 -1)
                  (("4" (skeep 1)
                    (("4" (typepred "x!1") (("4" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 2)
                (("2" (lemma "d_three")
                  (("2" (lemma "closed_interval")
                    (("2" (inst -2 "d") nil nil)) nil))
                  nil))
                nil)
               ("3" (hide 2)
                (("3" (skeep 1)
                  (("3" (typepred "x!1") (("3" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((metric_triangle? const-decl "bool" metric_def metric_space)
    (rho const-decl "nnreal" metric_rho nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (VectorN type-eq-decl nil matrices matrices)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (nonempty? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (bounded_domain? const-decl "bool" closed_bounded_domain
     Optimization_Dev)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (d formal-const-decl "[real -> bool]" metric_rho nil)
    (closed_domain? const-decl "bool" closed_bounded_domain
     Optimization_Dev)
    (domain type-eq-decl nil domain_vec2real_def Optimization_Dev)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (x_1 skolem-const-decl "(LAMBDA (x: VectorN(1)): d(car(x)))"
     metric_rho nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (quad_cancel_plus formula-decl nil vector_arithmetic
     Optimization_Dev)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (exp const-decl "{py | x = ln(py)}" ln_exp lnexp)
    (ln const-decl "real" ln_exp lnexp)
    (both_sides_times_pos_le1_imp formula-decl nil extra_real_props
     nil)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (Vector type-eq-decl nil matrices matrices)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (d_b const-decl "{dd: list[real] |
   (length(dd) = 2 AND (d(car(dd)) AND d(car(cdr(dd))))) AND
    FORALL (x: real): (car(dd) <= x AND x <= car(cdr(dd))) IFF d(x)}"
     r2v_continuous_extension nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def Optimization_Dev)
    (contD? const-decl "bool" continuity_multivar Optimization_Dev)
    (n skolem-const-decl "posnat" metric_rho nil)
    (K skolem-const-decl "posreal" metric_rho nil)
    (nn skolem-const-decl "(norm?(n))" metric_rho nil)
    (x skolem-const-decl "S(n)" metric_rho nil)
    (z skolem-const-decl "S(n)" metric_rho nil)
    (y skolem-const-decl "S(n)" metric_rho nil)
    (max_plus formula-decl nil max_function Optimization_Dev)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     Optimization_Dev)
    (d_three formula-decl nil interval_def nil)
    (closed_interval formula-decl nil metric_rho nil)
    (closed_interval? const-decl "bool" interval_def nil)
    (pre_rho_cont_D formula-decl nil metric_rho nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (+ const-decl "[T -> real]" real_fun_ops reals)
    (contp? const-decl "bool" continuity_multivar Optimization_Dev)
    (contp? const-decl "bool" continuity_multivar Optimization_Dev)
    (contD? const-decl "bool" continuity_multivar Optimization_Dev)
    (cont_sum formula-decl nil continuity_multivar Optimization_Dev)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (<= const-decl "bool" reals nil)
    (ext_c const-decl
     "{ff: [real -> real] | FORALL (x: (d)): ff(x) = f(x)}"
     r2v_continuous_extension nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (norm? const-decl "bool" norms Optimization_Dev)
    (r2v_n type-eq-decl nil r2v_def nil)
    (nnreal type-eq-decl nil real_types nil)
    (pre_rho const-decl "nnreal" metric_rho nil)
    (r2v type-eq-decl nil r2v_def nil)
    (continuous? const-decl "bool" r2v_analysis nil)
    (S type-eq-decl nil metric_rho nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (max_ineq formula-decl nil max_function Optimization_Dev))
   nil))
 (rho_metric 0
  (rho_metric-1 nil 3789409188
   ("" (skeep)
    (("" (expand "metric?" 1)
      (("" (lemma "rho_zero")
        (("" (lemma "rho_symmetric")
          (("" (lemma "rho_triangle")
            (("" (inst?)
              (("" (inst?) (("" (inst?) (("" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((metric? const-decl "bool" metric_def metric_space)
    (rho_symmetric formula-decl nil metric_rho nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (norm? const-decl "bool" norms Optimization_Dev)
    (rho_triangle formula-decl nil metric_rho nil)
    (rho_zero formula-decl nil metric_rho nil))
   nil)))

