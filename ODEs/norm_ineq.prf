(norm_ineq
 (IMP_ODE_continuous_def_TCC1 0
  (IMP_ODE_continuous_def_TCC1-1 nil 3789482076
   ("" (lemma "non_empty") (("" (propax) nil nil)) nil)
   ((non_empty formula-decl nil norm_ineq nil)) nil
   (IMP_ODE_continuous_def assuming
    "ODE_continuous_def[norm_ineq.d].ODE_continuous_def"
    "non_empty: ASSUMPTION sets[real].nonempty?(ODE_continuous_def.d)")))
 (IMP_ODE_continuous_def_TCC2 0
  (IMP_ODE_continuous_def_TCC2-1 nil 3789482076
   ("" (lemma "connected") (("" (propax) nil nil)) nil)
   ((connected formula-decl nil norm_ineq nil)) nil
   (IMP_ODE_continuous_def assuming
    "ODE_continuous_def[norm_ineq.d].ODE_continuous_def"
    "connected: ASSUMPTION deriv_domain_def[(ODE_continuous_def.d)].connected?")))
 (IMP_ODE_continuous_def_TCC3 0
  (IMP_ODE_continuous_def_TCC3-1 nil 3789482076
   ("" (lemma "not_one_element") (("" (propax) nil nil)) nil)
   ((not_one_element formula-decl nil norm_ineq nil)) nil
   (IMP_ODE_continuous_def assuming
    "ODE_continuous_def[norm_ineq.d].ODE_continuous_def"
    "not_one_element: ASSUMPTION deriv_domain_def[(ODE_continuous_def.d)].not_one_element?")))
 (int_od_fx 0
  (int_od_fx-1 nil 3788084917
   ("" (skeep)
    (("" (lemma "cont_int")
      (("" (inst -1 "od_fx(n,f,y)")
        (("" (split -1)
          (("1" (inst -1 "a" "b") nil nil)
           ("2" (lemma "cont_od_fx")
            (("2" (lemma " cont_od_fx") (("2" (inst?) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((d formal-const-decl "[real -> bool]" norm_ineq nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (cont_int formula-decl nil r2v_analysis nil)
    (cont_od_fx formula-decl nil ODE_continuous_def nil)
    (continuous? const-decl "bool" r2v_analysis nil)
    (cont_d? const-decl "bool" ODE_continuous_def nil)
    (Lip_d? const-decl "bool" ODE_Lipschitz_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (od_fx const-decl "{ff: r2v_n(n) | length(ff) = n}" ODE_def nil)
    (length const-decl "nat" r2v_def nil)
    (r2v_n type-eq-decl nil r2v_def nil)
    (od_f type-eq-decl nil ODE_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (r2v type-eq-decl nil r2v_def nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil))
   shostak))
 (int_norm_od_fx_TCC1 0
  (int_norm_od_fx_TCC1-1 nil 3788086806 ("" (subtype-tcc) nil nil) nil
   nil
   (int_norm_od_fx subtype "norm_ineq.b"
    "{x: (norm_ineq.d) | reals.<(norm_ineq.a, x)}")))
 (int_norm_od_fx_TCC2 0
  (int_norm_od_fx_TCC2-1 nil 3788086806 ("" (subtype-tcc) nil nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices matrices)
    (od_f type-eq-decl nil ODE_def nil)
    (Lip_d? const-decl "bool" ODE_Lipschitz_def nil)
    (cont_d? const-decl "bool" ODE_continuous_def nil)
    (r2v type-eq-decl nil r2v_def nil)
    (continuous? const-decl "bool" r2v_analysis nil)
    (r2v_n type-eq-decl nil r2v_def nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (n!1 skolem-const-decl "posnat" norm_ineq nil)
    (Vector type-eq-decl nil matrices matrices)
    (scal def-decl "VectorN(length(v2))" matrices matrices)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic Optimization_Dev)
    (<= const-decl "bool" reals nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (add def-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (continuous? const-decl "bool" continuous_functions analysis)
    (continuous? const-decl "bool" continuous_functions analysis)
    (nth const-decl "[(d) -> real]" r2v_def nil)
    (contD? const-decl "bool" continuity_multivar Optimization_Dev)
    (contp? const-decl "bool" continuity_multivar Optimization_Dev)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (sub const-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     Optimization_Dev)
    (d formal-const-decl "[real -> bool]" norm_ineq nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (od_fx const-decl "{ff: r2v_n(n) | length(ff) = n}" ODE_def nil)
    (norm? const-decl "bool" norms Optimization_Dev)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (* const-decl "VectorN(length(v2))" matrices matrices))
   nil
   (int_norm_od_fx subtype
    "ODE_def[norm_ineq.d].od_fx(norm_ineq.n, norm_ineq.f, norm_ineq.y)(norm_ineq.x)"
    "(list_adt[real].cons?)")))
 (int_norm_od_fx 0
  (int_norm_od_fx-1 nil 3788086915
   ("" (skeep)
    (("" (lemma "cont_fun_integrable[(d)]")
      (("1"
        (inst -1 "a" "b"
         "LAMBDA (x: (d)): norm_inf(n)(od_fx[d](n, f, y)(x))")
        (("1" (assert)
          (("1" (hide 2)
            (("1" (lemma "cont_Lip_real")
              (("1" (inst?) (("1" (assert) nil nil)) nil)) nil))
            nil))
          nil)
         ("2" (hide 2)
          (("2" (skeep)
            (("2" (typepred "od_fx(n,f,y)")
              (("2" (expand "length" -1)
                (("2" (typepred "od_fx(n,f,y)")
                  (("2" (typepred "od_fx(n,f,y)(x)")
                    (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (lemma "not_one_element") (("2" (propax) nil nil)) nil)
       ("3" (lemma "connected") (("3" (propax) nil nil)) nil))
      nil))
    nil)
   ((d formal-const-decl "[real -> bool]" norm_ineq nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (cont_fun_integrable formula-decl nil integral_cont analysis)
    (connected? const-decl "bool" deriv_domain_def analysis)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     Optimization_Dev)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (cont_Lip_real formula-decl nil ODE_continuous_def nil)
    (norm_inf const-decl "(norm?(m))" norms Optimization_Dev)
    (norm? const-decl "bool" norms Optimization_Dev)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices matrices)
    (od_f type-eq-decl nil ODE_def nil)
    (r2v_n type-eq-decl nil r2v_def nil)
    (r2v type-eq-decl nil r2v_def nil)
    (length const-decl "nat" r2v_def nil)
    (od_fx const-decl "{ff: r2v_n(n) | length(ff) = n}" ODE_def nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n skolem-const-decl "posnat" norm_ineq nil)
    (Lip_d? const-decl "bool" ODE_Lipschitz_def nil)
    (cont_d? const-decl "bool" ODE_continuous_def nil)
    (f skolem-const-decl
     "{ff: od_f[d](n) | Lip_d?[d](n)(ff) AND cont_d?[d](n)(ff)}"
     norm_ineq nil)
    (continuous? const-decl "bool" r2v_analysis nil)
    (y skolem-const-decl "{yy: r2v_n[d](n) | continuous?[d](yy)}"
     norm_ineq nil)
    (not_one_element formula-decl nil norm_ineq nil)
    (connected formula-decl nil norm_ineq nil))
   shostak))
 (norminf_int_TCC1 0
  (norminf_int_TCC1-1 nil 3788027958
   ("" (lemma "int_od_fx")
    (("" (assert) (("" (skeep 1) (("" (postpone) nil nil)) nil)) nil))
    nil)
   ((int_od_fx formula-decl nil norm_ineq nil)) nil
   (norminf_int subtype
    "ODE_def[norm_ineq.d].od_fx(norm_ineq.n, norm_ineq.f, norm_ineq.y)"
    "{ff: r2v_def[norm_ineq.d].r2v | r2v_analysis[norm_ineq.d].integrable?(norm_ineq.a, norm_ineq.b, ff)}")))
 (norminf_int_TCC2 0
  (norminf_int_TCC2-1 nil 3788027958
   ("" (skeep)
    (("" (typepred "integral[d](a, b, od_fx[d](n, f, y))")
      (("" (typepred "od_fx(n,f,y)")
        (("" (typepred "n") (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((continuous? const-decl "bool" r2v_analysis nil)
    (cont_d? const-decl "bool" ODE_continuous_def nil)
    (Lip_d? const-decl "bool" ODE_Lipschitz_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (od_fx const-decl "{ff: r2v_n(n) | length(ff) = n}" ODE_def nil)
    (r2v_n type-eq-decl nil r2v_def nil)
    (od_f type-eq-decl nil ODE_def nil)
    (integral def-decl "VectorN(length(f))" r2v_analysis nil)
    (VectorN type-eq-decl nil matrices matrices)
    (length const-decl "nat" r2v_def nil)
    (integrable? const-decl "bool" r2v_analysis nil)
    (r2v type-eq-decl nil r2v_def nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (> const-decl "bool" reals nil)
    (d formal-const-decl "[real -> bool]" norm_ineq nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     Optimization_Dev))
   nil
   (norminf_int subtype
    "r2v_analysis[norm_ineq.d].integral(norm_ineq.a, norm_ineq.b, ODE_def[norm_ineq.d].od_fx(norm_ineq.n, norm_ineq.f, norm_ineq.y))"
    "(list_adt[real].cons?)")))
 (norminf_int_TCC3 0
  (norminf_int_TCC5-1 nil 3788027958
   ("" (lemma "int_norm_od_fx") (("" (propax) nil nil)) nil)
   ((int_norm_od_fx formula-decl nil norm_ineq nil)) nil
   (norminf_int subtype
    "LAMBDA (x: (norm_ineq.d)): norms.norm_inf(norm_ineq.n)(ODE_def[norm_ineq.d].od_fx(norm_ineq.n, norm_ineq.f, norm_ineq.y)(x))"
    "{f | integral_def[(norm_ineq.d)].integrable?(norm_ineq.a, norm_ineq.b, f)}")))
 (norminf_int 0
  (norminf_int-1 nil 3788087126
   ("" (skeep)
    (("" (lemma "norm_inf_nth")
      (("" (inst -1 "integral(a, b, od_fx(n, f, y))")
        (("" (skeep -1)
          (("" (expand "norm_inf" 1 1)
            (("" (replace -1 1)
              (("" (lemma "Integral_le[(d)]")
                (("1" (lemma "int_nth")
                  (("1" (inst -1 "a" "b" "od_fx(n,f,y)" "i")
                    (("1" (replace -1 1)
                      (("1" (replace -1)
                        (("1"
                          (inst -2 "a" "b" "nth(od_fx(n, f, y), i)"
                           "abs(nth(od_fx(n, f, y), i))")
                          (("1" (assert)
                            (("1" (split -2)
                              (("1"
                                (expand "Integral" -1)
                                (("1"
                                  (lemma "Integral_le[(d)]")
                                  (("1"
                                    (inst
                                     -1
                                     "a"
                                     "b"
                                     "abs(nth(od_fx(n, f, y), i))"
                                     "LAMBDA (x: (d)): norm_inf(n)(od_fx(n, f, y)(x))")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (split -1)
                                        (("1"
                                          (expand "Integral" -1)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (lemma
                                               "Integral_le[(d)]")
                                              (("1"
                                                (inst
                                                 -1
                                                 "a"
                                                 "b"
                                                 "- nth(od_fx(n, f, y), i)"
                                                 " abs(nth(od_fx(n, f, y), i))")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (split -1)
                                                    (("1"
                                                      (expand
                                                       "Integral"
                                                       -1)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (lemma
                                                           "Integral_neg[(d)]")
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "a"
                                                             "b"
                                                             "nth(od_fx(n, f, y), i)")
                                                            (("1"
                                                              (split
                                                               -1)
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (expand
                                                                     "Integral"
                                                                     -2)
                                                                    (("1"
                                                                      (expand
                                                                       "Integrable?")
                                                                      (("1"
                                                                        (replace
                                                                         -2
                                                                         -3)
                                                                        (("1"
                                                                          (expand
                                                                           "abs"
                                                                           1
                                                                           1)
                                                                          (("1"
                                                                            (lift-if
                                                                             1)
                                                                            (("1"
                                                                              (split
                                                                               1)
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (flatten)
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (expand
                                                                 "Integrable?"
                                                                 1
                                                                 1)
                                                                (("2"
                                                                  (lemma
                                                                   "int_od_fx")
                                                                  (("2"
                                                                    (inst
                                                                     -1
                                                                     "a"
                                                                     "b"
                                                                     "n"
                                                                     "f"
                                                                     "y")
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (expand
                                                                         "integrable?"
                                                                         -1)
                                                                        (("2"
                                                                          (inst
                                                                           -1
                                                                           "i")
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      (("2"
                                                        (expand
                                                         "Integrable?"
                                                         1)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (lemma
                                                             "Integral_neg[(d)]")
                                                            (("2"
                                                              (inst
                                                               -1
                                                               "a"
                                                               "b"
                                                               "nth(od_fx(n, f, y), i)")
                                                              (("2"
                                                                (split
                                                                 -1)
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (expand
                                                                     "Integrable?"
                                                                     -1)
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (expand
                                                                   "Integrable?"
                                                                   1)
                                                                  (("2"
                                                                    (lemma
                                                                     "int_od_fx")
                                                                    (("2"
                                                                      (inst
                                                                       -1
                                                                       "a"
                                                                       "b"
                                                                       "n"
                                                                       "f"
                                                                       "y")
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (expand
                                                                           "integrable?"
                                                                           -1)
                                                                          (("2"
                                                                            (inst
                                                                             -1
                                                                             "i")
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (assert)
                                                      (("3"
                                                        (lemma
                                                         "continuous_integrable[(d)]")
                                                        (("3"
                                                          (inst
                                                           -1
                                                           "a"
                                                           "b"
                                                           " abs(nth(od_fx(n, f, y), i))")
                                                          (("3"
                                                            (assert)
                                                            (("3"
                                                              (split
                                                               -1)
                                                              (("1"
                                                                (expand
                                                                 "Integrable?"
                                                                 1
                                                                 1)
                                                                (("1"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (lemma
                                                                 "composition_cont[(d),real]")
                                                                (("2"
                                                                  (inst
                                                                   -1
                                                                   "nth(od_fx(n,f,y),i)"
                                                                   "LAMBDA(x:real): abs(x)"
                                                                   "_")
                                                                  (("2"
                                                                    (skeep
                                                                     1)
                                                                    (("2"
                                                                      (inst
                                                                       -1
                                                                       "x")
                                                                      (("2"
                                                                        (split
                                                                         -1)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (expand
                                                                             "o ")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (expand
                                                                                 "nth"
                                                                                 -1)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "nth"
                                                                                     1
                                                                                     1)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "continuous?")
                                                                                        (("1"
                                                                                          (skeep
                                                                                           1)
                                                                                          (("1"
                                                                                            (inst
                                                                                             -1
                                                                                             "epsilon")
                                                                                            (("1"
                                                                                              (skeep
                                                                                               -1)
                                                                                              (("1"
                                                                                                (inst
                                                                                                 1
                                                                                                 "delta")
                                                                                                (("1"
                                                                                                  (skeep)
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     -1
                                                                                                     "x_1")
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (grind)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (lemma
                                                                           "cont_od_fx")
                                                                          (("2"
                                                                            (inst
                                                                             -1
                                                                             "n"
                                                                             "f"
                                                                             "y")
                                                                            (("2"
                                                                              (expand
                                                                               "continuous?"
                                                                               -1)
                                                                              (("2"
                                                                                (inst
                                                                                 -1
                                                                                 "i")
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "continuous?"
                                                                                     -1)
                                                                                    (("2"
                                                                                      (inst
                                                                                       -1
                                                                                       "x")
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("3"
                                                                          (expand
                                                                           "continuous?"
                                                                           1)
                                                                          (("3"
                                                                            (skeep
                                                                             1)
                                                                            (("3"
                                                                              (inst
                                                                               1
                                                                               "epsilon")
                                                                              (("3"
                                                                                (skeep
                                                                                 1)
                                                                                (("3"
                                                                                  (case
                                                                                   "abs(abs(x_1) - abs(nth(od_fx(n, f, y), i)(x))) <= abs(x_1 - nth(od_fx(n, f, y), i)(x))")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil)
                                                                                   ("2"
                                                                                    (hide
                                                                                     2
                                                                                     3
                                                                                     4
                                                                                     5)
                                                                                    (("2"
                                                                                      (lemma
                                                                                       "  abs_diff ")
                                                                                      (("2"
                                                                                        (lemma
                                                                                         "abs_abs")
                                                                                        (("2"
                                                                                          (inst
                                                                                           -2
                                                                                           "x_1"
                                                                                           "nth(od_fx(n, f, y), i)(x)")
                                                                                          (("2"
                                                                                            (lemma
                                                                                             "  abs_diff ")
                                                                                            (("2"
                                                                                              (hide
                                                                                               -2)
                                                                                              (("2"
                                                                                                (inst
                                                                                                 -1
                                                                                                 "nth(od_fx(n, f, y), i)(x)"
                                                                                                 "x_1")
                                                                                                (("2"
                                                                                                  (lemma
                                                                                                   "abs_diff_commute")
                                                                                                  (("2"
                                                                                                    (inst
                                                                                                     -1
                                                                                                     "nth(od_fx(n, f, y), i)(x)"
                                                                                                     "x_1")
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "abs"
                                                                                                         1
                                                                                                         1)
                                                                                                        (("2"
                                                                                                          (lift-if
                                                                                                           1)
                                                                                                          (("2"
                                                                                                            (split
                                                                                                             1)
                                                                                                            (("1"
                                                                                                              (flatten)
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (flatten)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("4"
                                                      (skeep 1)
                                                      (("4"
                                                        (assert)
                                                        (("4"
                                                          (expand
                                                           "abs"
                                                           1)
                                                          (("4"
                                                            (hide -)
                                                            (("4"
                                                              (hide 2)
                                                              (("4"
                                                                (expand
                                                                 "abs"
                                                                 1
                                                                 1)
                                                                (("4"
                                                                  (lift-if
                                                                   1)
                                                                  (("4"
                                                                    (split
                                                                     1)
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (lemma
                                           "continuous_integrable[(d)]")
                                          (("2"
                                            (inst
                                             -1
                                             "a"
                                             "b"
                                             " abs(nth(od_fx(n, f, y), i))")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (split -1)
                                                (("1"
                                                  (expand
                                                   "Integrable?"
                                                   1
                                                   1)
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (lemma
                                                   "composition_cont[(d),real]")
                                                  (("2"
                                                    (inst
                                                     -1
                                                     "nth(od_fx(n,f,y),i)"
                                                     "LAMBDA(x:real): abs(x)"
                                                     "_")
                                                    (("2"
                                                      (skeep 1)
                                                      (("2"
                                                        (inst -1 "x")
                                                        (("2"
                                                          (split -1)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (expand
                                                               "o ")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (expand
                                                                   "nth"
                                                                   -1)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (expand
                                                                       "nth"
                                                                       1
                                                                       1)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (expand
                                                                           "continuous?")
                                                                          (("1"
                                                                            (skeep
                                                                             1)
                                                                            (("1"
                                                                              (inst
                                                                               -1
                                                                               "epsilon")
                                                                              (("1"
                                                                                (skeep
                                                                                 -1)
                                                                                (("1"
                                                                                  (inst
                                                                                   1
                                                                                   "delta")
                                                                                  (("1"
                                                                                    (skeep)
                                                                                    (("1"
                                                                                      (inst
                                                                                       -1
                                                                                       "x_1")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (lemma
                                                             "cont_od_fx")
                                                            (("2"
                                                              (inst
                                                               -1
                                                               "n"
                                                               "f"
                                                               "y")
                                                              (("2"
                                                                (expand
                                                                 "continuous?"
                                                                 -1)
                                                                (("2"
                                                                  (inst
                                                                   -1
                                                                   "i")
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (expand
                                                                       "continuous?"
                                                                       -1)
                                                                      (("2"
                                                                        (inst
                                                                         -1
                                                                         "x")
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("3"
                                                            (expand
                                                             "continuous?"
                                                             1)
                                                            (("3"
                                                              (skeep 1)
                                                              (("3"
                                                                (inst
                                                                 1
                                                                 "epsilon")
                                                                (("3"
                                                                  (skeep
                                                                   1)
                                                                  (("3"
                                                                    (case
                                                                     "abs(abs(x_1) - abs(nth(od_fx(n, f, y), i)(x))) <= abs(x_1 - nth(od_fx(n, f, y), i)(x))")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (hide
                                                                       2
                                                                       3
                                                                       4
                                                                       5)
                                                                      (("2"
                                                                        (lemma
                                                                         "  abs_diff ")
                                                                        (("2"
                                                                          (lemma
                                                                           "abs_abs")
                                                                          (("2"
                                                                            (inst
                                                                             -2
                                                                             "x_1"
                                                                             "nth(od_fx(n, f, y), i)(x)")
                                                                            (("2"
                                                                              (lemma
                                                                               "  abs_diff ")
                                                                              (("2"
                                                                                (hide
                                                                                 -2)
                                                                                (("2"
                                                                                  (inst
                                                                                   -1
                                                                                   "nth(od_fx(n, f, y), i)(x)"
                                                                                   "x_1")
                                                                                  (("2"
                                                                                    (lemma
                                                                                     "abs_diff_commute")
                                                                                    (("2"
                                                                                      (inst
                                                                                       -1
                                                                                       "nth(od_fx(n, f, y), i)(x)"
                                                                                       "x_1")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "abs"
                                                                                           1
                                                                                           1)
                                                                                          (("2"
                                                                                            (lift-if
                                                                                             1)
                                                                                            (("2"
                                                                                              (split
                                                                                               1)
                                                                                              (("1"
                                                                                                (flatten)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (flatten)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (expand "Integrable?" 1)
                                          (("3"
                                            (lemma "int_norm_od_fx")
                                            (("3"
                                              (inst
                                               -1
                                               "a"
                                               "b"
                                               "n"
                                               "f"
                                               "y")
                                              nil
                                              nil))
                                            nil))
                                          nil)
                                         ("4"
                                          (assert)
                                          (("4"
                                            (skeep 1)
                                            (("4"
                                              (lemma
                                               "norm_inf_nth_ineq")
                                              (("4"
                                                (inst
                                                 -1
                                                 "od_fx(n,f,y)(x_1)"
                                                 "i")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand
                                                     "norm_inf"
                                                     1
                                                     1)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand
                                                         "nth"
                                                         1
                                                         1)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (hide
                                                             -2
                                                             -3
                                                             -4
                                                             2)
                                                            (("1"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (typepred "i")
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (skeep 1)
                                      (("2"
                                        (typepred "od_fx(n,f,y)(x)")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (expand "Integrable?" 1)
                                (("2"
                                  (lemma "int_od_fx")
                                  (("2"
                                    (inst -1 "a" "b" "n" "f" "y")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (expand "integrable?" -1)
                                        (("2" (inst -1 "i") nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (assert)
                                (("3"
                                  (lemma "continuous_integrable[(d)]")
                                  (("3"
                                    (inst
                                     -1
                                     "a"
                                     "b"
                                     " abs(nth(od_fx(n, f, y), i))")
                                    (("3"
                                      (assert)
                                      (("3"
                                        (split -1)
                                        (("1"
                                          (expand "Integrable?" 1 1)
                                          (("1" (propax) nil nil))
                                          nil)
                                         ("2"
                                          (lemma
                                           "composition_cont[(d),real]")
                                          (("2"
                                            (inst
                                             -1
                                             "nth(od_fx(n,f,y),i)"
                                             "LAMBDA(x:real): abs(x)"
                                             "_")
                                            (("2"
                                              (skeep 1)
                                              (("2"
                                                (inst -1 "x")
                                                (("2"
                                                  (split -1)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand "o ")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (expand
                                                           "nth"
                                                           -1)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (expand
                                                               "nth"
                                                               1
                                                               1)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (expand
                                                                   "continuous?")
                                                                  (("1"
                                                                    (skeep
                                                                     1)
                                                                    (("1"
                                                                      (inst
                                                                       -1
                                                                       "epsilon")
                                                                      (("1"
                                                                        (skeep
                                                                         -1)
                                                                        (("1"
                                                                          (inst
                                                                           1
                                                                           "delta")
                                                                          (("1"
                                                                            (skeep)
                                                                            (("1"
                                                                              (inst
                                                                               -1
                                                                               "x_1")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (lemma
                                                     "cont_od_fx")
                                                    (("2"
                                                      (inst
                                                       -1
                                                       "n"
                                                       "f"
                                                       "y")
                                                      (("2"
                                                        (expand
                                                         "continuous?"
                                                         -1)
                                                        (("2"
                                                          (inst -1 "i")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (expand
                                                               "continuous?"
                                                               -1)
                                                              (("2"
                                                                (inst
                                                                 -1
                                                                 "x")
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (expand
                                                     "continuous?"
                                                     1)
                                                    (("3"
                                                      (skeep 1)
                                                      (("3"
                                                        (inst
                                                         1
                                                         "epsilon")
                                                        (("3"
                                                          (skeep 1)
                                                          (("3"
                                                            (case
                                                             "abs(abs(x_1) - abs(nth(od_fx(n, f, y), i)(x))) <= abs(x_1 - nth(od_fx(n, f, y), i)(x))")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (hide
                                                               2
                                                               3
                                                               4
                                                               5)
                                                              (("2"
                                                                (lemma
                                                                 "  abs_diff ")
                                                                (("2"
                                                                  (lemma
                                                                   "abs_abs")
                                                                  (("2"
                                                                    (inst
                                                                     -2
                                                                     "x_1"
                                                                     "nth(od_fx(n, f, y), i)(x)")
                                                                    (("2"
                                                                      (lemma
                                                                       "  abs_diff ")
                                                                      (("2"
                                                                        (hide
                                                                         -2)
                                                                        (("2"
                                                                          (inst
                                                                           -1
                                                                           "nth(od_fx(n, f, y), i)(x)"
                                                                           "x_1")
                                                                          (("2"
                                                                            (lemma
                                                                             "abs_diff_commute")
                                                                            (("2"
                                                                              (inst
                                                                               -1
                                                                               "nth(od_fx(n, f, y), i)(x)"
                                                                               "x_1")
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (expand
                                                                                   "abs"
                                                                                   1
                                                                                   1)
                                                                                  (("2"
                                                                                    (lift-if
                                                                                     1)
                                                                                    (("2"
                                                                                      (split
                                                                                       1)
                                                                                      (("1"
                                                                                        (flatten)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (flatten)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("4"
                                (skeep 1)
                                (("4"
                                  (hide -)
                                  (("4"
                                    (hide 2)
                                    (("4" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide -1 -2 2)
                      (("2" (typepred "i") (("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (lemma "not_one_element")
                  (("2" (propax) nil nil)) nil)
                 ("3" (lemma "connected") (("3" (propax) nil nil)) nil)
                 ("4" (lemma "non_empty")
                  (("4" (expand "nonempty?" -1)
                    (("4" (expand "empty?" 1)
                      (("4" (skeep 1)
                        (("4" (inst 1 "x")
                          (("4" (expand "member" -1)
                            (("4" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((norm_inf_nth formula-decl nil norms Optimization_Dev)
    (non_empty formula-decl nil norm_ineq nil)
    (empty? const-decl "bool" sets nil)
    (x skolem-const-decl "real" norm_ineq nil)
    (member const-decl "bool" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (connected formula-decl nil norm_ineq nil)
    (not_one_element formula-decl nil norm_ineq nil)
    (int_nth formula-decl nil r2v_analysis nil)
    (abs const-decl "[T -> nonneg_real]" real_fun_ops reals)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (nth const-decl "[(d) -> real]" r2v_def nil)
    (norm_inf_nth_ineq formula-decl nil norms Optimization_Dev)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (x_1 skolem-const-decl "closed_interval[(d)](a, b)" norm_ineq nil)
    (int_norm_od_fx formula-decl nil norm_ineq nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (closed_interval type-eq-decl nil intervals_real reals)
    (<= const-decl "bool" reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (abs_diff formula-decl nil abs_lems reals)
    (abs_diff_commute formula-decl nil abs_lems reals)
    (abs_abs formula-decl nil real_props nil)
    (cont_od_fx formula-decl nil ODE_continuous_def nil)
    (continuous? const-decl "bool" continuous_functions analysis)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (width const-decl "posreal" integral_def analysis)
    (integral? const-decl "bool" integral_def analysis)
    (integrable? const-decl "bool" integral_def analysis)
    (norm_inf const-decl "[(cons?) -> nonneg_real]" norms
     Optimization_Dev)
    (null? const-decl "bool" r2v_def nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (continuous? const-decl "bool" continuous_functions analysis)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (O const-decl "T3" function_props nil)
    (composition_cont formula-decl nil composition_continuous analysis)
    (continuous_integrable formula-decl nil integral_cont analysis)
    (Integral_neg formula-decl nil integral analysis)
    (minus_real_is_real application-judgement "real" reals nil)
    (Integrable? const-decl "bool" integral_def analysis)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (int_od_fx formula-decl nil norm_ineq nil)
    (- const-decl "[T -> real]" real_fun_ops reals)
    (norm? const-decl "bool" norms Optimization_Dev)
    (Integral const-decl "real" integral_def analysis)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     Optimization_Dev)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (< const-decl "bool" reals nil)
    (a skolem-const-decl "(d)" norm_ineq nil)
    (b skolem-const-decl "{bb: (d) | bb > a}" norm_ineq nil)
    (n skolem-const-decl "posnat" norm_ineq nil)
    (f skolem-const-decl
     "{ff: od_f[d](n) | Lip_d?[d](n)(ff) AND cont_d?(n)(ff)}" norm_ineq
     nil)
    (y skolem-const-decl "{yy: r2v_n(n) | continuous?(yy)}" norm_ineq
     nil)
    (below type-eq-decl nil naturalnumbers nil)
    (i skolem-const-decl
       "below(length(integral(a, b, od_fx(n, f, y))))" norm_ineq nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (connected? const-decl "bool" deriv_domain_def analysis)
    (TRUE const-decl "bool" booleans nil)
    (Integral_le formula-decl nil integral analysis)
    (norm_inf const-decl "(norm?(m))" norms Optimization_Dev)
    (continuous? const-decl "bool" r2v_analysis nil)
    (cont_d? const-decl "bool" ODE_continuous_def nil)
    (Lip_d? const-decl "bool" ODE_Lipschitz_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (od_fx const-decl "{ff: r2v_n(n) | length(ff) = n}" ODE_def nil)
    (r2v_n type-eq-decl nil r2v_def nil)
    (od_f type-eq-decl nil ODE_def nil)
    (integral def-decl "VectorN(length(f))" r2v_analysis nil)
    (VectorN type-eq-decl nil matrices matrices)
    (length const-decl "nat" r2v_def nil)
    (integrable? const-decl "bool" r2v_analysis nil)
    (r2v type-eq-decl nil r2v_def nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (> const-decl "bool" reals nil)
    (d formal-const-decl "[real -> bool]" norm_ineq nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (norminf_Int_TCC1 0
  (norminf_Int_TCC1-1 nil 3788027958
   ("" (skeep)
    (("" (lemma "int_od_fx")
      (("" (expand "Integrable?" 1)
        (("" (skeep 1)
          (("" (expand "Integrable?" 1 1)
            (("" (case "a=b")
              (("1" (assert) nil nil)
               ("2" (assert)
                (("2" (case "a<b")
                  (("1" (inst -2 "a" "b" "n" "f" "y")
                    (("1" (assert)
                      (("1" (expand "integrable?" -2)
                        (("1" (inst -2 "i") nil nil)) nil))
                      nil)
                     ("2" (assert) nil nil))
                    nil)
                   ("2" (inst -1 "b" "a" "n" "f" "y")
                    (("1" (expand "integrable?" -1)
                      (("1" (assert) (("1" (inst -1 "i") nil nil))
                        nil))
                      nil)
                     ("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((int_od_fx formula-decl nil norm_ineq nil)
    (d formal-const-decl "[real -> bool]" norm_ineq nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (< const-decl "bool" reals nil)
    (od_fx const-decl "{ff: r2v_n(n) | length(ff) = n}" ODE_def nil)
    (length const-decl "nat" r2v_def nil)
    (integrable? const-decl "bool" r2v_analysis nil)
    (continuous? const-decl "bool" r2v_analysis nil)
    (r2v type-eq-decl nil r2v_def nil)
    (r2v_n type-eq-decl nil r2v_def nil)
    (cont_d? const-decl "bool" ODE_continuous_def nil)
    (Lip_d? const-decl "bool" ODE_Lipschitz_def nil)
    (od_f type-eq-decl nil ODE_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (> const-decl "bool" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (Integrable? const-decl "bool" integral_def analysis)
    (Integrable? const-decl "bool" r2v_analysis nil))
   nil
   (norminf_Int subtype
    "ODE_def[norm_ineq.d].od_fx(norm_ineq.n, norm_ineq.f, norm_ineq.y)"
    "{ff: r2v_def[norm_ineq.d].r2v | r2v_analysis[norm_ineq.d].Integrable?(norm_ineq.a, norm_ineq.b, ff)}")))
 (norminf_Int_TCC2 0
  (norminf_Int_TCC2-1 nil 3788027958 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (d formal-const-decl "[real -> bool]" norm_ineq nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices matrices)
    (od_f type-eq-decl nil ODE_def nil)
    (Lip_d? const-decl "bool" ODE_Lipschitz_def nil)
    (cont_d? const-decl "bool" ODE_continuous_def nil)
    (r2v type-eq-decl nil r2v_def nil)
    (continuous? const-decl "bool" r2v_analysis nil)
    (r2v_n type-eq-decl nil r2v_def nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     Optimization_Dev)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sub const-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (contp? const-decl "bool" continuity_multivar Optimization_Dev)
    (contD? const-decl "bool" continuity_multivar Optimization_Dev)
    (nth const-decl "[(d) -> real]" r2v_def nil)
    (continuous? const-decl "bool" continuous_functions analysis)
    (continuous? const-decl "bool" continuous_functions analysis)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (add def-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (<= const-decl "bool" reals nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic Optimization_Dev)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (scal def-decl "VectorN(length(v2))" matrices matrices)
    (Vector type-eq-decl nil matrices matrices)
    (n!1 skolem-const-decl "posnat" norm_ineq nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (norm? const-decl "bool" norms Optimization_Dev)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (* const-decl "VectorN(length(v2))" matrices matrices))
   nil
   (norminf_Int subtype
    "r2v_analysis[norm_ineq.d].Integral(norm_ineq.a, norm_ineq.b, ODE_def[norm_ineq.d].od_fx(norm_ineq.n, norm_ineq.f, norm_ineq.y))"
    "(list_adt[real].cons?)")))
 (norminf_Int_TCC3 0
  (norminf_Int_TCC3-1 nil 3788027958 ("" (subtype-tcc) nil nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices matrices)
    (od_f type-eq-decl nil ODE_def nil)
    (Lip_d? const-decl "bool" ODE_Lipschitz_def nil)
    (cont_d? const-decl "bool" ODE_continuous_def nil)
    (r2v type-eq-decl nil r2v_def nil)
    (continuous? const-decl "bool" r2v_analysis nil)
    (r2v_n type-eq-decl nil r2v_def nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     Optimization_Dev)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sub const-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (contp? const-decl "bool" continuity_multivar Optimization_Dev)
    (contD? const-decl "bool" continuity_multivar Optimization_Dev)
    (nth const-decl "[(d) -> real]" r2v_def nil)
    (continuous? const-decl "bool" continuous_functions analysis)
    (continuous? const-decl "bool" continuous_functions analysis)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (add def-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (<= const-decl "bool" reals nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic Optimization_Dev)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (scal def-decl "VectorN(length(v2))" matrices matrices)
    (Vector type-eq-decl nil matrices matrices)
    (n!1 skolem-const-decl "posnat" norm_ineq nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (d formal-const-decl "[real -> bool]" norm_ineq nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (od_fx const-decl "{ff: r2v_n(n) | length(ff) = n}" ODE_def nil)
    (norm? const-decl "bool" norms Optimization_Dev)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (* const-decl "VectorN(length(v2))" matrices matrices))
   nil
   (norminf_Int subtype
    "ODE_def[norm_ineq.d].od_fx(norm_ineq.n, norm_ineq.f, norm_ineq.y)(norm_ineq.x)"
    "(list_adt[real].cons?)")))
 (norminf_Int_TCC4 0
  (norminf_Int_TCC4-1 nil 3788027958
   ("" (skeep)
    (("" (lemma "int_norm_od_fx")
      (("" (expand "Integrable?" 1)
        (("" (case "a=b")
          (("1" (assert) nil nil)
           ("2" (case "a<b")
            (("1" (inst -2 "a" "b" "n" "f" "y")
              (("1" (assert) nil nil) ("2" (assert) nil nil)) nil)
             ("2" (inst -1 "b" "a" "n" "f" "y")
              (("1" (assert) nil nil) ("2" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((int_norm_od_fx formula-decl nil norm_ineq nil)
    (d formal-const-decl "[real -> bool]" norm_ineq nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (> const-decl "bool" reals nil)
    (b skolem-const-decl "(d)" norm_ineq nil)
    (a skolem-const-decl "(d)" norm_ineq nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices matrices)
    (od_f type-eq-decl nil ODE_def nil)
    (Lip_d? const-decl "bool" ODE_Lipschitz_def nil)
    (cont_d? const-decl "bool" ODE_continuous_def nil)
    (r2v_n type-eq-decl nil r2v_def nil)
    (r2v type-eq-decl nil r2v_def nil)
    (continuous? const-decl "bool" r2v_analysis nil)
    (< const-decl "bool" reals nil)
    (Integrable? const-decl "bool" integral_def analysis))
   nil
   (norminf_Int subtype
    "LAMBDA (x: (norm_ineq.d)): norms.norm_inf(norm_ineq.n)(ODE_def[norm_ineq.d].od_fx(norm_ineq.n, norm_ineq.f, norm_ineq.y)(x))"
    "integral_def[(norm_ineq.d)].Integrable_funs(norm_ineq.a, norm_ineq.b)")))
 (norminf_Int 0
  (norminf_Int-1 nil 3788091237
   ("" (lemma "norminf_int")
    (("" (skeep)
      (("" (case "a=b")
        (("1" (lemma "Int_zero")
          (("1" (assert)
            (("1" (inst -1 "a" "od_fx(n,f,y)")
              (("1" (replace -2)
                (("1" (replace -1)
                  (("1" (expand "Integral" 1 1)
                    (("1" (typepred "norm_inf(n)")
                      (("1" (expand "norm?" -1)
                        (("1" (flatten)
                          (("1"
                            (inst -3 "zero_vec(length(od_fx(n,f,y)))")
                            (("1" (assert) nil nil)
                             ("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (case "a<b")
          (("1" (lemma "Int_int")
            (("1" (inst -1 "a" "b" "od_fx(n,f,y)")
              (("1" (assert)
                (("1" (assert)
                  (("1" (inst -3 "a" "b" "n" "f" "y")
                    (("1" (assert)
                      (("1" (expand "Integral" 2 2)
                        (("1" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (case "b<a")
            (("1" (postpone) nil nil) ("2" (postpone) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((< const-decl "bool" reals nil) (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (r2v type-eq-decl nil r2v_def nil)
    (Integrable? const-decl "bool" r2v_analysis nil)
    (VectorN type-eq-decl nil matrices matrices)
    (od_f type-eq-decl nil ODE_def nil)
    (r2v_n type-eq-decl nil r2v_def nil)
    (length const-decl "nat" r2v_def nil)
    (od_fx const-decl "{ff: r2v_n(n) | length(ff) = n}" ODE_def nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (Lip_d? const-decl "bool" ODE_Lipschitz_def nil)
    (cont_d? const-decl "bool" ODE_continuous_def nil)
    (continuous? const-decl "bool" r2v_analysis nil)
    (Integral const-decl "real" integral_def analysis)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     Optimization_Dev)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (Int_int formula-decl nil r2v_analysis nil)
    (Int_zero formula-decl nil r2v_analysis nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (d formal-const-decl "[real -> bool]" norm_ineq nil)
    (norminf_int formula-decl nil norm_ineq nil))
   shostak))
 (int_norm_cont_TCC1 0
  (int_norm_cont_TCC1-1 nil 3788774350 ("" (subtype-tcc) nil nil) nil
   nil
   (int_norm_cont subtype "norm_ineq.b"
    "{x: (norm_ineq.d) | reals.<(norm_ineq.a, x)}")))
 (int_norm_cont_TCC2 0
  (int_norm_cont_TCC2-1 nil 3788774350 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (d formal-const-decl "[real -> bool]" norm_ineq nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (r2v type-eq-decl nil r2v_def nil)
    (continuous? const-decl "bool" r2v_analysis nil)
    (VectorN type-eq-decl nil matrices matrices)
    (r2v_n type-eq-decl nil r2v_def nil)
    (continuous? const-decl "bool" continuous_functions analysis)
    (continuous? const-decl "bool" continuous_functions analysis)
    (nth const-decl "[(d) -> real]" r2v_def nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     Optimization_Dev))
   nil
   (int_norm_cont subtype "norm_ineq.y(norm_ineq.x)"
    "(list_adt[real].cons?)")))
 (int_norm_cont 0
  (int_norm_cont-1 nil 3788774392
   ("" (lemma "cont_nn_comp")
    (("" (skeep)
      (("" (inst -1 "n" "y" "norm_inf(n)")
        (("" (assert)
          (("" (lemma "continuous_Integrable?[(d)]")
            (("1"
              (inst -1 "a" "b" "LAMBDA (x: (d)): norm_inf(n)(y(x))")
              (("1" (split -1)
                (("1" (assert)
                  (("1" (expand "Integrable?" -1)
                    (("1" (propax) nil nil)) nil))
                  nil)
                 ("2" (skeep 1)
                  (("2" (expand "continuous?" -1)
                    (("2" (inst -1 "x_1") nil nil)) nil))
                  nil))
                nil)
               ("2" (skeep 1)
                (("2" (assert)
                  (("2" (typepred "y(x)") (("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (lemma "not_one_element") (("2" (propax) nil nil))
              nil)
             ("3" (lemma "connected") (("3" (propax) nil nil)) nil)
             ("4" (lemma "non_empty")
              (("4" (expand "nonempty?" -1)
                (("4" (expand "empty?" 1 1)
                  (("4" (skeep 1)
                    (("4" (inst 1 "x")
                      (("4" (expand "member" -1)
                        (("4" (propax) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((non_empty formula-decl nil norm_ineq nil)
    (empty? const-decl "bool" sets nil)
    (x skolem-const-decl "real" norm_ineq nil)
    (member const-decl "bool" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (connected formula-decl nil norm_ineq nil)
    (not_one_element formula-decl nil norm_ineq nil)
    (n skolem-const-decl "posnat" norm_ineq nil)
    (y skolem-const-decl "{yy: r2v_n[d](n) | continuous?[d](yy)}"
     norm_ineq nil)
    (Closed_interval type-eq-decl nil intervals_real reals)
    (< const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (continuous? const-decl "bool" continuous_functions analysis)
    (Integrable? const-decl "bool" integral_def analysis)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     Optimization_Dev)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (connected? const-decl "bool" deriv_domain_def analysis)
    (TRUE const-decl "bool" booleans nil)
    (continuous_Integrable? formula-decl nil integral analysis)
    (norm_inf const-decl "(norm?(m))" norms Optimization_Dev)
    (norm? const-decl "bool" norms Optimization_Dev)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (continuous? const-decl "bool" r2v_analysis nil)
    (r2v type-eq-decl nil r2v_def nil)
    (r2v_n type-eq-decl nil r2v_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (cont_nn_comp formula-decl nil r2v_analysis nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (d formal-const-decl "[real -> bool]" norm_ineq nil))
   shostak))
 (normi_TCC1 0
  (normi_TCC1-1 nil 3788712705 ("" (skeep) (("" (assert) nil nil)) nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (normi subtype "norm_ineq.b"
    "{bb: (norm_ineq.d) | reals.>(bb, norm_ineq.a)}")))
 (normi_TCC2 0
  (normi_TCC1-1 nil 3788712891
   ("" (skeep)
    (("" (lemma "cont_int")
      (("" (inst?) (("" (assert) (("" (inst -1 "a" "b") nil nil)) nil))
        nil))
      nil))
    nil)
   ((d formal-const-decl "[real -> bool]" norm_ineq nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (cont_int formula-decl nil r2v_analysis nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (continuous? const-decl "bool" r2v_analysis nil)
    (r2v_n type-eq-decl nil r2v_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (r2v type-eq-decl nil r2v_def nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil))
   nil
   (normi subtype "norm_ineq.y"
    "{ff: r2v_def[norm_ineq.d].r2v | r2v_analysis[norm_ineq.d].integrable?(norm_ineq.a, norm_ineq.b, ff)}")))
 (normi_TCC3 0
  (normi_TCC3-1 nil 3788774987
   ("" (skeep)
    (("" (typepred "integral(a,b,y)")
      (("" (assert)
        (("" (typepred "y")
          (("" (expand "length" -3 2) (("" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((continuous? const-decl "bool" r2v_analysis nil)
    (r2v_n type-eq-decl nil r2v_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (integral def-decl "VectorN(length(f))" r2v_analysis nil)
    (VectorN type-eq-decl nil matrices matrices)
    (length const-decl "nat" r2v_def nil)
    (integrable? const-decl "bool" r2v_analysis nil)
    (r2v type-eq-decl nil r2v_def nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (> const-decl "bool" reals nil)
    (d formal-const-decl "[real -> bool]" norm_ineq nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     Optimization_Dev)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (normi subtype
    "r2v_analysis[norm_ineq.d].integral(norm_ineq.a, norm_ineq.b, norm_ineq.y)"
    "(list_adt[real].cons?)")))
 (normi_TCC4 0
  (normi_TCC2-1 nil 3788712705 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (d formal-const-decl "[real -> bool]" norm_ineq nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (r2v type-eq-decl nil r2v_def nil)
    (continuous? const-decl "bool" r2v_analysis nil)
    (VectorN type-eq-decl nil matrices matrices)
    (r2v_n type-eq-decl nil r2v_def nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     Optimization_Dev)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nth const-decl "[(d) -> real]" r2v_def nil)
    (continuous? const-decl "bool" continuous_functions analysis)
    (continuous? const-decl "bool" continuous_functions analysis))
   nil
   (normi subtype "norm_ineq.y(norm_ineq.x)"
    "(list_adt[real].cons?)")))
 (normi_TCC5 0
  (normi_TCC3-1 nil 3788712705
   ("" (lemma "int_norm_cont")
    (("" (skeep) (("" (inst?) (("" (assert) nil nil)) nil)) nil)) nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (b skolem-const-decl "(d)" norm_ineq nil)
    (a skolem-const-decl "(d)" norm_ineq nil)
    (continuous? const-decl "bool" r2v_analysis nil)
    (r2v type-eq-decl nil r2v_def nil)
    (r2v_n type-eq-decl nil r2v_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (> const-decl "bool" reals nil)
    (d formal-const-decl "[real -> bool]" norm_ineq nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_norm_cont formula-decl nil norm_ineq nil))
   nil
   (normi subtype
    "LAMBDA (x: (norm_ineq.d)): norms.norm_inf(norm_ineq.n)(norm_ineq.y(x))"
    "{f | integral_def[(norm_ineq.d)].integrable?(norm_ineq.a, norm_ineq.b, f)}")))
 (normi 0
  (normi-1 nil 3788774854
   ("" (skeep)
    (("" (lemma "norm_inf_nth")
      (("" (inst -1 "integral(a, b, y)")
        (("" (skeep -1)
          (("" (expand "norm_inf" 1 1)
            (("" (replace -1 1)
              (("" (lemma "Integral_le[(d)]")
                (("1" (lemma "int_nth")
                  (("1" (inst -1 "a" "b" "y" "i")
                    (("1" (replace -1 1)
                      (("1" (replace -1)
                        (("1"
                          (inst -2 "a" "b" "nth(y, i)"
                           "abs(nth(y, i))")
                          (("1" (assert)
                            (("1" (split -2)
                              (("1"
                                (expand "Integral" -1)
                                (("1"
                                  (lemma "Integral_le[(d)]")
                                  (("1"
                                    (inst
                                     -1
                                     "a"
                                     "b"
                                     "abs(nth(y, i))"
                                     "LAMBDA (x: (d)): norm_inf(n)(y(x))")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (split -1)
                                        (("1"
                                          (expand "Integral" -1)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (lemma
                                               "Integral_le[(d)]")
                                              (("1"
                                                (inst
                                                 -1
                                                 "a"
                                                 "b"
                                                 "- nth(y, i)"
                                                 " abs(nth(y, i))")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (split -1)
                                                    (("1"
                                                      (expand
                                                       "Integral"
                                                       -1)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (lemma
                                                           "Integral_neg[(d)]")
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "a"
                                                             "b"
                                                             "nth(y, i)")
                                                            (("1"
                                                              (split
                                                               -1)
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (expand
                                                                     "Integral"
                                                                     -2)
                                                                    (("1"
                                                                      (expand
                                                                       "Integrable?")
                                                                      (("1"
                                                                        (replace
                                                                         -2
                                                                         -3)
                                                                        (("1"
                                                                          (expand
                                                                           "abs"
                                                                           1
                                                                           1)
                                                                          (("1"
                                                                            (lift-if
                                                                             1)
                                                                            (("1"
                                                                              (split
                                                                               1)
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (flatten)
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (typepred
                                                                 "y")
                                                                (("2"
                                                                  (lemma
                                                                   "cont_int")
                                                                  (("2"
                                                                    (inst
                                                                     -1
                                                                     "y")
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (inst
                                                                         -1
                                                                         "a"
                                                                         "b")
                                                                        (("2"
                                                                          (expand
                                                                           "Integrable?"
                                                                           1)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (expand
                                                                               "integrable?"
                                                                               -1)
                                                                              (("2"
                                                                                (inst
                                                                                 -1
                                                                                 "i")
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      (("2"
                                                        (expand
                                                         "Integrable?"
                                                         1)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (lemma
                                                             "Integral_neg[(d)]")
                                                            (("2"
                                                              (inst
                                                               -1
                                                               "a"
                                                               "b"
                                                               "nth(y, i)")
                                                              (("2"
                                                                (split
                                                                 -1)
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (expand
                                                                     "Integrable?"
                                                                     -1)
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (typepred
                                                                   "y")
                                                                  (("2"
                                                                    (lemma
                                                                     "cont_Int")
                                                                    (("2"
                                                                      (inst
                                                                       -1
                                                                       "y")
                                                                      (("2"
                                                                        (expand
                                                                         "Integrable?"
                                                                         -1)
                                                                        (("2"
                                                                          (inst
                                                                           -1
                                                                           "a"
                                                                           "b")
                                                                          (("2"
                                                                            (inst
                                                                             -1
                                                                             "i")
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (assert)
                                                      (("3"
                                                        (lemma
                                                         "continuous_integrable[(d)]")
                                                        (("3"
                                                          (inst
                                                           -1
                                                           "a"
                                                           "b"
                                                           " abs(nth(y, i))")
                                                          (("3"
                                                            (assert)
                                                            (("3"
                                                              (split
                                                               -1)
                                                              (("1"
                                                                (expand
                                                                 "Integrable?"
                                                                 1
                                                                 1)
                                                                (("1"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (lemma
                                                                 "composition_cont[(d),real]")
                                                                (("2"
                                                                  (inst
                                                                   -1
                                                                   "nth(y,i)"
                                                                   "LAMBDA(x:real): abs(x)"
                                                                   "_")
                                                                  (("2"
                                                                    (skeep
                                                                     1)
                                                                    (("2"
                                                                      (inst
                                                                       -1
                                                                       "x")
                                                                      (("2"
                                                                        (split
                                                                         -1)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (expand
                                                                             "o ")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (expand
                                                                                 "nth"
                                                                                 -1)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "nth"
                                                                                     1
                                                                                     1)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "continuous?")
                                                                                        (("1"
                                                                                          (skeep
                                                                                           1)
                                                                                          (("1"
                                                                                            (inst
                                                                                             -1
                                                                                             "epsilon")
                                                                                            (("1"
                                                                                              (skeep
                                                                                               -1)
                                                                                              (("1"
                                                                                                (inst
                                                                                                 1
                                                                                                 "delta")
                                                                                                (("1"
                                                                                                  (skeep)
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     -1
                                                                                                     "x_1")
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (grind)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (typepred
                                                                           "y")
                                                                          (("2"
                                                                            (expand
                                                                             "continuous?"
                                                                             -1)
                                                                            (("2"
                                                                              (inst
                                                                               -1
                                                                               "i")
                                                                              (("2"
                                                                                (expand
                                                                                 "continuous?"
                                                                                 -1)
                                                                                (("2"
                                                                                  (inst
                                                                                   -1
                                                                                   "x")
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("3"
                                                                          (expand
                                                                           "continuous?"
                                                                           1)
                                                                          (("3"
                                                                            (skeep
                                                                             1)
                                                                            (("3"
                                                                              (inst
                                                                               1
                                                                               "epsilon")
                                                                              (("3"
                                                                                (skeep
                                                                                 1)
                                                                                (("3"
                                                                                  (case
                                                                                   "abs(abs(x_1) - abs(nth(y, i)(x))) <= abs(x_1 - nth(y, i)(x))")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil)
                                                                                   ("2"
                                                                                    (hide
                                                                                     2
                                                                                     3
                                                                                     4
                                                                                     5)
                                                                                    (("2"
                                                                                      (lemma
                                                                                       "  abs_diff ")
                                                                                      (("2"
                                                                                        (lemma
                                                                                         "abs_abs")
                                                                                        (("2"
                                                                                          (inst
                                                                                           -2
                                                                                           "x_1"
                                                                                           "nth(y, i)(x)")
                                                                                          (("2"
                                                                                            (lemma
                                                                                             "  abs_diff ")
                                                                                            (("2"
                                                                                              (hide
                                                                                               -2)
                                                                                              (("2"
                                                                                                (inst
                                                                                                 -1
                                                                                                 "nth(y, i)(x)"
                                                                                                 "x_1")
                                                                                                (("2"
                                                                                                  (lemma
                                                                                                   "abs_diff_commute")
                                                                                                  (("2"
                                                                                                    (inst
                                                                                                     -1
                                                                                                     "nth(y, i)(x)"
                                                                                                     "x_1")
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "abs"
                                                                                                         1
                                                                                                         1)
                                                                                                        (("2"
                                                                                                          (lift-if
                                                                                                           1)
                                                                                                          (("2"
                                                                                                            (split
                                                                                                             1)
                                                                                                            (("1"
                                                                                                              (flatten)
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (flatten)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("4"
                                                      (skeep 1)
                                                      (("4"
                                                        (assert)
                                                        (("4"
                                                          (expand
                                                           "abs"
                                                           1)
                                                          (("4"
                                                            (hide -)
                                                            (("4"
                                                              (hide 2)
                                                              (("4"
                                                                (expand
                                                                 "abs"
                                                                 1
                                                                 1)
                                                                (("4"
                                                                  (lift-if
                                                                   1)
                                                                  (("4"
                                                                    (split
                                                                     1)
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (lemma
                                           "continuous_integrable[(d)]")
                                          (("2"
                                            (inst
                                             -1
                                             "a"
                                             "b"
                                             " abs(nth(y, i))")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (split -1)
                                                (("1"
                                                  (expand
                                                   "Integrable?"
                                                   1
                                                   1)
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (lemma
                                                   "composition_cont[(d),real]")
                                                  (("2"
                                                    (inst
                                                     -1
                                                     "nth(y,i)"
                                                     "LAMBDA(x:real): abs(x)"
                                                     "_")
                                                    (("2"
                                                      (skeep 1)
                                                      (("2"
                                                        (inst -1 "x")
                                                        (("2"
                                                          (split -1)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (expand
                                                               "o ")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (expand
                                                                   "nth"
                                                                   -1)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (expand
                                                                       "nth"
                                                                       1
                                                                       1)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (expand
                                                                           "continuous?")
                                                                          (("1"
                                                                            (skeep
                                                                             1)
                                                                            (("1"
                                                                              (inst
                                                                               -1
                                                                               "epsilon")
                                                                              (("1"
                                                                                (skeep
                                                                                 -1)
                                                                                (("1"
                                                                                  (inst
                                                                                   1
                                                                                   "delta")
                                                                                  (("1"
                                                                                    (skeep)
                                                                                    (("1"
                                                                                      (inst
                                                                                       -1
                                                                                       "x_1")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (typepred
                                                             "y")
                                                            (("2"
                                                              (expand
                                                               "continuous?"
                                                               -1)
                                                              (("2"
                                                                (inst
                                                                 -1
                                                                 "i")
                                                                (("2"
                                                                  (expand
                                                                   "continuous?"
                                                                   -1)
                                                                  (("2"
                                                                    (inst
                                                                     -1
                                                                     "x")
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("3"
                                                            (expand
                                                             "continuous?"
                                                             1)
                                                            (("3"
                                                              (skeep 1)
                                                              (("3"
                                                                (inst
                                                                 1
                                                                 "epsilon")
                                                                (("3"
                                                                  (skeep
                                                                   1)
                                                                  (("3"
                                                                    (case
                                                                     "abs(abs(x_1) - abs(nth(y, i)(x))) <= abs(x_1 - nth(y, i)(x))")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (hide
                                                                       2
                                                                       3
                                                                       4
                                                                       5)
                                                                      (("2"
                                                                        (lemma
                                                                         "  abs_diff ")
                                                                        (("2"
                                                                          (lemma
                                                                           "abs_abs")
                                                                          (("2"
                                                                            (inst
                                                                             -2
                                                                             "x_1"
                                                                             "nth(y, i)(x)")
                                                                            (("2"
                                                                              (lemma
                                                                               "  abs_diff ")
                                                                              (("2"
                                                                                (hide
                                                                                 -2)
                                                                                (("2"
                                                                                  (inst
                                                                                   -1
                                                                                   "nth(y, i)(x)"
                                                                                   "x_1")
                                                                                  (("2"
                                                                                    (lemma
                                                                                     "abs_diff_commute")
                                                                                    (("2"
                                                                                      (inst
                                                                                       -1
                                                                                       "nth(y, i)(x)"
                                                                                       "x_1")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "abs"
                                                                                           1
                                                                                           1)
                                                                                          (("2"
                                                                                            (lift-if
                                                                                             1)
                                                                                            (("2"
                                                                                              (split
                                                                                               1)
                                                                                              (("1"
                                                                                                (flatten)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (flatten)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (expand "Integrable?" 1)
                                          (("3"
                                            (lemma "int_norm_cont")
                                            (("3" (inst?) nil nil))
                                            nil))
                                          nil)
                                         ("4"
                                          (assert)
                                          (("4"
                                            (skeep 1)
                                            (("4"
                                              (lemma
                                               "norm_inf_nth_ineq")
                                              (("4"
                                                (inst -1 "y(x_1)" "i")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand
                                                     "norm_inf"
                                                     1
                                                     1)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand
                                                         "nth"
                                                         1
                                                         1)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (hide
                                                             -2
                                                             -3
                                                             -4
                                                             2)
                                                            (("1"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (typepred "i")
                                                  (("2"
                                                    (typepred
                                                     "integral(a,b,y)")
                                                    (("2"
                                                      (expand
                                                       "length"
                                                       -2
                                                       2)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (skeep 1)
                                      (("2"
                                        (typepred "y(x)")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (lemma "cont_Int")
                                (("2"
                                  (inst -1 "y")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (inst -1 "a" "b")
                                      (("2"
                                        (expand "Integrable?" -1)
                                        (("2" (inst -1 "i") nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (assert)
                                (("3"
                                  (lemma "continuous_integrable[(d)]")
                                  (("3"
                                    (inst -1 "a" "b" " abs(nth(y, i))")
                                    (("3"
                                      (assert)
                                      (("3"
                                        (split -1)
                                        (("1"
                                          (expand "Integrable?" 1 1)
                                          (("1" (propax) nil nil))
                                          nil)
                                         ("2"
                                          (lemma
                                           "composition_cont[(d),real]")
                                          (("2"
                                            (inst
                                             -1
                                             "nth(y,i)"
                                             "LAMBDA(x:real): abs(x)"
                                             "_")
                                            (("2"
                                              (skeep 1)
                                              (("2"
                                                (inst -1 "x")
                                                (("2"
                                                  (split -1)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand "o ")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (expand
                                                           "nth"
                                                           -1)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (expand
                                                               "nth"
                                                               1
                                                               1)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (expand
                                                                   "continuous?")
                                                                  (("1"
                                                                    (skeep
                                                                     1)
                                                                    (("1"
                                                                      (inst
                                                                       -1
                                                                       "epsilon")
                                                                      (("1"
                                                                        (skeep
                                                                         -1)
                                                                        (("1"
                                                                          (inst
                                                                           1
                                                                           "delta")
                                                                          (("1"
                                                                            (skeep)
                                                                            (("1"
                                                                              (inst
                                                                               -1
                                                                               "x_1")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (typepred "y")
                                                    (("2"
                                                      (expand
                                                       "continuous?"
                                                       -1)
                                                      (("2"
                                                        (inst -1 "i")
                                                        (("2"
                                                          (expand
                                                           "continuous?"
                                                           -1)
                                                          (("2"
                                                            (inst
                                                             -1
                                                             "x")
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (expand
                                                     "continuous?"
                                                     1)
                                                    (("3"
                                                      (skeep 1)
                                                      (("3"
                                                        (inst
                                                         1
                                                         "epsilon")
                                                        (("3"
                                                          (skeep 1)
                                                          (("3"
                                                            (case
                                                             "abs(abs(x_1) - abs(nth(y, i)(x))) <= abs(x_1 - nth(y, i)(x))")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (hide
                                                               2
                                                               3
                                                               4
                                                               5)
                                                              (("2"
                                                                (lemma
                                                                 "  abs_diff ")
                                                                (("2"
                                                                  (lemma
                                                                   "abs_abs")
                                                                  (("2"
                                                                    (inst
                                                                     -2
                                                                     "x_1"
                                                                     "nth(y, i)(x)")
                                                                    (("2"
                                                                      (lemma
                                                                       "  abs_diff ")
                                                                      (("2"
                                                                        (hide
                                                                         -2)
                                                                        (("2"
                                                                          (inst
                                                                           -1
                                                                           "nth(y, i)(x)"
                                                                           "x_1")
                                                                          (("2"
                                                                            (lemma
                                                                             "abs_diff_commute")
                                                                            (("2"
                                                                              (inst
                                                                               -1
                                                                               "nth(y, i)(x)"
                                                                               "x_1")
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (expand
                                                                                   "abs"
                                                                                   1
                                                                                   1)
                                                                                  (("2"
                                                                                    (lift-if
                                                                                     1)
                                                                                    (("2"
                                                                                      (split
                                                                                       1)
                                                                                      (("1"
                                                                                        (flatten)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (flatten)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("4"
                                (skeep 1)
                                (("4"
                                  (hide -)
                                  (("4"
                                    (hide 2)
                                    (("4" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide -1 -2 2)
                      (("2" (typepred "i")
                        (("2" (typepred "integral(a,b,y)")
                          (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (lemma "not_one_element")
                  (("2" (propax) nil nil)) nil)
                 ("3" (lemma "connected") (("3" (propax) nil nil)) nil)
                 ("4" (lemma "non_empty")
                  (("4" (expand "nonempty?" -1)
                    (("4" (expand "empty?" 1)
                      (("4" (skeep 1)
                        (("4" (inst 1 "x")
                          (("4" (expand "member" -1)
                            (("4" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((norm_inf_nth formula-decl nil norms Optimization_Dev)
    (non_empty formula-decl nil norm_ineq nil)
    (empty? const-decl "bool" sets nil)
    (x skolem-const-decl "real" norm_ineq nil)
    (member const-decl "bool" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (connected formula-decl nil norm_ineq nil)
    (not_one_element formula-decl nil norm_ineq nil)
    (int_nth formula-decl nil r2v_analysis nil)
    (abs const-decl "[T -> nonneg_real]" real_fun_ops reals)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (nth const-decl "[(d) -> real]" r2v_def nil)
    (norm_inf_nth_ineq formula-decl nil norms Optimization_Dev)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (x_1 skolem-const-decl "closed_interval[(d)](a, b)" norm_ineq nil)
    (int_norm_cont formula-decl nil norm_ineq nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (closed_interval type-eq-decl nil intervals_real reals)
    (<= const-decl "bool" reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (abs_diff formula-decl nil abs_lems reals)
    (abs_diff_commute formula-decl nil abs_lems reals)
    (abs_abs formula-decl nil real_props nil)
    (continuous? const-decl "bool" continuous_functions analysis)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (width const-decl "posreal" integral_def analysis)
    (integral? const-decl "bool" integral_def analysis)
    (integrable? const-decl "bool" integral_def analysis)
    (norm_inf const-decl "[(cons?) -> nonneg_real]" norms
     Optimization_Dev)
    (null? const-decl "bool" r2v_def nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (continuous? const-decl "bool" continuous_functions analysis)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (O const-decl "T3" function_props nil)
    (composition_cont formula-decl nil composition_continuous analysis)
    (continuous_integrable formula-decl nil integral_cont analysis)
    (Integrable? const-decl "bool" r2v_analysis nil)
    (cont_Int formula-decl nil r2v_analysis nil)
    (Integral_neg formula-decl nil integral analysis)
    (minus_real_is_real application-judgement "real" reals nil)
    (Integrable? const-decl "bool" integral_def analysis)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (cont_int formula-decl nil r2v_analysis nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (- const-decl "[T -> real]" real_fun_ops reals)
    (norm? const-decl "bool" norms Optimization_Dev)
    (Integral const-decl "real" integral_def analysis)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     Optimization_Dev)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (< const-decl "bool" reals nil)
    (a skolem-const-decl "(d)" norm_ineq nil)
    (b skolem-const-decl "(d)" norm_ineq nil)
    (n skolem-const-decl "posnat" norm_ineq nil)
    (y skolem-const-decl "{yy: r2v_n(n) | continuous?(yy)}" norm_ineq
     nil)
    (below type-eq-decl nil naturalnumbers nil)
    (i skolem-const-decl "below(length(integral(a, b, y)))" norm_ineq
       nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (connected? const-decl "bool" deriv_domain_def analysis)
    (TRUE const-decl "bool" booleans nil)
    (Integral_le formula-decl nil integral analysis)
    (norm_inf const-decl "(norm?(m))" norms Optimization_Dev)
    (continuous? const-decl "bool" r2v_analysis nil)
    (r2v_n type-eq-decl nil r2v_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (integral def-decl "VectorN(length(f))" r2v_analysis nil)
    (VectorN type-eq-decl nil matrices matrices)
    (length const-decl "nat" r2v_def nil)
    (integrable? const-decl "bool" r2v_analysis nil)
    (r2v type-eq-decl nil r2v_def nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (> const-decl "bool" reals nil)
    (d formal-const-decl "[real -> bool]" norm_ineq nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (normI_TCC1 0
  (normI_TCC1-1 nil 3788774987
   ("" (skeep)
    (("" (lemma "cont_Int")
      (("" (inst?) (("" (assert) (("" (inst -1 "a" "b") nil nil)) nil))
        nil))
      nil))
    nil)
   ((d formal-const-decl "[real -> bool]" norm_ineq nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (cont_Int formula-decl nil r2v_analysis nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (continuous? const-decl "bool" r2v_analysis nil)
    (r2v_n type-eq-decl nil r2v_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (r2v type-eq-decl nil r2v_def nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil))
   nil
   (normI subtype "norm_ineq.y"
    "{ff: r2v_def[norm_ineq.d].r2v | r2v_analysis[norm_ineq.d].Integrable?(norm_ineq.a, norm_ineq.b, ff)}")))
 (normI_TCC2 0
  (normI_TCC2-1 nil 3788774987
   ("" (skeep)
    (("" (assert)
      (("" (typepred "Integral[d](a,b,y)")
        (("" (assert)
          (("" (typepred "y")
            (("" (expand "length" -3 2) (("" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic
     Optimization_Dev)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (d formal-const-decl "[real -> bool]" norm_ineq nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (r2v type-eq-decl nil r2v_def nil)
    (Integrable? const-decl "bool" r2v_analysis nil)
    (length const-decl "nat" r2v_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (Integral def-decl "VectorN(length(f))" r2v_analysis nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (r2v_n type-eq-decl nil r2v_def nil)
    (continuous? const-decl "bool" r2v_analysis nil))
   nil
   (normI subtype
    "r2v_analysis[norm_ineq.d].Integral(norm_ineq.a, norm_ineq.b, norm_ineq.y)"
    "(list_adt[real].cons?)")))
 (normI_TCC3 0
  (normI_TCC3-1 nil 3788864304 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (d formal-const-decl "[real -> bool]" norm_ineq nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (r2v type-eq-decl nil r2v_def nil)
    (continuous? const-decl "bool" r2v_analysis nil)
    (VectorN type-eq-decl nil matrices matrices)
    (r2v_n type-eq-decl nil r2v_def nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     Optimization_Dev)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nth const-decl "[(d) -> real]" r2v_def nil)
    (continuous? const-decl "bool" continuous_functions analysis)
    (continuous? const-decl "bool" continuous_functions analysis))
   nil
   (normI subtype "norm_ineq.y(norm_ineq.x)"
    "(list_adt[real].cons?)")))
 (normI_TCC4 0
  (normI_TCC1-1 nil 3788774350
   ("" (lemma "int_norm_cont")
    (("" (skeep)
      (("" (inst?)
        (("" (assert)
          (("" (inst -1 "a" "b")
            (("1" (expand "Integrable?" 1)
              (("1" (assert)
                (("1" (flatten) (("1" (assert) nil nil)) nil)) nil))
              nil)
             ("2" (assert)
              (("2" (flip-ineq 1)
                (("2" (case "NOT a=b")
                  (("1" (assert) nil nil)
                   ("2" (expand "Integrable?" 1)
                    (("2" (propax) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (Integrable? const-decl "bool" integral_def analysis)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (a skolem-const-decl "(d)" norm_ineq nil)
    (b skolem-const-decl "(d)" norm_ineq nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (continuous? const-decl "bool" r2v_analysis nil)
    (r2v type-eq-decl nil r2v_def nil)
    (r2v_n type-eq-decl nil r2v_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (d formal-const-decl "[real -> bool]" norm_ineq nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (int_norm_cont formula-decl nil norm_ineq nil))
   nil
   (normI subtype
    "LAMBDA (x: (norm_ineq.d)): norms.norm_inf(norm_ineq.n)(norm_ineq.y(x))"
    "integral_def[(norm_ineq.d)].Integrable_funs(norm_ineq.a, norm_ineq.b)")))
 (normI 0
  (normI-1 nil 3789132015
   ("" (skeep)
    (("" (lemma "normi")
      (("" (inst?)
        (("" (inst -1 "a" "b")
          (("" (assert)
            (("" (case "a<b")
              (("1" (assert)
                (("1" (expand "Integral" 1 2)
                  (("1" (assert)
                    (("1" (lemma "Int_int")
                      (("1" (inst?) (("1" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (assert)
                (("2" (case "NOT a=b")
                  (("1" (assert) nil nil)
                   ("2" (hide -2)
                    (("2" (replace -1 2)
                      (("2" (lemma "Int_zero")
                        (("2" (inst -1 "b" "y")
                          (("2" (assert)
                            (("2" (replace -1)
                              (("2"
                                (expand "Integral" 2 1)
                                (("2"
                                  (assert)
                                  (("2"
                                    (typepred "norm_inf(n)")
                                    (("2"
                                      (expand "norm?" -1)
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (inst
                                           -3
                                           "zero_vec(length(y))")
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (hide -3)
                                                (("1"
                                                  (expand "length" 1 1)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (assert)
                                            (("2"
                                              (expand "length" 1 2)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((normi formula-decl nil norm_ineq nil)
    (< const-decl "bool" reals nil)
    (Integral const-decl "real" integral_def analysis)
    (Int_int formula-decl nil r2v_analysis nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (Integrable? const-decl "bool" r2v_analysis nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic Optimization_Dev)
    (length const-decl "nat" r2v_def nil)
    (n skolem-const-decl "posnat" norm_ineq nil)
    (y skolem-const-decl "{yy: r2v_n(n) | continuous?(yy)}" norm_ineq
     nil)
    (norm_inf const-decl "(norm?(m))" norms Optimization_Dev)
    (norm? const-decl "bool" norms Optimization_Dev)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (Int_zero formula-decl nil r2v_analysis nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     Optimization_Dev)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (continuous? const-decl "bool" r2v_analysis nil)
    (r2v type-eq-decl nil r2v_def nil)
    (r2v_n type-eq-decl nil r2v_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (d formal-const-decl "[real -> bool]" norm_ineq nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak)))

