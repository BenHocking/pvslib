(r2v_analysis
 (deriv_domain 0
  (deriv_domain-2 nil 3787937197
   ("" (expand "deriv_domain?" 1)
    (("" (skeep)
      (("" (typepred "x")
        (("" (lemma "not_one_element")
          (("" (expand "not_one_element?" -1)
            (("" (inst -1 "x")
              (("" (skeep)
                (("" (lemma "connected")
                  (("" (expand "connected?" -1)
                    (("" (case "x<y")
                      (("1" (inst 2 "min(y-x, e)/2")
                        (("1" (grind) nil nil)
                         ("2" (split 1)
                          (("1" (expand "min" 1 1)
                            (("1" (lift-if 1)
                              (("1"
                                (split 1)
                                (("1"
                                  (flatten)
                                  (("1" (assert) nil nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2"
                            (inst -2 "x" "y" "min(y - x, e) / 2 + x")
                            (("2" (assert)
                              (("2"
                                (expand "min" 2)
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert)
                        (("2" (case "NOT x>y")
                          (("1" (assert) nil nil)
                           ("2" (inst 3 "-min(e,x-y)/2")
                            (("1" (grind) nil nil)
                             ("2" (split 1)
                              (("1"
                                (expand "min" 1 1)
                                (("1"
                                  (assert)
                                  (("1"
                                    (lift-if -1)
                                    (("1" (grind) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (inst
                                 -2
                                 "y"
                                 "x"
                                 "-min(e, x - y) / 2 + x")
                                (("2"
                                  (assert)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((not_one_element formula-decl nil r2v_analysis nil)
    (connected formula-decl nil r2v_analysis nil)
    (< const-decl "bool" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (<= const-decl "bool" reals nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (y skolem-const-decl "(d)" r2v_analysis nil)
    (x skolem-const-decl "(d)" r2v_analysis nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (e skolem-const-decl "posreal" r2v_analysis nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (connected? const-decl "bool" deriv_domain_def analysis)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (d formal-const-decl "[real -> bool]" r2v_analysis nil)
    (deriv_domain? const-decl "bool" deriv_domain_def analysis)
    (real_plus_real_is_real application-judgement "real" reals nil))
   nil)
  (deriv_domain-1 nil 3787936388
   ("" (lemma "connected")
    (("" (lemma "not_one_element")
      (("" (lemma "non_empty")
        (("" (expand "deriv_domain?" 1)
          (("" (skeep)
            (("" (expand "not_one_element?" -2)
              (("" (typepred "x")
                (("" (inst -3 "x")
                  (("" (skeep -3) (("" (postpone) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (IMP_fundamental_theorem_TCC1 0
  (IMP_fundamental_theorem_TCC1-1 nil 3789399268
   ("" (lemma "non_empty")
    (("" (expand "nonempty?")
      (("" (expand "empty?")
        (("" (skeep)
          (("" (inst 1 "x")
            (("" (assert)
              (("" (expand "member" -1) (("" (propax) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nonempty? const-decl "bool" sets nil)
    (member const-decl "bool" sets nil)
    (x skolem-const-decl "real" r2v_analysis nil)
    (d formal-const-decl "[real -> bool]" r2v_analysis nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (empty? const-decl "bool" sets nil)
    (non_empty formula-decl nil r2v_analysis nil))
   nil (IMP_fundamental_theorem existence "" "(r2v_analysis.d)")))
 (IMP_fundamental_theorem_TCC2 0
  (IMP_fundamental_theorem_TCC2-1 nil 3789399268
   ("" (lemma "connected") (("" (propax) nil nil)) nil)
   ((connected formula-decl nil r2v_analysis nil)) nil
   (IMP_fundamental_theorem assuming
    "analysis@fundamental_theorem[(r2v_analysis.d)].fundamental_theorem"
    "connected_domain: ASSUMPTION deriv_domain_def[T].connected?")))
 (IMP_fundamental_theorem_TCC3 0
  (IMP_fundamental_theorem_TCC3-1 nil 3789399268
   ("" (lemma "not_one_element") (("" (propax) nil nil)) nil)
   ((not_one_element formula-decl nil r2v_analysis nil)) nil
   (IMP_fundamental_theorem assuming
    "analysis@fundamental_theorem[(r2v_analysis.d)].fundamental_theorem"
    "not_one_element: ASSUMPTION deriv_domain_def[T].not_one_element?")))
 (IMP_r2v_def_TCC1 0
  (IMP_r2v_def_TCC1-1 nil 3788861793
   ("" (lemma "non_empty") (("" (propax) nil nil)) nil)
   ((non_empty formula-decl nil r2v_analysis nil)) nil
   (IMP_r2v_def assuming "r2v_def[(r2v_analysis.d)].r2v_def"
    "non_empty: ASSUMPTION sets[real].nonempty?(r2v_def.d)")))
 (derivable?_TCC1 0
  (derivable?_TCC1-2 nil 3787321543
   ("" (skeep)
    (("" (expand "deriv_domain?" 1)
      (("" (skeep)
        (("" (typepred "x")
          (("" (lemma "not_one_element")
            (("" (expand "not_one_element?" -1)
              (("" (inst -1 "x")
                (("" (skeep)
                  (("" (lemma "connected")
                    (("" (expand "connected?" -1)
                      (("" (case "x<y")
                        (("1" (inst 2 "min(y-x, e)/2")
                          (("1" (grind) nil nil)
                           ("2" (split 1)
                            (("1" (expand "min" 1 1)
                              (("1"
                                (lift-if 1)
                                (("1"
                                  (split 1)
                                  (("1"
                                    (flatten)
                                    (("1" (assert) nil nil))
                                    nil)
                                   ("2"
                                    (flatten)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2"
                              (inst -2 "x" "y" "min(y - x, e) / 2 + x")
                              (("2"
                                (assert)
                                (("2"
                                  (expand "min" 2)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert)
                          (("2" (case "NOT x>y")
                            (("1" (assert) nil nil)
                             ("2" (inst 3 "-min(e,x-y)/2")
                              (("1" (grind) nil nil)
                               ("2"
                                (split 1)
                                (("1"
                                  (expand "min" 1 1)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (lift-if -1)
                                      (("1" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (inst
                                   -2
                                   "y"
                                   "x"
                                   "-min(e, x - y) / 2 + x")
                                  (("2"
                                    (assert)
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_plus_real_is_real application-judgement "real" reals nil)
    (deriv_domain? const-decl "bool" deriv_domain_def analysis)
    (d formal-const-decl "[real -> bool]" r2v_analysis nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (connected? const-decl "bool" deriv_domain_def analysis)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (e skolem-const-decl "posreal" r2v_analysis nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (x skolem-const-decl "(d)" r2v_analysis nil)
    (y skolem-const-decl "(d)" r2v_analysis nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (<= const-decl "bool" reals nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (< const-decl "bool" reals nil)
    (connected formula-decl nil r2v_analysis nil)
    (not_one_element formula-decl nil r2v_analysis nil))
   nil
   (derivable? assuming
    "analysis@derivatives[(r2v_analysis.d)].derivatives"
    "deriv_domain: ASSUMPTION deriv_domain_def[T].deriv_domain?"))
  (derivable?_TCC1-1 nil 3787321238 ("" (assuming-tcc) nil nil) nil nil
   (derivable? assuming
    "analysis@derivatives[(r2v_analysis.d)].derivatives"
    "deriv_domain: ASSUMPTION deriv_domain_def[T].deriv_domain?")))
 (deriv_TCC1 0
  (deriv_TCC7-1 nil 3787657636
   ("" (skeep)
    (("" (split 1)
      (("1" (inst 1 "0")
        (("1" (skeep)
          (("1" (expand "length" 1 1) (("1" (propax) nil nil)) nil))
          nil))
        nil)
       ("2" (expand "length" 1 1)
        (("2" (lemma "length_null")
          (("2" (inst -1 "f") (("2" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (d formal-const-decl "[real -> bool]" r2v_analysis nil)
    (length_null formula-decl nil r2v_def nil)
    (length_null formula-decl nil more_list_props structures)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis)
    (derivable? const-decl "bool" r2v_analysis nil)
    (r2v type-eq-decl nil r2v_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (length const-decl "nat" r2v_def nil))
   nil
   (deriv subtype "LAMBDA (x: (r2v_analysis.d)): list_adt[real].null"
    "{ff: r2v_def[(r2v_analysis.d)].r2v | r2v_def[(r2v_analysis.d)].length(ff) = r2v_def[(r2v_analysis.d)].length(r2v_analysis.f)}")))
 (deriv_TCC2 0
  (deriv_TCC2-2 nil 3787321585
   ("" (skeep)
    (("" (lemma "null_cons")
      (("" (inst -1 "f") (("" (assert) nil nil)) nil)) nil))
    nil)
   ((d formal-const-decl "[real -> bool]" r2v_analysis nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (null_cons formula-decl nil r2v_def nil)
    (derivable? const-decl "bool" r2v_analysis nil)
    (r2v type-eq-decl nil r2v_def nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil))
   nil
   (deriv subtype "r2v_analysis.f"
    "{ff: r2v_def[(r2v_analysis.d)].r2v | r2v_def[(r2v_analysis.d)].cons?(ff)}"))
  (deriv_TCC2-1 nil 3787321238 ("" (subtype-tcc) nil nil) nil nil
   (deriv subtype "r2v_analysis.f"
    "{ff: r2v_def[(r2v_analysis.d)].r2v | r2v_def[(r2v_analysis.d)].cons?(ff)}")))
 (deriv_TCC3 0
  (deriv_TCC3-2 nil 3787321606
   ("" (skeep)
    (("" (typepred "f")
      (("" (expand "derivable?" -2)
        (("" (inst -2 "0")
          (("1" (expand "nth" -2)
            (("1" (expand "car" 2 1)
              (("1" (expand "nth" -2) (("1" (propax) nil nil)) nil))
              nil))
            nil)
           ("2" (lemma "length_null")
            (("2" (inst -1 "f") (("2" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((derivable? const-decl "bool" r2v_analysis nil)
    (r2v type-eq-decl nil r2v_def nil)
    (length def-decl "nat" list_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (d formal-const-decl "[real -> bool]" r2v_analysis nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (f skolem-const-decl "(derivable?)" r2v_analysis nil)
    (length const-decl "nat" r2v_def nil)
    (< const-decl "bool" reals nil) (car const-decl "real" r2v_def nil)
    (nth def-decl "T" list_props nil)
    (nth const-decl "[(d) -> real]" r2v_def nil)
    (length_null formula-decl nil r2v_def nil))
   nil
   (deriv subtype "r2v_def[(r2v_analysis.d)].car(r2v_analysis.f)"
    "deriv_fun[(d)]"))
  (deriv_TCC3-1 nil 3787321238 ("" (subtype-tcc) nil nil) nil nil
   (deriv subtype "r2v_def[(r2v_analysis.d)].car(r2v_analysis.f)"
    "deriv_fun[(d)]")))
 (deriv_TCC4 0
  (deriv_TCC4-1 nil 3789841305
   ("" (skeep)
    (("" (lemma "deriv_domain") (("" (propax) nil nil)) nil)) nil)
   ((deriv_domain formula-decl nil r2v_analysis nil)) nil
   (deriv assuming "analysis@derivatives[(r2v_analysis.d)].derivatives"
    "deriv_domain: ASSUMPTION deriv_domain_def[T].deriv_domain?")))
 (deriv_TCC5 0
  (deriv_TCC9-1 nil 3787660608
   ("" (skeep)
    (("" (assert)
      (("" (typepred "f")
        (("" (expand "derivable?" -2)
          (("" (expand "derivable?" 2)
            (("" (skeep 2)
              (("" (inst -2 "i+1")
                (("1" (lemma "nth_cdr")
                  (("1" (inst -1 "f" "i") (("1" (assert) nil nil))
                    nil))
                  nil)
                 ("2" (typepred "i")
                  (("2" (lemma "length_cdr")
                    (("2" (inst -1 "f") (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (length_cdr formula-decl nil r2v_def nil)
    (nth_cdr formula-decl nil r2v_def nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (length const-decl "nat" r2v_def nil)
    (cons? const-decl "bool" r2v_def nil)
    (cdr const-decl "r2v" r2v_def nil)
    (f skolem-const-decl "(derivable?)" r2v_analysis nil)
    (i skolem-const-decl "{ii: nat | ii < length(cdr[(d)](f))}"
       r2v_analysis nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (d formal-const-decl "[real -> bool]" r2v_analysis nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (length def-decl "nat" list_props nil)
    (r2v type-eq-decl nil r2v_def nil)
    (derivable? const-decl "bool" r2v_analysis nil))
   nil
   (deriv subtype "r2v_def[(r2v_analysis.d)].cdr(r2v_analysis.f)"
    "(r2v_analysis.derivable?)")))
 (deriv_TCC6 0
  (deriv_TCC5-2 nil 3787321646
   ("" (skeep)
    (("" (lemma "length_cdr")
      (("" (inst -1 "f") (("" (assert) nil nil)) nil)) nil))
    nil)
   ((d formal-const-decl "[real -> bool]" r2v_analysis nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (length_cdr formula-decl nil r2v_def nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (derivable? const-decl "bool" r2v_analysis nil)
    (cons? const-decl "bool" r2v_def nil)
    (r2v type-eq-decl nil r2v_def nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil))
   nil
   (deriv termination
    "r2v_analysis.deriv(r2v_def[(r2v_analysis.d)].cdr(r2v_analysis.f))"
    "nil"))
  (deriv_TCC5-1 nil 3787321238 ("" (termination-tcc) nil nil) nil nil
   (deriv termination
    "r2v_analysis.deriv(r2v_def[(r2v_analysis.d)].cdr(r2v_analysis.f))"
    "nil")))
 (deriv_TCC7 0
  (deriv_TCC7-1 nil 3787672682
   ("" (skeep)
    (("" (typepred "length" 2 1)
      (("" (typepred "v(cdr[(d)](f))")
        (("" (expand "length" 2 1)
          (("" (expand "length" 2 1)
            (("" (assert)
              (("" (lift-if 2)
                (("" (split 2)
                  (("1" (flatten)
                    (("1" (assert)
                      (("1" (expand "cons" -1) (("1" (propax) nil nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (assert)
                      (("2" (expand "cons" 2 1)
                        (("2" (lemma "length_cdr")
                          (("2" (inst -1 "f")
                            (("2" (assert)
                              (("2"
                                (expand "length" 2 2)
                                (("2"
                                  (expand "length" -1 2)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (expand "length" -3)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (expand "length" -1 1)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((odd? const-decl "bool" integers nil)
    (even? const-decl "bool" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (cons const-decl "r2v" r2v_def nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (length_cdr formula-decl nil r2v_def nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (d formal-const-decl "[real -> bool]" r2v_analysis nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (length def-decl "nat" list_props nil)
    (r2v type-eq-decl nil r2v_def nil)
    (derivable? const-decl "bool" r2v_analysis nil)
    (< const-decl "bool" reals nil)
    (length const-decl "nat" r2v_def nil)
    (cons? const-decl "bool" r2v_def nil)
    (cdr const-decl "r2v" r2v_def nil))
   nil
   (deriv subtype
    "r2v_def[(r2v_analysis.d)].cons(derivatives[(r2v_analysis.d)].deriv(r2v_def[(r2v_analysis.d)].car(r2v_analysis.f)), r2v_analysis.deriv(r2v_def[(r2v_analysis.d)].cdr(r2v_analysis.f)))"
    "{ff: r2v_def[(r2v_analysis.d)].r2v | r2v_def[(r2v_analysis.d)].length(ff) = r2v_def[(r2v_analysis.d)].length(r2v_analysis.f)}")))
 (deriv_nth_TCC1 0
  (deriv_nth_TCC1-2 nil 3787321687
   ("" (skeep) (("" (typepred "i") (("" (assert) nil nil)) nil)) nil)
   ((derivable? const-decl "bool" r2v_analysis nil)
    (length const-decl "nat" r2v_def nil)
    (r2v type-eq-decl nil r2v_def nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (d formal-const-decl "[real -> bool]" r2v_analysis nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (deriv_nth subtype "r2v_analysis.i"
    "{jj: naturalnumbers.nat | reals.<(jj, r2v_def[(r2v_analysis.d)].length(r2v_analysis.deriv(r2v_analysis.f)))}"))
  (deriv_nth_TCC1-1 nil 3787321238 ("" (subtype-tcc) nil nil) nil nil
   (deriv_nth subtype "r2v_analysis.i"
    "{jj: naturalnumbers.nat | reals.<(jj, r2v_def[(r2v_analysis.d)].length(r2v_analysis.deriv(r2v_analysis.f)))}")))
 (deriv_nth_TCC2 0
  (deriv_nth_TCC1-1 nil 3787660608
   ("" (skeep)
    (("" (typepred "f")
      (("" (expand "derivable?" -2) (("" (inst -2 "i") nil nil)) nil))
      nil))
    nil)
   ((derivable? const-decl "bool" r2v_analysis nil)
    (r2v type-eq-decl nil r2v_def nil)
    (length def-decl "nat" list_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (d formal-const-decl "[real -> bool]" r2v_analysis nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (< const-decl "bool" reals nil)
    (length const-decl "nat" r2v_def nil))
   nil
   (deriv_nth subtype
    "r2v_def[(r2v_analysis.d)].nth(r2v_analysis.f, r2v_analysis.i)"
    "deriv_fun[(d)]")))
 (deriv_nth 0
  (deriv_nth-1 nil 3787321709
   (""
    (case "FORALL (n:nat, f: (derivable?), i: {ii: nat | ii < length(f)}):
                                    length(f)=n IMPLIES (nth(deriv(f), i) = deriv(nth(f, i)))")
    (("1" (skeep) (("1" (inst -1 "length(f)" "f" "i") nil nil)) nil)
     ("2" (assert)
      (("2" (hide 2)
        (("2" (induct "n")
          (("1" (skeep)
            (("1" (expand "deriv" 1 1) (("1" (assert) nil nil)) nil))
            nil)
           ("2" (skeep)
            (("2" (skeep)
              (("2" (case "i=0")
                (("1" (replace -1)
                  (("1" (expand "deriv" 1 1)
                    (("1" (lift-if 1)
                      (("1" (split 1)
                        (("1" (flatten)
                          (("1" (expand "deriv" 1 1)
                            (("1" (lemma "length_null")
                              (("1"
                                (inst -1 "f")
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (flatten)
                          (("2" (assert)
                            (("2" (expand "nth" 2 1)
                              (("2"
                                (expand "nth" 2 1)
                                (("2"
                                  (assert)
                                  (("2"
                                    (expand "cons" 2 1)
                                    (("2"
                                      (expand "nth" 2 1)
                                      (("2"
                                        (expand "nth" 2 1)
                                        (("2"
                                          (expand "car")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (decompose-equality 2)
                                              (("1"
                                                (typepred "f")
                                                (("1"
                                                  (expand
                                                   "derivable?"
                                                   -2)
                                                  (("1"
                                                    (inst -2 "0")
                                                    (("1"
                                                      (expand "nth" -2)
                                                      (("1"
                                                        (expand
                                                         "nth"
                                                         -2
                                                         1)
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (skeep)
                                                (("2"
                                                  (lemma "length_cons")
                                                  (("2"
                                                    (inst -1 "f")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (expand
                                                         "cons?"
                                                         -1)
                                                        (("2"
                                                          (inst -1 "x")
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (skeep 1)
                                                (("3"
                                                  (expand
                                                   "derivable?"
                                                   1
                                                   1)
                                                  (("3"
                                                    (skeep)
                                                    (("3"
                                                      (typepred "f")
                                                      (("3"
                                                        (expand
                                                         "derivable?"
                                                         -2)
                                                        (("3"
                                                          (inst -2 "0")
                                                          (("3"
                                                            (expand
                                                             "nth"
                                                             -2)
                                                            (("3"
                                                              (assert)
                                                              (("3"
                                                                (expand
                                                                 "derivable?"
                                                                 -2)
                                                                (("3"
                                                                  (inst
                                                                   -2
                                                                   "x_1")
                                                                  (("3"
                                                                    (expand
                                                                     "nth"
                                                                     -2)
                                                                    (("3"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("4"
                                                (skeep 1)
                                                (("4"
                                                  (typepred "f")
                                                  (("4"
                                                    (lemma
                                                     "length_cons")
                                                    (("4"
                                                      (inst -1 "f")
                                                      (("4"
                                                        (assert)
                                                        (("4"
                                                          (expand
                                                           "cons?"
                                                           -1)
                                                          (("4"
                                                            (inst
                                                             -1
                                                             "x1")
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert)
                  (("2" (inst -1 "cdr(f)" "i-1")
                    (("1" (assert)
                      (("1" (lemma "length_cdr")
                        (("1" (inst -1 "f")
                          (("1" (assert)
                            (("1" (expand "deriv" 2 1)
                              (("1"
                                (lift-if 2)
                                (("1"
                                  (split 2)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (expand "null?" -1)
                                      (("1"
                                        (expand "length" -4)
                                        (("1"
                                          (inst -1 "choose((d))")
                                          (("1"
                                            (expand "length" -4)
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (flatten)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (expand "cons" 2 1)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (expand "nth" 2 1)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (expand "nth" 2 1)
                                                (("2"
                                                  (expand "nth" 2 2)
                                                  (("2"
                                                    (expand "nth" 2 2)
                                                    (("2"
                                                      (expand
                                                       "nth"
                                                       -2
                                                       1)
                                                      (("2"
                                                        (expand
                                                         "nth"
                                                         -2
                                                         2)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (expand
                                                             "cdr"
                                                             -2
                                                             2)
                                                            (("2"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (expand "cons?" 1 1)
                            (("2" (typepred "f")
                              (("2"
                                (skeep -1)
                                (("2"
                                  (skeep 1)
                                  (("2"
                                    (inst-cp -1 "x")
                                    (("2"
                                      (inst -1 "choose((d))")
                                      (("1"
                                        (expand "length" -5)
                                        (("1"
                                          (replace -5 -1)
                                          (("1"
                                            (replace -1 -2 rl)
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (assert)
                                        (("2"
                                          (lemma "non_empty")
                                          (("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert)
                      (("2" (lemma "length_cdr")
                        (("2" (inst -1 "f") (("2" (assert) nil nil))
                          nil))
                        nil))
                      nil)
                     ("3" (typepred "f")
                      (("3" (expand "derivable?" -2)
                        (("3" (expand "length" -3)
                          (("3" (assert)
                            (("3" (expand "length" -3)
                              (("3"
                                (typepred "f")
                                (("3"
                                  (skeep -1)
                                  (("3"
                                    (inst-cp -1 "choose((d))")
                                    (("3"
                                      (assert)
                                      (("3"
                                        (hide 2)
                                        (("3"
                                          (skeep)
                                          (("3"
                                            (expand "derivable?" 1)
                                            (("3"
                                              (skeep)
                                              (("3"
                                                (inst -5 "i!1+1")
                                                (("1"
                                                  (lemma "nth_cdr")
                                                  (("1"
                                                    (inst -1 "f" "i!1")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (typepred "i!1")
                                                  (("2"
                                                    (lemma
                                                     "length_cdr")
                                                    (("2"
                                                      (inst -1 "f")
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("4" (lemma "length_cons")
                      (("4" (inst -1 "f") (("4" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (hide 2)
            (("3" (skeep)
              (("3" (typepred "f")
                (("3" (expand "derivable?" -2)
                  (("3" (inst -2 "i") nil nil)) nil))
                nil))
              nil))
            nil)
           ("4" (hide 2) (("4" (skeep) (("4" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2)
      (("3" (skeep)
        (("3" (typepred "f")
          (("3" (expand "derivable?" -2)
            (("3" (inst -2 "i")
              (("3" (lemma "not_one_element") (("3" (propax) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (hide 2)
      (("4" (skeep)
        (("4" (assert)
          (("4" (lemma "deriv_domain") (("4" (propax) nil nil)) nil))
          nil))
        nil))
      nil)
     ("5" (hide 2)
      (("5" (skeep)
        (("5" (typepred "f")
          (("5" (expand "derivable?" -2) (("5" (inst -2 "i") nil nil))
            nil))
          nil))
        nil))
      nil)
     ("6" (assert)
      (("6" (hide 2)
        (("6" (skeep)
          (("6" (typepred "i") (("6" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((deriv const-decl "[T -> real]" derivatives analysis)
    (deriv_fun type-eq-decl nil derivatives analysis)
    (derivable? const-decl "bool" derivatives analysis)
    (deriv def-decl "{ff: r2v | length(ff) = length(f)}" r2v_analysis
     nil)
    (nth const-decl "[(d) -> real]" r2v_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (length const-decl "nat" r2v_def nil)
    (< const-decl "bool" reals nil)
    (derivable? const-decl "bool" r2v_analysis nil)
    (r2v type-eq-decl nil r2v_def nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (d formal-const-decl "[real -> bool]" r2v_analysis nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (deriv_domain? const-decl "bool" deriv_domain_def analysis)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (length_null formula-decl nil r2v_def nil)
    (nth def-decl "T" list_props nil)
    (cons const-decl "r2v" r2v_def nil)
    (cons? const-decl "bool" r2v_def nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (length_cons formula-decl nil r2v_def nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (f skolem-const-decl "(derivable?)" r2v_analysis nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car const-decl "real" r2v_def nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (cdr const-decl "r2v" r2v_def nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (i skolem-const-decl "{ii: nat | ii < length(f)}" r2v_analysis nil)
    (length_cdr formula-decl nil r2v_def nil)
    (non_empty formula-decl nil r2v_analysis nil)
    (set type-eq-decl nil sets nil)
    (nonempty? const-decl "bool" sets nil)
    (choose const-decl "(p)" sets nil)
    (null? const-decl "bool" r2v_def nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (i!1 skolem-const-decl "{ii: nat | ii < length(cdr[(d)](f))}"
     r2v_analysis nil)
    (nth_cdr formula-decl nil r2v_def nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (not_one_element formula-decl nil r2v_analysis nil)
    (deriv_domain formula-decl nil r2v_analysis nil))
   nil))
 (integrable?_TCC1 0
  (integrable?_TCC1-1 nil 3787321238 ("" (subtype-tcc) nil nil) nil nil
   (integrable? subtype "r2v_analysis.b"
    "{x: (r2v_analysis.d) | reals.<(r2v_analysis.a, x)}")))
 (integral_TCC1 0
  (integral_TCC1-2 nil 3787321738
   ("" (skeep)
    (("" (assert)
      (("" (lemma "length_null")
        (("" (inst -1 "f") (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis)
    (length_null formula-decl nil more_list_props structures)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (r2v type-eq-decl nil r2v_def nil) (> const-decl "bool" reals nil)
    (integrable? const-decl "bool" r2v_analysis nil)
    (length_null formula-decl nil r2v_def nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (d formal-const-decl "[real -> bool]" r2v_analysis nil))
   nil
   (integral subtype "list_adt[real].null"
    "matrices.VectorN(r2v_def[(r2v_analysis.d)].length(r2v_analysis.f))"))
  (integral_TCC1-1 nil 3787321238 ("" (subtype-tcc) nil nil) nil nil
   (integral subtype "list_adt[real].null"
    "matrices.VectorN(r2v_def[(r2v_analysis.d)].length(r2v_analysis.f))")))
 (integral_TCC2 0
  (integral_TCC2-1 nil 3787321238 ("" (subtype-tcc) nil nil)
   ((d formal-const-decl "[real -> bool]" r2v_analysis nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (null? const-decl "bool" r2v_def nil))
   nil
   (integral subtype "r2v_analysis.b"
    "{x: (r2v_analysis.d) | reals.<(r2v_analysis.a, x)}")))
 (integral_TCC3 0
  (integral_TCC3-2 nil 3787321754
   ("" (skeep)
    (("" (lemma "null_cons")
      (("" (inst -1 "f") (("" (assert) nil nil)) nil)) nil))
    nil)
   ((d formal-const-decl "[real -> bool]" r2v_analysis nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (null_cons formula-decl nil r2v_def nil)
    (integrable? const-decl "bool" r2v_analysis nil)
    (> const-decl "bool" reals nil) (r2v type-eq-decl nil r2v_def nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil))
   nil
   (integral subtype "r2v_analysis.f"
    "{ff: r2v_def[(r2v_analysis.d)].r2v | r2v_def[(r2v_analysis.d)].cons?(ff)}"))
  (integral_TCC3-1 nil 3787321238 ("" (subtype-tcc) nil nil) nil nil
   (integral subtype "r2v_analysis.f"
    "{ff: r2v_def[(r2v_analysis.d)].r2v | r2v_def[(r2v_analysis.d)].cons?(ff)}")))
 (integral_TCC4 0
  (integral_TCC5-2 nil 3787321791
   ("" (skeep)
    (("" (typepred "f")
      (("" (expand "integrable?" -2)
        (("" (inst -2 "0")
          (("1" (expand "nth" -2)
            (("1" (expand "car" 2)
              (("1" (expand "nth" -2 1) (("1" (propax) nil nil)) nil))
              nil))
            nil)
           ("2" (lemma "length_null")
            (("2" (inst -1 "f") (("2" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((integrable? const-decl "bool" r2v_analysis nil)
    (> const-decl "bool" reals nil) (r2v type-eq-decl nil r2v_def nil)
    (length def-decl "nat" list_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (d formal-const-decl "[real -> bool]" r2v_analysis nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (f skolem-const-decl "{ff: r2v | integrable?(a, b, ff)}"
     r2v_analysis nil)
    (b skolem-const-decl "{bb: (d) | bb > a}" r2v_analysis nil)
    (a skolem-const-decl "(d)" r2v_analysis nil)
    (length const-decl "nat" r2v_def nil)
    (< const-decl "bool" reals nil) (car const-decl "real" r2v_def nil)
    (nth def-decl "T" list_props nil)
    (nth const-decl "[(d) -> real]" r2v_def nil)
    (length_null formula-decl nil r2v_def nil))
   nil
   (integral subtype "r2v_def[(r2v_analysis.d)].car(r2v_analysis.f)"
    "{f | integral_def[(r2v_analysis.d)].integrable?(r2v_analysis.a, r2v_analysis.b, f)}"))
  (integral_TCC5-1 nil 3787321238 ("" (subtype-tcc) nil nil) nil nil
   (integral subtype "r2v_def[(r2v_analysis.d)].car(r2v_analysis.f)"
    "{f | integral_def[(r2v_analysis.d)].integrable?(r2v_analysis.a, r2v_analysis.b, f)}")))
 (integral_TCC5 0
  (integral_TCC7-2 nil 3787321827
   ("" (skeep)
    (("" (typepred "f")
      (("" (expand "integrable?")
        (("" (skeep)
          (("" (inst -2 "i+1")
            (("1" (lemma "nth_cdr")
              (("1" (inst -1 "f" "i") (("1" (assert) nil nil)) nil))
              nil)
             ("2" (typepred "i")
              (("2" (lemma "length_cdr")
                (("2" (inst -1 "f") (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((integrable? const-decl "bool" r2v_analysis nil)
    (> const-decl "bool" reals nil) (r2v type-eq-decl nil r2v_def nil)
    (length def-decl "nat" list_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (d formal-const-decl "[real -> bool]" r2v_analysis nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (length_cdr formula-decl nil r2v_def nil)
    (nth_cdr formula-decl nil r2v_def nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (length const-decl "nat" r2v_def nil)
    (cons? const-decl "bool" r2v_def nil)
    (cdr const-decl "r2v" r2v_def nil)
    (a skolem-const-decl "(d)" r2v_analysis nil)
    (b skolem-const-decl "{bb: (d) | bb > a}" r2v_analysis nil)
    (f skolem-const-decl "{ff: r2v | integrable?(a, b, ff)}"
     r2v_analysis nil)
    (i skolem-const-decl "{ii: nat | ii < length(cdr[(d)](f))}"
       r2v_analysis nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (integral subtype "r2v_def[(r2v_analysis.d)].cdr(r2v_analysis.f)"
    "{ff: r2v_def[(r2v_analysis.d)].r2v | r2v_analysis.integrable?(r2v_analysis.a, r2v_analysis.b, ff)}"))
  (integral_TCC7-1 nil 3787321238 ("" (subtype-tcc) nil nil) nil nil
   (integral subtype "r2v_def[(r2v_analysis.d)].cdr(r2v_analysis.f)"
    "{ff: r2v_def[(r2v_analysis.d)].r2v | r2v_analysis.integrable?(r2v_analysis.a, r2v_analysis.b, ff)}")))
 (integral_TCC6 0
  (integral_TCC6-2 nil 3787321807
   ("" (skeep)
    (("" (lemma "length_cdr")
      (("" (inst?)
        (("" (lemma "length_cdr") (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((d formal-const-decl "[real -> bool]" r2v_analysis nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (length_cdr formula-decl nil r2v_def nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (integrable? const-decl "bool" r2v_analysis nil)
    (> const-decl "bool" reals nil)
    (cons? const-decl "bool" r2v_def nil)
    (r2v type-eq-decl nil r2v_def nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil))
   nil
   (integral termination
    "r2v_analysis.integral(r2v_analysis.a, r2v_analysis.b, r2v_def[(r2v_analysis.d)].cdr(r2v_analysis.f))"
    "nil"))
  (integral_TCC6-1 nil 3787321238 ("" (termination-tcc) nil nil) nil
   nil
   (integral termination
    "r2v_analysis.integral(r2v_analysis.a, r2v_analysis.b, r2v_def[(r2v_analysis.d)].cdr(r2v_analysis.f))"
    "nil")))
 (integral_TCC7 0
  (integral_TCC8-1 nil 3787672682
   ("" (skeep)
    (("" (lemma "length_cdr")
      (("" (inst -1 "f")
        (("" (assert)
          (("" (expand "length" 2 1) (("" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((d formal-const-decl "[real -> bool]" r2v_analysis nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (length_cdr formula-decl nil r2v_def nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (integrable? const-decl "bool" r2v_analysis nil)
    (> const-decl "bool" reals nil)
    (cons? const-decl "bool" r2v_def nil)
    (r2v type-eq-decl nil r2v_def nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil))
   nil
   (integral subtype
    "list_adt[real].cons(integral_def[(r2v_analysis.d)].integral(r2v_analysis.a, r2v_analysis.b, r2v_def[(r2v_analysis.d)].car(r2v_analysis.f)), r2v_analysis.integral(r2v_analysis.a, r2v_analysis.b, r2v_def[(r2v_analysis.d)].cdr(r2v_analysis.f)))"
    "matrices.VectorN(r2v_def[(r2v_analysis.d)].length(r2v_analysis.f))")))
 (int_nth_TCC1 0
  (int_nth_TCC1-1 nil 3787410283 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (d formal-const-decl "[real -> bool]" r2v_analysis nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (length def-decl "nat" list_props nil)
    (r2v type-eq-decl nil r2v_def nil)
    (integrable? const-decl "bool" r2v_analysis nil)
    (< const-decl "bool" reals nil)
    (length const-decl "nat" r2v_def nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis)
    (integrable? const-decl "bool" integral_def analysis)
    (integral? const-decl "bool" integral_def analysis)
    (width const-decl "posreal" integral_def analysis))
   nil
   (int_nth subtype "r2v_analysis.i"
    "below[length[real](integral(a, b, f))]")))
 (int_nth_TCC2 0
  (int_nth_TCC2-1 nil 3787410283 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (d formal-const-decl "[real -> bool]" r2v_analysis nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (length def-decl "nat" list_props nil)
    (r2v type-eq-decl nil r2v_def nil)
    (integrable? const-decl "bool" r2v_analysis nil)
    (< const-decl "bool" reals nil)
    (length const-decl "nat" r2v_def nil)
    (choose const-decl "(p)" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis)
    (width const-decl "posreal" integral_def analysis)
    (integral? const-decl "bool" integral_def analysis)
    (integrable? const-decl "bool" integral_def analysis)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil
   (int_nth subtype
    "r2v_def[(r2v_analysis.d)].nth(r2v_analysis.f, r2v_analysis.i)"
    "{f | integral_def[(r2v_analysis.d)].integrable?(r2v_analysis.a, r2v_analysis.b, f)}")))
 (int_nth 0
  (int_nth-1 nil 3787410726
   (""
    (case " FORALL (n:nat, a: (d), b: {bb: (d) | bb > a},
                     f: {ff: r2v | integrable?(a, b, ff)},
                     i: {ii: nat | ii < length(f)}):
               length(f)=n IMPLIES (nth(integral(a, b, f), i) = integral(a, b, nth(f, i)))")
    (("1" (skeep) (("1" (inst -1 "length(f)" "a" "b" "f" "i") nil nil))
      nil)
     ("2" (hide 2)
      (("2" (induct "n")
        (("1" (skeep)
          (("1" (lemma "length_null")
            (("1" (inst -1 "f") (("1" (assert) nil nil)) nil)) nil))
          nil)
         ("2" (skeep)
          (("2" (skeep)
            (("2" (case "i=0")
              (("1" (replace -1)
                (("1" (expand "integral" 1 1)
                  (("1" (lift-if 1)
                    (("1" (split 1)
                      (("1" (flatten)
                        (("1" (lemma "length_null")
                          (("1" (inst -1 "f") (("1" (assert) nil nil))
                            nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (assert)
                          (("2" (expand "nth" 2 1)
                            (("2" (expand "nth" 2 1)
                              (("2"
                                (expand "car" 2 1)
                                (("2"
                                  (expand "nth" 2 1)
                                  (("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (inst -1 "a" "b" "cdr(f)" "i-1")
                (("1" (lemma "length_cdr")
                  (("1" (inst -1 "f")
                    (("1" (assert)
                      (("1" (expand "integral" 2 1)
                        (("1" (lift-if 2)
                          (("1" (split 2)
                            (("1" (flatten)
                              (("1"
                                (lemma "length_null")
                                (("1"
                                  (inst -1 "f")
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (flatten)
                              (("2"
                                (expand "nth" 2)
                                (("2"
                                  (expand "nth" -2 2)
                                  (("2"
                                    (expand "cdr" -2 2)
                                    (("2"
                                      (expand "nth" 2 2)
                                      (("2" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (lemma "length_cons")
                      (("2" (inst -1 "f") (("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert)
                  (("2" (typepred "i")
                    (("2" (lemma "length_cdr")
                      (("2" (inst -1 "f") (("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (typepred "f")
                  (("3" (hide 3)
                    (("3" (expand "integrable?" 1)
                      (("3" (expand "integrable?" -2)
                        (("3" (skeep)
                          (("3" (inst -2 "i!1+1")
                            (("1" (expand "nth" -2)
                              (("1"
                                (expand "nth" -2)
                                (("1"
                                  (expand "nth" 1 1)
                                  (("1"
                                    (expand "cdr" 1)
                                    (("1" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (typepred "i!1")
                              (("2"
                                (lemma "length_cdr")
                                (("2"
                                  (inst -1 "f")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("4" (lemma "length_cons")
                  (("4" (inst -1 "f") (("4" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (hide 2)
          (("3" (skeep)
            (("3" (typepred "f")
              (("3" (expand "integrable?" -2)
                (("3" (inst -2 "i") nil nil)) nil))
              nil))
            nil))
          nil)
         ("4" (hide 2)
          (("4" (skeep)
            (("4" (typepred "i") (("4" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil)
     ("3" (hide 2)
      (("3" (skeep)
        (("3" (typepred "f")
          (("3" (expand "integrable?" -2) (("3" (inst -2 "i") nil nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (hide 2)
      (("4" (skeep) (("4" (typepred "i") (("4" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis)
    (car const-decl "real" r2v_def nil)
    (i!1 skolem-const-decl "{ii: nat | ii < length(cdr[(d)](f))}"
     r2v_analysis nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (length_cdr formula-decl nil r2v_def nil)
    (length_cons formula-decl nil r2v_def nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (i skolem-const-decl "{ii: nat | ii < length(f)}" r2v_analysis nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (cdr const-decl "r2v" r2v_def nil)
    (f skolem-const-decl "{ff: r2v | integrable?(a, b, ff)}"
     r2v_analysis nil)
    (b skolem-const-decl "{bb: (d) | bb > a}" r2v_analysis nil)
    (a skolem-const-decl "(d)" r2v_analysis nil)
    (cons? const-decl "bool" r2v_def nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (length_null formula-decl nil r2v_def nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (d formal-const-decl "[real -> bool]" r2v_analysis nil)
    (> const-decl "bool" reals nil) (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (r2v type-eq-decl nil r2v_def nil)
    (integrable? const-decl "bool" r2v_analysis nil)
    (< const-decl "bool" reals nil)
    (length const-decl "nat" r2v_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (VectorN type-eq-decl nil matrices matrices)
    (integral def-decl "VectorN(length(f))" r2v_analysis nil)
    (integrable? const-decl "bool" integral_def analysis)
    (integral? const-decl "bool" integral_def analysis)
    (integral const-decl "{S: real | integral?(a, b, ff, S)}"
     integral_def analysis)
    (nth const-decl "[(d) -> real]" r2v_def nil))
   shostak))
 (Integral_TCC1 0
  (Integral_TCC1-1 nil 3787396572
   ("" (skeep)
    (("" (lemma "length_null")
      (("" (inst?) (("" (assert) nil nil)) nil)) nil))
    nil)
   ((d formal-const-decl "[real -> bool]" r2v_analysis nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (length_null formula-decl nil r2v_def nil)
    (length_null formula-decl nil more_list_props structures)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis)
    (Integrable? const-decl "bool" r2v_analysis nil)
    (r2v type-eq-decl nil r2v_def nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil))
   nil
   (Integral subtype "list_adt[real].null"
    "matrices.VectorN(r2v_def[(r2v_analysis.d)].length(r2v_analysis.f))")))
 (Integral_TCC2 0
  (Integral_TCC2-1 nil 3787396572
   ("" (skeep)
    (("" (lemma "null_cons") (("" (inst?) (("" (assert) nil nil)) nil))
      nil))
    nil)
   ((d formal-const-decl "[real -> bool]" r2v_analysis nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (null_cons formula-decl nil r2v_def nil)
    (Integrable? const-decl "bool" r2v_analysis nil)
    (r2v type-eq-decl nil r2v_def nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil))
   nil
   (Integral subtype "r2v_analysis.f"
    "{ff: r2v_def[(r2v_analysis.d)].r2v | r2v_def[(r2v_analysis.d)].cons?(ff)}")))
 (Integral_TCC3 0
  (Integral_TCC6-1 nil 3787396572
   ("" (skeep)
    (("" (typepred "f")
      (("" (expand "Integrable?" -2)
        (("" (inst -2 "0")
          (("1" (expand "nth" -2)
            (("1" (expand "car" 2)
              (("1" (expand "nth" -2) (("1" (propax) nil nil)) nil))
              nil))
            nil)
           ("2" (lemma "length_null")
            (("2" (inst -1 "f") (("2" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((Integrable? const-decl "bool" r2v_analysis nil)
    (r2v type-eq-decl nil r2v_def nil)
    (length def-decl "nat" list_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (d formal-const-decl "[real -> bool]" r2v_analysis nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (f skolem-const-decl "{ff: r2v | Integrable?(a, b, ff)}"
     r2v_analysis nil)
    (b skolem-const-decl "(d)" r2v_analysis nil)
    (a skolem-const-decl "(d)" r2v_analysis nil)
    (length const-decl "nat" r2v_def nil)
    (< const-decl "bool" reals nil) (car const-decl "real" r2v_def nil)
    (nth def-decl "T" list_props nil)
    (nth const-decl "[(d) -> real]" r2v_def nil)
    (length_null formula-decl nil r2v_def nil))
   nil
   (Integral subtype "r2v_def[(r2v_analysis.d)].car(r2v_analysis.f)"
    "integral_def[(r2v_analysis.d)].Integrable_funs(r2v_analysis.a, r2v_analysis.b)")))
 (Integral_TCC4 0
  (Integral_TCC6-1 nil 3787672682
   ("" (skeep)
    (("" (typepred "f")
      (("" (expand "Integrable?")
        (("" (skeep)
          (("" (inst -2 "i+1")
            (("1" (lemma "nth_cdr")
              (("1" (inst -1 "f" "i") (("1" (assert) nil nil)) nil))
              nil)
             ("2" (lemma "length_cdr")
              (("2" (inst -1 "f") (("2" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Integrable? const-decl "bool" r2v_analysis nil)
    (r2v type-eq-decl nil r2v_def nil)
    (length def-decl "nat" list_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (d formal-const-decl "[real -> bool]" r2v_analysis nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (length_cdr formula-decl nil r2v_def nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nth_cdr formula-decl nil r2v_def nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (length const-decl "nat" r2v_def nil)
    (cons? const-decl "bool" r2v_def nil)
    (cdr const-decl "r2v" r2v_def nil)
    (a skolem-const-decl "(d)" r2v_analysis nil)
    (b skolem-const-decl "(d)" r2v_analysis nil)
    (f skolem-const-decl "{ff: r2v | Integrable?(a, b, ff)}"
     r2v_analysis nil)
    (i skolem-const-decl "{ii: nat | ii < length(cdr[(d)](f))}"
       r2v_analysis nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (Integral subtype "r2v_def[(r2v_analysis.d)].cdr(r2v_analysis.f)"
    "{ff: r2v_def[(r2v_analysis.d)].r2v | r2v_analysis.Integrable?(r2v_analysis.a, r2v_analysis.b, ff)}")))
 (Integral_TCC5 0
  (Integral_TCC5-1 nil 3787396572
   ("" (skeep)
    (("" (lemma "length_cdr")
      (("" (inst?) (("" (assert) nil nil)) nil)) nil))
    nil)
   ((d formal-const-decl "[real -> bool]" r2v_analysis nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (length_cdr formula-decl nil r2v_def nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (Integrable? const-decl "bool" r2v_analysis nil)
    (cons? const-decl "bool" r2v_def nil)
    (r2v type-eq-decl nil r2v_def nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil))
   nil
   (Integral termination
    "r2v_analysis.Integral(r2v_analysis.a, r2v_analysis.b, r2v_def[(r2v_analysis.d)].cdr(r2v_analysis.f))"
    "nil")))
 (Integral_TCC6 0
  (Integral_TCC8-1 nil 3787672682
   ("" (skeep)
    (("" (expand "length" 2 1)
      (("" (lemma "length_cdr")
        (("" (inst -1 "f") (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((length def-decl "nat" list_props nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (r2v type-eq-decl nil r2v_def nil)
    (cons? const-decl "bool" r2v_def nil)
    (Integrable? const-decl "bool" r2v_analysis nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis)
    (length_cdr formula-decl nil r2v_def nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (d formal-const-decl "[real -> bool]" r2v_analysis nil))
   nil
   (Integral subtype
    "list_adt[real].cons(integral_def[(r2v_analysis.d)].Integral(r2v_analysis.a, r2v_analysis.b, r2v_def[(r2v_analysis.d)].car(r2v_analysis.f)), r2v_analysis.Integral(r2v_analysis.a, r2v_analysis.b, r2v_def[(r2v_analysis.d)].cdr(r2v_analysis.f)))"
    "matrices.VectorN(r2v_def[(r2v_analysis.d)].length(r2v_analysis.f))")))
 (Int_nth_TCC1 0
  (Int_nth_TCC3-1 nil 3787410283 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (d formal-const-decl "[real -> bool]" r2v_analysis nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (length def-decl "nat" list_props nil)
    (r2v type-eq-decl nil r2v_def nil)
    (Integrable? const-decl "bool" r2v_analysis nil)
    (< const-decl "bool" reals nil)
    (length const-decl "nat" r2v_def nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis)
    (Integrable? const-decl "bool" integral_def analysis)
    (integrable? const-decl "bool" integral_def analysis)
    (integral? const-decl "bool" integral_def analysis)
    (width const-decl "posreal" integral_def analysis))
   nil
   (Int_nth subtype "r2v_analysis.i"
    "below[length[real](Integral(a, b, f))]")))
 (Int_nth_TCC2 0
  (Int_nth_TCC3-1 nil 3787672682 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (d formal-const-decl "[real -> bool]" r2v_analysis nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (length def-decl "nat" list_props nil)
    (r2v type-eq-decl nil r2v_def nil)
    (Integrable? const-decl "bool" r2v_analysis nil)
    (< const-decl "bool" reals nil)
    (length const-decl "nat" r2v_def nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (choose const-decl "(p)" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (width const-decl "posreal" integral_def analysis)
    (integral? const-decl "bool" integral_def analysis)
    (integrable? const-decl "bool" integral_def analysis)
    (Integrable? const-decl "bool" integral_def analysis)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil
   (Int_nth subtype
    "r2v_def[(r2v_analysis.d)].nth(r2v_analysis.f, r2v_analysis.i)"
    "integral_def[(r2v_analysis.d)].Integrable_funs(r2v_analysis.a, r2v_analysis.b)")))
 (Int_nth 0
  (Int_nth-1 nil 3787411295
   (""
    (case " FORALL (n:nat, a, b: (d), f: {ff: r2v | Integrable?(a, b, ff)},
                     i: {ii: nat | ii < length(f)}):
               length(f)=n IMPLIES (nth(Integral(a, b, f), i) = Integral(a, b, nth(f, i)))")
    (("1" (skeep) (("1" (inst -1 "length(f)" "a" "b" "f" "i") nil nil))
      nil)
     ("2" (hide 2)
      (("2" (induct "n")
        (("1" (skeep)
          (("1" (lemma "length_null")
            (("1" (inst -1 "f") (("1" (assert) nil nil)) nil)) nil))
          nil)
         ("2" (skeep)
          (("2" (skeep)
            (("2" (case "i=0")
              (("1" (expand "Integral" 1 1)
                (("1" (assert)
                  (("1" (lift-if 1)
                    (("1" (lemma "length_null")
                      (("1" (inst -1 "f")
                        (("1" (assert)
                          (("1" (replace -1)
                            (("1" (expand "nth" 2 1)
                              (("1"
                                (expand "nth" 2 1)
                                (("1"
                                  (expand "car" 2 1)
                                  (("1"
                                    (expand "nth" 2 1)
                                    (("1" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (assert)
                (("2" (inst -1 "a" "b" "cdr(f)" "i-1")
                  (("1" (lemma "length_cdr")
                    (("1" (inst -1 "f")
                      (("1" (assert)
                        (("1" (lemma "length_null")
                          (("1" (inst -1 "f")
                            (("1" (assert)
                              (("1"
                                (expand "Integral" 3 1)
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "nth" 3 1)
                                    (("1"
                                      (expand "nth" 3 2)
                                      (("1"
                                        (expand "nth" 3 2)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "nth" -2 2)
                                            (("1"
                                              (expand "cdr" -2 2)
                                              (("1" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert)
                        (("2" (lemma "length_cons")
                          (("2" (inst -1 "f") (("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (typepred "i")
                    (("2" (lemma "length_cdr")
                      (("2" (inst -1 "f") (("2" (assert) nil nil))
                        nil))
                      nil))
                    nil)
                   ("3" (typepred "f")
                    (("3" (expand "Integrable?" 1 1)
                      (("3" (expand "Integrable?" -2)
                        (("3" (skeep 1)
                          (("3" (inst -2 "i!1+1")
                            (("1" (expand "nth" -2)
                              (("1"
                                (expand "nth" 1)
                                (("1"
                                  (expand "cdr" 1)
                                  (("1"
                                    (expand "nth" -2 1)
                                    (("1" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (lemma "length_cdr")
                              (("2"
                                (inst -1 "f")
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("4" (lemma "length_cons")
                    (("4" (inst -1 "f") (("4" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (hide 2)
          (("3" (skeep)
            (("3" (typepred "f")
              (("3" (expand "Integrable?" -2)
                (("3" (inst -2 "i") nil nil)) nil))
              nil))
            nil))
          nil)
         ("4" (hide 2)
          (("4" (skeep)
            (("4" (typepred "Integral(a,b,f)" "f")
              (("4" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2)
      (("3" (skeep)
        (("3" (typepred "f")
          (("3" (expand "Integrable?" -2) (("3" (inst -2 "i") nil nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (assert)
      (("4" (hide 2)
        (("4" (skeep)
          (("4" (typepred "i") (("4" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (car const-decl "real" r2v_def nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (cons? const-decl "bool" r2v_def nil)
    (a skolem-const-decl "(d)" r2v_analysis nil)
    (b skolem-const-decl "(d)" r2v_analysis nil)
    (f skolem-const-decl "{ff: r2v | Integrable?(a, b, ff)}"
     r2v_analysis nil)
    (cdr const-decl "r2v" r2v_def nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (i skolem-const-decl "{ii: nat | ii < length(f)}" r2v_analysis nil)
    (length_cons formula-decl nil r2v_def nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (length_cdr formula-decl nil r2v_def nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (i!1 skolem-const-decl "{ii: nat | ii < length(cdr[(d)](f))}"
     r2v_analysis nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (length_null formula-decl nil r2v_def nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (d formal-const-decl "[real -> bool]" r2v_analysis nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (r2v type-eq-decl nil r2v_def nil)
    (Integrable? const-decl "bool" r2v_analysis nil)
    (< const-decl "bool" reals nil)
    (length const-decl "nat" r2v_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (VectorN type-eq-decl nil matrices matrices)
    (Integral def-decl "VectorN(length(f))" r2v_analysis nil)
    (Integrable? const-decl "bool" integral_def analysis)
    (Integrable_funs type-eq-decl nil integral_def analysis)
    (Integral const-decl "real" integral_def analysis)
    (nth const-decl "[(d) -> real]" r2v_def nil))
   shostak))
 (Int_zero_TCC1 0
  (Int_zero_TCC1-1 nil 3787410022 ("" (subtype-tcc) nil nil)
   ((Integrable? const-decl "bool" integral_def analysis)
    (Integrable? const-decl "bool" r2v_analysis nil))
   nil
   (Int_zero subtype "r2v_analysis.f"
    "{ff: r2v_def[(r2v_analysis.d)].r2v | r2v_analysis.Integrable?(r2v_analysis.a, r2v_analysis.a, ff)}")))
 (Int_zero 0
  (Int_zero-1 nil 3787410066
   ("" (skeep)
    (("" (lemma "Int_nth")
      (("" (inst -1 "a" "a" "f" "_")
        (("" (lemma " list_extensionality")
          (("" (inst?)
            (("" (assert)
              (("" (lemma "nth_zero")
                (("" (skeep 1)
                  (("" (inst -1 "length(f)" "n")
                    (("" (replace -1)
                      (("" (inst -2 "n")
                        (("" (replace -2 1)
                          (("" (expand "Integral" 1 1)
                            (("" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Int_nth formula-decl nil r2v_analysis nil)
    (list_extensionality formula-decl nil more_list_props structures)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis)
    (Integral const-decl "real" integral_def analysis)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nth_zero formula-decl nil vector_arithmetic mv_analysis)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic mv_analysis)
    (Integral def-decl "VectorN(length(f))" r2v_analysis nil)
    (VectorN type-eq-decl nil matrices matrices)
    (length const-decl "nat" r2v_def nil)
    (Integrable? const-decl "bool" r2v_analysis nil)
    (r2v type-eq-decl nil r2v_def nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (d formal-const-decl "[real -> bool]" r2v_analysis nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (Int_int_TCC1 0
  (Int_int_TCC1-1 nil 3788091579 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (d formal-const-decl "[real -> bool]" r2v_analysis nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (length def-decl "nat" list_props nil)
    (r2v type-eq-decl nil r2v_def nil)
    (Integrable? const-decl "bool" r2v_analysis nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (Integrable? const-decl "bool" integral_def analysis)
    (set type-eq-decl nil sets nil)
    (nonempty? const-decl "bool" sets nil)
    (choose const-decl "(p)" sets nil) (< const-decl "bool" reals nil)
    (length const-decl "nat" r2v_def nil)
    (width const-decl "posreal" integral_def analysis)
    (integral? const-decl "bool" integral_def analysis)
    (integrable? const-decl "bool" integral_def analysis)
    (integrable? const-decl "bool" r2v_analysis nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil
   (Int_int subtype "r2v_analysis.f"
    "{ff: r2v_def[(r2v_analysis.d)].r2v | r2v_analysis.integrable?(r2v_analysis.a, r2v_analysis.b, ff)}")))
 (Int_int 0
  (Int_int-1 nil 3788091615
   ("" (skeep)
    (("" (lemma "list_extensionality")
      (("" (inst -1 "Integral(a,b,f)" "integral(a,b,f)")
        (("" (assert)
          (("" (skeep 1)
            (("" (lemma "int_nth")
              (("" (lemma "Int_nth")
                (("" (inst -1 "a" "b" "f" "n")
                  (("" (inst -2 "a" "b" "f" "n")
                    (("" (assert)
                      (("" (expand "Integral" -1 2)
                        (("" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list_extensionality formula-decl nil more_list_props structures)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_nth formula-decl nil r2v_analysis nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (Integral const-decl "real" integral_def analysis)
    (Int_nth formula-decl nil r2v_analysis nil)
    (integral def-decl "VectorN(length(f))" r2v_analysis nil)
    (integrable? const-decl "bool" r2v_analysis nil)
    (> const-decl "bool" reals nil)
    (Integral def-decl "VectorN(length(f))" r2v_analysis nil)
    (VectorN type-eq-decl nil matrices matrices)
    (length const-decl "nat" r2v_def nil)
    (Integrable? const-decl "bool" r2v_analysis nil)
    (r2v type-eq-decl nil r2v_def nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (d formal-const-decl "[real -> bool]" r2v_analysis nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   shostak))
 (Integrable_sum 0
  (Integrable_sum-1 nil 3788778352
   ("" (skeep)
    (("" (typepred "f" "g")
      (("" (expand "Integrable?")
        (("" (skeep)
          (("" (inst -2 "i")
            (("1" (inst -4 "i")
              (("1" (lemma "Integral_sum[(d)]")
                (("1" (inst -1 "a" "b" "nth(f,i)" "nth(g,i)")
                  (("1" (assert)
                    (("1" (assert)
                      (("1" (flatten)
                        (("1" (lemma "nth_add")
                          (("1" (inst?) (("1" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (lemma "not_one_element")
                  (("2" (propax) nil nil)) nil)
                 ("3" (lemma "connected") (("3" (propax) nil nil))
                  nil))
                nil)
               ("2" (typepred "i")
                (("2" (assert)
                  (("2" (typepred "f+g")
                    (("2" (replace -7)
                      (("2" (assert)
                        (("2" (expand "max" -2)
                          (("2" (replace -2 -3)
                            (("2" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (assert)
              (("2" (typepred "f")
                (("2" (typepred "i")
                  (("2" (typepred "f+g")
                    (("2" (replace -9)
                      (("2" (expand "max" -2) (("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((length const-decl "nat" r2v_def nil)
    (Integrable? const-decl "bool" r2v_analysis nil)
    (r2v type-eq-decl nil r2v_def nil)
    (length def-decl "nat" list_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (d formal-const-decl "[real -> bool]" r2v_analysis nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (connected formula-decl nil r2v_analysis nil)
    (not_one_element formula-decl nil r2v_analysis nil)
    (nth const-decl "[(d) -> real]" r2v_def nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nth_add formula-decl nil r2v_def nil)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (connected? const-decl "bool" deriv_domain_def analysis)
    (Integral_sum formula-decl nil integral analysis)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (< const-decl "bool" reals nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (+ const-decl "{hh: r2v | length(hh) = max(length(f), length(g))}"
       r2v_def nil)
    (a skolem-const-decl "(d)" r2v_analysis nil)
    (b skolem-const-decl "(d)" r2v_analysis nil)
    (f skolem-const-decl "{ff: r2v | Integrable?(a, b, ff)}"
     r2v_analysis nil)
    (g skolem-const-decl
     "{gg: r2v | Integrable?(a, b, gg) AND length(gg) = length(f)}"
     r2v_analysis nil)
    (i skolem-const-decl "{ii: nat | ii < length(f + g)}" r2v_analysis
       nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak))
 (Int_sum_TCC1 0
  (Int_sum_TCC1-1 nil 3788777581
   ("" (lemma "Integrable_sum") (("" (propax) nil nil)) nil)
   ((Integrable_sum formula-decl nil r2v_analysis nil)) nil
   (Int_sum subtype
    "(r2v_def[(r2v_analysis.d)].+)(r2v_analysis.f, r2v_analysis.g)"
    "{ff: r2v_def[(r2v_analysis.d)].r2v | r2v_analysis.Integrable?(r2v_analysis.a, r2v_analysis.b, ff)}")))
 (Int_sum 0
  (Int_sum-1 nil 3788778758
   ("" (skeep)
    (("" (lemma "list_extensionality")
      ((""
        (inst -1 "Integral(a, b, f + g)"
         "Integral(a, b, f) + Integral(a, b, g)")
        (("" (assert)
          (("" (skeep 1)
            (("" (hide 2)
              (("" (lemma "Int_nth")
                (("" (inst-cp -1 "a" "b" "f+g" "n")
                  (("" (inst-cp -1 "a" "b" "f" "n")
                    (("1" (inst -1 "a" "b" "g" "n")
                      (("1" (lemma "nth_sum")
                        (("1"
                          (inst -1 "Integral(a, b, f)"
                           "Integral(a, b, g)")
                          (("1" (assert)
                            (("1" (inst -1 "n")
                              (("1"
                                (assert)
                                (("1"
                                  (replace -1 1)
                                  (("1"
                                    (replace -2)
                                    (("1"
                                      (replace -3)
                                      (("1"
                                        (replace -4)
                                        (("1"
                                          (lemma " Integral_sum[(d)]")
                                          (("1"
                                            (inst
                                             -1
                                             "a"
                                             "b"
                                             "nth(f,n)"
                                             "nth(g,n)")
                                            (("1"
                                              (split -1)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand "+" 1 1)
                                                    (("1"
                                                      (expand
                                                       "plusr2v"
                                                       1
                                                       1)
                                                      (("1"
                                                        (expand
                                                         "nth"
                                                         1
                                                         1)
                                                        (("1"
                                                          (expand
                                                           "nth"
                                                           -2
                                                           1)
                                                          (("1"
                                                            (expand
                                                             "nth"
                                                             -2
                                                             1)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (replace
                                                                 -2
                                                                 1
                                                                 rl)
                                                                (("1"
                                                                  (lemma
                                                                   "nth_sum")
                                                                  (("1"
                                                                    (case
                                                                     "(LAMBDA (x_1: (d)) -> real: nth(f(x_1) + g(x_1), n)) =  (LAMBDA (x: (d)): nth(f(x), n) + nth(g(x), n))")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (hide
                                                                       2)
                                                                      (("2"
                                                                        (decompose-equality
                                                                         1)
                                                                        (("1"
                                                                          (inst
                                                                           -1
                                                                           "f(x!1)"
                                                                           "g(x!1)")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (split
                                                                               -1)
                                                                              (("1"
                                                                                (inst
                                                                                 -1
                                                                                 "n")
                                                                                nil
                                                                                nil)
                                                                               ("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (typepred
                                                                                   "g"
                                                                                   "f")
                                                                                  (("2"
                                                                                    (skeep
                                                                                     -1)
                                                                                    (("2"
                                                                                      (skeep
                                                                                       -4)
                                                                                      (("2"
                                                                                        (inst-cp
                                                                                         -4
                                                                                         "choose((d))")
                                                                                        (("1"
                                                                                          (inst-cp
                                                                                           -1
                                                                                           "choose((d))")
                                                                                          (("1"
                                                                                            (expand
                                                                                             "length"
                                                                                             -4)
                                                                                            (("1"
                                                                                              (inst
                                                                                               -5
                                                                                               "x!1")
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -1
                                                                                                 "x!1")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (lemma
                                                                                           "non_empty")
                                                                                          (("2"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (typepred
                                                                             "g(x!1)")
                                                                            (("2"
                                                                              (typepred
                                                                               "g")
                                                                              (("2"
                                                                                (expand
                                                                                 "length"
                                                                                 -3)
                                                                                (("2"
                                                                                  (skeep
                                                                                   -1)
                                                                                  (("2"
                                                                                    (inst-cp
                                                                                     -1
                                                                                     "choose((d))")
                                                                                    (("2"
                                                                                      (inst
                                                                                       -1
                                                                                       "x!1")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (typepred
                                                                                           "f")
                                                                                          (("2"
                                                                                            (skeep
                                                                                             -1)
                                                                                            (("2"
                                                                                              (inst-cp
                                                                                               -1
                                                                                               "choose((d))")
                                                                                              (("2"
                                                                                                (inst
                                                                                                 -1
                                                                                                 "x!1")
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (typepred
                                                                                                     "n")
                                                                                                    (("2"
                                                                                                      (typepred
                                                                                                       "Integral(a,b,f+g)")
                                                                                                      (("2"
                                                                                                        (hide
                                                                                                         -1)
                                                                                                        (("2"
                                                                                                          (typepred
                                                                                                           "f+g")
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "length"
                                                                                                             -2
                                                                                                             2)
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "length"
                                                                                                               -2
                                                                                                               3)
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                (("2"
                                                                                                                  (replace
                                                                                                                   -6)
                                                                                                                  (("2"
                                                                                                                    (replace
                                                                                                                     -11)
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       "max"
                                                                                                                       -2)
                                                                                                                      (("2"
                                                                                                                        (expand
                                                                                                                         "length"
                                                                                                                         -8)
                                                                                                                        (("2"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("3"
                                                                            (typepred
                                                                             "n")
                                                                            (("3"
                                                                              (typepred
                                                                               "Integral(a,b,f+g)")
                                                                              (("3"
                                                                                (hide
                                                                                 -1)
                                                                                (("3"
                                                                                  (typepred
                                                                                   "f+g")
                                                                                  (("3"
                                                                                    (typepred
                                                                                     "f"
                                                                                     "g")
                                                                                    (("3"
                                                                                      (replace
                                                                                       -5)
                                                                                      (("3"
                                                                                        (expand
                                                                                         "max"
                                                                                         -7)
                                                                                        (("3"
                                                                                          (assert)
                                                                                          (("3"
                                                                                            (expand
                                                                                             "length"
                                                                                             -7
                                                                                             2)
                                                                                            (("3"
                                                                                              (skeep
                                                                                               -1)
                                                                                              (("3"
                                                                                                (inst-cp
                                                                                                 -1
                                                                                                 "choose((d))")
                                                                                                (("3"
                                                                                                  (inst
                                                                                                   -1
                                                                                                   "x!1")
                                                                                                  (("3"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (skeep)
                                                                          (("2"
                                                                            (typepred
                                                                             "n")
                                                                            (("2"
                                                                              (typepred
                                                                               "Integral(a,b,f+g)")
                                                                              (("2"
                                                                                (typepred
                                                                                 "f+g")
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (typepred
                                                                                     "g")
                                                                                    (("2"
                                                                                      (replace
                                                                                       -3)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "max")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (typepred
                                                                                             "f")
                                                                                            (("2"
                                                                                              (skeep
                                                                                               -1)
                                                                                              (("2"
                                                                                                (inst-cp
                                                                                                 -1
                                                                                                 "choose((d))")
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -1
                                                                                                   "x")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (skeep
                                                                                                       -4)
                                                                                                      (("1"
                                                                                                        (inst-cp
                                                                                                         -4
                                                                                                         "choose((d))")
                                                                                                        (("1"
                                                                                                          (inst
                                                                                                           -4
                                                                                                           "x")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (grind)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (hide
                                                                                                   -)
                                                                                                  (("2"
                                                                                                    (lemma
                                                                                                     "non_empty")
                                                                                                    (("2"
                                                                                                      (propax)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("3"
                                                                          (skeep)
                                                                          (("3"
                                                                            (hide
                                                                             -)
                                                                            (("3"
                                                                              (typepred
                                                                               "f")
                                                                              (("3"
                                                                                (typepred
                                                                                 "g")
                                                                                (("3"
                                                                                  (typepred
                                                                                   "n")
                                                                                  (("3"
                                                                                    (typepred
                                                                                     "Integral(a,b,f+g)")
                                                                                    (("3"
                                                                                      (hide
                                                                                       -1)
                                                                                      (("3"
                                                                                        (typepred
                                                                                         "f+g")
                                                                                        (("3"
                                                                                          (skeep)
                                                                                          (("3"
                                                                                            (skeep)
                                                                                            (("3"
                                                                                              (skeep)
                                                                                              (("3"
                                                                                                (replace
                                                                                                 -7)
                                                                                                (("3"
                                                                                                  (expand
                                                                                                   "max"
                                                                                                   -2)
                                                                                                  (("3"
                                                                                                    (assert)
                                                                                                    (("3"
                                                                                                      (expand
                                                                                                       "length"
                                                                                                       -2
                                                                                                       2)
                                                                                                      (("3"
                                                                                                        (inst-cp
                                                                                                         -8
                                                                                                         "x")
                                                                                                        (("3"
                                                                                                          (inst-cp
                                                                                                           -8
                                                                                                           "choose((d))")
                                                                                                          (("3"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("4"
                                                                          (skeep
                                                                           1)
                                                                          (("4"
                                                                            (typepred
                                                                             "n")
                                                                            (("4"
                                                                              (typepred
                                                                               "Integral(a,b,f+g)")
                                                                              (("4"
                                                                                (hide
                                                                                 -1)
                                                                                (("4"
                                                                                  (replace
                                                                                   -1
                                                                                   -2)
                                                                                  (("4"
                                                                                    (typepred
                                                                                     "f+g")
                                                                                    (("4"
                                                                                      (typepred
                                                                                       "g")
                                                                                      (("4"
                                                                                        (replace
                                                                                         -3)
                                                                                        (("4"
                                                                                          (expand
                                                                                           "max"
                                                                                           -5)
                                                                                          (("4"
                                                                                            (assert)
                                                                                            (("4"
                                                                                              (expand
                                                                                               "length"
                                                                                               -7)
                                                                                              (("4"
                                                                                                (expand
                                                                                                 "length"
                                                                                                 -5)
                                                                                                (("4"
                                                                                                  (skeep
                                                                                                   -4)
                                                                                                  (("4"
                                                                                                    (inst-cp
                                                                                                     -4
                                                                                                     "choose((d))")
                                                                                                    (("4"
                                                                                                      (inst
                                                                                                       -4
                                                                                                       "x_1")
                                                                                                      (("4"
                                                                                                        (assert)
                                                                                                        (("4"
                                                                                                          (expand
                                                                                                           "+"
                                                                                                           -4)
                                                                                                          (("4"
                                                                                                            (expand
                                                                                                             "plusr2v"
                                                                                                             -4)
                                                                                                            (("4"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("3"
                                                                      (hide
                                                                       2)
                                                                      (("3"
                                                                        (skeep)
                                                                        (("3"
                                                                          (typepred
                                                                           "n")
                                                                          (("3"
                                                                            (typepred
                                                                             "Integral(a,b,f+g)")
                                                                            (("3"
                                                                              (hide
                                                                               -1)
                                                                              (("3"
                                                                                (replace
                                                                                 -1
                                                                                 -2)
                                                                                (("3"
                                                                                  (typepred
                                                                                   "f+g")
                                                                                  (("3"
                                                                                    (replace
                                                                                     -2
                                                                                     -4)
                                                                                    (("3"
                                                                                      (typepred
                                                                                       "g")
                                                                                      (("3"
                                                                                        (replace
                                                                                         -3)
                                                                                        (("3"
                                                                                          (expand
                                                                                           "max"
                                                                                           -7)
                                                                                          (("3"
                                                                                            (replace
                                                                                             -3
                                                                                             -7
                                                                                             rl)
                                                                                            (("3"
                                                                                              (expand
                                                                                               "length"
                                                                                               -7)
                                                                                              (("3"
                                                                                                (skeep
                                                                                                 -1)
                                                                                                (("3"
                                                                                                  (inst-cp
                                                                                                   -1
                                                                                                   "choose((d))")
                                                                                                  (("3"
                                                                                                    (inst
                                                                                                     -1
                                                                                                     "x")
                                                                                                    (("3"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("4"
                                                                      (hide
                                                                       2)
                                                                      (("4"
                                                                        (skeep)
                                                                        (("4"
                                                                          (typepred
                                                                           "n")
                                                                          (("4"
                                                                            (typepred
                                                                             "Integral(a,b,f+g)")
                                                                            (("4"
                                                                              (hide
                                                                               -1)
                                                                              (("4"
                                                                                (typepred
                                                                                 "f+g")
                                                                                (("4"
                                                                                  (typepred
                                                                                   "g")
                                                                                  (("4"
                                                                                    (replace
                                                                                     -3)
                                                                                    (("4"
                                                                                      (expand
                                                                                       "max"
                                                                                       -5)
                                                                                      (("4"
                                                                                        (expand
                                                                                         "length"
                                                                                         -5
                                                                                         2)
                                                                                        (("4"
                                                                                          (typepred
                                                                                           "f")
                                                                                          (("4"
                                                                                            (skeep
                                                                                             -1)
                                                                                            (("4"
                                                                                              (inst-cp
                                                                                               -1
                                                                                               "choose((d))")
                                                                                              (("4"
                                                                                                (inst
                                                                                                 -1
                                                                                                 "x")
                                                                                                (("4"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("5"
                                                                      (hide
                                                                       2)
                                                                      (("5"
                                                                        (skeep
                                                                         1)
                                                                        (("5"
                                                                          (typepred
                                                                           "n")
                                                                          (("5"
                                                                            (typepred
                                                                             "Integral(a,b,f+g)")
                                                                            (("5"
                                                                              (replace
                                                                               -2
                                                                               -3)
                                                                              (("5"
                                                                                (expand
                                                                                 "length"
                                                                                 -3)
                                                                                (("5"
                                                                                  (expand
                                                                                   "+"
                                                                                   -3)
                                                                                  (("5"
                                                                                    (expand
                                                                                     " plusr2v"
                                                                                     -3)
                                                                                    (("5"
                                                                                      (hide
                                                                                       -1)
                                                                                      (("5"
                                                                                        (typepred
                                                                                         "f+g")
                                                                                        (("5"
                                                                                          (skeep)
                                                                                          (("5"
                                                                                            (inst-cp
                                                                                             -1
                                                                                             "choose((d))")
                                                                                            (("5"
                                                                                              (inst
                                                                                               -1
                                                                                               "x_1")
                                                                                              (("5"
                                                                                                (assert)
                                                                                                (("5"
                                                                                                  (expand
                                                                                                   "+"
                                                                                                   -1)
                                                                                                  (("5"
                                                                                                    (expand
                                                                                                     "+"
                                                                                                     -2)
                                                                                                    (("5"
                                                                                                      (expand
                                                                                                       "plusr2v")
                                                                                                      (("5"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (typepred "f")
                                                (("2"
                                                  (expand
                                                   "Integrable?"
                                                   -2)
                                                  (("2"
                                                    (inst -2 "n")
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (typepred "g")
                                                (("3"
                                                  (expand
                                                   "Integrable?"
                                                   -2)
                                                  (("3"
                                                    (inst -2 "n")
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (assert)
                                            (("2"
                                              (lemma "not_one_element")
                                              (("2" (propax) nil nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (lemma "connected")
                                            (("3" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (typepred "Integral(a,b,g)")
                            (("2" (typepred "g")
                              (("2"
                                (typepred "n")
                                (("2"
                                  (typepred "f+g")
                                  (("2"
                                    (replace -6)
                                    (("2"
                                      (expand "max")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (typepred "Integral(a,b,f)")
                            (("3" (typepred "f")
                              (("3"
                                (typepred "n")
                                (("3"
                                  (typepred "Integral(a,b,f+g)")
                                  (("3"
                                    (typepred "f+g")
                                    (("3"
                                      (assert)
                                      (("3"
                                        (typepred "g")
                                        (("3"
                                          (replace -3)
                                          (("3"
                                            (expand "max" -5)
                                            (("3" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (typepred "n")
                        (("2" (typepred "integral(a,b,f+g)")
                          (("1" (typepred "f+g")
                            (("1" (hide -3)
                              (("1"
                                (typepred "g")
                                (("1"
                                  (replace -3)
                                  (("1"
                                    (expand "max" -5)
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (typepred "g")
                            (("2" (typepred "Integral(a,b,f+g)")
                              (("2"
                                (typepred "f+g")
                                (("2"
                                  (assert)
                                  (("2"
                                    (replace -7)
                                    (("2"
                                      (expand "max" -2)
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (assert)
                            (("3" (typepred "b")
                              (("3"
                                (typepred "a")
                                (("3"
                                  (typepred "Integral(a,b,f+g)")
                                  (("3"
                                    (hide -1)
                                    (("3"
                                      (replace -1)
                                      (("3"
                                        (typepred "f+g")
                                        (("3"
                                          (typepred "g")
                                          (("3"
                                            (replace -3)
                                            (("3"
                                              (assert)
                                              (("3"
                                                (expand "max" -5)
                                                (("3"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (typepred "n")
                      (("2" (typepred "Integral(a,b,f+g)")
                        (("2" (typepred "f+g")
                          (("2" (typepred "g")
                            (("2" (replace -3)
                              (("2"
                                (expand "max" -5)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list_extensionality formula-decl nil more_list_props structures)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (Integral_sum formula-decl nil integral analysis)
    (connected? const-decl "bool" deriv_domain_def analysis)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (plusr2v const-decl
     "{hh: r2v | length(hh) = max(length(f), length(g))}" r2v_def nil)
    (width const-decl "posreal" integral_def analysis)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (integral? const-decl "bool" integral_def analysis)
    (integrable? const-decl "bool" integral_def analysis)
    (Integrable? const-decl "bool" integral_def analysis)
    (null? const-decl "bool" r2v_def nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (x!1 skolem-const-decl "(d)" r2v_analysis nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (non_empty formula-decl nil r2v_analysis nil)
    (choose const-decl "(p)" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (nth const-decl "[(d) -> real]" r2v_def nil)
    (not_one_element formula-decl nil r2v_analysis nil)
    (connected formula-decl nil r2v_analysis nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nth_sum formula-decl nil vector_arithmetic mv_analysis)
    (> const-decl "bool" reals nil)
    (integrable? const-decl "bool" r2v_analysis nil)
    (integral def-decl "VectorN(length(f))" r2v_analysis nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (n skolem-const-decl "below(length(Integral(a, b, f + g)))"
     r2v_analysis nil)
    (g skolem-const-decl
     "{gg: r2v | Integrable?(a, b, gg) AND length(gg) = length(f)}"
     r2v_analysis nil)
    (f skolem-const-decl "{ff: r2v | Integrable?(a, b, ff)}"
     r2v_analysis nil)
    (b skolem-const-decl "(d)" r2v_analysis nil)
    (a skolem-const-decl "(d)" r2v_analysis nil)
    (Int_nth formula-decl nil r2v_analysis nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (Vector type-eq-decl nil matrices matrices)
    (+ const-decl "{hh: r2v | length(hh) = max(length(f), length(g))}"
       r2v_def nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (Integral def-decl "VectorN(length(f))" r2v_analysis nil)
    (VectorN type-eq-decl nil matrices matrices)
    (length const-decl "nat" r2v_def nil)
    (Integrable? const-decl "bool" r2v_analysis nil)
    (r2v type-eq-decl nil r2v_def nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (d formal-const-decl "[real -> bool]" r2v_analysis nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   shostak))
 (Integrable_diff 0
  (Integrable_diff-1 nil 3788778537
   ("" (skeep)
    (("" (expand "Integrable?")
      (("" (typepred "f" "g")
        (("" (skeep 1)
          (("" (expand "Integrable?" -)
            (("" (inst -2 "i")
              (("1" (inst -4 "i")
                (("1" (lemma "Integral_diff[(d)]")
                  (("1" (assert)
                    (("1" (inst -1 "a" "b" "nth(f,i)" "nth(g,i)")
                      (("1" (assert)
                        (("1" (flatten)
                          (("1" (lemma "nth_sub")
                            (("1" (inst?) (("1" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (lemma "not_one_element")
                    (("2" (propax) nil nil)) nil)
                   ("3" (lemma "connected") (("3" (propax) nil nil))
                    nil))
                  nil)
                 ("2" (typepred "i")
                  (("2" (typepred "f-g")
                    (("2" (replace -7)
                      (("2" (expand "max") (("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (typepred "i")
                (("2" (typepred "f-g")
                  (("2" (replace -7)
                    (("2" (expand "max") (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Integrable? const-decl "bool" r2v_analysis nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (i skolem-const-decl "{ii: nat | ii < length(f - g)}" r2v_analysis
       nil)
    (g skolem-const-decl
     "{gg: r2v | Integrable?(a, b, gg) AND length(gg) = length(f)}"
     r2v_analysis nil)
    (f skolem-const-decl "{ff: r2v | Integrable?(a, b, ff)}"
     r2v_analysis nil)
    (b skolem-const-decl "(d)" r2v_analysis nil)
    (a skolem-const-decl "(d)" r2v_analysis nil)
    (- const-decl "{hh: r2v | length(hh) = max(length(f), length(g))}"
       r2v_def nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (< const-decl "bool" reals nil)
    (Integral_diff formula-decl nil integral analysis)
    (connected? const-decl "bool" deriv_domain_def analysis)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (nth const-decl "[(d) -> real]" r2v_def nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nth_sub formula-decl nil r2v_def nil)
    (not_one_element formula-decl nil r2v_analysis nil)
    (connected formula-decl nil r2v_analysis nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (d formal-const-decl "[real -> bool]" r2v_analysis nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (length def-decl "nat" list_props nil)
    (r2v type-eq-decl nil r2v_def nil)
    (length const-decl "nat" r2v_def nil))
   shostak))
 (Int_diff_TCC1 0
  (Int_diff_TCC1-1 nil 3788777581
   ("" (lemma "Integrable_diff") (("" (propax) nil nil)) nil)
   ((Integrable_diff formula-decl nil r2v_analysis nil)) nil
   (Int_diff subtype
    "(r2v_def[(r2v_analysis.d)].-)(r2v_analysis.f, r2v_analysis.g)"
    "{ff: r2v_def[(r2v_analysis.d)].r2v | r2v_analysis.Integrable?(r2v_analysis.a, r2v_analysis.b, ff)}")))
 (Int_diff 0
  (Int_diff-1 nil 3788781107
   ("" (skeep)
    (("" (lemma "list_extensionality")
      ((""
        (inst -1 "Integral(a, b, f - g)"
         "Integral(a, b, f) - Integral(a, b, g)")
        (("" (assert)
          (("" (hide 2)
            (("" (skeep)
              (("" (lemma "nth_sub")
                (("" (lemma "Int_nth")
                  (("" (inst-cp -1 "a" "b" "f-g" "n")
                    (("" (replace -2)
                      (("" (inst-cp -1 "a" "b" "f" "n")
                        (("1" (inst-cp -1 "a" "b" "g" "n")
                          (("1"
                            (case " nth(Integral(a, b, f) - Integral(a, b, g), n) = nth(Integral(a, b, f),n) - nth(Integral(a, b, g), n)")
                            (("1" (replace -1)
                              (("1"
                                (replace -4)
                                (("1"
                                  (replace -3)
                                  (("1"
                                    (lemma "Integral_diff[(d)]")
                                    (("1"
                                      (inst
                                       -1
                                       "a"
                                       "b"
                                       "nth(f,n)"
                                       "nth(g,n)")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (split -1)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (replace -2 1 rl)
                                              (("1"
                                                (lemma "nth_sub")
                                                (("1"
                                                  (inst -1 "f" "g" "n")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide 2)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (typepred "f")
                                                (("2"
                                                  (expand
                                                   "Integrable?"
                                                   -2)
                                                  (("2"
                                                    (inst -2 "n")
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (typepred "g")
                                            (("3"
                                              (expand "Integrable?" -2)
                                              (("3"
                                                (inst -2 "n")
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (assert)
                                      (("2"
                                        (lemma "not_one_element")
                                        (("2" (propax) nil nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (lemma "connected")
                                      (("3" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (lemma "nth_dist")
                              (("2"
                                (lemma "nth_sum")
                                (("2"
                                  (inst -2 "Integral(a,b,g)" "-1" "n")
                                  (("1"
                                    (expand "-" 1 1)
                                    (("1"
                                      (expand "sub" 1 1)
                                      (("1"
                                        (expand "*" -2)
                                        (("1"
                                          (lemma "nth_sum")
                                          (("1"
                                            (inst
                                             -1
                                             "Integral(a,b,f)"
                                             "scal(-1,Integral(a,b,g))")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (inst -1 "n")
                                                (("1"
                                                  (expand "+" -1)
                                                  (("1"
                                                    (replace -1 1)
                                                    (("1"
                                                      (replace -3 1)
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (typepred
                                               "scal(-1, Integral(a, b, g))"
                                               "Integral(a,b,g)")
                                              (("2"
                                                (hide -1 -3)
                                                (("2"
                                                  (typepred "n")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (typepred
                                                       "Integral(a,b,f-g)")
                                                      (("2"
                                                        (typepred
                                                         "f-g")
                                                        (("2"
                                                          (typepred
                                                           "g")
                                                          (("2"
                                                            (replace
                                                             -3)
                                                            (("2"
                                                              (expand
                                                               "max"
                                                               -5)
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (typepred
                                               "Integral(a,b,f)")
                                              (("3"
                                                (typepred "n")
                                                (("3"
                                                  (typepred
                                                   "Integral(a,b,f-g)")
                                                  (("3"
                                                    (typepred "f-g")
                                                    (("3"
                                                      (typepred "g")
                                                      (("3"
                                                        (replace -3)
                                                        (("3"
                                                          (expand
                                                           "max"
                                                           -5)
                                                          (("3"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide -)
                                    (("2"
                                      (typepred "n" "Integral(a,b,g)")
                                      (("2"
                                        (typepred "Integral(a,b,f-g)")
                                        (("2"
                                          (typepred "f-g")
                                          (("2"
                                            (typepred "g")
                                            (("2"
                                              (replace -3)
                                              (("2"
                                                (expand "max" -5)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (typepred "n")
                            (("2" (typepred "Integral(a,b,f-g)")
                              (("2"
                                (typepred "f-g")
                                (("2"
                                  (typepred "g")
                                  (("2"
                                    (replace -3)
                                    (("2"
                                      (expand "max" -5)
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (typepred "n" "f")
                          (("2"
                            (typepred "Integral(a,b,f-g)" "f-g" "g")
                            (("2" (replace -7)
                              (("2"
                                (expand "max" -)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list_extensionality formula-decl nil more_list_props structures)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis)
    (Int_nth formula-decl nil r2v_analysis nil)
    (nth_dist formula-decl nil vector_arithmetic mv_analysis)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (sub const-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (real_times_real_is_real application-judgement "real" reals nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (scal def-decl "VectorN(length(v2))" matrices matrices)
    (* const-decl "VectorN(length(v2))" matrices matrices)
    (nth_sum formula-decl nil vector_arithmetic mv_analysis)
    (connected formula-decl nil r2v_analysis nil)
    (not_one_element formula-decl nil r2v_analysis nil)
    (nth const-decl "[(d) -> real]" r2v_def nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (connected? const-decl "bool" deriv_domain_def analysis)
    (Integral_diff formula-decl nil integral analysis)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (n skolem-const-decl "below(length(Integral(a, b, f - g)))"
     r2v_analysis nil)
    (g skolem-const-decl
     "{gg: r2v | Integrable?(a, b, gg) AND length(gg) = length(f)}"
     r2v_analysis nil)
    (f skolem-const-decl "{ff: r2v | Integrable?(a, b, ff)}"
     r2v_analysis nil)
    (b skolem-const-decl "(d)" r2v_analysis nil)
    (a skolem-const-decl "(d)" r2v_analysis nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nth_sub formula-decl nil r2v_def nil)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (Vector type-eq-decl nil matrices matrices)
    (- const-decl "{hh: r2v | length(hh) = max(length(f), length(g))}"
       r2v_def nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (Integral def-decl "VectorN(length(f))" r2v_analysis nil)
    (VectorN type-eq-decl nil matrices matrices)
    (length const-decl "nat" r2v_def nil)
    (Integrable? const-decl "bool" r2v_analysis nil)
    (r2v type-eq-decl nil r2v_def nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (d formal-const-decl "[real -> bool]" r2v_analysis nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   shostak))
 (Integrable_const_TCC1 0
  (Integrable_const_TCC1-1 nil 3788861793
   ("" (skeep)
    (("" (typepred "f")
      (("" (skeep)
        (("" (inst 1 "m")
          (("" (skeep)
            (("" (inst -1 "x_1") (("" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((Integrable? const-decl "bool" r2v_analysis nil)
    (r2v type-eq-decl nil r2v_def nil)
    (length def-decl "nat" list_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (d formal-const-decl "[real -> bool]" r2v_analysis nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis))
   nil
   (Integrable_const subtype
    "LAMBDA (x: (r2v_analysis.d)): matrices.*(r2v_analysis.C, r2v_analysis.f(x))"
    "r2v[(d)]")))
 (Integrable_const 0
  (Integrable_const-1 nil 3788861883
   ("" (skeep)
    (("" (expand "Integrable?" 1)
      (("" (skeep)
        (("" (lemma "Integral_scal[(d)]")
          (("1" (inst -1 "C" "a" "b" "nth(f,i)")
            (("1" (assert)
              (("1" (typepred "f")
                (("1" (expand "Integrable?" -2)
                  (("1" (inst -2 "i")
                    (("1" (assert)
                      (("1" (flatten)
                        (("1" (expand "nth" 1)
                          (("1" (expand "nth" -3)
                            (("1" (expand "*" -3)
                              (("1"
                                (assert)
                                (("1"
                                  (lemma "nth_dist")
                                  (("1"
                                    (case
                                     "(LAMBDA (x_1: (d)) -> real: C * nth(f(x_1), i)) = (LAMBDA (x_1: (d)) -> real: nth(C * f(x_1), i))")
                                    (("1" (assert) nil nil)
                                     ("2"
                                      (hide 2)
                                      (("2"
                                        (decompose-equality 1)
                                        (("1"
                                          (inst -1 "f(x!1)" "C" "i")
                                          (("1" (assert) nil nil)
                                           ("2"
                                            (assert)
                                            (("2"
                                              (typepred "f")
                                              (("2"
                                                (typepred "f(x!1)")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (typepred "i")
                                                    (("2"
                                                      (hide
                                                       -2
                                                       -3
                                                       -4
                                                       -5
                                                       -6
                                                       -7
                                                       -8)
                                                      (("2"
                                                        (expand
                                                         "length"
                                                         -1)
                                                        (("2"
                                                          (typepred
                                                           "f")
                                                          (("2"
                                                            (skeep -1)
                                                            (("2"
                                                              (inst-cp
                                                               -1
                                                               "choose((d))")
                                                              (("2"
                                                                (inst
                                                                 -1
                                                                 "x!1")
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (skeep 1)
                                          (("2"
                                            (typepred "i")
                                            (("2"
                                              (expand "length" -1)
                                              (("2"
                                                (typepred "f")
                                                (("2"
                                                  (skeep -1)
                                                  (("2"
                                                    (inst-cp
                                                     -1
                                                     "choose((d))")
                                                    (("2"
                                                      (inst-cp
                                                       -1
                                                       "x_1")
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (skeep)
                                          (("3"
                                            (typepred "i")
                                            (("3"
                                              (expand "length" -1 1)
                                              (("3"
                                                (typepred "f")
                                                (("3"
                                                  (assert)
                                                  (("3"
                                                    (skeep)
                                                    (("3"
                                                      (inst-cp
                                                       -1
                                                       "choose((d))")
                                                      (("3"
                                                        (inst -1 "x_1")
                                                        (("3"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (hide 2)
                                      (("3"
                                        (skeep)
                                        (("3"
                                          (typepred "i")
                                          (("3"
                                            (expand "length" -1)
                                            (("3"
                                              (typepred "f")
                                              (("3"
                                                (skeep -1)
                                                (("3"
                                                  (inst-cp
                                                   -1
                                                   "choose((d))")
                                                  (("3"
                                                    (inst -1 "x_1")
                                                    (("3"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("4"
                                      (skeep)
                                      (("4"
                                        (typepred "i")
                                        (("4"
                                          (hide -2 -3 -4 -5 -6)
                                          (("4"
                                            (hide 2)
                                            (("4"
                                              (typepred "f")
                                              (("4"
                                                (skeep)
                                                (("4"
                                                  (inst-cp
                                                   -1
                                                   "choose(d)")
                                                  (("1"
                                                    (inst -1 "x_1")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand
                                                         "length"
                                                         -4)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (lemma "non_empty")
                                                    (("2"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (typepred "i")
                      (("2" (expand "length" -1)
                        (("2" (typepred "f")
                          (("2" (skeep)
                            (("2" (expand "length" 1 1)
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (typepred "f")
              (("2" (typepred "i")
                (("2" (expand "length") (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil)
           ("2" (lemma "not_one_element") (("2" (propax) nil nil)) nil)
           ("3" (lemma "connected") (("3" (propax) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((Integrable? const-decl "bool" r2v_analysis nil)
    (d formal-const-decl "[real -> bool]" r2v_analysis nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (Integral_scal formula-decl nil integral analysis)
    (connected? const-decl "bool" deriv_domain_def analysis)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (nth_dist formula-decl nil vector_arithmetic mv_analysis)
    (non_empty formula-decl nil r2v_analysis nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (x!1 skolem-const-decl "(d)" r2v_analysis nil)
    (below type-eq-decl nil naturalnumbers nil)
    (choose const-decl "(p)" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nth const-decl "[(d) -> real]" r2v_def nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (r2v type-eq-decl nil r2v_def nil)
    (length const-decl "nat" r2v_def nil)
    (Vector type-eq-decl nil matrices matrices)
    (VectorN type-eq-decl nil matrices matrices)
    (* const-decl "VectorN(length(v2))" matrices matrices)
    (C skolem-const-decl "real" r2v_analysis nil)
    (a skolem-const-decl "(d)" r2v_analysis nil)
    (b skolem-const-decl "(d)" r2v_analysis nil)
    (f skolem-const-decl "{ff: r2v | Integrable?(a, b, ff)}"
     r2v_analysis nil)
    (i skolem-const-decl
       "{ii: nat | ii < length(LAMBDA (x: (d)): C * f(x))}"
       r2v_analysis nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (not_one_element formula-decl nil r2v_analysis nil)
    (connected formula-decl nil r2v_analysis nil))
   shostak))
 (Integral_const_TCC1 0
  (Integral_const_TCC1-1 nil 3788861793
   ("" (skeep)
    (("" (lemma "Integrable_const_TCC1")
      (("" (assert)
        (("" (inst?)
          (("" (assert)
            (("" (lemma "Integrable_const")
              (("" (inst?) (("" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Integrable_const_TCC1 subtype-tcc nil r2v_analysis nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (d formal-const-decl "[real -> bool]" r2v_analysis nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (r2v type-eq-decl nil r2v_def nil)
    (Integrable? const-decl "bool" r2v_analysis nil)
    (Integrable_const formula-decl nil r2v_analysis nil))
   nil
   (Integral_const subtype
    "LAMBDA (x: (r2v_analysis.d)): matrices.*(r2v_analysis.C, r2v_analysis.f(x))"
    "{ff: r2v_def[(r2v_analysis.d)].r2v | r2v_analysis.Integrable?(r2v_analysis.a, r2v_analysis.b, ff)}")))
 (Integral_const 0
  (Integral_const-1 nil 3788862421
   ("" (skeep)
    (("" (lemma "list_extensionality")
      (("" (inst?)
        (("1" (assert)
          (("1" (hide 2)
            (("1" (split 1)
              (("1" (assert)
                (("1"
                  (typepred
                   "(matrices@matrices.*(C, Integral(a, b, f)))")
                  (("1" (replace -2 1)
                    (("1" (assert)
                      (("1"
                        (typepred
                         "r2v_analysis.Integral(a, b, LAMBDA (x: (d)): C * f(x))")
                        (("1" (assert)
                          (("1" (expand "length" -2 2)
                            (("1" (assert)
                              (("1"
                                (typepred
                                 "r2v_analysis.Integral(a, b, f)")
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "length" -2 2)
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide 2)
                          (("2" (lemma "Integrable_const_TCC1")
                            (("2" (inst?)
                              (("2"
                                (assert)
                                (("2"
                                  (lemma "Integrable_const")
                                  (("2"
                                    (inst?)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (skeep)
                (("2" (lemma "nth_dist")
                  (("2" (inst -1 "Integral(a, b, f)" "C" "n")
                    (("1" (replace -1 1)
                      (("1" (lemma "Int_nth")
                        (("1" (inst-cp -1 "a" "b" "f" "n")
                          (("1"
                            (inst -1 "a" "b"
                             "LAMBDA (x: (d)): C * f(x)" "n")
                            (("1" (replace -1)
                              (("1"
                                (replace -2)
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "nth" 1)
                                    (("1"
                                      (lemma "Integral_scal[(d)]")
                                      (("1"
                                        (inst
                                         -1
                                         "C"
                                         "a"
                                         "b"
                                         "LAMBDA (x_1: (d)) -> real: nth(f(x_1), n)")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (split -1)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (expand "*" -2 1)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (case
                                                     "( LAMBDA (x_1: (d)) -> real: C * nth(f(x_1), n)) = (LAMBDA (x_1: (d)) -> real: nth(C * f(x_1), n))")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (hide 2)
                                                      (("2"
                                                        (decompose-equality
                                                         1)
                                                        (("1"
                                                          (lemma
                                                           "nth_dist")
                                                          (("1"
                                                            (inst?)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              (("2"
                                                                (typepred
                                                                 "n")
                                                                (("2"
                                                                  (typepred
                                                                   "r2v_analysis.Integral(a, b, LAMBDA (x: (d)): C * f(x))")
                                                                  (("1"
                                                                    (expand
                                                                     "length"
                                                                     -2
                                                                     2)
                                                                    (("1"
                                                                      (typepred
                                                                       "f")
                                                                      (("1"
                                                                        (skeep
                                                                         -1)
                                                                        (("1"
                                                                          (inst-cp
                                                                           -1
                                                                           "x!1")
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             "choose((d))")
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (lemma
                                                                     "Integrable_const_TCC1")
                                                                    (("2"
                                                                      (inst?)
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (lemma
                                                                           "Integrable_const")
                                                                          (("2"
                                                                            (inst?)
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (skeep 1)
                                                          (("2"
                                                            (typepred
                                                             "n")
                                                            (("2"
                                                              (typepred
                                                               "r2v_analysis.Integral(a, b, LAMBDA (x: (d)): C * f(x))")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (expand
                                                                   "length"
                                                                   -2
                                                                   2)
                                                                  (("1"
                                                                    (typepred
                                                                     "f")
                                                                    (("1"
                                                                      (skeep
                                                                       -1)
                                                                      (("1"
                                                                        (inst-cp
                                                                         -1
                                                                         "x_1")
                                                                        (("1"
                                                                          (inst
                                                                           -1
                                                                           "choose((d))")
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (lemma
                                                                 "Integrable_const_TCC1")
                                                                (("2"
                                                                  (inst?)
                                                                  (("2"
                                                                    (lemma
                                                                     "Integrable_const")
                                                                    (("2"
                                                                      (inst?)
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("3"
                                                          (skeep)
                                                          (("3"
                                                            (typepred
                                                             "n")
                                                            (("3"
                                                              (typepred
                                                               "r2v_analysis.Integral(a, b, LAMBDA (x: (d)): C * f(x))")
                                                              (("1"
                                                                (expand
                                                                 "length"
                                                                 -2
                                                                 2)
                                                                (("1"
                                                                  (typepred
                                                                   "f")
                                                                  (("1"
                                                                    (skeep
                                                                     -1)
                                                                    (("1"
                                                                      (inst-cp
                                                                       -1
                                                                       "x_1")
                                                                      (("1"
                                                                        (inst-cp
                                                                         -1
                                                                         "choose((d))")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (lemma
                                                                 "Integrable_const_TCC1")
                                                                (("2"
                                                                  (inst?)
                                                                  (("2"
                                                                    (lemma
                                                                     "Integrable_const")
                                                                    (("2"
                                                                      (inst?)
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (skeep 1)
                                                      (("3"
                                                        (typepred "n")
                                                        (("3"
                                                          (typepred
                                                           "r2v_analysis.Integral(a, b, LAMBDA (x: (d)): C * f(x))")
                                                          (("1"
                                                            (hide -1)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (expand
                                                                 "length"
                                                                 -1
                                                                 2)
                                                                (("1"
                                                                  (typepred
                                                                   "f")
                                                                  (("1"
                                                                    (skeep
                                                                     -1)
                                                                    (("1"
                                                                      (inst-cp
                                                                       -1
                                                                       "x_1")
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         "choose((d))")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (lemma
                                                             "Integrable_const")
                                                            (("2"
                                                              (lemma
                                                               "Integrable_const_TCC1")
                                                              (("2"
                                                                (inst?)
                                                                (("2"
                                                                  (inst?)
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("4"
                                                      (skeep 1)
                                                      (("4"
                                                        (typepred "n")
                                                        (("4"
                                                          (typepred
                                                           "r2v_analysis.Integral(a, b, LAMBDA (x: (d)): C * f(x))")
                                                          (("1"
                                                            (expand
                                                             "length"
                                                             -2
                                                             2)
                                                            (("1"
                                                              (typepred
                                                               "f")
                                                              (("1"
                                                                (skeep
                                                                 -1)
                                                                (("1"
                                                                  (inst-cp
                                                                   -1
                                                                   "x_1")
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     "choose((d))")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (lemma
                                                             "Integrable_const")
                                                            (("2"
                                                              (inst?)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (lemma
                                                                   "Integrable_const_TCC1")
                                                                  (("2"
                                                                    (inst?)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (assert)
                                              (("2"
                                                (typepred "f")
                                                (("2"
                                                  (expand
                                                   "Integrable?"
                                                   -2)
                                                  (("2"
                                                    (inst -2 "n")
                                                    (("2"
                                                      (expand "nth" -2)
                                                      (("2"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (skeep 1)
                                          (("2"
                                            (typepred "n")
                                            (("2"
                                              (typepred
                                               "r2v_analysis.Integral(a, b, LAMBDA (x: (d)): C * f(x))")
                                              (("1"
                                                (expand "length" -2 2)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (typepred "f")
                                                    (("1"
                                                      (skeep -1)
                                                      (("1"
                                                        (inst-cp
                                                         -1
                                                         "x_1")
                                                        (("1"
                                                          (inst-cp
                                                           -1
                                                           "choose((d))")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (lemma
                                                 "Integrable_const_TCC1")
                                                (("2"
                                                  (lemma
                                                   "Integrable_const")
                                                  (("2"
                                                    (inst?)
                                                    (("2"
                                                      (inst?)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (lemma "not_one_element")
                                        (("2" (propax) nil nil))
                                        nil)
                                       ("3"
                                        (lemma "connected")
                                        (("3" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (lemma "Integrable_const_TCC1")
                              (("2"
                                (lemma "Integrable_const")
                                (("2"
                                  (inst?)
                                  (("2"
                                    (inst?)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (typepred "n")
                            (("2"
                              (typepred
                               "r2v_analysis.Integral(a, b, LAMBDA (x: (d)): C * f(x))")
                              (("1"
                                (expand "length" -2 2)
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "length" 1 1)
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (lemma "Integrable_const")
                                (("2"
                                  (lemma "Integrable_const_TCC1")
                                  (("2"
                                    (inst?)
                                    (("2"
                                      (inst?)
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (typepred "n")
                      (("2" (assert)
                        (("2"
                          (typepred
                           "r2v_analysis.Integral(a, b, LAMBDA (x: (d)): C * f(x))")
                          (("1"
                            (typepred "r2v_analysis.Integral(a, b, f)")
                            (("1" (assert)
                              (("1"
                                (expand "length" -2 2)
                                (("1"
                                  (expand "length" -4 2)
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (lemma "Integrable_const_TCC1")
                            (("2" (lemma "Integrable_const")
                              (("2"
                                (inst?)
                                (("2"
                                  (inst?)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (assert)
                      (("3" (typepred "r2v_analysis.Integral(a, b, f)")
                        (("3" (typepred "n")
                          (("3"
                            (typepred
                             "r2v_analysis.Integral(a, b, LAMBDA (x: (d)): C * f(x))")
                            (("1" (assert)
                              (("1"
                                (expand "length" -2 2)
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "length" -5 2)
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (lemma "Integrable_const")
                              (("2"
                                (lemma "Integrable_const_TCC1")
                                (("2"
                                  (inst?)
                                  (("2"
                                    (inst?)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (lemma "Integrable_const_TCC1")
          (("2" (assert)
            (("2" (lemma "Integrable_const")
              (("2" (inst?)
                (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list_extensionality formula-decl nil more_list_props structures)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Integrable_const formula-decl nil r2v_analysis nil)
    (Integrable_const_TCC1 subtype-tcc nil r2v_analysis nil)
    (nth_dist formula-decl nil vector_arithmetic mv_analysis)
    (real_times_real_is_real application-judgement "real" reals nil)
    (Integral_scal formula-decl nil integral analysis)
    (connected? const-decl "bool" deriv_domain_def analysis)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (set type-eq-decl nil sets nil)
    (nonempty? const-decl "bool" sets nil)
    (choose const-decl "(p)" sets nil)
    (x!1 skolem-const-decl "(d)" r2v_analysis nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (not_one_element formula-decl nil r2v_analysis nil)
    (connected formula-decl nil r2v_analysis nil)
    (nth const-decl "[(d) -> real]" r2v_def nil)
    (Int_nth formula-decl nil r2v_analysis nil)
    (n skolem-const-decl
     "below(length(Integral(a, b, LAMBDA (x: (d)): C * f(x))))"
     r2v_analysis nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (Integral def-decl "VectorN(length(f))" r2v_analysis nil)
    (length const-decl "nat" r2v_def nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (d formal-const-decl "[real -> bool]" r2v_analysis nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (length def-decl "nat" list_props nil)
    (Vector type-eq-decl nil matrices matrices)
    (VectorN type-eq-decl nil matrices matrices)
    (* const-decl "VectorN(length(v2))" matrices matrices)
    (C skolem-const-decl "real" r2v_analysis nil)
    (r2v type-eq-decl nil r2v_def nil)
    (Integrable? const-decl "bool" r2v_analysis nil)
    (a skolem-const-decl "(d)" r2v_analysis nil)
    (b skolem-const-decl "(d)" r2v_analysis nil)
    (f skolem-const-decl "{ff: r2v | Integrable?(a, b, ff)}"
     r2v_analysis nil))
   shostak))
 (cont_entry_v_TCC1 0
  (cont_entry_v_TCC1-1 nil 3788001852 ("" (subtype-tcc) nil nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (d formal-const-decl "[real -> bool]" r2v_analysis nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (length def-decl "nat" list_props nil)
    (r2v type-eq-decl nil r2v_def nil)
    (continuous? const-decl "bool" r2v_analysis nil)
    (cons? const-decl "bool" r2v_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (continuous? const-decl "bool" continuous_functions analysis)
    (continuous? const-decl "bool" continuous_functions analysis)
    (nth const-decl "[(d) -> real]" r2v_def nil))
   nil
   (cont_entry_v subtype "r2v_analysis.xx" "(list_adt[real].cons?)")))
 (cont_entry_v_TCC2 0
  (cont_entry_v_TCC2-1 nil 3788001852 ("" (subtype-tcc) nil nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (d formal-const-decl "[real -> bool]" r2v_analysis nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (length def-decl "nat" list_props nil)
    (r2v type-eq-decl nil r2v_def nil)
    (continuous? const-decl "bool" r2v_analysis nil)
    (cons? const-decl "bool" r2v_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (continuous? const-decl "bool" continuous_functions analysis)
    (continuous? const-decl "bool" continuous_functions analysis)
    (nth const-decl "[(d) -> real]" r2v_def nil))
   nil
   (cont_entry_v subtype "r2v_analysis.x" "(list_adt[real].cons?)")))
 (cont_entry_v_TCC3 0
  (cont_entry_v_TCC3-1 nil 3788001852 ("" (subtype-tcc) nil nil) nil
   nil
   (cont_entry_v subtype "list_adt[real].car(r2v_analysis.x)"
    "(r2v_analysis.d)")))
 (cont_entry_v_TCC4 0
  (cont_entry_v_TCC4-1 nil 3788001852
   ("" (skeep)
    (("" (typepred "y")
      (("" (skeep -1)
        (("" (inst-cp -1 "car(x)")
          (("" (expand "length" 1 2)
            (("" (inst -1 "choose((d))") (("" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cons? const-decl "bool" r2v_def nil)
    (continuous? const-decl "bool" r2v_analysis nil)
    (r2v type-eq-decl nil r2v_def nil)
    (length def-decl "nat" list_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (d formal-const-decl "[real -> bool]" r2v_analysis nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (VectorN type-eq-decl nil matrices matrices)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (choose const-decl "(p)" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (length const-decl "nat" r2v_def nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis))
   nil
   (cont_entry_v subtype
    "r2v_analysis.y(list_adt[real].car(r2v_analysis.x))"
    "matrices.VectorN(r2v_def[(r2v_analysis.d)].length(r2v_analysis.y))")))
 (cont_entry_v_TCC5 0
  (cont_entry_v_TCC5-1 nil 3788001852
   ("" (skeep 1)
    (("" (typepred "y")
      (("" (lemma "length_cons")
        (("" (inst?) (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((cons? const-decl "bool" r2v_def nil)
    (continuous? const-decl "bool" r2v_analysis nil)
    (r2v type-eq-decl nil r2v_def nil)
    (length def-decl "nat" list_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (d formal-const-decl "[real -> bool]" r2v_analysis nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (length_cons formula-decl nil r2v_def nil))
   nil
   (cont_entry_v subtype
    "r2v_def[(r2v_analysis.d)].length(r2v_analysis.y)" "posnat")))
 (cont_entry_v 0
  (cont_entry_v-1 nil 3788002100
   (""
    (case "FORALL (n:nat, y: {yy: r2v | continuous?(yy) AND cons?(yy)}):
       length(y)=n IMPLIES ( contD?[1]
            (LAMBDA (x: VectorN(1)): d(car(x)), length(y))
            (LAMBDA (x: {xx: VectorN(1) | d(car(xx))}): y(car(x))))")
    (("1" (skeep) (("1" (inst -1 "length(y)" "y") nil nil)) nil)
     ("2" (assert)
      (("2" (hide 2)
        (("2" (induct "n")
          (("1" (skeep 1)
            (("1" (typepred "y")
              (("1" (lemma "length_cons")
                (("1" (inst -1 "y") (("1" (assert) nil nil)) nil))
                nil))
              nil))
            nil)
           ("2" (skeep 1)
            (("2" (skeep 1)
              (("2" (case "j=0")
                (("1" (replace -1)
                  (("1" (hide -2)
                    (("1" (replace -2)
                      (("1" (assert)
                        (("1" (lemma "contD_norms_v2v[1]")
                          (("1"
                            (inst -1
                             "(LAMBDA (x: VectorN(1)): d(car(x)))" "1"
                             "(LAMBDA (x: {xx: VectorN(1) | d(car(xx))}): y(car(x)))")
                            (("1" (assert)
                              (("1"
                                (hide 2)
                                (("1"
                                  (inst 1 "norm_inf(1)" "norm_inf(1)")
                                  (("1"
                                    (expand "contD?" 1)
                                    (("1"
                                      (skeep 1)
                                      (("1"
                                        (expand "contp?" 1)
                                        (("1"
                                          (typepred "y")
                                          (("1"
                                            (expand "continuous?" -2)
                                            (("1"
                                              (inst -2 "0")
                                              (("1"
                                                (expand
                                                 "continuous?"
                                                 -2)
                                                (("1"
                                                  (expand "nth" -2)
                                                  (("1"
                                                    (expand "nth" -2)
                                                    (("1"
                                                      (skeep 1)
                                                      (("1"
                                                        (expand
                                                         "norm_inf"
                                                         1
                                                         1)
                                                        (("1"
                                                          (typepred
                                                           "p")
                                                          (("1"
                                                            (inst
                                                             -5
                                                             "car(p)")
                                                            (("1"
                                                              (expand
                                                               "continuous?"
                                                               -5)
                                                              (("1"
                                                                (inst
                                                                 -5
                                                                 "eps")
                                                                (("1"
                                                                  (skeep
                                                                   -5)
                                                                  (("1"
                                                                    (inst
                                                                     1
                                                                     "delta")
                                                                    (("1"
                                                                      (skeep
                                                                       1)
                                                                      (("1"
                                                                        (inst
                                                                         -5
                                                                         "car(x_1)")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (expand
                                                                             "norm_inf"
                                                                             -7)
                                                                            (("1"
                                                                              (expand
                                                                               "abs"
                                                                               -7)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (typepred
                                                                                   "x_1"
                                                                                   "p"
                                                                                   "x_1-p")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (hide
                                                                                       -1
                                                                                       -4
                                                                                       -7)
                                                                                      (("1"
                                                                                        (replace
                                                                                         -1)
                                                                                        (("1"
                                                                                          (replace
                                                                                           -3)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "max"
                                                                                             -5)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "max"
                                                                                                 -11)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (lemma
                                                                                                     "car_sub")
                                                                                                    (("1"
                                                                                                      (inst?)
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "norm_inf"
                                                                                                           1
                                                                                                           1)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "norm_inf"
                                                                                                             1)
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "abs"
                                                                                                               1)
                                                                                                              (("1"
                                                                                                                (lift-if
                                                                                                                 1)
                                                                                                                (("1"
                                                                                                                  (split
                                                                                                                   1)
                                                                                                                  (("1"
                                                                                                                    (flatten)
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         "max"
                                                                                                                         1
                                                                                                                         1)
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          (("1"
                                                                                                                            (lemma
                                                                                                                             "car_sub")
                                                                                                                            (("1"
                                                                                                                              (inst
                                                                                                                               -1
                                                                                                                               "y(car(x_1))"
                                                                                                                               "y(car(p))")
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil)
                                                                                                                   ("2"
                                                                                                                    (flatten)
                                                                                                                    (("2"
                                                                                                                      (typepred
                                                                                                                       "y(car(x_1))"
                                                                                                                       "y(car(p))"
                                                                                                                       "(y(car(x_1)) - y(car(p)))")
                                                                                                                      (("2"
                                                                                                                        (assert)
                                                                                                                        (("2"
                                                                                                                          (hide
                                                                                                                           -1
                                                                                                                           -2
                                                                                                                           -3)
                                                                                                                          (("2"
                                                                                                                            (typepred
                                                                                                                             "y(car(x_1))")
                                                                                                                            (("2"
                                                                                                                              (hide
                                                                                                                               -1)
                                                                                                                              (("2"
                                                                                                                                (expand
                                                                                                                                 "length"
                                                                                                                                 -15)
                                                                                                                                (("2"
                                                                                                                                  (typepred
                                                                                                                                   "y")
                                                                                                                                  (("2"
                                                                                                                                    (skeep
                                                                                                                                     -1)
                                                                                                                                    (("2"
                                                                                                                                      (inst-cp
                                                                                                                                       -1
                                                                                                                                       "choose((d))")
                                                                                                                                      (("2"
                                                                                                                                        (inst-cp
                                                                                                                                         -1
                                                                                                                                         "car(x_1)")
                                                                                                                                        (("2"
                                                                                                                                          (inst
                                                                                                                                           -1
                                                                                                                                           "car(p)")
                                                                                                                                          (("2"
                                                                                                                                            (assert)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (skeep 1)
                              (("2"
                                (typepred "y")
                                (("2"
                                  (expand "length" -5)
                                  (("2"
                                    (skeep -1)
                                    (("2"
                                      (inst-cp -1 "choose((d))")
                                      (("2"
                                        (inst -1 "car(x)")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (skeep 1)
                              (("3"
                                (typepred "x")
                                (("3"
                                  (lemma "length_cons")
                                  (("3" (assert) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("4" (skeep 1)
                              (("4"
                                (typepred "x")
                                (("4"
                                  (lemma "length_cons")
                                  (("4" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert)
                  (("2" (lemma "contD_norms_v2v[1]")
                    (("2"
                      (inst -1 "LAMBDA (x: VectorN(1)): d(car(x))"
                       "length(y)"
                       "LAMBDA (x: {xx: VectorN(1) | d(car(xx))}): y(car(x))")
                      (("1" (assert)
                        (("1" (hide 3)
                          (("1"
                            (inst 1 "norm_inf(1)"
                             "norm_inf(length(y))")
                            (("1" (assert)
                              (("1"
                                (case
                                 "continuous?(cdr(y)) AND cons?(cdr(y))")
                                (("1"
                                  (flatten)
                                  (("1"
                                    (inst -3 "cdr(y)")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (lemma "length_cdr")
                                        (("1"
                                          (inst -1 "y")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "contD?" -4)
                                              (("1"
                                                (expand "contD?" 1)
                                                (("1"
                                                  (skeep 1)
                                                  (("1"
                                                    (inst -4 "p")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand
                                                         "contp?"
                                                         -4)
                                                        (("1"
                                                          (inst
                                                           -4
                                                           "norm_inf(1)"
                                                           "norm_inf(j)")
                                                          (("1"
                                                            (expand
                                                             "contp?"
                                                             1
                                                             1)
                                                            (("1"
                                                              (skeep 1)
                                                              (("1"
                                                                (lemma
                                                                 "norm_inf_recurse")
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "length(y)"
                                                                   "_")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (hide
                                                                       -3)
                                                                      (("1"
                                                                        (typepred
                                                                         "y")
                                                                        (("1"
                                                                          (expand
                                                                           "continuous?"
                                                                           -2)
                                                                          (("1"
                                                                            (inst
                                                                             -2
                                                                             "0")
                                                                            (("1"
                                                                              (expand
                                                                               "nth"
                                                                               -2)
                                                                              (("1"
                                                                                (inst
                                                                                 -7
                                                                                 "eps")
                                                                                (("1"
                                                                                  (expand
                                                                                   "nth"
                                                                                   -2)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "continuous?"
                                                                                     -2)
                                                                                    (("1"
                                                                                      (inst
                                                                                       -2
                                                                                       "car(p)")
                                                                                      (("1"
                                                                                        (expand
                                                                                         "continuous?"
                                                                                         -2)
                                                                                        (("1"
                                                                                          (inst
                                                                                           -2
                                                                                           "eps")
                                                                                          (("1"
                                                                                            (hide
                                                                                             -1)
                                                                                            (("1"
                                                                                              (skeep
                                                                                               -1)
                                                                                              (("1"
                                                                                                (skeep
                                                                                                 -6)
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   1
                                                                                                   "min(delta,delta!1)")
                                                                                                  (("1"
                                                                                                    (skeep
                                                                                                     1)
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       -1
                                                                                                       "car(x_1)")
                                                                                                      (("1"
                                                                                                        (inst
                                                                                                         -7
                                                                                                         "x_1")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (split
                                                                                                               -1)
                                                                                                              (("1"
                                                                                                                (inst
                                                                                                                 -3
                                                                                                                 "y(car(x_1)) - y(car(p))")
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (replace
                                                                                                                     -3
                                                                                                                     1)
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "max"
                                                                                                                       1)
                                                                                                                      (("1"
                                                                                                                        (lift-if
                                                                                                                         1)
                                                                                                                        (("1"
                                                                                                                          (split
                                                                                                                           1)
                                                                                                                          (("1"
                                                                                                                            (flatten)
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              (("1"
                                                                                                                                (case
                                                                                                                                 "NOT length(y)-1 = j")
                                                                                                                                (("1"
                                                                                                                                  (assert)
                                                                                                                                  nil
                                                                                                                                  nil)
                                                                                                                                 ("2"
                                                                                                                                  (replace
                                                                                                                                   -1)
                                                                                                                                  (("2"
                                                                                                                                    (expand
                                                                                                                                     "cdr"
                                                                                                                                     -9)
                                                                                                                                    (("2"
                                                                                                                                      (lemma
                                                                                                                                       "cdr_sub")
                                                                                                                                      (("2"
                                                                                                                                        (inst
                                                                                                                                         -1
                                                                                                                                         "(y(car(x_1)))"
                                                                                                                                         "y(car(p))")
                                                                                                                                        (("2"
                                                                                                                                          (assert)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (flatten)
                                                                                                                            (("2"
                                                                                                                              (assert)
                                                                                                                              (("2"
                                                                                                                                (hide
                                                                                                                                 1)
                                                                                                                                (("2"
                                                                                                                                  (lemma
                                                                                                                                   "car_sub")
                                                                                                                                  (("2"
                                                                                                                                    (inst
                                                                                                                                     -1
                                                                                                                                     "y(car(x_1))"
                                                                                                                                     "y(car(p))")
                                                                                                                                    (("2"
                                                                                                                                      (assert)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (assert)
                                                                                                                  (("2"
                                                                                                                    (expand
                                                                                                                     "length"
                                                                                                                     1
                                                                                                                     2)
                                                                                                                    (("2"
                                                                                                                      (typepred
                                                                                                                       "y(car[real](x_1)) - y(car[real](p))")
                                                                                                                      (("2"
                                                                                                                        (hide
                                                                                                                         -1)
                                                                                                                        (("2"
                                                                                                                          (typepred
                                                                                                                           "y")
                                                                                                                          (("2"
                                                                                                                            (skeep
                                                                                                                             -1)
                                                                                                                            (("2"
                                                                                                                              (inst-cp
                                                                                                                               -1
                                                                                                                               "choose((d))")
                                                                                                                              (("2"
                                                                                                                                (inst-cp
                                                                                                                                 -1
                                                                                                                                 "car(x_1)")
                                                                                                                                (("2"
                                                                                                                                  (inst-cp
                                                                                                                                   -1
                                                                                                                                   "car(p)")
                                                                                                                                  (("2"
                                                                                                                                    (assert)
                                                                                                                                    (("2"
                                                                                                                                      (replace
                                                                                                                                       -2)
                                                                                                                                      (("2"
                                                                                                                                        (replace
                                                                                                                                         -3)
                                                                                                                                        (("2"
                                                                                                                                          (expand
                                                                                                                                           "max"
                                                                                                                                           -)
                                                                                                                                          (("2"
                                                                                                                                            (assert)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (assert)
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "norm_inf"
                                                                                                                   -5)
                                                                                                                  (("2"
                                                                                                                    (expand
                                                                                                                     "norm_inf"
                                                                                                                     -5)
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       "abs"
                                                                                                                       -5)
                                                                                                                      (("2"
                                                                                                                        (assert)
                                                                                                                        (("2"
                                                                                                                          (typepred
                                                                                                                           "x_1-p"
                                                                                                                           "x_1"
                                                                                                                           "p")
                                                                                                                          (("2"
                                                                                                                            (assert)
                                                                                                                            (("2"
                                                                                                                              (replace
                                                                                                                               -4)
                                                                                                                              (("2"
                                                                                                                                (replace
                                                                                                                                 -7)
                                                                                                                                (("2"
                                                                                                                                  (expand
                                                                                                                                   "max"
                                                                                                                                   -2)
                                                                                                                                  (("2"
                                                                                                                                    (assert)
                                                                                                                                    (("2"
                                                                                                                                      (hide
                                                                                                                                       -1
                                                                                                                                       -3
                                                                                                                                       -6)
                                                                                                                                      (("2"
                                                                                                                                        (expand
                                                                                                                                         "max"
                                                                                                                                         -10)
                                                                                                                                        (("2"
                                                                                                                                          (assert)
                                                                                                                                          (("2"
                                                                                                                                            (lemma
                                                                                                                                             "car_sub")
                                                                                                                                            (("2"
                                                                                                                                              (inst
                                                                                                                                               -1
                                                                                                                                               "x_1"
                                                                                                                                               "p")
                                                                                                                                              (("2"
                                                                                                                                                (replace
                                                                                                                                                 -1)
                                                                                                                                                (("2"
                                                                                                                                                  (assert)
                                                                                                                                                  nil
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (assert) nil nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (assert)
                                  (("2"
                                    (split 1)
                                    (("1"
                                      (hide -1)
                                      (("1"
                                        (typepred "y")
                                        (("1"
                                          (expand "continuous?")
                                          (("1"
                                            (skeep 1)
                                            (("1"
                                              (inst -2 "i+1")
                                              (("1"
                                                (lemma "nth_cdr")
                                                (("1"
                                                  (inst -1 "y" "i")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (lemma "length_cdr")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (inst -1 "y")
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (lemma "length_cons")
                                      (("2"
                                        (inst -1 "cdr(y)")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (lemma "length_cdr")
                                            (("2"
                                              (inst -1 "y")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (skeep 1)
                        (("2" (assert)
                          (("2" (expand "length" -2)
                            (("2" (expand "length" 1 2)
                              (("2"
                                (typepred "y")
                                (("2"
                                  (skeep -1)
                                  (("2"
                                    (inst-cp -1 "choose((d))")
                                    (("2"
                                      (inst -1 "car(x)")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("3" (skeep 1)
                        (("3" (typepred "x")
                          (("3" (lemma "length_cons")
                            (("3" (assert) nil nil)) nil))
                          nil))
                        nil)
                       ("4" (skeep 1)
                        (("4" (typepred "x")
                          (("4" (expand "length" -2)
                            (("4" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (hide 2)
            (("3" (skeep)
              (("3" (assert)
                (("3" (expand "length")
                  (("3" (assert)
                    (("3" (typepred "n")
                      (("3" (typepred "y")
                        (("3" (lemma "length_cons")
                          (("3" (inst -1 "y")
                            (("3" (expand "length" -1)
                              (("3" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("4" (assert)
            (("4" (hide 2)
              (("4" (skeep 1)
                (("4" (skeep 1)
                  (("4" (typepred "y")
                    (("4" (expand "length" 1 2)
                      (("4" (skeep -1)
                        (("4" (inst-cp -1 "choose((d))")
                          (("4" (inst -1 "car(x)")
                            (("4" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("5" (hide 2)
            (("5" (skeep 1)
              (("5" (skeep 1)
                (("5" (typepred "x")
                  (("5" (lemma "length_cons")
                    (("5" (expand "length" -3) (("5" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("6" (hide 2)
            (("6" (skeep)
              (("6" (skeep 1)
                (("6" (typepred "xx")
                  (("6" (expand "length" -2) (("6" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2)
      (("3" (skeep 1)
        (("3" (typepred "y")
          (("3" (lemma "length_cons")
            (("3" (inst -1 "y") (("3" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil)
     ("4" (hide 2)
      (("4" (skeep 1)
        (("4" (skeep 1)
          (("4" (expand "length" 1 2)
            (("4" (typepred "y")
              (("4" (skeep -1)
                (("4" (inst-cp -1 "choose((d))")
                  (("4" (inst -1 "car(x)") (("4" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("5" (hide 2)
      (("5" (skeep 1)
        (("5" (skeep 1)
          (("5" (typepred "x")
            (("5" (expand "length" -2) (("5" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("6" (hide 2)
      (("6" (skeep)
        (("6" (skeep 1)
          (("6" (typepred "xx")
            (("6" (expand "length" -2) (("6" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pred type-eq-decl nil defined_types nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (length_cons formula-decl nil r2v_def nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (i skolem-const-decl "{ii: nat | ii < length(cdr(y))}" r2v_analysis
       nil)
    (nth_cdr formula-decl nil r2v_def nil)
    (j skolem-const-decl "nat" r2v_analysis nil)
    (posreal_min application-judgement
     "{z: posreal | z <= x AND z <= y}" real_defs nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (<= const-decl "bool" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nonneg_real_max application-judgement
     "{z: nonneg_real | z >= x AND z >= y}" real_defs nil)
    (cdr_sub formula-decl nil vector_arithmetic mv_analysis)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (p skolem-const-decl "(LAMBDA (x: VectorN(1)): d(car(x)))"
     r2v_analysis nil)
    (x_1 skolem-const-decl "(LAMBDA (x: VectorN(1)): d(car(x)))"
     r2v_analysis nil)
    (norm_inf_recurse formula-decl nil norms mv_analysis)
    (contp? const-decl "bool" continuity_multivar mv_analysis)
    (length_cdr formula-decl nil r2v_def nil)
    (cdr const-decl "r2v" r2v_def nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (contD_norms_v2v formula-decl nil continuity_multivar mv_analysis)
    (norm_inf const-decl "(norm?(m))" norms mv_analysis)
    (norm? const-decl "bool" norms mv_analysis)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (< const-decl "bool" reals nil)
    (nth const-decl "[(d) -> real]" r2v_def nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (continuous? const-decl "bool" continuous_functions analysis)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (abs def-decl "{l: list | length(l) = length(ll)}" norms
         mv_analysis)
    (Vector type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (length_singleton formula-decl nil more_list_props structures)
    (choose const-decl "(p)" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (car_sub formula-decl nil vector_arithmetic mv_analysis)
    (max def-decl "real" norms mv_analysis)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (norm_inf const-decl "[(cons?) -> nonneg_real]" norms mv_analysis)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nth def-decl "T" list_props nil)
    (continuous? const-decl "bool" continuous_functions analysis)
    (contp? const-decl "bool" continuity_multivar mv_analysis)
    (contD? const-decl "bool" continuity_multivar mv_analysis)
    (y skolem-const-decl "{yy: r2v | continuous?(yy) AND cons?(yy)}"
     r2v_analysis nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (d formal-const-decl "[real -> bool]" r2v_analysis nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (r2v type-eq-decl nil r2v_def nil)
    (continuous? const-decl "bool" r2v_analysis nil)
    (cons? const-decl "bool" r2v_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (length const-decl "nat" r2v_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (domain type-eq-decl nil domain_vec2real_def mv_analysis)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (contD? const-decl "bool" continuity_multivar mv_analysis)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil))
   shostak))
 (cont_v_entry_TCC1 0
  (cont_v_entry_TCC1-1 nil 3788010202 ("" (subtype-tcc) nil nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (d formal-const-decl "[real -> bool]" r2v_analysis nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (length def-decl "nat" list_props nil)
    (r2v type-eq-decl nil r2v_def nil)
    (cons? const-decl "bool" r2v_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (cont_v_entry subtype "r2v_analysis.xx" "(list_adt[real].cons?)")))
 (cont_v_entry_TCC2 0
  (cont_v_entry_TCC2-1 nil 3788010202 ("" (subtype-tcc) nil nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (d formal-const-decl "[real -> bool]" r2v_analysis nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (length def-decl "nat" list_props nil)
    (r2v type-eq-decl nil r2v_def nil)
    (cons? const-decl "bool" r2v_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (cont_v_entry subtype "r2v_analysis.x" "(list_adt[real].cons?)")))
 (cont_v_entry_TCC3 0
  (cont_v_entry_TCC3-1 nil 3788010202 ("" (subtype-tcc) nil nil) nil
   nil
   (cont_v_entry subtype "list_adt[real].car(r2v_analysis.x)"
    "(r2v_analysis.d)")))
 (cont_v_entry_TCC4 0
  (cont_v_entry_TCC4-1 nil 3788010202
   ("" (skeep)
    (("" (expand "length" 1 2)
      (("" (typepred "y")
        (("" (skeep -1)
          (("" (inst-cp -1 "choose((d))")
            (("" (inst -1 "car(x)") (("" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((length const-decl "nat" r2v_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (set type-eq-decl nil sets nil)
    (nonempty? const-decl "bool" sets nil)
    (choose const-decl "(p)" sets nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (d formal-const-decl "[real -> bool]" r2v_analysis nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (length def-decl "nat" list_props nil)
    (r2v type-eq-decl nil r2v_def nil)
    (cons? const-decl "bool" r2v_def nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis))
   nil
   (cont_v_entry subtype
    "r2v_analysis.y(list_adt[real].car(r2v_analysis.x))"
    "matrices.VectorN(r2v_def[(r2v_analysis.d)].length(r2v_analysis.y))")))
 (cont_v_entry_TCC5 0
  (cont_v_entry_TCC5-1 nil 3788010202
   ("" (skeep)
    (("" (lemma "length_cons")
      (("" (inst -1 "y") (("" (assert) nil nil)) nil)) nil))
    nil)
   ((d formal-const-decl "[real -> bool]" r2v_analysis nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (length_cons formula-decl nil r2v_def nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (cons? const-decl "bool" r2v_def nil)
    (r2v type-eq-decl nil r2v_def nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil))
   nil
   (cont_v_entry subtype
    "r2v_def[(r2v_analysis.d)].length(r2v_analysis.y)" "posnat")))
 (cont_v_entry 0
  (cont_v_entry-1 nil 3788010386
   ("" (skeep)
    (("" (expand "contD?" -1)
      (("" (expand "continuous?" 1)
        (("" (skeep 1)
          (("" (expand "continuous?" 1)
            (("" (skeep 1)
              (("" (typepred "x0")
                (("" (inst -2 "(: x0 :)")
                  (("" (expand "contp?" -2)
                    (("" (inst -2 "norm_inf(1)" "norm_inf(length(y))")
                      (("" (expand "continuous?" 1 1)
                        (("" (skeep 1)
                          (("" (inst -2 "epsilon")
                            (("" (skeep)
                              ((""
                                (inst 1 "delta")
                                ((""
                                  (skeep)
                                  ((""
                                    (inst -2 "(: x :)")
                                    ((""
                                      (assert)
                                      ((""
                                        (split -2)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (lemma "norm_inf_nth_ineq")
                                            (("1"
                                              (inst
                                               -1
                                               "y(x)-y(x0)"
                                               "i")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand "-" -1)
                                                  (("1"
                                                    (expand "sub" -1)
                                                    (("1"
                                                      (lemma "nth_sum")
                                                      (("1"
                                                        (inst
                                                         -1
                                                         "y(x)"
                                                         "scal(-1,y(x0))")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (split -1)
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "i")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (expand
                                                                   "+"
                                                                   -1
                                                                   1)
                                                                  (("1"
                                                                    (replace
                                                                     -1)
                                                                    (("1"
                                                                      (expand
                                                                       "nth"
                                                                       1
                                                                       1)
                                                                      (("1"
                                                                        (expand
                                                                         "nth"
                                                                         1
                                                                         2)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (lemma
                                                                             "nth_dist")
                                                                            (("1"
                                                                              (inst
                                                                               -1
                                                                               "y(x0)"
                                                                               "-1"
                                                                               "i")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (expand
                                                                                   "*"
                                                                                   -1
                                                                                   1)
                                                                                  (("1"
                                                                                    (replace
                                                                                     -1)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "norm_inf"
                                                                                         -4)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "-"
                                                                                           -4)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "sub"
                                                                                               -4)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (typepred
                                                                                 "y")
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (skeep
                                                                                     -1)
                                                                                    (("2"
                                                                                      (inst-cp
                                                                                       -1
                                                                                       "x0")
                                                                                      (("2"
                                                                                        (expand
                                                                                         "length"
                                                                                         -2)
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (inst
                                                                                             -1
                                                                                             "choose((d))")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (case
                                                                                                 "length(y)=0")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (expand
                                                                                                   "length"
                                                                                                   1
                                                                                                   1)
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (lemma
                                                                                               "non_empty")
                                                                                              (("2"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (typepred
                                                                 "i")
                                                                (("2"
                                                                  (expand
                                                                   "length"
                                                                   -1)
                                                                  (("2"
                                                                    (typepred
                                                                     "y")
                                                                    (("2"
                                                                      (skeep
                                                                       -1)
                                                                      (("2"
                                                                        (inst-cp
                                                                         -1
                                                                         "x")
                                                                        (("2"
                                                                          (inst-cp
                                                                           -1
                                                                           "choose((d))")
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (typepred
                                                               "y")
                                                              (("2"
                                                                (typepred
                                                                 "scal(-1,y(x0))")
                                                                (("2"
                                                                  (skeep
                                                                   -3)
                                                                  (("2"
                                                                    (inst-cp
                                                                     -3
                                                                     "x")
                                                                    (("2"
                                                                      (inst-cp
                                                                       -3
                                                                       "x0")
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (typepred
                                                           "scal(-1,y(x0))")
                                                          (("2"
                                                            (typepred
                                                             "y")
                                                            (("2"
                                                              (skeep
                                                               -1)
                                                              (("2"
                                                                (inst-cp
                                                                 -1
                                                                 "choose((d))")
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "x0")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (lemma
                                                                       "length_cons")
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         "y")
                                                                        (("1"
                                                                          (expand
                                                                           "length"
                                                                           -1
                                                                           1)
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (lemma
                                                                   "non_empty")
                                                                  (("2"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("3"
                                                          (typepred
                                                           "y")
                                                          (("3"
                                                            (skeep -1)
                                                            (("3"
                                                              (inst-cp
                                                               -1
                                                               "choose((d))")
                                                              (("1"
                                                                (inst-cp
                                                                 -1
                                                                 "x")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (lemma
                                                                     "length_cons")
                                                                    (("1"
                                                                      (inst
                                                                       -1
                                                                       "y")
                                                                      (("1"
                                                                        (expand
                                                                         "length"
                                                                         -1)
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (lemma
                                                                 "non_empty")
                                                                (("2"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (typepred "i")
                                                (("2"
                                                  (typepred
                                                   "y(x)-y(x0)")
                                                  (("2"
                                                    (typepred "y")
                                                    (("2"
                                                      (hide -3)
                                                      (("2"
                                                        (skeep -1)
                                                        (("2"
                                                          (inst-cp
                                                           -1
                                                           "choose((d))")
                                                          (("1"
                                                            (inst-cp
                                                             -1
                                                             "x")
                                                            (("1"
                                                              (inst-cp
                                                               -1
                                                               "x0")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (expand
                                                                   "length"
                                                                   -7)
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (lemma
                                                             "non_empty")
                                                            (("2"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((contD? const-decl "bool" continuity_multivar mv_analysis)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis)
    (length_singleton formula-decl nil more_list_props structures)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices matrices)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (cons? const-decl "bool" r2v_def nil)
    (length const-decl "nat" r2v_def nil)
    (r2v type-eq-decl nil r2v_def nil)
    (norm_inf const-decl "(norm?(m))" norms mv_analysis)
    (norm? const-decl "bool" norms mv_analysis)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (norm_inf const-decl "[(cons?) -> nonneg_real]" norms mv_analysis)
    (max def-decl "real" norms mv_analysis)
    (abs def-decl "{l: list | length(l) = length(ll)}" norms
         mv_analysis)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (add def-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (minus_real_is_real application-judgement "real" reals nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (< const-decl "bool" reals nil)
    (y skolem-const-decl "{yy: r2v | cons?(yy)}" r2v_analysis nil)
    (i skolem-const-decl "{ii: nat | ii < length(y)}" r2v_analysis nil)
    (Vector type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (x skolem-const-decl "(d)" r2v_analysis nil)
    (x0 skolem-const-decl "(d)" r2v_analysis nil)
    (below type-eq-decl nil naturalnumbers nil)
    (nth_sum formula-decl nil vector_arithmetic mv_analysis)
    (length_cons formula-decl nil r2v_def nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (nth const-decl "[(d) -> real]" r2v_def nil)
    (* const-decl "VectorN(length(v2))" matrices matrices)
    (real_times_real_is_real application-judgement "real" reals nil)
    (non_empty formula-decl nil r2v_analysis nil)
    (choose const-decl "(p)" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (nth_dist formula-decl nil vector_arithmetic mv_analysis)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (scal def-decl "VectorN(length(v2))" matrices matrices)
    (sub const-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (norm_inf_nth_ineq formula-decl nil norms mv_analysis)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (continuous? const-decl "bool" continuous_functions analysis)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (contp? const-decl "bool" continuity_multivar mv_analysis)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (d formal-const-decl "[real -> bool]" r2v_analysis nil)
    (continuous? const-decl "bool" continuous_functions analysis)
    (continuous? const-decl "bool" r2v_analysis nil))
   shostak))
 (cont_triv_TCC1 0
  (cont_triv_TCC1-1 nil 3788262800 ("" (subtype-tcc) nil nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices matrices))
   nil (cont_triv subtype "r2v_analysis.vv" "(list_adt[real].cons?)")))
 (cont_triv_TCC2 0
  (cont_triv_TCC2-1 nil 3788262800 ("" (subtype-tcc) nil nil)
   ((length_singleton formula-decl nil more_list_props structures)) nil
   (cont_triv subtype
    "(: r2v_analysis.f(list_adt[real].car(r2v_analysis.v)) :)"
    "matrices.VectorN(1)")))
 (cont_triv 0
  (cont_triv-1 nil 3788262858
   ("" (skeep)
    (("" (lemma "cont_lift[1]")
      (("" (inst -1 "d" "f") (("" (assert) nil nil)) nil)) nil))
    nil)
   ((cont_lift formula-decl nil continuity_multivar mv_analysis)
    (d formal-const-decl "[real -> bool]" r2v_analysis nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (cont_nn_comp_TCC1 0
  (cont_nn_comp_TCC1-1 nil 3788632052 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (d formal-const-decl "[real -> bool]" r2v_analysis nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (r2v type-eq-decl nil r2v_def nil)
    (continuous? const-decl "bool" r2v_analysis nil)
    (VectorN type-eq-decl nil matrices matrices)
    (r2v_n type-eq-decl nil r2v_def nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (norm? const-decl "bool" norms mv_analysis)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (* const-decl "VectorN(length(v2))" matrices matrices)
    (continuous? const-decl "bool" continuous_functions analysis)
    (continuous? const-decl "bool" continuous_functions analysis)
    (nth const-decl "[(d) -> real]" r2v_def nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis))
   nil
   (cont_nn_comp subtype "r2v_analysis.y(r2v_analysis.x)"
    "(list_adt[real].cons?)")))
 (cont_nn_comp 0
  (cont_nn_comp-1 nil 3788632098
   ("" (skeep)
    (("" (typepred "y")
      (("" (lemma "cont_entry_v")
        (("" (inst -1 "y")
          (("1" (assert)
            (("1" (expand "contD?" -1)
              (("1" (expand "continuous?" 1)
                (("1" (skeep 1)
                  (("1" (typepred "x0")
                    (("1" (inst -2 "(: x0 :)")
                      (("1" (assert)
                        (("1" (expand "contp?" -2)
                          (("1" (expand "continuous?" 1)
                            (("1" (skeep 1)
                              (("1"
                                (inst -2 "norm_inf(1)" "_")
                                (("1"
                                  (typepred "y")
                                  (("1"
                                    (inst -3 "nn")
                                    (("1"
                                      (inst -3 "epsilon")
                                      (("1"
                                        (skeep)
                                        (("1"
                                          (inst 1 "delta")
                                          (("1"
                                            (skeep 1)
                                            (("1"
                                              (inst -3 "(: x_1 :)")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (split -3)
                                                  (("1"
                                                    (lemma
                                                     "reverse_triag")
                                                    (("1"
                                                      (inst
                                                       -1
                                                       "length(y)"
                                                       "y(x_1)"
                                                       "y(x0)"
                                                       "nn")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (hide 2)
                                                        (("2"
                                                          (typepred
                                                           "nn")
                                                          (("2"
                                                            (expand
                                                             "length"
                                                             1
                                                             1)
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (expand
                                                         "length"
                                                         1
                                                         2)
                                                        (("3"
                                                          (typepred
                                                           "y")
                                                          (("3"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("4"
                                                        (expand
                                                         "length"
                                                         1
                                                         2)
                                                        (("4"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("5"
                                                        (expand
                                                         "length"
                                                         1
                                                         1)
                                                        (("5"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (typepred "nn")
                                      (("2"
                                        (expand "length" 1 1)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (typepred "y")
            (("2" (lemma "length_cons")
              (("2" (inst -1 "y")
                (("2" (assert)
                  (("2" (expand "length" 1 1) (("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((r2v_n type-eq-decl nil r2v_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (continuous? const-decl "bool" r2v_analysis nil)
    (r2v type-eq-decl nil r2v_def nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (d formal-const-decl "[real -> bool]" r2v_analysis nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (y skolem-const-decl "{yy: r2v_n(n) | continuous?(yy)}"
     r2v_analysis nil)
    (n skolem-const-decl "posnat" r2v_analysis nil)
    (cons? const-decl "bool" r2v_def nil)
    (contD? const-decl "bool" continuity_multivar mv_analysis)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (length_singleton formula-decl nil more_list_props structures)
    (contp? const-decl "bool" continuity_multivar mv_analysis)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (x_1 skolem-const-decl "(d)" r2v_analysis nil)
    (x0 skolem-const-decl "(d)" r2v_analysis nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (reverse_triag formula-decl nil norms mv_analysis)
    (nth const-decl "[(d) -> real]" r2v_def nil)
    (norm_inf const-decl "[(cons?) -> nonneg_real]" norms mv_analysis)
    (max def-decl "real" norms mv_analysis)
    (abs def-decl "{l: list | length(l) = length(ll)}" norms
         mv_analysis)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (sub const-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (add def-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (scal def-decl "VectorN(length(v2))" matrices matrices)
    (minus_real_is_real application-judgement "real" reals nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nn skolem-const-decl "(norm?(n))" r2v_analysis nil)
    (length const-decl "nat" r2v_def nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (norm? const-decl "bool" norms mv_analysis)
    (norm_inf const-decl "(norm?(m))" norms mv_analysis)
    (continuous? const-decl "bool" continuous_functions analysis)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (continuous? const-decl "bool" continuous_functions analysis)
    (length_cons formula-decl nil r2v_def nil)
    (cont_entry_v formula-decl nil r2v_analysis nil))
   shostak))
 (cont_sub_TCC1 0
  (cont_sub_TCC1-1 nil 3788258600
   ("" (skeep)
    (("" (inst 1 "n")
      (("" (skeep 1)
        (("" (typepred "f(x_1)-g(x_1)" "f(x_1)" "g(x_1)")
          (("" (replace -4)
            (("" (replace -6) (("" (grind) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (continuous? const-decl "bool" r2v_analysis nil)
    (r2v type-eq-decl nil r2v_def nil)
    (r2v_n type-eq-decl nil r2v_def nil)
    (d formal-const-decl "[real -> bool]" r2v_analysis nil)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (VectorN type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Vector type-eq-decl nil matrices matrices)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_max application-judgement "{k: posint | i <= k AND j <= k}"
     real_defs nil)
    (posrat_max application-judgement "{s: posrat | s >= q AND s >= r}"
     real_defs nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (add def-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (scal def-decl "VectorN(length(v2))" matrices matrices)
    (sub const-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices))
   nil
   (cont_sub subtype
    "LAMBDA (x: (r2v_analysis.d)): (matrices.-)(r2v_analysis.f(x), r2v_analysis.g(x))"
    "r2v[(d)]")))
 (cont_sub 0
  (cont_sub-1 nil 3788258733
   ("" (skeep)
    (("" (typepred "f" "g")
      (("" (expand "continuous?" 1)
        (("" (skeep 1)
          (("" (expand "continuous?" -)
            (("" (inst -1 "i")
              (("1" (inst -2 "i")
                (("1" (lemma "diff_cont_fun[(d)]")
                  (("1" (inst -1 "nth(f,i)" "nth(g,i)")
                    (("1" (assert)
                      (("1" (expand "-" -1)
                        (("1" (expand "nth" 1 1)
                          (("1" (expand "nth" -1)
                            (("1" (assert)
                              (("1"
                                (case
                                 "(LAMBDA (x: (d)) -> real: nth(f(x), i) - nth(g(x), i)) = (LAMBDA (x_1: (d)) -> real: nth(f(x_1) - g(x_1), i))")
                                (("1" (assert) nil nil)
                                 ("2"
                                  (decompose-equality 1)
                                  (("1"
                                    (hide -)
                                    (("1"
                                      (hide 2)
                                      (("1"
                                        (lemma "nth_sum")
                                        (("1"
                                          (expand "-" 1)
                                          (("1"
                                            (expand "sub")
                                            (("1"
                                              (inst
                                               -1
                                               "f(x!1)"
                                               "scal(-1,g(x!1))")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (inst -1 "i")
                                                  (("1"
                                                    (expand "+" -1)
                                                    (("1"
                                                      (replace -1 1)
                                                      (("1"
                                                        (lemma
                                                         "nth_dist")
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "g(x!1)"
                                                           "-1"
                                                           "i")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (expand
                                                               "*"
                                                               -1)
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (typepred "g(x!1)")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (skeep 1)
                                    (("2"
                                      (typepred "i")
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (skeep 1)
                                    (("3"
                                      (typepred "i")
                                      (("3"
                                        (expand "length" -1)
                                        (("3"
                                          (typepred
                                           "f(choose((d)))"
                                           "g(choose((d)))")
                                          (("3"
                                            (typepred "f" "g")
                                            (("3"
                                              (typepred "f(x)" "g(x)")
                                              (("3"
                                                (hide -1 -3 -7 -9)
                                                (("3"
                                                  (typepred
                                                   "f(choose((d))) - g(choose((d)))")
                                                  (("3"
                                                    (replace -7 -2)
                                                    (("3"
                                                      (replace -8 -2)
                                                      (("3"
                                                        (expand
                                                         "max"
                                                         -2)
                                                        (("3"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("4"
                                    (skeep 1)
                                    (("4"
                                      (typepred "f(x)")
                                      (("4"
                                        (assert)
                                        (("4"
                                          (typepred "i")
                                          (("4"
                                            (expand "length" -1)
                                            (("4"
                                              (typepred
                                               "f(choose((d))) - g(choose((d)))")
                                              (("4"
                                                (typepred
                                                 "f(choose((d)))"
                                                 "g(choose((d)))")
                                                (("4"
                                                  (replace -2)
                                                  (("4"
                                                    (replace -4)
                                                    (("4"
                                                      (expand "max" -)
                                                      (("4"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (skeep 1)
                                  (("3"
                                    (typepred "i")
                                    (("3"
                                      (expand "length" -1)
                                      (("3" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("4"
                                  (skeep 1)
                                  (("4"
                                    (typepred "i")
                                    (("4"
                                      (expand "length" -1)
                                      (("4"
                                        (typepred
                                         "f(choose((d)))"
                                         "g(choose((d)))")
                                        (("4"
                                          (typepred
                                           "f(choose((d))) - g(choose((d)))")
                                          (("4"
                                            (hide -1 -3 -5)
                                            (("4"
                                              (replace -2)
                                              (("4"
                                                (replace -3)
                                                (("4"
                                                  (expand "max" -1)
                                                  (("4"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("5"
                                  (skeep 1)
                                  (("5"
                                    (typepred "i")
                                    (("5"
                                      (expand "length" -1)
                                      (("5"
                                        (typepred
                                         "f(choose((d))) - g(choose((d)))")
                                        (("5"
                                          (typepred
                                           "f(choose((d)))"
                                           "g(choose((d)))")
                                          (("5"
                                            (replace -2)
                                            (("5"
                                              (replace -4)
                                              (("5"
                                                (expand "max" -6)
                                                (("5"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (typepred "i")
                  (("2" (expand "length" 1 1)
                    (("2" (expand "length" -1 1)
                      (("2"
                        (typepred "f(choose((d)))" "g(choose((d)))")
                        (("2"
                          (typepred "f(choose((d))) - g(choose((d)))")
                          (("2" (replace -4)
                            (("2" (replace -6)
                              (("2"
                                (expand "max")
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (expand "length" 1 1)
                (("2" (typepred "i")
                  (("2" (expand "length" -1 1)
                    (("2" (typepred "f(choose((d))) - g(choose((d)))")
                      (("2"
                        (typepred "f(choose((d)))" "g(choose((d)))")
                        (("2" (replace -2)
                          (("2" (replace -4)
                            (("2" (expand "max" -6)
                              (("2" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((r2v_n type-eq-decl nil r2v_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (continuous? const-decl "bool" r2v_analysis nil)
    (r2v type-eq-decl nil r2v_def nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (d formal-const-decl "[real -> bool]" r2v_analysis nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (i skolem-const-decl
       "{ii: nat | ii < length(LAMBDA (x: (d)): f(x) - g(x))}"
       r2v_analysis nil)
    (g skolem-const-decl "{ff: r2v_n(n) | continuous?(ff)}"
     r2v_analysis nil)
    (f skolem-const-decl "{ff: r2v_n(n) | continuous?(ff)}"
     r2v_analysis nil)
    (n skolem-const-decl "posnat" r2v_analysis nil)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (Vector type-eq-decl nil matrices matrices)
    (length const-decl "nat" r2v_def nil)
    (< const-decl "bool" reals nil)
    (diff_cont_fun formula-decl nil continuous_functions analysis)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (scal def-decl "VectorN(length(v2))" matrices matrices)
    (x!1 skolem-const-decl "(d)" r2v_analysis nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (* const-decl "VectorN(length(v2))" matrices matrices)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nth_dist formula-decl nil vector_arithmetic mv_analysis)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (sub const-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (nth_sum formula-decl nil vector_arithmetic mv_analysis)
    (set type-eq-decl nil sets nil)
    (nonempty? const-decl "bool" sets nil)
    (choose const-decl "(p)" sets nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[T -> real]" real_fun_ops reals)
    (nth const-decl "[(d) -> real]" r2v_def nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (add def-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices))
   shostak))
 (cont_int 0
  (cont_int-1 nil 3787321864
   ("" (skeep)
    (("" (skeep)
      (("" (expand "continuous?" -1)
        (("" (expand "integrable?" 1)
          (("" (skeep)
            (("" (inst -1 "i")
              (("" (lemma "continuous_Integrable?[(d)]")
                (("1" (inst -1 "a" "b" "nth(f,i)")
                  (("1" (assert)
                    (("1" (expand "continuous?" -2)
                      (("1" (assert)
                        (("1" (split -1)
                          (("1" (assert)
                            (("1" (expand "Integrable?" -1)
                              (("1" (propax) nil nil)) nil))
                            nil)
                           ("2" (skeep) (("2" (inst -1 "x") nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "not_one_element?" 1)
                  (("2" (skeep)
                    (("2" (lemma "not_one_element")
                      (("2" (expand "not_one_element?" -1)
                        (("2" (inst -1 "x") nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("3" (lemma "connected") (("3" (propax) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((integrable? const-decl "bool" r2v_analysis nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (d formal-const-decl "[real -> bool]" r2v_analysis nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (r2v type-eq-decl nil r2v_def nil)
    (length const-decl "nat" r2v_def nil)
    (connected formula-decl nil r2v_analysis nil)
    (not_one_element formula-decl nil r2v_analysis nil)
    (nth const-decl "[(d) -> real]" r2v_def nil)
    (> const-decl "bool" reals nil)
    (continuous? const-decl "bool" continuous_functions analysis)
    (Integrable? const-decl "bool" integral_def analysis)
    (Closed_interval type-eq-decl nil intervals_real reals)
    (<= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (connected? const-decl "bool" deriv_domain_def analysis)
    (continuous_Integrable? formula-decl nil integral analysis)
    (continuous? const-decl "bool" r2v_analysis nil))
   nil))
 (cont_Int 0
  (cont_Int-1 nil 3787408885
   ("" (skeep)
    (("" (skeep)
      (("" (case "b=a")
        (("1" (expand "Integrable?" 1 1)
          (("1" (skeep)
            (("1" (expand "Integrable?" 1 1) (("1" (assert) nil nil))
              nil))
            nil))
          nil)
         ("2" (case "a>b")
          (("1" (lemma "cont_int")
            (("1" (inst -1 "f")
              (("1" (assert)
                (("1" (inst -1 "b" "a")
                  (("1" (expand "Integrable?" 2)
                    (("1" (assert)
                      (("1" (skeep)
                        (("1" (expand "integrable?" -1)
                          (("1" (expand "Integrable?" 2)
                            (("1" (inst -1 "i") nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (assert)
            (("2" (case "NOT b>a")
              (("1" (assert) nil nil)
               ("2" (lemma "cont_int")
                (("2" (inst -1 "f")
                  (("2" (assert)
                    (("2" (expand "Integrable?" 3 1)
                      (("2" (inst -1 "a" "b")
                        (("2" (expand "integrable?" -1)
                          (("2" (skeep)
                            (("2" (expand "Integrable?" 3)
                              (("2" (inst -1 "i") nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((> const-decl "bool" reals nil) (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (r2v type-eq-decl nil r2v_def nil)
    (integrable? const-decl "bool" r2v_analysis nil)
    (length const-decl "nat" r2v_def nil)
    (< const-decl "bool" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (cont_int formula-decl nil r2v_analysis nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Integrable? const-decl "bool" r2v_analysis nil)
    (Integrable? const-decl "bool" integral_def analysis)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (d formal-const-decl "[real -> bool]" r2v_analysis nil))
   shostak))
 (Int_cont_TCC1 0
  (Int_cont_TCC1-1 nil 3788632953
   ("" (skeep)
    (("" (typepred "f")
      (("" (lemma "cont_Int")
        (("" (inst -1 "f")
          (("" (assert) (("" (inst -1 "a" "x") nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((continuous? const-decl "bool" r2v_analysis nil)
    (r2v type-eq-decl nil r2v_def nil)
    (length def-decl "nat" list_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (d formal-const-decl "[real -> bool]" r2v_analysis nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (cont_Int formula-decl nil r2v_analysis nil))
   nil
   (Int_cont subtype "r2v_analysis.f"
    "{ff: r2v_def[(r2v_analysis.d)].r2v | r2v_analysis.Integrable?(r2v_analysis.a, r2v_analysis.x, ff)}")))
 (Int_cont_TCC2 0
  (Int_cont_TCC2-1 nil 3788632953
   ("" (skeep)
    (("" (typepred "f")
      (("" (skeep -1)
        (("" (inst 1 "m")
          (("" (skeep 1)
            (("" (assert)
              (("" (typepred "Integral(a,x_1,f)")
                (("" (assert)
                  (("" (expand "length" -2 2)
                    (("" (inst-cp -3 "choose((d))")
                      (("" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((continuous? const-decl "bool" r2v_analysis nil)
    (r2v type-eq-decl nil r2v_def nil)
    (length def-decl "nat" list_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (d formal-const-decl "[real -> bool]" r2v_analysis nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis)
    (choose const-decl "(p)" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (Integrable? const-decl "bool" r2v_analysis nil)
    (length const-decl "nat" r2v_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (Integral def-decl "VectorN(length(f))" r2v_analysis nil))
   nil
   (Int_cont subtype
    "LAMBDA (x: (r2v_analysis.d)): r2v_analysis.Integral(r2v_analysis.a, x, r2v_analysis.f)"
    "r2v[(d)]")))
 (Int_cont 0
  (Int_cont-1 nil 3788633067
   ("" (skeep)
    (("" (lemma "fundamental")
      (("" (expand "continuous?" 1)
        (("" (skeep 1)
          (("" (lemma "Int_nth")
            ((""
              (case "nth(LAMBDA (x: (d)): Integral(a, x, f), i) = LAMBDA(x:(d)): Integral(a,x,nth(f,i))")
              (("1" (replace -1)
                (("1"
                  (inst -3 "LAMBDA(x:(d)): Integral(a,x,nth(f,i))" "a"
                   "nth(f,i)")
                  (("1" (assert)
                    (("1" (typepred "f")
                      (("1" (expand "continuous?" -2)
                        (("1" (inst -2 "i")
                          (("1" (assert)
                            (("1" (flatten)
                              (("1"
                                (lemma "derivable_cont[(d)]")
                                (("1"
                                  (inst
                                   -1
                                   "LAMBDA (x: (d)): Integral(a, x, nth(f, i))")
                                  (("1"
                                    (lemma "cont_Int")
                                    (("1"
                                      (inst -1 "f")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (skeep 1)
                                          (("1"
                                            (inst -1 "a" "x")
                                            (("1"
                                              (expand "Integrable?" -1)
                                              (("1"
                                                (inst -1 "i")
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert)
                            (("2" (typepred "i")
                              (("2"
                                (expand "length" -1 1)
                                (("2"
                                  (expand "length" 1 1)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (expand "length" 1 1)
                    (("2" (typepred "i")
                      (("2" (expand "length" -1 1)
                        (("2" (assert)
                          (("2"
                            (typepred "Integral(a, choose((d)), f)")
                            (("2" (expand "length" -2 2)
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (skeep 1)
                    (("3" (lemma "cont_Int")
                      (("3" (inst -1 "f")
                        (("3" (assert)
                          (("3" (inst -1 "a" "x")
                            (("3" (expand "Integrable?" -1)
                              (("3" (inst -1 "i") nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("4" (assert)
                    (("4" (skeep 1)
                      (("4" (typepred "i")
                        (("4" (expand "length" -)
                          (("4" (expand "length" 1)
                            (("4" (assert)
                              (("4"
                                (typepred
                                 "Integral(a, choose((d)), f)")
                                (("4"
                                  (assert)
                                  (("4"
                                    (expand "length" -2 2)
                                    (("4" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (decompose-equality 1)
                (("1" (expand "nth" 1 1)
                  (("1" (assert)
                    (("1" (inst -1 "a" "x!1" "f" "i") nil nil)) nil))
                  nil)
                 ("2" (skeep 1)
                  (("2" (lemma "cont_Int")
                    (("2" (inst -1 "f")
                      (("2" (assert)
                        (("2" (inst -1 "a" "x")
                          (("2" (expand "Integrable?" -1)
                            (("2" (inst -1 "i") nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (skeep 1)
                  (("3" (typepred "i")
                    (("3" (expand "length" -1 1)
                      (("3" (assert) nil nil)) nil))
                    nil))
                  nil)
                 ("4" (typepred "f")
                  (("4" (skeep -1)
                    (("4" (inst 1 "m")
                      (("4" (skeep 1)
                        (("4" (typepred "Integral(a,x_1,f)")
                          (("4" (expand "length" -2 2)
                            (("4" (inst -3 "choose((d))")
                              (("4" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("5" (skeep 1)
                  (("5" (lemma "cont_Int")
                    (("5" (inst -1 "f")
                      (("5" (assert) (("5" (inst -1 "a" "x") nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (assert)
                (("3" (skeep 1)
                  (("3" (lemma "cont_Int")
                    (("3" (inst -1 "f")
                      (("3" (assert)
                        (("3" (inst -1 "a" "x")
                          (("3" (expand "Integrable?" -1)
                            (("3" (inst -1 "i") nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("4" (skeep 1)
                (("4" (typepred "i")
                  (("4" (expand "length" -1 1) (("4" (assert) nil nil))
                    nil))
                  nil))
                nil)
               ("5" (typepred "f")
                (("5" (skeep -1)
                  (("5" (inst 1 "m")
                    (("5" (skeep 1)
                      (("5" (typepred "Integral(a,x_1,f)")
                        (("5" (expand "length" -2 2)
                          (("5" (assert)
                            (("5" (inst -3 "choose((d))")
                              (("5" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("6" (skeep 1)
                (("6" (lemma "cont_Int")
                  (("6" (inst -1 "f")
                    (("6" (assert) (("6" (inst -1 "a" "x") nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((d formal-const-decl "[real -> bool]" r2v_analysis nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (fundamental formula-decl nil fundamental_theorem analysis)
    (Integral const-decl "real" integral_def analysis)
    (Integrable_funs type-eq-decl nil integral_def analysis)
    (Integrable? const-decl "bool" integral_def analysis)
    (Integral def-decl "VectorN(length(f))" r2v_analysis nil)
    (VectorN type-eq-decl nil matrices matrices)
    (Integrable? const-decl "bool" r2v_analysis nil)
    (nth const-decl "[(d) -> real]" r2v_def nil)
    (length const-decl "nat" r2v_def nil)
    (length def-decl "nat" list_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil) (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (r2v type-eq-decl nil r2v_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (a skolem-const-decl "(d)" r2v_analysis nil)
    (f skolem-const-decl "{ff: r2v | continuous?(ff)}" r2v_analysis
     nil)
    (i skolem-const-decl
       "{ii: nat | ii < length(LAMBDA (x: (d)): Integral(a, x, f))}"
       r2v_analysis nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (derivable? const-decl "bool" derivatives analysis)
    (deriv_fun type-eq-decl nil derivatives analysis)
    (cont_Int formula-decl nil r2v_analysis nil)
    (derivable_cont judgement-tcc nil derivatives analysis)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis)
    (choose const-decl "(p)" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (Int_nth formula-decl nil r2v_analysis nil)
    (continuous? const-decl "bool" r2v_analysis nil))
   shostak))
 (der_cont 0
  (der_cont-1 nil 3788096431
   ("" (skeep)
    (("" (expand "derivable?")
      (("" (expand "continuous?" 1)
        (("" (skeep)
          (("" (inst -1 "i")
            (("" (lemma "derivable_cont[(d)]")
              (("" (inst -1 "nth(f,i)") nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((derivable? const-decl "bool" r2v_analysis nil)
    (derivable_cont judgement-tcc nil derivatives analysis)
    (f skolem-const-decl "r2v[(d)]" r2v_analysis nil)
    (i skolem-const-decl "{ii: nat | ii < length(f)}" r2v_analysis nil)
    (nth const-decl "[(d) -> real]" r2v_def nil)
    (deriv_fun type-eq-decl nil derivatives analysis)
    (derivable? const-decl "bool" derivatives analysis)
    (length const-decl "nat" r2v_def nil)
    (r2v type-eq-decl nil r2v_def nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (d formal-const-decl "[real -> bool]" r2v_analysis nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (continuous? const-decl "bool" r2v_analysis nil))
   shostak)))

