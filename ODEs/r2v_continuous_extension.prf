(r2v_continuous_extension
 (IMP_r2v_analysis_TCC1 0
  (IMP_r2v_analysis_TCC1-1 nil 3789403681
   ("" (lemma "ci_nonempty")
    (("" (inst?)
      (("" (lemma "closed_interval") (("" (propax) nil nil)) nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (closed_interval? const-decl "bool" interval_def nil)
    (d formal-const-decl "[real -> bool]" r2v_continuous_extension nil)
    (closed_interval formula-decl nil r2v_continuous_extension nil)
    (ci_nonempty formula-decl nil interval_def nil))
   nil
   (IMP_r2v_analysis assuming
    "r2v_analysis[r2v_continuous_extension.d].r2v_analysis"
    "non_empty: ASSUMPTION sets[real].nonempty?(r2v_analysis.d)")))
 (IMP_r2v_analysis_TCC2 0
  (IMP_r2v_analysis_TCC2-1 nil 3789403681
   ("" (lemma "closed_interval")
    (("" (lemma "ci_connected") (("" (inst?) nil nil)) nil)) nil)
   ((ci_connected formula-decl nil interval_def nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (closed_interval? const-decl "bool" interval_def nil)
    (d formal-const-decl "[real -> bool]" r2v_continuous_extension nil)
    (closed_interval formula-decl nil r2v_continuous_extension nil))
   nil
   (IMP_r2v_analysis assuming
    "r2v_analysis[r2v_continuous_extension.d].r2v_analysis"
    "connected: ASSUMPTION deriv_domain_def[(r2v_analysis.d)].connected?")))
 (IMP_r2v_analysis_TCC3 0
  (IMP_r2v_analysis_TCC3-1 nil 3789403681
   ("" (lemma "ci_not_one_element")
    (("" (lemma "closed_interval") (("" (inst?) nil nil)) nil)) nil)
   ((closed_interval formula-decl nil r2v_continuous_extension nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (closed_interval? const-decl "bool" interval_def nil)
    (d formal-const-decl "[real -> bool]" r2v_continuous_extension nil)
    (ci_not_one_element formula-decl nil interval_def nil))
   nil
   (IMP_r2v_analysis assuming
    "r2v_analysis[r2v_continuous_extension.d].r2v_analysis"
    "not_one_element: ASSUMPTION deriv_domain_def[(r2v_analysis.d)].not_one_element?")))
 (d_b_TCC1 0
  (d_b_TCC1-1 nil 3789403681 ("" (subtype-tcc) nil nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic
     Optimization_Dev)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil))
   nil
   (d_b subtype "r2v_continuous_extension.dd"
    "(list_adt[real].cons?)")))
 (d_b_TCC2 0
  (d_b_TCC2-1 nil 3789403681
   ("" (skeep) (("" (typepred "dd") (("" (grind) nil nil)) nil)) nil)
   ((real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (length def-decl "nat" list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     Optimization_Dev))
   nil
   (d_b subtype "list_adt[real].cdr(r2v_continuous_extension.dd)"
    "(list_adt[real].cons?)")))
 (d_b_TCC3 0
  (d_b_TCC3-1 nil 3789403681
   ("" (lemma "closed_interval")
    (("" (expand "closed_interval?" -1)
      (("" (skeep -1)
        (("" (expand "closed_interval?" -1)
          (("" (inst 1 "(:a, b:)")
            (("" (split 1)
              (("1" (grind) nil nil)
               ("2" (inst -1 "a") (("2" (assert) nil nil)) nil)
               ("3" (inst -1 "b") (("3" (assert) nil nil)) nil)
               ("4" (skeep 1)
                (("4" (inst -1 "x")
                  (("4" (assert)
                    (("4" (flatten)
                      (("4" (split 1)
                        (("1" (propax) nil nil) ("2" (propax) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((closed_interval? const-decl "bool" interval_def nil)
    (closed_interval? const-decl "bool" interval_def nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (a skolem-const-decl "real" r2v_continuous_extension nil)
    (b skolem-const-decl "{b: real | a < b}" r2v_continuous_extension
     nil)
    (< const-decl "bool" reals nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (<= const-decl "bool" reals nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (d formal-const-decl "[real -> bool]" r2v_continuous_extension nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     Optimization_Dev)
    (closed_interval formula-decl nil r2v_continuous_extension nil))
   nil
   (d_b existence ""
    "{dd: list_adt[real].list | booleans.AND((booleans.AND(list_props[real].length(dd) = 2, (booleans.AND(r2v_continuous_extension.d(list_adt[real].car(dd)), r2v_continuous_extension.d(list_adt[real].car(list_adt[real].cdr(dd))))))), FORALL (x: reals.real): booleans.IFF((booleans.AND(reals.<=(list_adt[real].car(dd), x), reals.<=(x, list_adt[real].car(list_adt[real].cdr(dd))))), r2v_continuous_extension.d(x)))}")))
 (ext_c_TCC1 0
  (ext_c_TCC1-1 nil 3789403681 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     Optimization_Dev))
   nil
   (ext_c subtype "r2v_continuous_extension.d_b"
    "(list_adt[real].cons?)")))
 (ext_c_TCC2 0
  (ext_c_TCC2-1 nil 3789403681 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     Optimization_Dev)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (ext_c subtype "list_adt[real].car(r2v_continuous_extension.d_b)"
    "(r2v_continuous_extension.d)")))
 (ext_c_TCC3 0
  (ext_c_TCC3-1 nil 3789403681
   ("" (skeep)
    (("" (grind) (("" (typepred "d_b") (("" (grind) nil nil)) nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     Optimization_Dev)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (d formal-const-decl "[real -> bool]" r2v_continuous_extension nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (d_b const-decl "{dd: list[real] |
   (length(dd) = 2 AND (d(car(dd)) AND d(car(cdr(dd))))) AND
    FORALL (x: real): (car(dd) <= x AND x <= car(cdr(dd))) IFF d(x)}"
     r2v_continuous_extension nil))
   nil
   (ext_c subtype "list_adt[real].cdr(r2v_continuous_extension.d_b)"
    "(list_adt[real].cons?)")))
 (ext_c_TCC4 0
  (ext_c_TCC4-1 nil 3789403681 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     Optimization_Dev)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (ext_c subtype
    "list_adt[real].car(list_adt[real].cdr(r2v_continuous_extension.d_b))"
    "(r2v_continuous_extension.d)")))
 (ext_c_TCC5 0
  (ext_c_TCC5-1 nil 3789403681
   ("" (skeep)
    (("" (typepred "d_b")
      (("" (inst -5 "x") (("" (assert) nil nil)) nil)) nil))
    nil)
   ((d_b const-decl "{dd: list[real] |
   (length(dd) = 2 AND (d(car(dd)) AND d(car(cdr(dd))))) AND
    FORALL (x: real): (car(dd) <= x AND x <= car(cdr(dd))) IFF d(x)}"
     r2v_continuous_extension nil)
    (<= const-decl "bool" reals nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (d formal-const-decl "[real -> bool]" r2v_continuous_extension nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     Optimization_Dev))
   nil
   (ext_c subtype "r2v_continuous_extension.x"
    "(r2v_continuous_extension.d)")))
 (ext_c_TCC6 0
  (ext_c_TCC6-1 nil 3789403681
   ("" (skeep 1)
    (("" (skeep 1)
      (("" (assert)
        (("" (typepred "x_1")
          (("" (lift-if 1)
            (("" (split 1)
              (("1" (flatten)
                (("1" (typepred "d_b")
                  (("1" (inst -5 "x_1") (("1" (assert) nil nil)) nil))
                  nil))
                nil)
               ("2" (flatten)
                (("2" (split 2)
                  (("1" (flatten)
                    (("1" (assert)
                      (("1" (typepred "d_b")
                        (("1" (inst -5 "x_1") (("1" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (propax) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((d formal-const-decl "[real -> bool]" r2v_continuous_extension nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (d_b const-decl "{dd: list[real] |
   (length(dd) = 2 AND (d(car(dd)) AND d(car(cdr(dd))))) AND
    FORALL (x: real): (car(dd) <= x AND x <= car(cdr(dd))) IFF d(x)}"
     r2v_continuous_extension nil)
    (<= const-decl "bool" reals nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     Optimization_Dev))
   nil
   (ext_c subtype
    "LAMBDA (x: reals.real): IF reals.<(x, list_adt[real].car(r2v_continuous_extension.d_b)) THEN r2v_continuous_extension.f(list_adt[real].car(r2v_continuous_extension.d_b)) ELSIF reals.>(x, list_adt[real].car(list_adt[real].cdr(r2v_continuous_extension.d_b))) THEN r2v_continuous_extension.f(list_adt[real].car(list_adt[real].cdr(r2v_continuous_extension.d_b))) ELSE r2v_continuous_extension.f(x) ENDIF"
    "{ff: [reals.real -> matrices.VectorN(r2v_continuous_extension.n)] | FORALL (x: (r2v_continuous_extension.d)): ff(x) = r2v_continuous_extension.f(x)}")))
 (ext_cont_TCC1 0
  (ext_cont_TCC1-1 nil 3789403681
   ("" (skeep)
    (("" (typepred "ext_c(n,f)")
      (("" (typepred "f")
        (("" (inst 1 "n")
          (("" (skeep 1)
            (("" (inst -2 "x")
              (("1" (assert) nil nil)
               ("2" (typepred "d_b")
                (("2" (inst -5 "x") (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((continuous? const-decl "bool" r2v_analysis nil)
    (r2v type-eq-decl nil r2v_def nil)
    (ext_c const-decl
     "{ff: [real -> VectorN(n)] | FORALL (x: (d)): ff(x) = f(x)}"
     r2v_continuous_extension nil)
    (r2v_n type-eq-decl nil r2v_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (list type-decl nil list_adt nil)
    (d formal-const-decl "[real -> bool]" r2v_continuous_extension nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (x skolem-const-decl "real" r2v_continuous_extension nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     Optimization_Dev)
    (d_b const-decl "{dd: list[real] |
   (length(dd) = 2 AND (d(car(dd)) AND d(car(cdr(dd))))) AND
    FORALL (x: real): (car(dd) <= x AND x <= car(cdr(dd))) IFF d(x)}"
     r2v_continuous_extension nil)
    (<= const-decl "bool" reals nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil))
   nil
   (ext_cont subtype
    "r2v_continuous_extension.ext_c(r2v_continuous_extension.n, r2v_continuous_extension.f)"
    "r2v[LAMBDA (x: real): TRUE]")))
 (ext_cont_TCC2 0
  (ext_cont_TCC2-1 nil 3789403681 ("" (assuming-tcc) nil nil)
   ((member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (nonempty? const-decl "bool" sets nil))
   nil
   (ext_cont assuming
    "r2v_analysis[LAMBDA (x: reals.real): booleans.TRUE].r2v_analysis"
    "non_empty: ASSUMPTION sets[real].nonempty?(r2v_analysis.d)")))
 (ext_cont_TCC3 0
  (ext_cont_TCC3-1 nil 3789403681 ("" (assuming-tcc) nil nil)
   ((connected? const-decl "bool" deriv_domain_def analysis)) nil
   (ext_cont assuming
    "r2v_analysis[LAMBDA (x: reals.real): booleans.TRUE].r2v_analysis"
    "connected: ASSUMPTION deriv_domain_def[(r2v_analysis.d)].connected?")))
 (ext_cont_TCC4 0
  (ext_cont_TCC4-1 nil 3789403681
   ("" (skeep)
    (("" (expand "not_one_element?" 1)
      (("" (skeep) (("" (inst 1 "x+1") (("" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((not_one_element? const-decl "bool" deriv_domain_def analysis)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields
       nil))
   nil
   (ext_cont assuming
    "r2v_analysis[LAMBDA (x: reals.real): booleans.TRUE].r2v_analysis"
    "not_one_element: ASSUMPTION deriv_domain_def[(r2v_analysis.d)].not_one_element?")))
 (ext_cont 0
  (ext_cont-1 nil 3789404134
   ("" (skeep 1)
    (("" (typepred "f")
      (("" (expand "continuous?" 1)
        (("" (skeep 1)
          (("" (expand "continuous?" -1)
            (("" (inst -1 "i")
              (("1" (expand "continuous?")
                (("1" (skeep 1)
                  (("1" (case "NOT d(x0)")
                    (("1" (typepred "d_b")
                      (("1" (inst -5 "x0")
                        (("1" (assert)
                          (("1" (case "x0<car(d_b)")
                            (("1" (expand "continuous?" 3)
                              (("1"
                                (skeep 3)
                                (("1"
                                  (inst 3 "(car(d_b)-x0)/2")
                                  (("1"
                                    (skeep)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (case "NOT d(x_1)")
                                        (("1"
                                          (reveal -)
                                          (("1"
                                            (inst -1 "x_1")
                                            (("1"
                                              (flatten)
                                              (("1" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (typepred "d_b")
                                          (("2"
                                            (inst -5 "x_1")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert)
                              (("2"
                                (case "x0>car(cdr(d_b))")
                                (("1"
                                  (expand "continuous?" 4)
                                  (("1"
                                    (skeep 4)
                                    (("1"
                                      (inst 4 "(x0-car(cdr(d_b)))/2")
                                      (("1"
                                        (skeep)
                                        (("1"
                                          (case "NOT d(x_1)")
                                          (("1"
                                            (typepred "d_b")
                                            (("1"
                                              (inst -5 "x_1")
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (expand "ext_c" 5)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand "nth" 5)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (hide -5 -6)
                                                          (("1"
                                                            (typepred
                                                             "d_b")
                                                            (("1"
                                                              (inst
                                                               -5
                                                               "x_1")
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (split
                                                                   -5)
                                                                  (("1"
                                                                    (propax)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (typepred
                                                                         "d_b")
                                                                        (("2"
                                                                          (inst-cp
                                                                           -5
                                                                           "x_1")
                                                                          (("2"
                                                                            (inst-cp
                                                                             -5
                                                                             "x0")
                                                                            (("2"
                                                                              (inst-cp
                                                                               -5
                                                                               "car(d_b)")
                                                                              (("2"
                                                                                (flatten)
                                                                                (("2"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("3"
                                                                    (assert)
                                                                    (("3"
                                                                      (lift-if
                                                                       6)
                                                                      (("3"
                                                                        (split
                                                                         6)
                                                                        (("1"
                                                                          (flatten)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (typepred
                                                                               "d_b")
                                                                              (("1"
                                                                                (inst
                                                                                 -5
                                                                                 "car(d_b)")
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (expand
                                                                               "abs"
                                                                               2)
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (assert)
                                            (("2"
                                              (typepred "d_b")
                                              (("2"
                                                (inst-cp -5 "car(d_b)")
                                                (("2"
                                                  (inst-cp
                                                   -5
                                                   "car(cdr(d_b))")
                                                  (("2"
                                                    (inst -5 "x_1")
                                                    (("2"
                                                      (flatten)
                                                      (("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "continuous?" 1)
                      (("2" (skeep 1)
                        (("2" (inst -2 "x0")
                          (("2" (expand "continuous?" -2)
                            (("2" (inst -2 "epsilon")
                              (("2"
                                (skeep -2)
                                (("2"
                                  (inst 1 "delta")
                                  (("2"
                                    (skeep 1)
                                    (("2"
                                      (case "d(x_1)")
                                      (("1"
                                        (inst -3 "x_1")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (typepred "d_b")
                                            (("1"
                                              (inst-cp -5 "x_1")
                                              (("1"
                                                (inst-cp -5 "x0")
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (assert)
                                        (("2"
                                          (typepred "d_b")
                                          (("2"
                                            (inst-cp -5 "x_1")
                                            (("2"
                                              (inst-cp -5 "x0")
                                              (("2"
                                                (flatten)
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (typepred "i")
                (("2" (typepred "ext_c(n,f)")
                  (("2" (typepred "f")
                    (("2" (expand "length" 1)
                      (("2" (typepred "f(choose(d))")
                        (("2" (expand "length" -5)
                          (("2" (expand "ext_c" -5)
                            (("2" (lift-if -5)
                              (("2"
                                (split -5)
                                (("1"
                                  (flatten)
                                  (("1" (grind) nil nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((set type-eq-decl nil sets nil)
    (nonempty? const-decl "bool" sets nil)
    (choose const-decl "(p)" sets nil)
    (continuous? const-decl "bool" continuous_functions analysis)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (nth const-decl "[(d) -> real]" r2v_def nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (x0 skolem-const-decl "real" r2v_continuous_extension nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (continuous? const-decl "bool" continuous_functions analysis)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     Optimization_Dev)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (d_b const-decl "{dd: list[real] |
   (length(dd) = 2 AND (d(car(dd)) AND d(car(cdr(dd))))) AND
    FORALL (x: real): (car(dd) <= x AND x <= car(cdr(dd))) IFF d(x)}"
     r2v_continuous_extension nil)
    (<= const-decl "bool" reals nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (x_1 skolem-const-decl "real" r2v_continuous_extension nil)
    (< const-decl "bool" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (length const-decl "nat" r2v_def nil)
    (ext_c const-decl
     "{ff: [real -> VectorN(n)] | FORALL (x: (d)): ff(x) = f(x)}"
     r2v_continuous_extension nil)
    (n skolem-const-decl "posnat" r2v_continuous_extension nil)
    (f skolem-const-decl "{ff: r2v_n(n) | continuous?[(d)](ff)}"
     r2v_continuous_extension nil)
    (i skolem-const-decl "{ii: nat | ii < length(ext_c(n, f))}"
       r2v_continuous_extension nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (d formal-const-decl "[real -> bool]" r2v_continuous_extension nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (r2v type-eq-decl nil r2v_def nil)
    (continuous? const-decl "bool" r2v_analysis nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (VectorN type-eq-decl nil matrices matrices)
    (r2v_n type-eq-decl nil r2v_def nil))
   nil))
 (ext_c_TCC7 0
  (ext_c_TCC7-1 nil 3789403681 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     Optimization_Dev)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (ext_c subtype "r2v_continuous_extension.d_b"
    "(list_adt[real].cons?)")))
 (ext_c_TCC8 0
  (ext_c_TCC8-1 nil 3789403681 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     Optimization_Dev)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (ext_c subtype "list_adt[real].car(r2v_continuous_extension.d_b)"
    "(r2v_continuous_extension.d)")))
 (ext_c_TCC9 0
  (ext_c_TCC9-1 nil 3789403681 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     Optimization_Dev)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (ext_c subtype "r2v_continuous_extension.d_b"
    "(list_adt[real].cons?)")))
 (ext_c_TCC10 0
  (ext_c_TCC10-1 nil 3789403681
   ("" (skeep) (("" (typepred "d_b") (("" (grind) nil nil)) nil)) nil)
   ((d_b const-decl "{dd: list[real] |
   (length(dd) = 2 AND (d(car(dd)) AND d(car(cdr(dd))))) AND
    FORALL (x: real): (car(dd) <= x AND x <= car(cdr(dd))) IFF d(x)}"
     r2v_continuous_extension nil)
    (<= const-decl "bool" reals nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (d formal-const-decl "[real -> bool]" r2v_continuous_extension nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     Optimization_Dev)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (ext_c subtype "list_adt[real].cdr(r2v_continuous_extension.d_b)"
    "(list_adt[real].cons?)")))
 (ext_c_TCC11 0
  (ext_c_TCC11-1 nil 3789403681 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     Optimization_Dev)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (ext_c subtype
    "list_adt[real].car(list_adt[real].cdr(r2v_continuous_extension.d_b))"
    "(r2v_continuous_extension.d)")))
 (ext_c_TCC12 0
  (ext_c_TCC12-1 nil 3789403681
   ("" (skeep)
    (("" (typepred "d_b")
      (("" (inst -5 "x") (("" (assert) nil nil)) nil)) nil))
    nil)
   ((d_b const-decl "{dd: list[real] |
   (length(dd) = 2 AND (d(car(dd)) AND d(car(cdr(dd))))) AND
    FORALL (x: real): (car(dd) <= x AND x <= car(cdr(dd))) IFF d(x)}"
     r2v_continuous_extension nil)
    (<= const-decl "bool" reals nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (d formal-const-decl "[real -> bool]" r2v_continuous_extension nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     Optimization_Dev))
   nil
   (ext_c subtype "r2v_continuous_extension.x"
    "(r2v_continuous_extension.d)")))
 (ext_c_TCC13 0
  (ext_c_TCC13-1 nil 3789403681
   ("" (skeep)
    (("" (skeep)
      (("" (typepred "d_b")
        (("" (inst -5 "x_1")
          (("" (flatten)
            (("" (typepred "d_b")
              (("" (inst -5 "car(d_b)")
                (("" (assert)
                  (("" (flatten) (("" (assert) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     Optimization_Dev)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (d formal-const-decl "[real -> bool]" r2v_continuous_extension nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (d_b const-decl "{dd: list[real] |
   (length(dd) = 2 AND (d(car(dd)) AND d(car(cdr(dd))))) AND
    FORALL (x: real): (car(dd) <= x AND x <= car(cdr(dd))) IFF d(x)}"
     r2v_continuous_extension nil))
   nil
   (ext_c subtype
    "LAMBDA (x: reals.real): IF reals.<(x, list_adt[real].car(r2v_continuous_extension.d_b)) THEN r2v_continuous_extension.f(list_adt[real].car(r2v_continuous_extension.d_b)) ELSIF reals.>(x, list_adt[real].car(list_adt[real].cdr(r2v_continuous_extension.d_b))) THEN r2v_continuous_extension.f(list_adt[real].car(list_adt[real].cdr(r2v_continuous_extension.d_b))) ELSE r2v_continuous_extension.f(x) ENDIF"
    "{ff: [reals.real -> reals.real] | FORALL (x: (r2v_continuous_extension.d)): ff(x) = r2v_continuous_extension.f(x)}")))
 (ext_const 0
  (ext_const-1 nil 3789404276
   ("" (skeep)
    (("" (expand "*" 1)
      (("" (decompose-equality 1)
        (("" (case "d(x!1)")
          (("1" (typepred "d_b")
            (("1" (inst -5 "x!1")
              (("1" (assert)
                (("1" (flatten)
                  (("1" (expand "ext_c") (("1" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (typepred "d_b")
            (("2" (inst -5 "x!1")
              (("2" (flatten)
                (("2" (assert)
                  (("2" (typepred "d_b")
                    (("2" (inst -5 "car(d_b)")
                      (("2" (flatten)
                        (("2" (assert)
                          (("2" (expand "ext_c" 3)
                            (("2" (assert)
                              (("2"
                                (split 1)
                                (("1" (assert) nil nil)
                                 ("2"
                                  (lift-if 3)
                                  (("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_times_real_is_real application-judgement "real" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (d formal-const-decl "[real -> bool]" r2v_continuous_extension nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (ext_c const-decl
     "{ff: [real -> real] | FORALL (x: (d)): ff(x) = f(x)}"
     r2v_continuous_extension nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (d_b const-decl "{dd: list[real] |
   (length(dd) = 2 AND (d(car(dd)) AND d(car(cdr(dd))))) AND
    FORALL (x: real): (car(dd) <= x AND x <= car(cdr(dd))) IFF d(x)}"
     r2v_continuous_extension nil)
    (<= const-decl "bool" reals nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     Optimization_Dev)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (* const-decl "[T -> real]" real_fun_ops reals))
   nil))
 (ext_cont_r 0
  (ext_cont_r-1 nil 3789404307
   ("" (skeep)
    (("" (typepred "f")
      (("" (expand "continuous?")
        (("" (skeep 1)
          (("" (case "NOT d(x0)")
            (("1" (typepred "d_b")
              (("1" (inst-cp -5 "x0")
                (("1" (inst -5 "car(d_b)")
                  (("1" (flatten)
                    (("1" (assert)
                      (("1" (hide -7)
                        (("1" (expand "continuous?" 3)
                          (("1" (skeep 3)
                            (("1" (split 1)
                              (("1"
                                (case "NOT car(d_b)>x0")
                                (("1" (assert) nil nil)
                                 ("2"
                                  (inst 3 "(car(d_b)-x0)/2")
                                  (("1"
                                    (skeep 3)
                                    (("1"
                                      (typepred "d_b")
                                      (("1"
                                        (inst -5 "x")
                                        (("1" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (assert) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (assert)
                                (("2"
                                  (case "NOT x0>car(cdr(d_b))")
                                  (("1" (assert) nil nil)
                                   ("2"
                                    (inst 3 "(x0-car(cdr(d_b)))/2")
                                    (("2"
                                      (skeep 3)
                                      (("2"
                                        (typepred "d_b")
                                        (("2"
                                          (inst -5 "x")
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (inst -2 "x0")
              (("2" (expand "continuous?" 1)
                (("2" (skeep 1)
                  (("2" (expand "continuous?" -2)
                    (("2" (inst -2 "epsilon")
                      (("2" (skeep -2)
                        (("2" (inst 1 "delta")
                          (("2" (skeep 1)
                            (("2" (typepred "d_b")
                              (("2"
                                (inst-cp -5 "x")
                                (("2"
                                  (inst -5 "x0")
                                  (("2"
                                    (reveal -)
                                    (("2"
                                      (hide -2)
                                      (("2"
                                        (inst -1 "car(cdr(d_b))")
                                        (("2"
                                          (flatten)
                                          (("2"
                                            (case "d(x)")
                                            (("1"
                                              (inst -14 "x")
                                              (("1" (grind) nil nil))
                                              nil)
                                             ("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((> const-decl "bool" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (ext_c const-decl
     "{ff: [real -> real] | FORALL (x: (d)): ff(x) = f(x)}"
     r2v_continuous_extension nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (x0 skolem-const-decl "real" r2v_continuous_extension nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (continuous? const-decl "bool" continuous_functions analysis)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     Optimization_Dev)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (d_b const-decl "{dd: list[real] |
   (length(dd) = 2 AND (d(car(dd)) AND d(car(cdr(dd))))) AND
    FORALL (x: real): (car(dd) <= x AND x <= car(cdr(dd))) IFF d(x)}"
     r2v_continuous_extension nil)
    (x skolem-const-decl "real" r2v_continuous_extension nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (d formal-const-decl "[real -> bool]" r2v_continuous_extension nil)
    (continuous? const-decl "bool" continuous_functions analysis))
   nil))
 (ext_cont_D_TCC1 0
  (ext_cont_D_TCC1-1 nil 3789403681 ("" (subtype-tcc) nil nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic
     Optimization_Dev)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (d formal-const-decl "[real -> bool]" r2v_continuous_extension nil)
    (continuous? const-decl "bool" continuous_functions analysis)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices matrices)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (continuous? const-decl "bool" continuous_functions analysis))
   nil
   (ext_cont_D subtype "r2v_continuous_extension.x"
    "(list_adt[real].cons?)")))
 (ext_cont_D 0
  (ext_cont_D-1 nil 3789404337
   ("" (lemma "ext_cont_r")
    (("" (skeep 1)
      (("" (inst -1 "f")
        (("" (lemma "contp_norm_v2r")
          ((""
            (inst -1 "(LAMBDA (x: VectorN(1)): ext_c(f)(car(x)))"
             "(LAMBDA (x: VectorN(1)): d(car[real](x)))" "_")
            (("1" (expand "contD?" 1 1)
              (("1" (skeep 1)
                (("1" (inst -1 "p")
                  (("1" (assert)
                    (("1" (hide 2)
                      (("1" (expand "continuous?" -1)
                        (("1" (inst 1 "norm_inf(1)")
                          (("1" (expand "contp?" 1 1)
                            (("1" (inst -1 " car(p)")
                              (("1"
                                (expand "continuous?" -1)
                                (("1"
                                  (skeep 1)
                                  (("1"
                                    (inst -1 "eps")
                                    (("1"
                                      (skeep)
                                      (("1"
                                        (inst 1 "delta")
                                        (("1"
                                          (skeep 1)
                                          (("1"
                                            (inst -2 "car(x_1)")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (hide 1)
                                                (("1"
                                                  (typepred "x_1")
                                                  (("1"
                                                    (typepred "p")
                                                    (("1"
                                                      (hide -1 -4)
                                                      (("1"
                                                        (case
                                                         "NOT x_1 = (: car(x_1) :)")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (expand
                                                             "length"
                                                             -3)
                                                            (("1"
                                                              (expand
                                                               "length"
                                                               -3)
                                                              (("1"
                                                                (lift-if
                                                                 -3)
                                                                (("1"
                                                                  (split
                                                                   -3)
                                                                  (("1"
                                                                    (decompose-equality
                                                                     1)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          (("2"
                                                            (case
                                                             "NOT p = (: car(p) :)")
                                                            (("1"
                                                              (expand
                                                               "length"
                                                               -2)
                                                              (("1"
                                                                (expand
                                                                 "length"
                                                                 -2)
                                                                (("1"
                                                                  (lift-if
                                                                   -2)
                                                                  (("1"
                                                                    (split
                                                                     -2)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (decompose-equality
                                                                         1)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (replace
                                                               -1)
                                                              (("2"
                                                                (replace
                                                                 -2)
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (skeep 1)
              (("2" (typepred "x")
                (("2" (hide 2) (("2" (grind) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ext_cont_r formula-decl nil r2v_continuous_extension nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (d formal-const-decl "[real -> bool]" r2v_continuous_extension nil)
    (continuous? const-decl "bool" continuous_functions analysis)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (VectorN type-eq-decl nil matrices matrices)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def Optimization_Dev)
    (ext_c const-decl
     "{ff: [real -> real] | FORALL (x: (d)): ff(x) = f(x)}"
     r2v_continuous_extension nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (domain type-eq-decl nil domain_vec2real_def Optimization_Dev)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     Optimization_Dev)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (contp? const-decl "bool" continuity_multivar Optimization_Dev)
    (continuous? const-decl "bool" continuous_functions analysis)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (list_cons_extensionality formula-decl nil list_adt nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (scal def-decl "VectorN(length(v2))" matrices matrices)
    (add def-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (sub const-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (abs def-decl "{l: list | length(l) = length(ll)}" norms
         Optimization_Dev)
    (max def-decl "real" norms Optimization_Dev)
    (norm_inf const-decl "[(cons?) -> nonneg_real]" norms
     Optimization_Dev)
    (length_singleton formula-decl nil more_list_props structures)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (norm? const-decl "bool" norms Optimization_Dev)
    (norm_inf const-decl "(norm?(m))" norms Optimization_Dev)
    (contD? const-decl "bool" continuity_multivar Optimization_Dev)
    (contp_norm_v2r formula-decl nil continuity_multivar
     Optimization_Dev))
   nil))
 (ext_plus 0
  (ext_plus-1 nil 3789404363
   ("" (skeep)
    (("" (expand "+")
      (("" (decompose-equality 1)
        (("" (typepred "d_b")
          (("" (inst-cp -5 "x!1")
            (("" (flatten)
              (("" (expand "ext_c") (("" (grind) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_plus_real_is_real application-judgement "real" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (d formal-const-decl "[real -> bool]" r2v_continuous_extension nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (ext_c const-decl
     "{ff: [real -> real] | FORALL (x: (d)): ff(x) = f(x)}"
     r2v_continuous_extension nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     Optimization_Dev)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (d_b const-decl "{dd: list[real] |
   (length(dd) = 2 AND (d(car(dd)) AND d(car(cdr(dd))))) AND
    FORALL (x: real): (car(dd) <= x AND x <= car(cdr(dd))) IFF d(x)}"
     r2v_continuous_extension nil)
    (+ const-decl "[T -> real]" real_fun_ops reals))
   nil))
 (ext_ineq 0
  (ext_ineq-1 nil 3789404386
   ("" (skeep)
    (("" (skeep)
      (("" (inst -1 "x")
        (("1" (typepred "x")
          (("1" (grind)
            (("1" (reveal -) (("1" (inst -1 "car(d_b)") nil nil)) nil)
             ("2" (reveal -) (("2" (inst -1 "car(cdr(d_b))") nil nil))
              nil))
            nil))
          nil)
         ("2" (grind)
          (("1" (reveal -) (("1" (inst -1 "car(d_b)") nil nil)) nil)
           ("2" (reveal -) (("2" (inst -1 "car(cdr(d_b))") nil nil))
            nil)
           ("3" (reveal -) (("3" (inst -1 "x") nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((x skolem-const-decl "real" r2v_continuous_extension nil)
    (d formal-const-decl "[real -> bool]" r2v_continuous_extension nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (ext_c const-decl
     "{ff: [real -> real] | FORALL (x: (d)): ff(x) = f(x)}"
     r2v_continuous_extension nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     Optimization_Dev)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (d_b const-decl "{dd: list[real] |
   (length(dd) = 2 AND (d(car(dd)) AND d(car(cdr(dd))))) AND
    FORALL (x: real): (car(dd) <= x AND x <= car(cdr(dd))) IFF d(x)}"
     r2v_continuous_extension nil)
    (NOT const-decl "[bool -> bool]" booleans nil))
   nil)))

