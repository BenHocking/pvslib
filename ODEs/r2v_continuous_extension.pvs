r2v_continuous_extension [ d :[ real -> bool ] ]  % Welcome
% d - domain of the functions r2v
		: THEORY

%Created by                     JTS
%	 	           Jan 2020
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%| The continuous extension of   |%
%| a function from [(d)->real]   |%
%| to [real -> real] is defined  |%
%| here. With useful properties  |%
%| This should be moved to       |%
%| analysis or real in the       |%
%| NASAlib.		         |%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%Last Updated	           Jan 2020
%			        JTS

%-----     %
  BEGIN
%     -----%

%-------------------------------------------------------------------------
%% Assume that the domain is a nonempty closed interval
%-------------------------------------------------------------------------

  ASSUMING

    IMPORTING interval_def
      closed_interval : ASSUMPTION closed_interval?(d)

  ENDASSUMING

%-------------------------------------------------------------------------
%% Importing lnexp@top to have exp( )
%% Importing r2v_analysis and r2v_analysis[d] to have different
%  instantiations of continuous, with [d] being the default
%-------------------------------------------------------------------------

IMPORTING lnexp@top
IMPORTING r2v_analysis
IMPORTING r2v_analysis[d]

%-------------------------------------------------------------------------
%% Get bounds on the interval (d)
%-------------------------------------------------------------------------

 d_b:{dd:list[real]|
  (length(dd) = 2 AND (d(car(dd)) AND d(car(cdr(dd))))) AND
  FORALL(x:real): (car(dd) <= x AND x <= car(cdr(dd))) IFF d(x)}

%-------------------------------------------------------------------------
%% continuously extend an r2v from the domain (d)  to all of R
%-------------------------------------------------------------------------

 ext_c(n:posnat, f:r2v_n(n)):
  { ff:[real->VectorN(n)]| FORALL(x:(d)): ff(x) = f(x) }
   = LAMBDA(x:real):
    IF x < car(d_b)
     THEN f(car(d_b))
      ELSIF x > car(cdr(d_b))
       THEN f(car(cdr(d_b)))
      ELSE f(x)
      ENDIF

 ext_cont: LEMMA
  FORALL(n:posnat,
   f:{ ff:r2v_n(n) | continuous?[(d)](ff) }):
    continuous?[LAMBDA(x:real): TRUE](ext_c(n, f))

%-------------------------------------------------------------------------
%% continuously extend an [(d) - R] from the domain (d) to all of R
%-------------------------------------------------------------------------

 ext_c(f:[(d)->real]):
  { ff:[real->real]| FORALL(x:(d)): ff(x) = f(x) }
   = LAMBDA(x:real):
    IF x < car(d_b)
     THEN f(car(d_b))
    ELSIF x > car(cdr(d_b))
     THEN f(car(cdr(d_b)))
    ELSE f(x)
    ENDIF

 ext_const: LEMMA
  FORALL(f:[(d)->real],C:real):
   ext_c(C * f) = C * ext_c(f)
  
 ext_cont_r: LEMMA
  FORALL(f:{ ff:[(d)->real] | continuous?[(d)](ff) }):
   continuous?[real](ext_c(f))

 ext_cont_D: LEMMA
  FORALL(f:{ ff:[(d)->real] | continuous?[(d)](ff) }):
   contD?[1](LAMBDA (x: VectorN(1)): d(car[real](x)))
    (LAMBDA(x:VectorN(1)):
     ext_c(f)(car(x)))

%-------------------------------------------------------------------------
%% the continuous extension can be seperated by addition
%-------------------------------------------------------------------------

 ext_plus: LEMMA
  FORALL(f, g:[(d)->real]):
   ext_c(f + g) = ext_c(f) + ext_c(g)

%-------------------------------------------------------------------------
%% the continuous extension retains inequalities
%-------------------------------------------------------------------------

ext_ineq: LEMMA
 FORALL(f, g:[(d)->real]):
  (FORALL(x:(d)): f(x) <= g(x))
   IMPLIES
    (FORALL(x:real):
     ext_c(f)(x) <= ext_c(g)(x))
       
 %~~~              END    ~~%
 END r2v_continuous_extension
