(r2v_def
 (r2v_n_r2v 0
  (r2v_n_r2v-1 nil 3787318744 ("" (judgement-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     Optimization_Dev)
    (d formal-const-decl "[real -> bool]" r2v_def nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil (r2v_n_r2v subtype "r2v_def.x" "r2v")))
 (length_TCC1 0
  (length_TCC1-1 nil 3787659791
   ("" (skeep) (("" (lemma "non_empty") (("" (propax) nil nil)) nil))
    nil)
   ((non_empty formula-decl nil r2v_def nil)) nil
   (length subtype "(r2v_def.d)" "(sets[real].nonempty?)")))
 (length_x 0
  (length_x-1 nil 3788095755
   ("" (skeep)
    (("" (typepred "f")
      (("" (skeep -1)
        (("" (inst-cp -1 "x")
          (("" (inst -1 "choose((d))")
            (("1" (expand "length" 1 1) (("1" (assert) nil nil)) nil)
             ("2" (lemma "non_empty") (("2" (propax) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((r2v type-eq-decl nil r2v_def nil)
    (length def-decl "nat" list_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (d formal-const-decl "[real -> bool]" r2v_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (non_empty formula-decl nil r2v_def nil)
    (length const-decl "nat" r2v_def nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     Optimization_Dev)
    (choose const-decl "(p)" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil))
   shostak))
 (nth_TCC1 0
  (nth_TCC1-2 nil 3787318781
   ("" (skeep)
    (("" (typepred "j")
      (("" (typepred "f")
        (("" (skeep -1)
          (("" (inst-cp -1 "x")
            (("" (assert)
              (("" (expand "length" -3)
                (("" (inst -1 "choose((d))") (("" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((length const-decl "nat" r2v_def nil)
    (r2v type-eq-decl nil r2v_def nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (d formal-const-decl "[real -> bool]" r2v_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     Optimization_Dev)
    (choose const-decl "(p)" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil))
   nil (nth subtype "r2v_def.j" "below[length[real](f(x))]"))
  (nth_TCC1-1 nil 3787318744 ("" (subtype-tcc) nil nil) nil nil
   (nth subtype "r2v_def.j" "below[length[real](f(x))]")))
 (null_cons 0
  (null_cons-1 nil 3787319052
   ("" (skeep)
    (("" (split 1)
      (("1" (flatten)
        (("1" (expand "cons?")
          (("1" (expand "null?")
            (("1" (lemma "non_empty")
              (("1" (expand "nonempty?" -1)
                (("1" (expand "empty?" 1)
                  (("1" (skeep 1)
                    (("1" (inst -2 "x")
                      (("1" (inst -3 "x") (("1" (assert) nil nil)) nil)
                       ("2" (assert)
                        (("2" (expand "member" -1)
                          (("2" (propax) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (flatten)
        (("2" (expand "null?" 1)
          (("2" (expand "cons?" 2)
            (("2" (skeep)
              (("2" (skeep)
                (("2" (typepred "f")
                  (("2" (skeep)
                    (("2" (inst-cp -1 "x")
                      (("2" (inst -1 "x!1")
                        (("2" (assert)
                          (("2" (expand "length" -)
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cons? const-decl "bool" r2v_def nil)
    (non_empty formula-decl nil r2v_def nil)
    (empty? const-decl "bool" sets nil)
    (x skolem-const-decl "real" r2v_def nil)
    (d formal-const-decl "[real -> bool]" r2v_def nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     Optimization_Dev)
    (member const-decl "bool" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (null? const-decl "bool" r2v_def nil)
    (r2v type-eq-decl nil r2v_def nil)
    (length def-decl "nat" list_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil))
 (length_null 0
  (length_null-1 nil 3787319077
   ("" (skeep)
    (("" (expand "length" 1)
      (("" (expand "null?")
        (("" (split 1)
          (("1" (flatten)
            (("1" (skeep)
              (("1" (typepred "f")
                (("1" (skeep)
                  (("1" (inst-cp -1 "choose((d))")
                    (("1" (inst-cp -1 "x")
                      (("1" (assert)
                        (("1" (expand "length")
                          (("1" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (flatten)
            (("2" (inst -1 "choose((d))")
              (("2" (expand "length" 1 1) (("2" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((length const-decl "nat" r2v_def nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     Optimization_Dev)
    (set type-eq-decl nil sets nil)
    (nonempty? const-decl "bool" sets nil)
    (choose const-decl "(p)" sets nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (d formal-const-decl "[real -> bool]" r2v_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (length def-decl "nat" list_props nil)
    (r2v type-eq-decl nil r2v_def nil)
    (null? const-decl "bool" r2v_def nil))
   nil))
 (length_cons 0
  (length_cons-1 nil 3787319137
   ("" (skeep)
    (("" (expand "length")
      (("" (expand "cons?")
        (("" (split 1)
          (("1" (flatten)
            (("1" (skeep)
              (("1" (typepred "f")
                (("1" (skeep)
                  (("1" (inst-cp -1 "choose((d))")
                    (("1" (inst -1 "x") (("1" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (flatten)
            (("2" (inst -1 "choose((d))")
              (("2" (expand "length" 1 1) (("2" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((length const-decl "nat" r2v_def nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     Optimization_Dev)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (set type-eq-decl nil sets nil)
    (nonempty? const-decl "bool" sets nil)
    (choose const-decl "(p)" sets nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (d formal-const-decl "[real -> bool]" r2v_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (length def-decl "nat" list_props nil)
    (r2v type-eq-decl nil r2v_def nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (cons? const-decl "bool" r2v_def nil))
   nil))
 (car_TCC1 0
  (car_TCC1-1 nil 3787318744 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (d formal-const-decl "[real -> bool]" r2v_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (length def-decl "nat" list_props nil)
    (r2v type-eq-decl nil r2v_def nil)
    (cons? const-decl "bool" r2v_def nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     Optimization_Dev))
   nil (car subtype "r2v_def.f(r2v_def.x)" "(list_adt[real].cons?)")))
 (cdr_TCC1 0
  (cdr_TCC1-2 nil 3787319166
   ("" (skeep)
    (("" (typepred "f")
      (("" (skeep)
        (("" (inst 1 "m-1")
          (("1" (skeep)
            (("1" (inst -1 "x_1")
              (("1" (expand "length" -1 1)
                (("1" (assert)
                  (("1" (lift-if -1)
                    (("1" (split -1)
                      (("1" (flatten)
                        (("1" (expand "cons?" -3)
                          (("1" (inst -3 "x_1")
                            (("1" (assert) nil nil)) nil))
                          nil))
                        nil)
                       ("2" (flatten) (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (assert)
            (("2" (expand "cons?" -2)
              (("2" (inst -2 "choose((d))")
                (("1" (inst -1 "choose((d))")
                  (("1" (assert)
                    (("1" (expand "length" -1) (("1" (assert) nil nil))
                      nil))
                    nil))
                  nil)
                 ("2" (lemma "non_empty") (("2" (propax) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cons? const-decl "bool" r2v_def nil)
    (r2v type-eq-decl nil r2v_def nil)
    (length def-decl "nat" list_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (d formal-const-decl "[real -> bool]" r2v_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (m skolem-const-decl "nat" r2v_def nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     Optimization_Dev)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (non_empty formula-decl nil r2v_def nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (choose const-decl "(p)" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil))
   nil
   (cdr subtype
        "LAMBDA (x: (r2v_def.d)): list_adt[real].cdr(r2v_def.f(x))"
        "r2v"))
  (cdr_TCC1-1 nil 3787318744 ("" (subtype-tcc) nil nil) nil nil
   (cdr subtype
        "LAMBDA (x: (r2v_def.d)): list_adt[real].cdr(r2v_def.f(x))"
        "r2v")))
 (cons_TCC1 0
  (cons_TCC2-1 nil 3787660203
   ("" (skeep)
    (("" (split 1)
      (("1" (assert)
        (("1" (typepred "cons2_var")
          (("1" (skeep -1)
            (("1" (inst 1 "m+1")
              (("1" (skeep)
                (("1" (inst -1 "x_1")
                  (("1" (expand "length" 1 1) (("1" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (flatten)
        (("2" (expand "length" 1 1)
          (("2" (expand "length" 1 1)
            (("2" (expand "length" 1 2) (("2" (propax) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (d formal-const-decl "[real -> bool]" r2v_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (length def-decl "nat" list_props nil)
    (r2v type-eq-decl nil r2v_def nil))
   nil
   (cons subtype
         "LAMBDA (x: (r2v_def.d)): list_adt[real].cons(r2v_def.cons1_var(x), r2v_def.cons2_var(x))"
         "r2v")))
 (length_cdr 0
  (length_cdr-1 nil 3787319218
   ("" (skeep)
    (("" (expand "length" 1)
      (("" (typepred "f")
        (("" (expand "cons?" -2)
          (("" (inst -2 "choose((d))")
            (("" (expand "length" 1 2)
              (("" (assert)
                (("" (expand "cdr" 1) (("" (propax) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((length const-decl "nat" r2v_def nil)
    (cdr const-decl "r2v" r2v_def nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     Optimization_Dev)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (set type-eq-decl nil sets nil)
    (nonempty? const-decl "bool" sets nil)
    (choose const-decl "(p)" sets nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (d formal-const-decl "[real -> bool]" r2v_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (length def-decl "nat" list_props nil)
    (r2v type-eq-decl nil r2v_def nil)
    (cons? const-decl "bool" r2v_def nil))
   nil))
 (nth_car_TCC1 0
  (nth_car_TCC1-2 nil 3787319253
   ("" (skeep)
    (("" (lemma "length_null")
      (("" (typepred "f")
        (("" (inst -3 "f")
          (("" (assert)
            (("" (lemma "null_cons")
              (("" (inst -1 "f") (("" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((length_null formula-decl nil r2v_def nil)
    (null_cons formula-decl nil r2v_def nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (d formal-const-decl "[real -> bool]" r2v_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (length def-decl "nat" list_props nil)
    (r2v type-eq-decl nil r2v_def nil)
    (cons? const-decl "bool" r2v_def nil))
   nil
   (nth_car subtype "0"
    "{jj: naturalnumbers.nat | reals.<(jj, r2v_def.length(r2v_def.f))}"))
  (nth_car_TCC1-1 nil 3787318744 ("" (subtype-tcc) nil nil) nil nil
   (nth_car subtype "0"
    "{jj: naturalnumbers.nat | reals.<(jj, r2v_def.length(r2v_def.f))}")))
 (nth_car 0
  (nth_car-1 nil 3787319282
   ("" (skeep)
    (("" (expand "nth" 1 1)
      (("" (expand "car" 1 1)
        (("" (assert)
          (("" (expand "nth" 1 1) (("" (propax) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((nth const-decl "[(d) -> real]" r2v_def nil)
    (nth def-decl "T" list_props nil)
    (car const-decl "real" r2v_def nil))
   nil))
 (nth_cdr_TCC1 0
  (nth_cdr_TCC1-2 nil 3787319305
   ("" (skeep)
    (("" (typepred "i")
      (("" (lemma "length_cdr")
        (("" (inst -1 "f") (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((cdr const-decl "r2v" r2v_def nil)
    (cons? const-decl "bool" r2v_def nil)
    (length const-decl "nat" r2v_def nil)
    (r2v type-eq-decl nil r2v_def nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (d formal-const-decl "[real -> bool]" r2v_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (length_cdr formula-decl nil r2v_def nil))
   nil
   (nth_cdr subtype "(number_fields.+)(r2v_def.i, 1)"
    "{jj: naturalnumbers.nat | reals.<(jj, r2v_def.length(r2v_def.f))}"))
  (nth_cdr_TCC1-1 nil 3787318744 ("" (subtype-tcc) nil nil) nil nil
   (nth_cdr subtype "(number_fields.+)(r2v_def.i, 1)"
    "{jj: naturalnumbers.nat | reals.<(jj, r2v_def.length(r2v_def.f))}")))
 (nth_cdr 0
  (nth_cdr-1 nil 3787319613
   ("" (skeep)
    (("" (expand "nth" 1)
      (("" (expand "nth" 1 2)
        (("" (assert) (("" (expand "cdr") (("" (propax) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((nth const-decl "[(d) -> real]" r2v_def nil)
    (cdr const-decl "r2v" r2v_def nil)
    (nth def-decl "T" list_props nil))
   nil))
 (nth_equal_TCC1 0
  (nth_equal_TCC1-1 nil 3787318744 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (d formal-const-decl "[real -> bool]" r2v_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (length def-decl "nat" list_props nil)
    (r2v type-eq-decl nil r2v_def nil) (< const-decl "bool" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     Optimization_Dev)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (length const-decl "nat" r2v_def nil))
   nil
   (nth_equal subtype "r2v_def.i"
    "{jj: naturalnumbers.nat | reals.<(jj, r2v_def.length(r2v_def.g))}")))
 (nth_equal 0
  (nth_equal-1 nil 3787319645
   (""
    (case "FORALL (n:nat, f: r2v, g: {gg: r2v | length(gg) = length(f)}):
                      length(f)=n IMPLIES (f = g IFF
                       FORALL (i: {ii: nat | ii < length(f)}): nth(f, i) = nth(g, i))")
    (("1" (skeep) (("1" (inst -1 "length(f)" "f" "g") nil nil)) nil)
     ("2" (hide 2)
      (("2" (induct "n")
        (("1" (skeep)
          (("1" (assert)
            (("1" (typepred "g")
              (("1" (lemma "length_null")
                (("1" (inst-cp -1 "f")
                  (("1" (inst -1 "g")
                    (("1" (assert)
                      (("1" (expand "null?")
                        (("1" (assert)
                          (("1" (split 1)
                            (("1" (flatten) (("1" (skeep) nil nil))
                              nil)
                             ("2" (skeep)
                              (("2"
                                (decompose-equality 1)
                                (("2"
                                  (inst -2 "x!1")
                                  (("2"
                                    (inst -3 "x!1")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (skeep)
          (("2" (skeep)
            (("2" (split 1)
              (("1" (flatten)
                (("1" (skeep)
                  (("1" (expand "nth" 1)
                    (("1" (decompose-equality 1) nil nil)) nil))
                  nil))
                nil)
               ("2" (flatten)
                (("2" (decompose-equality 1)
                  (("2" (lemma "list_extensionality")
                    (("2" (inst -1 "f(x!1)" "g(x!1)")
                      (("2" (assert)
                        (("2" (typepred "g")
                          (("2" (expand "length" -2)
                            (("2" (skeep)
                              (("2"
                                (inst-cp -1 "choose((d))")
                                (("2"
                                  (inst -1 "x!1")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (typepred "f")
                                      (("2"
                                        (skeep)
                                        (("2"
                                          (inst-cp -1 "choose((d))")
                                          (("2"
                                            (inst -1 "x!1")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (skeep)
                                                (("2"
                                                  (inst -6 "n")
                                                  (("1"
                                                    (expand "nth" -6)
                                                    (("1"
                                                      (decompose-equality
                                                       -6)
                                                      (("1"
                                                        (inst -1 "x!1")
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (typepred "n")
                                                        (("2"
                                                          (reveal -)
                                                          (("2"
                                                            (hide
                                                             -5
                                                             -6)
                                                            (("2"
                                                              (hide -4)
                                                              (("2"
                                                                (inst
                                                                 -3
                                                                 "x1!1")
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (reveal -)
                                                        (("3"
                                                          (hide -5 -6)
                                                          (("3"
                                                            (inst
                                                             -2
                                                             "x1!1")
                                                            (("3"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (typepred "n")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (expand
                                                         "length"
                                                         1
                                                         1)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (g skolem-const-decl "{gg: r2v | length(gg) = length(f)}" r2v_def
     nil)
    (i skolem-const-decl "{ii: nat | ii < length(f)}" r2v_def nil)
    (f skolem-const-decl "r2v" r2v_def nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (x!1 skolem-const-decl "(d)" r2v_def nil)
    (below type-eq-decl nil naturalnumbers nil)
    (n skolem-const-decl "below(length(f(x!1)))" r2v_def nil)
    (set type-eq-decl nil sets nil)
    (nonempty? const-decl "bool" sets nil)
    (choose const-decl "(p)" sets nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (list_extensionality formula-decl nil more_list_props structures)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     Optimization_Dev)
    (null? const-decl "bool" r2v_def nil)
    (length_null formula-decl nil r2v_def nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (d formal-const-decl "[real -> bool]" r2v_def nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (r2v type-eq-decl nil r2v_def nil)
    (length const-decl "nat" r2v_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (nth const-decl "[(d) -> real]" r2v_def nil))
   nil))
 (plusr2v_TCC1 0
  (plusr2v_TCC1-1 nil 3787482785
   ("" (skeep)
    (("" (split 1)
      (("1" (typepred "f" "g")
        (("1" (skeep)
          (("1" (skeep -2)
            (("1" (inst 1 "max(m,m!1)")
              (("1" (skeep)
                (("1" (inst -1 "x_1")
                  (("1" (inst -2 "x_1") (("1" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (expand "length" 1 1)
        (("2" (expand "length" 1 2)
          (("2" (expand "length" 1 3)
            (("2" (typepred "(f(choose((d))) + g(choose((d))))")
              (("2" (propax) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     Optimization_Dev)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (d formal-const-decl "[real -> bool]" r2v_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (length def-decl "nat" list_props nil)
    (r2v type-eq-decl nil r2v_def nil)
    (choose const-decl "(p)" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (VectorN type-eq-decl nil matrices matrices)
    (Vector type-eq-decl nil matrices matrices)
    (length const-decl "nat" r2v_def nil))
   nil
   (plusr2v subtype
    "LAMBDA (x: (r2v_def.d)): (matrices.+)(r2v_def.f(x), r2v_def.g(x))"
    "{hh: r2v_def.r2v | r2v_def.length(hh) = real_defs.max(r2v_def.length(r2v_def.f), r2v_def.length(r2v_def.g))}")))
 (nth_add_TCC1 0
  (nth_add_TCC1-1 nil 3787482785
   ("" (skeep)
    (("" (typepred "i")
      (("" (typepred "plusr2v(f,g)")
        (("" (expand "max" -2) (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((length const-decl "nat" r2v_def nil)
    (r2v type-eq-decl nil r2v_def nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (d formal-const-decl "[real -> bool]" r2v_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (plusr2v const-decl
     "{hh: r2v | length(hh) = max(length(f), length(g))}" r2v_def nil))
   nil
   (nth_add subtype "r2v_def.i"
    "{jj: naturalnumbers.nat | reals.<(jj, r2v_def.length((r2v_def.+)(r2v_def.f, r2v_def.g)))}")))
 (nth_add 0
  (nth_add-1 nil 3787482314
   ("" (skeep)
    (("" (decompose-equality 1)
      (("" (expand "nth" 1 1)
        (("" (expand "+" 1 1)
          (("" (expand "plusr2v" 1 1)
            (("" (lemma "nth_sum")
              (("" (inst -1 "f(x!1)" "g(x!1)")
                (("1" (assert)
                  (("1" (typepred "f" "g")
                    (("1" (expand "length" -3)
                      (("1" (skeep -1)
                        (("1" (skeep -2)
                          (("1" (inst-cp -1 "choose((d))")
                            (("1" (inst -1 "x!1")
                              (("1"
                                (inst-cp -3 "choose((d))")
                                (("1"
                                  (inst -3 "x!1")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (inst -6 "i")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "nth" 1 2)
                                          (("1"
                                            (expand "nth" 1 2)
                                            (("1" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (assert)
                                        (("2"
                                          (typepred "i")
                                          (("2"
                                            (expand "length" -1 1)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (typepred "g")
                  (("2" (typepred "f")
                    (("2" (lemma "length_cons")
                      (("2" (inst -1 "g")
                        (("2" (assert)
                          (("2" (expand "cons?" -1)
                            (("2" (inst -1 "x!1") nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (lemma "length_cons")
                  (("3" (inst -1 "f")
                    (("3" (assert)
                      (("3" (expand "cons?" -1)
                        (("3" (inst -1 "x!1") nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_plus_real_is_real application-judgement "real" reals nil)
    (r2v type-eq-decl nil r2v_def nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (length const-decl "nat" r2v_def nil)
    (nth const-decl "[(d) -> real]" r2v_def nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (+ const-decl "{hh: r2v | length(hh) = max(length(f), length(g))}"
       r2v_def nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (d formal-const-decl "[real -> bool]" r2v_def nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nth_sum formula-decl nil vector_arithmetic Optimization_Dev)
    (length_cons formula-decl nil r2v_def nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (cons? const-decl "bool" r2v_def nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (i skolem-const-decl "{ii: nat | ii < length(f)}" r2v_def nil)
    (below type-eq-decl nil naturalnumbers nil)
    (set type-eq-decl nil sets nil)
    (nonempty? const-decl "bool" sets nil)
    (choose const-decl "(p)" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (g skolem-const-decl "{gg: r2v | length(gg) = length(f)}" r2v_def
     nil)
    (x!1 skolem-const-decl "(d)" r2v_def nil)
    (f skolem-const-decl "r2v" r2v_def nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     Optimization_Dev)
    (plusr2v const-decl
     "{hh: r2v | length(hh) = max(length(f), length(g))}" r2v_def nil))
   shostak))
 (subr2v_TCC1 0
  (subr2v_TCC1-1 nil 3788625776
   ("" (skeep)
    (("" (split 1)
      (("1" (typepred "f" "g")
        (("1" (skeep)
          (("1" (skeep)
            (("1" (inst 1 "max(m,m!1)")
              (("1" (skeep)
                (("1" (inst -1 "x_1")
                  (("1" (inst -2 "x_1") (("1" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (assert)
        (("2" (expand "length" 1 1)
          (("2" (assert)
            (("2" (typepred "f(choose((d))) - g(choose((d)))")
              (("2" (expand "length" 1 2)
                (("2" (expand "length" 1 3) (("2" (propax) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     Optimization_Dev)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (d formal-const-decl "[real -> bool]" r2v_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (length def-decl "nat" list_props nil)
    (r2v type-eq-decl nil r2v_def nil)
    (length const-decl "nat" r2v_def nil)
    (choose const-decl "(p)" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (VectorN type-eq-decl nil matrices matrices)
    (Vector type-eq-decl nil matrices matrices))
   nil
   (subr2v subtype
    "LAMBDA (x: (r2v_def.d)): (matrices.-)(r2v_def.f(x), r2v_def.g(x))"
    "{hh: r2v_def.r2v | r2v_def.length(hh) = real_defs.max(r2v_def.length(r2v_def.f), r2v_def.length(r2v_def.g))}")))
 (nth_sub_TCC1 0
  (nth_sub_TCC1-1 nil 3788625946
   ("" (skeep)
    (("" (typepred "f-g")
      (("" (typepred "i") (("" (grind) nil nil)) nil)) nil))
    nil)
   ((- const-decl "{hh: r2v | length(hh) = max(length(f), length(g))}"
       r2v_def nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (length const-decl "nat" r2v_def nil)
    (r2v type-eq-decl nil r2v_def nil)
    (length def-decl "nat" list_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (d formal-const-decl "[real -> bool]" r2v_def nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     Optimization_Dev)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (add def-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (sub const-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (subr2v const-decl
     "{hh: r2v | length(hh) = max(length(f), length(g))}" r2v_def nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (scal def-decl "VectorN(length(v2))" matrices matrices)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (choose const-decl "(p)" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (< const-decl "bool" reals nil))
   nil
   (nth_sub subtype "r2v_def.i"
    "{jj: naturalnumbers.nat | reals.<(jj, r2v_def.length((r2v_def.-)(r2v_def.f, r2v_def.g)))}")))
 (nth_sub 0
  (nth_sub-1 nil 3788625886
   ("" (skeep)
    (("" (expand "nth" 1 1)
      (("" (decompose-equality 1)
        (("1" (expand "-" 1 1)
          (("1" (expand "subr2v" 1 1)
            (("1" (lemma "nth_dist")
              (("1" (expand "-" 1 1)
                (("1" (expand "sub" 1 1)
                  (("1" (lemma "nth_sum")
                    (("1" (inst -1 "f(x!1)" "scal(-1, g(x!1))")
                      (("1" (assert)
                        (("1" (split -1)
                          (("1" (inst -1 "i")
                            (("1" (assert)
                              (("1"
                                (expand "+" -1 1)
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "nth" 1 2)
                                    (("1"
                                      (inst -2 "g(x!1)" "-1" "i")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "nth" 1 3)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (replace -1 1)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand "*" -2 1)
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (typepred "i")
                                        (("2"
                                          (typepred "g")
                                          (("2"
                                            (hide -1)
                                            (("2"
                                              (typepred "f")
                                              (("2"
                                                (skeep -1)
                                                (("2"
                                                  (inst-cp
                                                   -1
                                                   "choose((d))")
                                                  (("1"
                                                    (inst -1 "x!1")
                                                    (("1"
                                                      (expand
                                                       "length"
                                                       -3)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (typepred
                                                           "g")
                                                          (("1"
                                                            (skeep -1)
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "x!1")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (reveal
                                                                   -)
                                                                  (("1"
                                                                    (hide
                                                                     -6
                                                                     -7)
                                                                    (("1"
                                                                      (inst
                                                                       -1
                                                                       "choose((d))")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (lemma "non_empty")
                                                    (("2"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (typepred "g(x!1)")
                                        (("3"
                                          (typepred "g")
                                          (("3"
                                            (typepred "f")
                                            (("3"
                                              (skeep -2)
                                              (("3"
                                                (skeep -1)
                                                (("3"
                                                  (inst-cp
                                                   -1
                                                   "choose((d))")
                                                  (("1"
                                                    (inst-cp
                                                     -3
                                                     "choose((d))")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (inst -1 "x!1")
                                                        (("1"
                                                          (inst
                                                           -3
                                                           "x!1")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (typepred
                                                               "f")
                                                              (("1"
                                                                (typepred
                                                                 "i")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (expand
                                                                     "length"
                                                                     -1
                                                                     1)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (typepred
                                                                         "g")
                                                                        (("1"
                                                                          (expand
                                                                           "length"
                                                                           -2)
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (lemma "non_empty")
                                                    (("2"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (typepred "i")
                              (("2"
                                (expand "length" -1)
                                (("2"
                                  (typepred "f")
                                  (("2"
                                    (skeep -1)
                                    (("2"
                                      (inst-cp -1 "choose((d))")
                                      (("2"
                                        (inst -1 "x!1")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (typepred "f" "g")
                            (("2" (typepred "scal(-1,g(x!1))")
                              (("2"
                                (hide -1)
                                (("2"
                                  (skeep -2)
                                  (("2"
                                    (skeep -3)
                                    (("2"
                                      (inst-cp -2 "choose((d))")
                                      (("1"
                                        (inst-cp -4 "choose((d))")
                                        (("1"
                                          (inst -2 "x!1")
                                          (("1"
                                            (inst -4 "x!1")
                                            (("1"
                                              (assert)
                                              (("1" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (lemma "non_empty")
                                        (("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (typepred "g" "f")
                        (("2" (skeep -3)
                          (("2" (skeep -1)
                            (("2" (inst-cp -1 "choose((d))")
                              (("1"
                                (inst -4 "choose((d))")
                                (("1"
                                  (inst -1 "x!1")
                                  (("1"
                                    (reveal -)
                                    (("1"
                                      (hide -4)
                                      (("1"
                                        (hide -3)
                                        (("1"
                                          (inst -2 "x!1")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (typepred
                                               "scal(-1,g(x!1))")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (typepred "i")
                                                  (("1"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (lemma "non_empty")
                                (("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("3" (assert)
                        (("3" (typepred "f")
                          (("3" (typepred "i")
                            (("3" (skeep -2)
                              (("3"
                                (inst-cp -2 "choose((d))")
                                (("1"
                                  (inst -2 "x!1")
                                  (("1" (grind) nil nil))
                                  nil)
                                 ("2"
                                  (lemma "non_empty")
                                  (("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (skeep)
          (("2" (typepred "i")
            (("2" (typepred "f-g")
              (("2" (skeep -1)
                (("2" (inst-cp -1 "x")
                  (("2" (inst-cp -1 "choose((d))")
                    (("1" (assert) (("1" (grind) nil nil)) nil)
                     ("2" (lemma "non_empty") (("2" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nth const-decl "[(d) -> real]" r2v_def nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (add def-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (nth_dist formula-decl nil vector_arithmetic Optimization_Dev)
    (sub const-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (x!1 skolem-const-decl "(d)" r2v_def nil)
    (Vector type-eq-decl nil matrices matrices)
    (VectorN type-eq-decl nil matrices matrices)
    (scal def-decl "VectorN(length(v2))" matrices matrices)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (* const-decl "VectorN(length(v2))" matrices matrices)
    (real_times_real_is_real application-judgement "real" reals nil)
    (set type-eq-decl nil sets nil)
    (nonempty? const-decl "bool" sets nil)
    (choose const-decl "(p)" sets nil)
    (non_empty formula-decl nil r2v_def nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (below type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nth_sum formula-decl nil vector_arithmetic Optimization_Dev)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (subr2v const-decl
     "{hh: r2v | length(hh) = max(length(f), length(g))}" r2v_def nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (d formal-const-decl "[real -> bool]" r2v_def nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (r2v type-eq-decl nil r2v_def nil)
    (length const-decl "nat" r2v_def nil)
    (f skolem-const-decl "r2v" r2v_def nil)
    (i skolem-const-decl "{ii: nat | ii < length(f)}" r2v_def nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (- const-decl "{hh: r2v | length(hh) = max(length(f), length(g))}"
       r2v_def nil)
    (g skolem-const-decl "{gg: r2v | length(gg) = length(f)}" r2v_def
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     Optimization_Dev))
   shostak)))

