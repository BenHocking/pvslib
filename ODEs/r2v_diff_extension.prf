(r2v_diff_extension
 (IMP_r2v_continuous_extension_TCC1 0
  (IMP_r2v_continuous_extension_TCC1-1 nil 3878481045
   ("" (lemma "closed_interval") (("" (propax) nil nil)) nil)
   ((closed_interval formula-decl nil r2v_diff_extension nil)) nil
   (IMP_r2v_continuous_extension assuming
    "r2v_continuous_extension[r2v_diff_extension.d].r2v_continuous_extension"
    "closed_interval: ASSUMPTION interval_def.closed_interval?(r2v_continuous_extension.d)")))
 (ext_derivable_lb_TCC1 0
  (ext_derivable_lb_TCC1-1 nil 3790505361
   ("" (lemma "deriv_domain") (("" (propax) nil nil)) nil)
   ((deriv_domain formula-decl nil r2v_analysis nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (d formal-const-decl "[real -> bool]" r2v_diff_extension nil))
   nil
   (ext_derivable_lb assuming
    "analysis@derivatives[(r2v_diff_extension.d)].derivatives"
    "deriv_domain: ASSUMPTION deriv_domain_def[T].deriv_domain?")))
 (ext_derivable_lb_TCC2 0
  (ext_derivable_lb_TCC2-1 nil 3790505361
   ("" (lemma "not_one_element") (("" (propax) nil nil)) nil)
   ((not_one_element formula-decl nil r2v_analysis nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (d formal-const-decl "[real -> bool]" r2v_diff_extension nil))
   nil
   (ext_derivable_lb assuming
    "analysis@derivatives[(r2v_diff_extension.d)].derivatives"
    "not_one_element: ASSUMPTION deriv_domain_def[T].not_one_element?")))
 (ext_derivable_lb_TCC3 0
  (ext_derivable_lb_TCC3-1 nil 3790505361 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (d formal-const-decl "[real -> bool]" r2v_diff_extension nil)
    (derivable? const-decl "bool" derivatives analysis)
    (derivable? const-decl "bool" derivatives_def analysis)
    (convergent? const-decl "bool" lim_of_functions analysis)
    (convergence const-decl "bool" lim_of_functions analysis)
    (convergence const-decl "bool" convergence_functions analysis)
    (NQ const-decl "real" derivatives_def analysis)
    (adh const-decl "setof[real]" convergence_functions analysis)
    (fullset const-decl "set" sets nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis))
   nil
   (ext_derivable_lb subtype
    "r2v_continuous_extension[r2v_diff_extension.d].d_b"
    "(list_adt[real].cons?)")))
 (ext_derivable_lb_TCC4 0
  (ext_derivable_lb_TCC4-1 nil 3790505361 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (d formal-const-decl "[real -> bool]" r2v_diff_extension nil)
    (derivable? const-decl "bool" derivatives analysis)
    (fullset const-decl "set" sets nil)
    (adh const-decl "setof[real]" convergence_functions analysis)
    (NQ const-decl "real" derivatives_def analysis)
    (convergence const-decl "bool" convergence_functions analysis)
    (convergence const-decl "bool" lim_of_functions analysis)
    (convergent? const-decl "bool" lim_of_functions analysis)
    (derivable? const-decl "bool" derivatives_def analysis)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil
   (ext_derivable_lb subtype
    "list_adt[real].car(r2v_continuous_extension[r2v_diff_extension.d].d_b)"
    "(r2v_diff_extension.d)")))
 (ext_derivable_lb_TCC5 0
  (ext_derivable_lb_TCC5-1 nil 3790505361
   ("" (skeep) (("" (typepred "d_b") (("" (grind) nil nil)) nil)) nil)
   ((d_b const-decl "{dd: list[real] |
   (length(dd) = 2 AND (d(car(dd)) AND d(car(cdr(dd))))) AND
    FORALL (x: real): (car(dd) <= x AND x <= car(cdr(dd))) IFF d(x)}"
     r2v_continuous_extension nil)
    (<= const-decl "bool" reals nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (d formal-const-decl "[real -> bool]" r2v_diff_extension nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (ext_derivable_lb subtype
    "list_adt[real].cdr(r2v_continuous_extension[r2v_diff_extension.d].d_b)"
    "(list_adt[real].cons?)")))
 (ext_derivable_lb_TCC6 0
  (ext_derivable_lb_TCC6-1 nil 3790505361 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (d formal-const-decl "[real -> bool]" r2v_diff_extension nil)
    (derivable? const-decl "bool" derivatives analysis)
    (fullset const-decl "set" sets nil)
    (adh const-decl "setof[real]" convergence_functions analysis)
    (NQ const-decl "real" derivatives_def analysis)
    (convergence const-decl "bool" convergence_functions analysis)
    (convergence const-decl "bool" lim_of_functions analysis)
    (convergent? const-decl "bool" lim_of_functions analysis)
    (derivable? const-decl "bool" derivatives_def analysis)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil
   (ext_derivable_lb subtype
    "list_adt[real].car(list_adt[real].cdr(r2v_continuous_extension[r2v_diff_extension.d].d_b))"
    "(r2v_diff_extension.d)")))
 (ext_derivable_lb_TCC7 0
  (ext_derivable_lb_TCC7-1 nil 3790505361
   ("" (skeep)
    (("" (typepred "d_b")
      (("" (inst -5 "x") (("" (assert) nil nil)) nil)) nil))
    nil)
   ((d_b const-decl "{dd: list[real] |
   (length(dd) = 2 AND (d(car(dd)) AND d(car(cdr(dd))))) AND
    FORALL (x: real): (car(dd) <= x AND x <= car(cdr(dd))) IFF d(x)}"
     r2v_continuous_extension nil)
    (<= const-decl "bool" reals nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (d formal-const-decl "[real -> bool]" r2v_diff_extension nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis))
   nil
   (ext_derivable_lb subtype "r2v_diff_extension.x"
    "(r2v_diff_extension.d)")))
 (ext_derivable_lb_TCC8 0
  (ext_derivable_lb_TCC8-1 nil 3790505361
   ("" (skeep)
    (("" (expand "deriv_domain?" 1)
      (("" (skeep 1)
        (("" (inst 1 "e!1/2")
          (("" (assert) (("" (hide -) (("" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_plus_real_is_real application-judgement "real" reals nil)
    (deriv_domain? const-decl "bool" deriv_domain_def analysis)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil))
   nil
   (ext_derivable_lb assuming
    "analysis@derivatives_def[real].derivatives_def"
    "deriv_domain: ASSUMPTION deriv_domain_def[T].deriv_domain?")))
 (ext_derivable_lb_TCC9 0
  (ext_derivable_lb_TCC9-1 nil 3790505361
   ("" (skeep)
    (("" (expand "not_one_element?" 1 1)
      (("" (skeep) (("" (inst 1 "x+1") (("" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((not_one_element? const-decl "bool" deriv_domain_def analysis)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   nil
   (ext_derivable_lb assuming
    "analysis@derivatives_def[real].derivatives_def"
    "not_one_element: ASSUMPTION deriv_domain_def[T].not_one_element?")))
 (ext_derivable_lb 0
  (ext_derivable_lb-1 nil 3790506282
   ("" (skeep)
    (("" (skoletin)
      (("" (expand "derivable?" 1 1)
        (("" (typepred "f")
          (("" (expand "derivable?" -1)
            (("" (inst -1 "car(d_b)")
              (("1" (expand "derivable?" -1)
                (("1" (expand "convergent?" 1 1)
                  (("1" (expand "convergent?" -1)
                    (("1" (lemma "deriv_def[(d)]")
                      (("1" (skeep -2)
                        (("1" (inst -1 "f" "l" "car(d_b)")
                          (("1" (assert)
                            (("1" (flatten)
                              (("1"
                                (inst 1 "deriv(f,car(d_b))")
                                (("1"
                                  (replace -2 1)
                                  (("1"
                                    (expand "convergence" -3)
                                    (("1"
                                      (expand "convergence" 1)
                                      (("1"
                                        (expand "convergence")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (split 1)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (hide -4 -5)
                                                    (("1"
                                                      (expand "adh" 1)
                                                      (("1"
                                                        (expand
                                                         "adh"
                                                         -3)
                                                        (("1"
                                                          (skeep)
                                                          (("1"
                                                            (inst
                                                             -3
                                                             "e!1")
                                                            (("1"
                                                              (skeep)
                                                              (("1"
                                                                (inst
                                                                 1
                                                                 "x")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (expand
                                                                   "A"
                                                                   1)
                                                                  (("2"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (skeep)
                                                  (("2"
                                                    (inst -4 "epsilon")
                                                    (("2"
                                                      (skeep)
                                                      (("2"
                                                        (inst
                                                         1
                                                         "min(delta, car(cdr(d_b))-car(d_b))")
                                                        (("1"
                                                          (skeep)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (case
                                                               "x>0")
                                                              (("1"
                                                                (typepred
                                                                 "x")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (inst
                                                                     -9
                                                                     "x")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (expand
                                                                         "NQ")
                                                                        (("1"
                                                                          (expand
                                                                           "g_1"
                                                                           1
                                                                           2)
                                                                          (("1"
                                                                            (expand
                                                                             "g_1"
                                                                             1
                                                                             1)
                                                                            (("1"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide
                                                                       2)
                                                                      (("2"
                                                                        (expand
                                                                         "A"
                                                                         1
                                                                         1)
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (typepred
                                                                             "d_b")
                                                                            (("2"
                                                                              (inst
                                                                               -5
                                                                               "car(d_b)+x")
                                                                              (("2"
                                                                                (flatten)
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (assert)
                                                                (("2"
                                                                  (case
                                                                   "NOT x<0")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (expand
                                                                     "NQ"
                                                                     2
                                                                     1)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (expand
                                                                         "g_1"
                                                                         2)
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (replace
                                                                             -5
                                                                             2
                                                                             rl)
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (case
                                                                                 "deriv[(d)](f)(car(d_b)) * x / x - deriv(f, car(d_b)) = 0")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (replace
                                                                                     -1
                                                                                     2)
                                                                                    (("1"
                                                                                      (grind)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (hide
                                                                                   2
                                                                                   3)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (case
                                                                                       "deriv(f, car(d_b)) = deriv[(d)](f)(car(d_b)) * x / x")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil)
                                                                                       ("2"
                                                                                        (hide
                                                                                         2)
                                                                                        (("2"
                                                                                          (mult-by
                                                                                           1
                                                                                           "x")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "deriv"
                                                                                               1
                                                                                               2)
                                                                                              (("1"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (lemma
                                                                                             "not_one_element")
                                                                                            (("2"
                                                                                              (propax)
                                                                                              nil
                                                                                              nil))
                                                                                            nil)
                                                                                           ("3"
                                                                                            (lemma
                                                                                             "deriv_domain")
                                                                                            (("3"
                                                                                              (propax)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("3"
                                                                                  (lemma
                                                                                   "not_one_element")
                                                                                  (("3"
                                                                                    (propax)
                                                                                    nil
                                                                                    nil))
                                                                                  nil)
                                                                                 ("4"
                                                                                  (lemma
                                                                                   "deriv_domain")
                                                                                  (("4"
                                                                                    (propax)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide -5)
                                                          (("2"
                                                            (hide -)
                                                            (("2"
                                                              (typepred
                                                               "d_b")
                                                              (("2"
                                                                (inst
                                                                 -5
                                                                 "car(d_b)")
                                                                (("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (grind)
                                                                    (("2"
                                                                      (lemma
                                                                       "closed_interval")
                                                                      (("2"
                                                                        (expand
                                                                         "closed_interval?"
                                                                         -1)
                                                                        (("2"
                                                                          (skeep)
                                                                          (("2"
                                                                            (typepred
                                                                             "d_b")
                                                                            (("2"
                                                                              (expand
                                                                               "closed_interval?"
                                                                               -6)
                                                                              (("2"
                                                                                (inst-cp
                                                                                 -6
                                                                                 "car(d_b)")
                                                                                (("2"
                                                                                  (inst
                                                                                   -6
                                                                                   "car(cdr(d_b))")
                                                                                  (("2"
                                                                                    (inst-cp
                                                                                     -5
                                                                                     "a")
                                                                                    (("2"
                                                                                      (inst-cp
                                                                                       -5
                                                                                       "b")
                                                                                      (("2"
                                                                                        (grind)
                                                                                        (("1"
                                                                                          (typepred
                                                                                           "b")
                                                                                          (("1"
                                                                                            (grind)
                                                                                            (("1"
                                                                                              (typepred
                                                                                               "d_b")
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -5
                                                                                                 "a")
                                                                                                (("1"
                                                                                                  (flatten)
                                                                                                  (("1"
                                                                                                    (typepred
                                                                                                     "a")
                                                                                                    (("1"
                                                                                                      (reveal
                                                                                                       -)
                                                                                                      (("1"
                                                                                                        (hide
                                                                                                         -23
                                                                                                         24)
                                                                                                        (("1"
                                                                                                          (hide
                                                                                                           -23
                                                                                                           -22)
                                                                                                          (("1"
                                                                                                            (hide
                                                                                                             -13
                                                                                                             -14
                                                                                                             -15
                                                                                                             -16
                                                                                                             -17
                                                                                                             -18
                                                                                                             -19
                                                                                                             -20
                                                                                                             -21)
                                                                                                            (("1"
                                                                                                              (hide
                                                                                                               -7
                                                                                                               -8)
                                                                                                              (("1"
                                                                                                                (inst
                                                                                                                 -1
                                                                                                                 "a")
                                                                                                                (("1"
                                                                                                                  (flatten)
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (reveal
                                                                                           -)
                                                                                          (("2"
                                                                                            (hide
                                                                                             -15
                                                                                             -16
                                                                                             -17
                                                                                             -18
                                                                                             -19
                                                                                             -20
                                                                                             -21
                                                                                             -22
                                                                                             -23
                                                                                             -24)
                                                                                            (("2"
                                                                                              (hide
                                                                                               -11
                                                                                               -12
                                                                                               -13
                                                                                               -14)
                                                                                              (("2"
                                                                                                (hide
                                                                                                 -7
                                                                                                 -8
                                                                                                 -9)
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   -1
                                                                                                   "b")
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("3"
                                                                                          (reveal
                                                                                           -)
                                                                                          (("3"
                                                                                            (inst
                                                                                             -1
                                                                                             "a")
                                                                                            (("3"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("3"
                                                          (hide -)
                                                          (("3"
                                                            (typepred
                                                             "d_b")
                                                            (("3"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (lemma "not_one_element")
                                  (("2" (propax) nil nil))
                                  nil)
                                 ("3"
                                  (lemma "deriv_domain")
                                  (("3" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (typepred "d_b") (("2" (propax) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((deriv_domain_real formula-decl nil deriv_domain analysis)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis)
    (real_times_real_is_real application-judgement "real" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (d formal-const-decl "[real -> bool]" r2v_diff_extension nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (d_b const-decl "{dd: list[real] |
   (length(dd) = 2 AND (d(car(dd)) AND d(car(cdr(dd))))) AND
    FORALL (x: real): (car(dd) <= x AND x <= car(cdr(dd))) IFF d(x)}"
     r2v_continuous_extension nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (deriv_domain? const-decl "bool" deriv_domain_def analysis)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (derivable? const-decl "bool" derivatives analysis)
    (deriv_fun type-eq-decl nil derivatives analysis)
    (deriv const-decl "[T -> real]" derivatives analysis)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (not_one_element_real formula-decl nil deriv_domain analysis)
    (derivable? const-decl "bool" derivatives_def analysis)
    (convergent? const-decl "bool" lim_of_functions analysis)
    (deriv_def formula-decl nil derivatives_def analysis)
    (closed_interval formula-decl nil r2v_diff_extension nil)
    (closed_interval? const-decl "bool" interval_def nil)
    (closed_interval? const-decl "bool" interval_def nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (g_1 skolem-const-decl "[real -> numfield]" r2v_diff_extension nil)
    (NQ const-decl "real" derivatives_def analysis)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (x skolem-const-decl "(A(car(d_b)))" r2v_diff_extension nil)
    (both_sides_times1 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (div_cancel2 formula-decl nil real_props nil)
    (not_one_element formula-decl nil r2v_analysis nil)
    (deriv_domain formula-decl nil r2v_analysis nil)
    (fullset const-decl "set" sets nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (delta skolem-const-decl "posreal" r2v_diff_extension nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (adh const-decl "setof[real]" convergence_functions analysis)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (x skolem-const-decl "(A(car(d_b)))" r2v_diff_extension nil)
    (A const-decl "setof[nzreal]" derivatives_def analysis)
    (setof type-eq-decl nil defined_types nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (convergence const-decl "bool" convergence_functions analysis)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (convergence const-decl "bool" lim_of_functions analysis)
    (deriv const-decl "real" derivatives_def analysis))
   shostak))
 (ext_deriv_lb_TCC1 0
  (ext_deriv_lb_TCC1-1 nil 3790516250
   ("" (skeep)
    (("" (lemma "ext_derivable_lb")
      (("" (inst?) (("" (assert) nil nil)) nil)) nil))
    nil)
   ((ext_derivable_lb formula-decl nil r2v_diff_extension nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis)
    (real_times_real_is_real application-judgement "real" reals nil)
    (derivable? const-decl "bool" derivatives analysis)
    (d formal-const-decl "[real -> bool]" r2v_diff_extension nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil
   (ext_deriv_lb subtype
    "list_adt[real].car(r2v_continuous_extension[r2v_diff_extension.d].d_b)"
    "{x | derivatives_def[real].derivable?(r2v_diff_extension.g, x)}")))
 (ext_deriv_lb_TCC2 0
  (ext_deriv_lb_TCC2-1 nil 3790516250 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (d formal-const-decl "[real -> bool]" r2v_diff_extension nil)
    (derivable? const-decl "bool" derivatives analysis)
    (fullset const-decl "set" sets nil)
    (adh const-decl "setof[real]" convergence_functions analysis)
    (NQ const-decl "real" derivatives_def analysis)
    (convergence const-decl "bool" convergence_functions analysis)
    (convergence const-decl "bool" lim_of_functions analysis)
    (convergent? const-decl "bool" lim_of_functions analysis)
    (derivable? const-decl "bool" derivatives_def analysis)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (deriv const-decl "real" derivatives_def analysis)
    (deriv const-decl "[T -> real]" derivatives analysis)
    (real_times_real_is_real application-judgement "real" reals nil))
   nil
   (ext_deriv_lb subtype
    "list_adt[real].car(r2v_continuous_extension[r2v_diff_extension.d].d_b)"
    "(r2v_diff_extension.d)")))
 (ext_deriv_lb 0
  (ext_deriv_lb-1 nil 3790516442
   ("" (skeep)
    (("" (skoletin)
      (("" (lemma "deriv_def[(d)]")
        (("" (typepred "f")
          (("" (expand "derivable?" -1)
            (("" (inst -1 "car(d_b)")
              (("" (expand "derivable?" -1)
                (("" (expand "convergent?" -1)
                  (("" (skeep)
                    (("" (inst-cp -2 "f" "l" "car(d_b)")
                      (("" (assert)
                        (("" (flatten)
                          (("" (hide -2)
                            (("" (lemma "deriv_def[real]")
                              ((""
                                (inst
                                 -1
                                 "g_1"
                                 "deriv[(d)](f,car(d_b))"
                                 "car(d_b)")
                                (("1"
                                  (assert)
                                  (("1"
                                    (split -1)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "deriv" 1 2)
                                          (("1" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (assert)
                                      (("2"
                                        (hide 2)
                                        (("2"
                                          (hide -2)
                                          (("2"
                                            (replace -2 1)
                                            (("2"
                                              (hide -3)
                                              (("2"
                                                (expand "convergence")
                                                (("2"
                                                  (expand
                                                   "convergence")
                                                  (("2"
                                                    (flatten)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (split 1)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (expand
                                                             "adh"
                                                             1)
                                                            (("1"
                                                              (skeep)
                                                              (("1"
                                                                (expand
                                                                 "adh"
                                                                 -1)
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "e!1")
                                                                  (("1"
                                                                    (skeep)
                                                                    (("1"
                                                                      (inst
                                                                       1
                                                                       "x")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil)
                                                                       ("2"
                                                                        (expand
                                                                         "A"
                                                                         1
                                                                         1)
                                                                        (("2"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          (("2"
                                                            (skeep)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (inst
                                                                 -2
                                                                 "epsilon")
                                                                (("2"
                                                                  (skeep)
                                                                  (("2"
                                                                    (inst
                                                                     1
                                                                     "min(delta, car(cdr(d_b))-car(d_b))")
                                                                    (("1"
                                                                      (skeep)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (case
                                                                           "x>0")
                                                                          (("1"
                                                                            (typepred
                                                                             "x")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (inst
                                                                                 -7
                                                                                 "x")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "NQ")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "g_1"
                                                                                       1
                                                                                       2)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "g_1"
                                                                                         1
                                                                                         1)
                                                                                        (("1"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (hide
                                                                                   2)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "A"
                                                                                     1
                                                                                     1)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (typepred
                                                                                         "d_b")
                                                                                        (("2"
                                                                                          (inst
                                                                                           -5
                                                                                           "car(d_b)+x")
                                                                                          (("2"
                                                                                            (flatten)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (case
                                                                               "NOT x<0")
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil)
                                                                               ("2"
                                                                                (expand
                                                                                 "NQ"
                                                                                 2
                                                                                 1)
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "g_1"
                                                                                     2)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (replace
                                                                                         -6
                                                                                         2
                                                                                         rl)
                                                                                        (("2"
                                                                                          (case
                                                                                           "deriv[(d)](f)(car(d_b)) * x / x - deriv(f, car(d_b)) = 0")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (replace
                                                                                               -1
                                                                                               2)
                                                                                              (("1"
                                                                                                (grind)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (hide
                                                                                             2
                                                                                             3)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (case
                                                                                                 "deriv(f, car(d_b)) = deriv[(d)](f)(car(d_b)) * x / x")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (hide
                                                                                                   2)
                                                                                                  (("2"
                                                                                                    (mult-by
                                                                                                     1
                                                                                                     "x")
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "deriv"
                                                                                                         1
                                                                                                         2)
                                                                                                        (("1"
                                                                                                          (propax)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (lemma
                                                                                                       "not_one_element")
                                                                                                      (("2"
                                                                                                        (propax)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("3"
                                                                                                      (lemma
                                                                                                       "deriv_domain")
                                                                                                      (("3"
                                                                                                        (propax)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("3"
                                                                                            (lemma
                                                                                             "not_one_element")
                                                                                            (("3"
                                                                                              (propax)
                                                                                              nil
                                                                                              nil))
                                                                                            nil)
                                                                                           ("4"
                                                                                            (lemma
                                                                                             "deriv_domain")
                                                                                            (("4"
                                                                                              (propax)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide
                                                                       -)
                                                                      (("2"
                                                                        (typepred
                                                                         "d_b")
                                                                        (("2"
                                                                          (inst
                                                                           -5
                                                                           "car(d_b)")
                                                                          (("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (grind)
                                                                              (("2"
                                                                                (lemma
                                                                                 "closed_interval")
                                                                                (("2"
                                                                                  (expand
                                                                                   "closed_interval?"
                                                                                   -1)
                                                                                  (("2"
                                                                                    (skeep)
                                                                                    (("2"
                                                                                      (typepred
                                                                                       "d_b")
                                                                                      (("2"
                                                                                        (expand
                                                                                         "closed_interval?"
                                                                                         -6)
                                                                                        (("2"
                                                                                          (inst-cp
                                                                                           -6
                                                                                           "car(d_b)")
                                                                                          (("2"
                                                                                            (inst
                                                                                             -6
                                                                                             "car(cdr(d_b))")
                                                                                            (("2"
                                                                                              (inst-cp
                                                                                               -5
                                                                                               "a")
                                                                                              (("2"
                                                                                                (inst-cp
                                                                                                 -5
                                                                                                 "b")
                                                                                                (("2"
                                                                                                  (grind)
                                                                                                  (("1"
                                                                                                    (typepred
                                                                                                     "b")
                                                                                                    (("1"
                                                                                                      (grind)
                                                                                                      (("1"
                                                                                                        (typepred
                                                                                                         "d_b")
                                                                                                        (("1"
                                                                                                          (inst
                                                                                                           -5
                                                                                                           "a")
                                                                                                          (("1"
                                                                                                            (flatten)
                                                                                                            (("1"
                                                                                                              (typepred
                                                                                                               "a")
                                                                                                              (("1"
                                                                                                                (reveal
                                                                                                                 -)
                                                                                                                (("1"
                                                                                                                  (hide
                                                                                                                   -23
                                                                                                                   24)
                                                                                                                  (("1"
                                                                                                                    (hide
                                                                                                                     -23
                                                                                                                     -22)
                                                                                                                    (("1"
                                                                                                                      (hide
                                                                                                                       -13
                                                                                                                       -14
                                                                                                                       -15
                                                                                                                       -16
                                                                                                                       -17
                                                                                                                       -18
                                                                                                                       -19
                                                                                                                       -20
                                                                                                                       -21)
                                                                                                                      (("1"
                                                                                                                        (hide
                                                                                                                         -7
                                                                                                                         -8)
                                                                                                                        (("1"
                                                                                                                          (inst
                                                                                                                           -1
                                                                                                                           "a")
                                                                                                                          (("1"
                                                                                                                            (flatten)
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (reveal
                                                                                                     -)
                                                                                                    (("2"
                                                                                                      (hide
                                                                                                       -15
                                                                                                       -16
                                                                                                       -17
                                                                                                       -18
                                                                                                       -19
                                                                                                       -20
                                                                                                       -21
                                                                                                       -22
                                                                                                       -23
                                                                                                       -24)
                                                                                                      (("2"
                                                                                                        (hide
                                                                                                         -11
                                                                                                         -12
                                                                                                         -13
                                                                                                         -14)
                                                                                                        (("2"
                                                                                                          (hide
                                                                                                           -7
                                                                                                           -8
                                                                                                           -9)
                                                                                                          (("2"
                                                                                                            (inst
                                                                                                             -1
                                                                                                             "b")
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("3"
                                                                                                    (reveal
                                                                                                     -)
                                                                                                    (("3"
                                                                                                      (inst
                                                                                                       -1
                                                                                                       "a")
                                                                                                      (("3"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("3"
                                                                      (hide
                                                                       -)
                                                                      (("3"
                                                                        (typepred
                                                                         "d_b")
                                                                        (("3"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (lemma "not_one_element")
                                  (("2" (propax) nil nil))
                                  nil)
                                 ("3"
                                  (lemma "deriv_domain")
                                  (("3" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((not_one_element_real formula-decl nil deriv_domain analysis)
    (deriv_domain_real formula-decl nil deriv_domain analysis)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis)
    (real_times_real_is_real application-judgement "real" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (d formal-const-decl "[real -> bool]" r2v_diff_extension nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (d_b const-decl "{dd: list[real] |
   (length(dd) = 2 AND (d(car(dd)) AND d(car(cdr(dd))))) AND
    FORALL (x: real): (car(dd) <= x AND x <= car(cdr(dd))) IFF d(x)}"
     r2v_continuous_extension nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (deriv_domain? const-decl "bool" deriv_domain_def analysis)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (derivable? const-decl "bool" derivatives analysis)
    (deriv_fun type-eq-decl nil derivatives analysis)
    (deriv const-decl "[T -> real]" derivatives analysis)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (derivable? const-decl "bool" derivatives_def analysis)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (deriv const-decl "real" derivatives_def analysis)
    (convergent? const-decl "bool" lim_of_functions analysis)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (convergence const-decl "bool" convergence_functions analysis)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (closed_interval? const-decl "bool" interval_def nil)
    (closed_interval? const-decl "bool" interval_def nil)
    (closed_interval formula-decl nil r2v_diff_extension nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (g_1 skolem-const-decl "[real -> numfield]" r2v_diff_extension nil)
    (NQ const-decl "real" derivatives_def analysis)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (x skolem-const-decl "(A(car(d_b)))" r2v_diff_extension nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (fullset const-decl "set" sets nil)
    (deriv_domain formula-decl nil r2v_analysis nil)
    (not_one_element formula-decl nil r2v_analysis nil)
    (div_cancel2 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (both_sides_times1 formula-decl nil real_props nil)
    (delta skolem-const-decl "posreal" r2v_diff_extension nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (/= const-decl "boolean" notequal nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (setof type-eq-decl nil defined_types nil)
    (A const-decl "setof[nzreal]" derivatives_def analysis)
    (x skolem-const-decl "(A(car(d_b)))" r2v_diff_extension nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (adh const-decl "setof[real]" convergence_functions analysis)
    (convergence const-decl "bool" lim_of_functions analysis)
    (deriv_def formula-decl nil derivatives_def analysis))
   shostak))
 (ext_derivable_ub_TCC1 0
  (ext_derivable_ub_TCC1-1 nil 3790509296
   ("" (skeep) (("" (typepred "d_b") (("" (grind) nil nil)) nil)) nil)
   ((d_b const-decl "{dd: list[real] |
   (length(dd) = 2 AND (d(car(dd)) AND d(car(cdr(dd))))) AND
    FORALL (x: real): (car(dd) <= x AND x <= car(cdr(dd))) IFF d(x)}"
     r2v_continuous_extension nil)
    (<= const-decl "bool" reals nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (d formal-const-decl "[real -> bool]" r2v_diff_extension nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (deriv const-decl "[T -> real]" derivatives analysis)
    (deriv const-decl "real" derivatives_def analysis))
   nil
   (ext_derivable_ub subtype
    "list_adt[real].cdr(r2v_continuous_extension[r2v_diff_extension.d].d_b)"
    "(list_adt[real].cons?)")))
 (ext_derivable_ub 0
  (ext_derivable_ub-1 nil 3790509363
   ("" (skeep)
    (("" (skoletin)
      (("" (expand "derivable?" 1)
        (("" (typepred "f")
          (("" (expand "derivable?" -1)
            (("" (case "car(d_b) < car(cdr(d_b))")
              (("1" (inst -2 "car(cdr(d_b))")
                (("1" (expand "derivable?" -2)
                  (("1" (expand "convergent?")
                    (("1" (lemma "deriv_def[(d)]")
                      (("1" (skeep)
                        (("1" (inst 1 "l")
                          (("1" (inst -1 "f" "l" "car(cdr(d_b))")
                            (("1" (assert)
                              (("1"
                                (flatten)
                                (("1"
                                  (hide -1)
                                  (("1"
                                    (expand "convergence")
                                    (("1"
                                      (expand "convergence")
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (split 1)
                                          (("1"
                                            (hide -4 -5)
                                            (("1"
                                              (expand "adh")
                                              (("1"
                                                (skeep)
                                                (("1"
                                                  (inst -3 "e!1")
                                                  (("1"
                                                    (skeep)
                                                    (("1"
                                                      (inst 1 "x")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (expand "A" 1)
                                                        (("2"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide -5)
                                            (("2"
                                              (skeep)
                                              (("2"
                                                (inst -4 "epsilon")
                                                (("2"
                                                  (skeep)
                                                  (("2"
                                                    (inst
                                                     1
                                                     "min(delta, car(cdr(d_b))-car(d_b))")
                                                    (("1"
                                                      (skeep)
                                                      (("1"
                                                        (case "x<0")
                                                        (("1"
                                                          (inst -7 "x")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (expand
                                                               "NQ")
                                                              (("1"
                                                                (expand
                                                                 "g_1"
                                                                 1
                                                                 2)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (expand
                                                                     "g_1"
                                                                     1
                                                                     1)
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide 2)
                                                            (("2"
                                                              (expand
                                                               "A"
                                                               1
                                                               1)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (typepred
                                                                   "d_b")
                                                                  (("2"
                                                                    (inst
                                                                     -5
                                                                     "car(cdr(d_b))+x")
                                                                    (("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (case
                                                           "NOT x>0")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (expand
                                                             "NQ"
                                                             2
                                                             1)
                                                            (("2"
                                                              (expand
                                                               "g_1"
                                                               2
                                                               2)
                                                              (("2"
                                                                (expand
                                                                 "g_1"
                                                                 2
                                                                 1)
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (replace
                                                                     -4
                                                                     2
                                                                     rl)
                                                                    (("2"
                                                                      (expand
                                                                       "deriv"
                                                                       2
                                                                       1)
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (case
                                                                           "deriv(f, car(cdr(d_b))) * x / x = deriv(f, car(cdr(d_b)))")
                                                                          (("1"
                                                                            (replace
                                                                             -1
                                                                             2)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (hide
                                                                             3)
                                                                            (("2"
                                                                              (mult-by
                                                                               1
                                                                               "x")
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("3"
                                                                            (assert)
                                                                            (("3"
                                                                              (lemma
                                                                               "not_one_element")
                                                                              (("3"
                                                                                (propax)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("4"
                                                                            (lemma
                                                                             "deriv_def[(d)]")
                                                                            (("4"
                                                                              (lemma
                                                                               "deriv_domain")
                                                                              (("4"
                                                                                (propax)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (typepred "d_b") (("2" (propax) nil nil)) nil))
                nil)
               ("2" (assert)
                (("2" (lemma "closed_interval")
                  (("2" (expand "closed_interval?" -1)
                    (("2" (skeep)
                      (("2" (expand "closed_interval?" -1)
                        (("2" (inst-cp -1 "a")
                          (("2" (inst-cp -1 "b")
                            (("2" (flatten)
                              (("2"
                                (assert)
                                (("2"
                                  (hide -2 -4)
                                  (("2"
                                    (inst-cp -1 "car(d_b)")
                                    (("2"
                                      (inst-cp -1 "car(cdr(d_b))")
                                      (("2"
                                        (typepred "d_b")
                                        (("2"
                                          (inst-cp -5 "a")
                                          (("2"
                                            (inst-cp -5 "b")
                                            (("2"
                                              (flatten)
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((deriv_domain_real formula-decl nil deriv_domain analysis)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis)
    (real_times_real_is_real application-judgement "real" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (d formal-const-decl "[real -> bool]" r2v_diff_extension nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (d_b const-decl "{dd: list[real] |
   (length(dd) = 2 AND (d(car(dd)) AND d(car(cdr(dd))))) AND
    FORALL (x: real): (car(dd) <= x AND x <= car(cdr(dd))) IFF d(x)}"
     r2v_continuous_extension nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (deriv_domain? const-decl "bool" deriv_domain_def analysis)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (derivable? const-decl "bool" derivatives analysis)
    (deriv_fun type-eq-decl nil derivatives analysis)
    (deriv const-decl "[T -> real]" derivatives analysis)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (not_one_element_real formula-decl nil deriv_domain analysis)
    (derivable? const-decl "bool" derivatives_def analysis)
    (deriv_def formula-decl nil derivatives_def analysis)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (convergence const-decl "bool" convergence_functions analysis)
    (adh const-decl "setof[real]" convergence_functions analysis)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (/= const-decl "boolean" notequal nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (setof type-eq-decl nil defined_types nil)
    (A const-decl "setof[nzreal]" derivatives_def analysis)
    (x skolem-const-decl "(A(car(cdr(d_b))))" r2v_diff_extension nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (deriv const-decl "real" derivatives_def analysis)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (fullset const-decl "set" sets nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (div_cancel2 formula-decl nil real_props nil)
    (both_sides_times1 formula-decl nil real_props nil)
    (not_one_element formula-decl nil r2v_analysis nil)
    (deriv_domain formula-decl nil r2v_analysis nil)
    (x skolem-const-decl "(A(car(cdr(d_b))))" r2v_diff_extension nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (NQ const-decl "real" derivatives_def analysis)
    (g_1 skolem-const-decl "[real -> numfield]" r2v_diff_extension nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (delta skolem-const-decl "posreal" r2v_diff_extension nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (convergence const-decl "bool" lim_of_functions analysis)
    (convergent? const-decl "bool" lim_of_functions analysis)
    (closed_interval formula-decl nil r2v_diff_extension nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (closed_interval? const-decl "bool" interval_def nil)
    (closed_interval? const-decl "bool" interval_def nil))
   shostak))
 (ext_deriv_ub_TCC1 0
  (ext_deriv_ub_TCC1-1 nil 3790516250
   ("" (lemma "ext_derivable_ub")
    (("" (skeep) (("" (inst?) (("" (assert) nil nil)) nil)) nil)) nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis)
    (real_times_real_is_real application-judgement "real" reals nil)
    (derivable? const-decl "bool" derivatives analysis)
    (d formal-const-decl "[real -> bool]" r2v_diff_extension nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (ext_derivable_ub formula-decl nil r2v_diff_extension nil))
   nil
   (ext_deriv_ub subtype
    "list_adt[real].car(list_adt[real].cdr(r2v_continuous_extension[r2v_diff_extension.d].d_b))"
    "{x | derivatives_def[real].derivable?(r2v_diff_extension.g, x)}")))
 (ext_deriv_ub_TCC2 0
  (ext_deriv_ub_TCC2-1 nil 3790516250 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (d formal-const-decl "[real -> bool]" r2v_diff_extension nil)
    (derivable? const-decl "bool" derivatives analysis)
    (fullset const-decl "set" sets nil)
    (adh const-decl "setof[real]" convergence_functions analysis)
    (NQ const-decl "real" derivatives_def analysis)
    (convergence const-decl "bool" convergence_functions analysis)
    (convergence const-decl "bool" lim_of_functions analysis)
    (convergent? const-decl "bool" lim_of_functions analysis)
    (derivable? const-decl "bool" derivatives_def analysis)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (deriv const-decl "real" derivatives_def analysis)
    (deriv const-decl "[T -> real]" derivatives analysis)
    (real_times_real_is_real application-judgement "real" reals nil))
   nil
   (ext_deriv_ub subtype
    "list_adt[real].car(list_adt[real].cdr(r2v_continuous_extension[r2v_diff_extension.d].d_b))"
    "(r2v_diff_extension.d)")))
 (ext_deriv_ub 0
  (ext_deriv_ub-1 nil 3790517045
   ("" (skeep)
    (("" (skoletin)
      (("" (lemma "deriv_def[(d)]")
        (("" (lemma "deriv_def[real]")
          (("" (typepred "f")
            (("" (expand "derivable?" -1)
              (("" (inst -1 "car(cdr(d_b))")
                (("" (expand "derivable?" -1)
                  (("" (expand "convergent?" -1)
                    (("" (skeep -1)
                      (("" (inst -3 "f" "l" "car(cdr(d_b))")
                        (("" (assert)
                          (("" (flatten)
                            ((""
                              (inst -2 "g_1"
                               "deriv[(d)](f)(car(cdr(d_b)))"
                               "car(cdr(d_b))")
                              (("1"
                                (assert)
                                (("1"
                                  (hide 2)
                                  (("1"
                                    (expand "convergence")
                                    (("1"
                                      (expand "convergence")
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (split 1)
                                          (("1"
                                            (hide -4 -5)
                                            (("1"
                                              (expand "adh")
                                              (("1"
                                                (skeep)
                                                (("1"
                                                  (inst -1 "e!1")
                                                  (("1"
                                                    (skeep)
                                                    (("1"
                                                      (inst 1 "x")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (expand "A" 1)
                                                        (("2"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide -5)
                                            (("2"
                                              (skeep)
                                              (("2"
                                                (inst -2 "epsilon")
                                                (("2"
                                                  (skeep)
                                                  (("2"
                                                    (inst
                                                     1
                                                     "min(delta, car(cdr(d_b))-car(d_b))")
                                                    (("1"
                                                      (skeep)
                                                      (("1"
                                                        (case "x<0")
                                                        (("1"
                                                          (inst -5 "x")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (expand
                                                               "NQ")
                                                              (("1"
                                                                (expand
                                                                 "g_1"
                                                                 1
                                                                 2)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (expand
                                                                     "g_1"
                                                                     1
                                                                     1)
                                                                    (("1"
                                                                      (expand
                                                                       "deriv"
                                                                       1
                                                                       1)
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide 2)
                                                            (("2"
                                                              (expand
                                                               "A"
                                                               1
                                                               1)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (typepred
                                                                   "d_b")
                                                                  (("2"
                                                                    (inst
                                                                     -5
                                                                     "car(cdr(d_b))+x")
                                                                    (("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (case
                                                           "NOT x>0")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (expand
                                                             "NQ"
                                                             2
                                                             1)
                                                            (("2"
                                                              (expand
                                                               "g_1"
                                                               2
                                                               2)
                                                              (("2"
                                                                (expand
                                                                 "g_1"
                                                                 2
                                                                 1)
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (case
                                                                     "deriv(f, car(cdr(d_b))) * x / x = deriv(f, car(cdr(d_b)))")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide
                                                                       3)
                                                                      (("2"
                                                                        (mult-by
                                                                         1
                                                                         "x")
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("3"
                                                                      (assert)
                                                                      (("3"
                                                                        (lemma
                                                                         "not_one_element")
                                                                        (("3"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("4"
                                                                      (lemma
                                                                       "deriv_def[(d)]")
                                                                      (("4"
                                                                        (lemma
                                                                         "deriv_domain")
                                                                        (("4"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (typepred "d_b")
                                                      (("2"
                                                        (case
                                                         "car(cdr(d_b)) > car(d_b)")
                                                        (("1"
                                                          (grind)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          (("2"
                                                            (lemma
                                                             "closed_interval")
                                                            (("2"
                                                              (expand
                                                               "closed_interval?"
                                                               -1)
                                                              (("2"
                                                                (skeep)
                                                                (("2"
                                                                  (expand
                                                                   "closed_interval?"
                                                                   -1)
                                                                  (("2"
                                                                    (inst-cp
                                                                     -1
                                                                     "a")
                                                                    (("2"
                                                                      (inst-cp
                                                                       -1
                                                                       "b")
                                                                      (("2"
                                                                        (flatten)
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (hide
                                                                             -2
                                                                             -4)
                                                                            (("2"
                                                                              (inst-cp
                                                                               -1
                                                                               "car(d_b)")
                                                                              (("2"
                                                                                (inst-cp
                                                                                 -1
                                                                                 "car(cdr(d_b))")
                                                                                (("2"
                                                                                  (typepred
                                                                                   "d_b")
                                                                                  (("2"
                                                                                    (inst-cp
                                                                                     -5
                                                                                     "a")
                                                                                    (("2"
                                                                                      (inst-cp
                                                                                       -5
                                                                                       "b")
                                                                                      (("2"
                                                                                        (flatten)
                                                                                        (("2"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (lemma "not_one_element")
                                (("2" (propax) nil nil))
                                nil)
                               ("3"
                                (lemma "deriv_domain")
                                (("3" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((not_one_element_real formula-decl nil deriv_domain analysis)
    (deriv_domain_real formula-decl nil deriv_domain analysis)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis)
    (real_times_real_is_real application-judgement "real" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (d formal-const-decl "[real -> bool]" r2v_diff_extension nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (d_b const-decl "{dd: list[real] |
   (length(dd) = 2 AND (d(car(dd)) AND d(car(cdr(dd))))) AND
    FORALL (x: real): (car(dd) <= x AND x <= car(cdr(dd))) IFF d(x)}"
     r2v_continuous_extension nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (deriv_domain? const-decl "bool" deriv_domain_def analysis)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (derivable? const-decl "bool" derivatives analysis)
    (deriv_fun type-eq-decl nil derivatives analysis)
    (deriv const-decl "[T -> real]" derivatives analysis)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (derivable? const-decl "bool" derivatives_def analysis)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (deriv const-decl "real" derivatives_def analysis)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (convergence const-decl "bool" convergence_functions analysis)
    (adh const-decl "setof[real]" convergence_functions analysis)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (/= const-decl "boolean" notequal nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (setof type-eq-decl nil defined_types nil)
    (A const-decl "setof[nzreal]" derivatives_def analysis)
    (x skolem-const-decl "(A(car(cdr(d_b))))" r2v_diff_extension nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (closed_interval? const-decl "bool" interval_def nil)
    (closed_interval? const-decl "bool" interval_def nil)
    (closed_interval formula-decl nil r2v_diff_extension nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (deriv_domain formula-decl nil r2v_analysis nil)
    (not_one_element formula-decl nil r2v_analysis nil)
    (both_sides_times1 formula-decl nil real_props nil)
    (div_cancel2 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (fullset const-decl "set" sets nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (x skolem-const-decl "(A(car(cdr(d_b))))" r2v_diff_extension nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (NQ const-decl "real" derivatives_def analysis)
    (g_1 skolem-const-decl "[real -> numfield]" r2v_diff_extension nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (delta skolem-const-decl "posreal" r2v_diff_extension nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (convergence const-decl "bool" lim_of_functions analysis)
    (convergent? const-decl "bool" lim_of_functions analysis)
    (deriv_def formula-decl nil derivatives_def analysis))
   shostak))
 (ext_derivable_int_TCC1 0
  (ext_derivable_int_TCC1-1 nil 3790510312
   ("" (skeep) (("" (typepred "d_b") (("" (grind) nil nil)) nil)) nil)
   ((d_b const-decl "{dd: list[real] |
   (length(dd) = 2 AND (d(car(dd)) AND d(car(cdr(dd))))) AND
    FORALL (x: real): (car(dd) <= x AND x <= car(cdr(dd))) IFF d(x)}"
     r2v_continuous_extension nil)
    (<= const-decl "bool" reals nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (d formal-const-decl "[real -> bool]" r2v_diff_extension nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (ext_derivable_int subtype
    "list_adt[real].cdr(r2v_continuous_extension[r2v_diff_extension.d].d_b)"
    "(list_adt[real].cons?)")))
 (ext_derivable_int 0
  (ext_derivable_int-1 nil 3790510396
   ("" (skeep)
    (("" (skoletin)
      (("" (typepred "t")
        (("" (typepred "f")
          (("" (expand "derivable?" -1)
            (("" (inst -1 "t")
              (("1" (assert)
                (("1" (expand "derivable?")
                  (("1" (expand "convergent?")
                    (("1" (skeep)
                      (("1" (inst 1 "l")
                        (("1" (expand "convergence" -1)
                          (("1" (expand "convergence")
                            (("1" (expand "convergence" 1)
                              (("1"
                                (flatten)
                                (("1"
                                  (split 1)
                                  (("1"
                                    (expand "adh" 1)
                                    (("1"
                                      (skeep)
                                      (("1"
                                        (expand "adh" -1)
                                        (("1"
                                          (inst -1 "e!1")
                                          (("1"
                                            (skeep)
                                            (("1"
                                              (inst 1 "x")
                                              (("1" (assert) nil nil)
                                               ("2"
                                                (expand "A" 1 1)
                                                (("2"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (skeep)
                                    (("2"
                                      (inst -2 "epsilon")
                                      (("2"
                                        (skeep)
                                        (("2"
                                          (inst
                                           1
                                           "min(delta,min(t-car(d_b),car(cdr(d_b))-t))")
                                          (("1"
                                            (skeep)
                                            (("1"
                                              (inst -4 "x")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand "NQ")
                                                  (("1"
                                                    (hide -7)
                                                    (("1"
                                                      (expand "g_1")
                                                      (("1"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand "A" 1)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (typepred "d_b")
                                                    (("2"
                                                      (inst -5 "t+x")
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide -5)
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (typepred "d_b")
                (("2" (inst -5 "t") (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((deriv_domain_real formula-decl nil deriv_domain analysis)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis)
    (real_times_real_is_real application-judgement "real" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (d formal-const-decl "[real -> bool]" r2v_diff_extension nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (d_b const-decl "{dd: list[real] |
   (length(dd) = 2 AND (d(car(dd)) AND d(car(cdr(dd))))) AND
    FORALL (x: real): (car(dd) <= x AND x <= car(cdr(dd))) IFF d(x)}"
     r2v_continuous_extension nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (deriv_domain? const-decl "bool" deriv_domain_def analysis)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (derivable? const-decl "bool" derivatives analysis)
    (deriv_fun type-eq-decl nil derivatives analysis)
    (deriv const-decl "[T -> real]" derivatives analysis)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (not_one_element_real formula-decl nil deriv_domain analysis)
    (derivable? const-decl "bool" derivatives_def analysis)
    (t skolem-const-decl
     "{tt: real | car(d_b) < tt AND tt < car(cdr(d_b))}"
     r2v_diff_extension nil)
    (convergence const-decl "bool" lim_of_functions analysis)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (/= const-decl "boolean" notequal nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (setof type-eq-decl nil defined_types nil)
    (A const-decl "setof[nzreal]" derivatives_def analysis)
    (x skolem-const-decl "(A(t))" r2v_diff_extension nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (adh const-decl "setof[real]" convergence_functions analysis)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (delta skolem-const-decl "posreal" r2v_diff_extension nil)
    (x skolem-const-decl "(A(t))" r2v_diff_extension nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (NQ const-decl "real" derivatives_def analysis)
    (g_1 skolem-const-decl "[real -> numfield]" r2v_diff_extension nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (fullset const-decl "set" sets nil)
    (convergence const-decl "bool" convergence_functions analysis)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (convergent? const-decl "bool" lim_of_functions analysis)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak))
 (ext_deriv_int_TCC1 0
  (ext_deriv_int_TCC1-1 nil 3790516250
   ("" (lemma "ext_derivable_int")
    (("" (skeep)
      (("" (inst?)
        (("" (assert) (("" (inst -1 "t") (("" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((real_times_real_is_real application-judgement "real" reals nil)
    (d_b const-decl "{dd: list[real] |
   (length(dd) = 2 AND (d(car(dd)) AND d(car(cdr(dd))))) AND
    FORALL (x: real): (car(dd) <= x AND x <= car(cdr(dd))) IFF d(x)}"
     r2v_continuous_extension nil)
    (<= const-decl "bool" reals nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil) (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (derivable? const-decl "bool" derivatives analysis)
    (d formal-const-decl "[real -> bool]" r2v_diff_extension nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (ext_derivable_int formula-decl nil r2v_diff_extension nil))
   nil
   (ext_deriv_int subtype "r2v_diff_extension.t"
    "{x | derivatives_def[real].derivable?(r2v_diff_extension.g, x)}")))
 (ext_deriv_int_TCC2 0
  (ext_deriv_int_TCC2-1 nil 3790516250
   ("" (skeep)
    (("" (split 1)
      (("1" (typepred "t")
        (("1" (typepred "d_b")
          (("1" (inst -5 "t")
            (("1" (flatten) (("1" (assert) nil nil)) nil)) nil))
          nil))
        nil)
       ("2" (typepred "f")
        (("2" (expand "derivable?" -1) (("2" (inst -1 "t") nil nil))
          nil))
        nil))
      nil))
    nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil) (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (d formal-const-decl "[real -> bool]" r2v_diff_extension nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (d_b const-decl "{dd: list[real] |
   (length(dd) = 2 AND (d(car(dd)) AND d(car(cdr(dd))))) AND
    FORALL (x: real): (car(dd) <= x AND x <= car(cdr(dd))) IFF d(x)}"
     r2v_continuous_extension nil)
    (derivable? const-decl "bool" derivatives analysis))
   nil
   (ext_deriv_int subtype "r2v_diff_extension.t"
    "{x | derivatives_def[(r2v_diff_extension.d)].derivable?(r2v_diff_extension.f, x)}")))
 (ext_deriv_int 0
  (ext_deriv_int-1 nil 3790517788
   ("" (skeep)
    (("" (skoletin)
      (("" (lemma "deriv_def[(d)]")
        (("" (lemma "deriv_def[real]")
          (("" (typepred "f")
            (("" (expand "derivable?" -1)
              (("" (inst -1 "t")
                (("" (expand "derivable?" -1)
                  (("" (expand "convergent?" -1)
                    (("" (skeep -1)
                      (("" (inst -3 "f" "l" "t")
                        (("" (assert)
                          (("" (flatten)
                            (("" (inst -2 "g_1" "deriv[(d)](f)(t)" "t")
                              (("1"
                                (assert)
                                (("1"
                                  (split -2)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (expand "deriv" -2 2)
                                      (("1" (propax) nil nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (expand "convergence" -1)
                                    (("2"
                                      (expand "convergence")
                                      (("2"
                                        (expand "convergence" 1)
                                        (("2"
                                          (flatten)
                                          (("2"
                                            (split 1)
                                            (("1"
                                              (expand "adh" 1)
                                              (("1"
                                                (skeep)
                                                (("1"
                                                  (expand "adh" -1)
                                                  (("1"
                                                    (inst -1 "e!1")
                                                    (("1"
                                                      (skeep)
                                                      (("1"
                                                        (inst 1 "x")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (expand
                                                           "A"
                                                           1
                                                           1)
                                                          (("2"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (skeep)
                                              (("2"
                                                (inst -2 "epsilon")
                                                (("2"
                                                  (skeep)
                                                  (("2"
                                                    (inst
                                                     1
                                                     "min(delta,min(t-car(d_b),car(cdr(d_b))-t))")
                                                    (("1"
                                                      (skeep)
                                                      (("1"
                                                        (inst -4 "x")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (expand
                                                             "NQ")
                                                            (("1"
                                                              (hide -7)
                                                              (("1"
                                                                (expand
                                                                 "g_1")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (expand
                                                                     "deriv"
                                                                     1)
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (expand
                                                           "A"
                                                           1)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (typepred
                                                               "d_b")
                                                              (("2"
                                                                (inst
                                                                 -5
                                                                 "t+x")
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide -5)
                                                      (("2"
                                                        (case
                                                         "car(d_b) < car(cdr(d_b))")
                                                        (("1"
                                                          (grind)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (hide 2 3)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("3"
                                                          (lemma
                                                           "closed_interval")
                                                          (("3"
                                                            (expand
                                                             "closed_interval?"
                                                             -1)
                                                            (("3"
                                                              (skeep)
                                                              (("3"
                                                                (expand
                                                                 "closed_interval?"
                                                                 -1)
                                                                (("3"
                                                                  (inst-cp
                                                                   -1
                                                                   "a")
                                                                  (("3"
                                                                    (inst-cp
                                                                     -1
                                                                     "b")
                                                                    (("3"
                                                                      (flatten)
                                                                      (("3"
                                                                        (assert)
                                                                        (("3"
                                                                          (hide
                                                                           -2
                                                                           -4)
                                                                          (("3"
                                                                            (inst-cp
                                                                             -1
                                                                             "car(d_b)")
                                                                            (("3"
                                                                              (typepred
                                                                               "d_b")
                                                                              (("3"
                                                                                (inst-cp
                                                                                 -5
                                                                                 "a")
                                                                                (("3"
                                                                                  (inst-cp
                                                                                   -5
                                                                                   "b")
                                                                                  (("3"
                                                                                    (flatten)
                                                                                    (("3"
                                                                                      (grind)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("4"
                                                          (typepred
                                                           "d_b")
                                                          (("4"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (typepred "d_b")
                                                      (("3"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("4"
                                                      (typepred "d_b")
                                                      (("4"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (lemma "not_one_element")
                                (("2" (propax) nil nil))
                                nil)
                               ("3"
                                (lemma "deriv_domain")
                                (("3" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((not_one_element_real formula-decl nil deriv_domain analysis)
    (deriv_domain_real formula-decl nil deriv_domain analysis)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis)
    (real_times_real_is_real application-judgement "real" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (d formal-const-decl "[real -> bool]" r2v_diff_extension nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (d_b const-decl "{dd: list[real] |
   (length(dd) = 2 AND (d(car(dd)) AND d(car(cdr(dd))))) AND
    FORALL (x: real): (car(dd) <= x AND x <= car(cdr(dd))) IFF d(x)}"
     r2v_continuous_extension nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (deriv_domain? const-decl "bool" deriv_domain_def analysis)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (derivable? const-decl "bool" derivatives analysis)
    (deriv_fun type-eq-decl nil derivatives analysis)
    (deriv const-decl "[T -> real]" derivatives analysis)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (derivable? const-decl "bool" derivatives_def analysis)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (deriv const-decl "real" derivatives_def analysis)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (convergence const-decl "bool" convergence_functions analysis)
    (closed_interval formula-decl nil r2v_diff_extension nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (closed_interval? const-decl "bool" interval_def nil)
    (closed_interval? const-decl "bool" interval_def nil)
    (l!1 skolem-const-decl "real" r2v_diff_extension nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (l!1 skolem-const-decl "real" r2v_diff_extension nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (fullset const-decl "set" sets nil)
    (l!1 skolem-const-decl "real" r2v_diff_extension nil)
    (l!1 skolem-const-decl "real" r2v_diff_extension nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (g_1 skolem-const-decl "[real -> numfield]" r2v_diff_extension nil)
    (NQ const-decl "real" derivatives_def analysis)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (x skolem-const-decl "(A(t))" r2v_diff_extension nil)
    (delta skolem-const-decl "posreal" r2v_diff_extension nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (adh const-decl "setof[real]" convergence_functions analysis)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (x skolem-const-decl "(A(t))" r2v_diff_extension nil)
    (t skolem-const-decl
     "{tt: real | car(d_b) < tt AND tt < car(cdr(d_b))}"
     r2v_diff_extension nil)
    (A const-decl "setof[nzreal]" derivatives_def analysis)
    (setof type-eq-decl nil defined_types nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (convergence const-decl "bool" lim_of_functions analysis)
    (not_one_element formula-decl nil r2v_analysis nil)
    (deriv_domain formula-decl nil r2v_analysis nil)
    (convergent? const-decl "bool" lim_of_functions analysis)
    (deriv_def formula-decl nil derivatives_def analysis))
   shostak))
 (ext_derivable_ext_TCC1 0
  (ext_derivable_ext_TCC1-1 nil 3790510668
   ("" (skeep) (("" (typepred "d_b") (("" (grind) nil nil)) nil)) nil)
   ((d_b const-decl "{dd: list[real] |
   (length(dd) = 2 AND (d(car(dd)) AND d(car(cdr(dd))))) AND
    FORALL (x: real): (car(dd) <= x AND x <= car(cdr(dd))) IFF d(x)}"
     r2v_continuous_extension nil)
    (<= const-decl "bool" reals nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (d formal-const-decl "[real -> bool]" r2v_diff_extension nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (ext_derivable_ext subtype
    "list_adt[real].cdr(r2v_continuous_extension[r2v_diff_extension.d].d_b)"
    "(list_adt[real].cons?)")))
 (ext_derivable_ext 0
  (ext_derivable_ext-1 nil 3790510758
   ("" (skeep)
    (("" (skoletin)
      (("" (typepred "t")
        (("" (case "NOT d(t)")
          (("1" (split -1)
            (("1" (expand "derivable?" 2)
              (("1" (expand "convergent?" 2)
                (("1" (typepred "f")
                  (("1" (lemma "deriv_def[(d)]")
                    (("1" (assert)
                      (("1" (expand "derivable?" -2)
                        (("1" (inst -2 "car(d_b)")
                          (("1" (expand "derivable?" -2)
                            (("1" (expand "convergent?" -2)
                              (("1"
                                (skeep)
                                (("1"
                                  (inst -1 "f" "l" "car(d_b)")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (inst 2 "l")
                                        (("1"
                                          (expand "convergence")
                                          (("1"
                                            (expand "convergence")
                                            (("1"
                                              (split 2)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (hide -4 -5 -6)
                                                  (("1"
                                                    (expand "adh" 1)
                                                    (("1"
                                                      (expand "adh" -3)
                                                      (("1"
                                                        (skeep)
                                                        (("1"
                                                          (inst
                                                           -3
                                                           "e!1")
                                                          (("1"
                                                            (skeep)
                                                            (("1"
                                                              (inst
                                                               1
                                                               "x")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (expand
                                                                 "A"
                                                                 1)
                                                                (("2"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (skeep)
                                                (("2"
                                                  (inst 1 "car(d_b)-t")
                                                  (("2"
                                                    (skeep)
                                                    (("2"
                                                      (expand "NQ" 1)
                                                      (("2"
                                                        (expand
                                                         "g_1"
                                                         1
                                                         2)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (expand
                                                             "g_1"
                                                             1
                                                             1)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (replace
                                                                 -4
                                                                 1
                                                                 rl)
                                                                (("2"
                                                                  (case
                                                                   "deriv[(d)](f)(car(d_b)) * x / x = deriv(f, car(d_b))")
                                                                  (("1"
                                                                    (replace
                                                                     -1)
                                                                    (("1"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide
                                                                     2)
                                                                    (("2"
                                                                      (mult-by
                                                                       1
                                                                       "x")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (expand
                                                                           "deriv"
                                                                           1
                                                                           1)
                                                                          (("1"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (lemma
                                                                         "not_one_element")
                                                                        (("2"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil)
                                                                       ("3"
                                                                        (lemma
                                                                         "deriv_domain")
                                                                        (("3"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("3"
                                                                    (lemma
                                                                     "not_one_element")
                                                                    (("3"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("4"
                                                                    (lemma
                                                                     "deriv_domain")
                                                                    (("4"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (assert)
              (("2" (typepred "f")
                (("2" (expand "derivable?" -1)
                  (("2" (inst -1 "car(cdr(d_b))")
                    (("2" (expand "derivable?" -1)
                      (("2" (expand "derivable?" 2)
                        (("2" (expand "convergent?")
                          (("2" (skeep)
                            (("2" (inst 2 "l")
                              (("2"
                                (lemma "deriv_def[(d)]")
                                (("2"
                                  (inst -1 "f" "l" "car(cdr(d_b))")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (flatten)
                                      (("2"
                                        (expand "convergence")
                                        (("2"
                                          (expand "convergence")
                                          (("2"
                                            (flatten)
                                            (("2"
                                              (split 2)
                                              (("1"
                                                (expand "adh")
                                                (("1"
                                                  (skeep)
                                                  (("1"
                                                    (inst -3 "e!1")
                                                    (("1"
                                                      (skeep)
                                                      (("1"
                                                        (inst 1 "x")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (expand
                                                           "A"
                                                           1)
                                                          (("2"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (skeep 1)
                                                (("2"
                                                  (inst
                                                   1
                                                   "t-car(cdr(d_b))")
                                                  (("2"
                                                    (skeep)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (expand "NQ" 1)
                                                        (("2"
                                                          (expand
                                                           "g_1"
                                                           1
                                                           2)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (typepred
                                                               "d_b")
                                                              (("2"
                                                                (inst
                                                                 -5
                                                                 "car(d_b)")
                                                                (("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (expand
                                                                       "g_1"
                                                                       1
                                                                       1)
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (replace
                                                                           -10
                                                                           1
                                                                           rl)
                                                                          (("2"
                                                                            (case
                                                                             "deriv[(d)](f)(car(cdr(d_b))) * x / x = deriv(f, car(cdr(d_b)))")
                                                                            (("1"
                                                                              (replace
                                                                               -1)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (hide
                                                                                   -)
                                                                                  (("1"
                                                                                    (grind)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (mult-by
                                                                               1
                                                                               "x")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (hide
                                                                                   2)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "deriv"
                                                                                     1
                                                                                     1)
                                                                                    (("1"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (hide
                                                                                 -)
                                                                                (("2"
                                                                                  (lemma
                                                                                   "not_one_element")
                                                                                  (("2"
                                                                                    (propax)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("3"
                                                                                (lemma
                                                                                 "deriv_domain")
                                                                                (("3"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("3"
                                                                              (lemma
                                                                               "not_one_element")
                                                                              (("3"
                                                                                (propax)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("4"
                                                                              (lemma
                                                                               "deriv_domain")
                                                                              (("4"
                                                                                (propax)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (assert)
            (("2" (typepred "d_b")
              (("2" (inst -5 "t")
                (("2" (flatten)
                  (("2" (assert)
                    (("2" (flatten) (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((deriv_domain_real formula-decl nil deriv_domain analysis)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis)
    (real_times_real_is_real application-judgement "real" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (d formal-const-decl "[real -> bool]" r2v_diff_extension nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (d_b const-decl "{dd: list[real] |
   (length(dd) = 2 AND (d(car(dd)) AND d(car(cdr(dd))))) AND
    FORALL (x: real): (car(dd) <= x AND x <= car(cdr(dd))) IFF d(x)}"
     r2v_continuous_extension nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (deriv_domain? const-decl "bool" deriv_domain_def analysis)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (derivable? const-decl "bool" derivatives analysis)
    (deriv_fun type-eq-decl nil derivatives analysis)
    (deriv const-decl "[T -> real]" derivatives analysis)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (not_one_element_real formula-decl nil deriv_domain analysis)
    (derivable? const-decl "bool" derivatives_def analysis)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (x skolem-const-decl "(A(car(cdr(d_b))))" r2v_diff_extension nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (convergence const-decl "bool" lim_of_functions analysis)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (/= const-decl "boolean" notequal nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (setof type-eq-decl nil defined_types nil)
    (A const-decl "setof[nzreal]" derivatives_def analysis)
    (t skolem-const-decl
     "{tt: real | car(d_b) > tt OR tt > car(cdr(d_b))}"
     r2v_diff_extension nil)
    (x skolem-const-decl "(A(car(d_b)))" r2v_diff_extension nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (adh const-decl "setof[real]" convergence_functions analysis)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NQ const-decl "real" derivatives_def analysis)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (deriv const-decl "real" derivatives_def analysis)
    (fullset const-decl "set" sets nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (both_sides_times1 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (div_cancel2 formula-decl nil real_props nil)
    (not_one_element formula-decl nil r2v_analysis nil)
    (deriv_domain formula-decl nil r2v_analysis nil)
    (g_1 skolem-const-decl "[real -> numfield]" r2v_diff_extension nil)
    (convergence const-decl "bool" convergence_functions analysis)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (deriv_def formula-decl nil derivatives_def analysis)
    (convergent? const-decl "bool" lim_of_functions analysis))
   shostak))
 (ext_deriv_extl_TCC1 0
  (ext_deriv_extl_TCC1-1 nil 3790516250
   ("" (lemma "ext_derivable_ext")
    (("" (skeep) (("" (inst -1 "f" "t") (("" (assert) nil nil)) nil))
      nil))
    nil)
   ((real_times_real_is_real application-judgement "real" reals nil)
    (d_b const-decl "{dd: list[real] |
   (length(dd) = 2 AND (d(car(dd)) AND d(car(cdr(dd))))) AND
    FORALL (x: real): (car(dd) <= x AND x <= car(cdr(dd))) IFF d(x)}"
     r2v_continuous_extension nil)
    (<= const-decl "bool" reals nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil) (> const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (derivable? const-decl "bool" derivatives analysis)
    (d formal-const-decl "[real -> bool]" r2v_diff_extension nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis)
    (ext_derivable_ext formula-decl nil r2v_diff_extension nil))
   nil
   (ext_deriv_extl subtype "r2v_diff_extension.t"
    "{x | derivatives_def[real].derivable?(r2v_diff_extension.g, x)}")))
 (ext_deriv_extl 0
  (ext_deriv_extl-1 nil 3790518336
   ("" (skeep)
    (("" (skoletin)
      (("" (typepred "t")
        (("" (case "NOT d(t)")
          (("1" (lemma "deriv_def[(d)]")
            (("1" (lemma "deriv_def[real]")
              (("1" (typepred "f")
                (("1" (expand "derivable?" -1)
                  (("1" (inst -1 "car(d_b)")
                    (("1" (expand "derivable?" -1)
                      (("1" (expand "convergent?" -1)
                        (("1" (skeep -1)
                          (("1" (inst -3 "f" "l" "car(d_b)")
                            (("1" (assert)
                              (("1"
                                (flatten)
                                (("1"
                                  (inst
                                   -2
                                   "g_1"
                                   "deriv[(d)](f)(car(d_b))"
                                   "t")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "convergence" -1)
                                      (("1"
                                        (expand "convergence")
                                        (("1"
                                          (expand "convergence" 1)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (split 1)
                                              (("1"
                                                (expand "adh" 1)
                                                (("1"
                                                  (skeep)
                                                  (("1"
                                                    (expand "adh" -1)
                                                    (("1"
                                                      (inst -1 "e!1")
                                                      (("1"
                                                        (skeep)
                                                        (("1"
                                                          (inst 1 "x")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (expand
                                                             "A"
                                                             1
                                                             1)
                                                            (("2"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (skeep)
                                                (("2"
                                                  (inst -2 "epsilon")
                                                  (("2"
                                                    (skeep)
                                                    (("2"
                                                      (inst
                                                       1
                                                       "min(delta,car(d_b)-t)")
                                                      (("1"
                                                        (skeep)
                                                        (("1"
                                                          (expand
                                                           "NQ"
                                                           1)
                                                          (("1"
                                                            (expand
                                                             "g_1"
                                                             1
                                                             2)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (expand
                                                                 "g_1"
                                                                 1
                                                                 1)
                                                                (("1"
                                                                  (case
                                                                   "deriv[(d)](f)(car(d_b)) * x / x = deriv[(d)](f)(car(d_b))")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (replace
                                                                       -1
                                                                       1)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (mult-by
                                                                     1
                                                                     "x")
                                                                    nil
                                                                    nil)
                                                                   ("3"
                                                                    (assert)
                                                                    (("3"
                                                                      (lemma
                                                                       "not_one_element")
                                                                      (("3"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("4"
                                                                    (lemma
                                                                     "deriv_domain")
                                                                    (("4"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide -)
                                                        (("2"
                                                          (hide 2 3)
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (lemma "not_one_element")
                                    (("2" (propax) nil nil))
                                    nil)
                                   ("3"
                                    (lemma "deriv_domain")
                                    (("3" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (typepred "d_b")
            (("2" (inst -5 "t")
              (("2" (flatten) (("2" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((not_one_element_real formula-decl nil deriv_domain analysis)
    (deriv_domain_real formula-decl nil deriv_domain analysis)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis)
    (real_times_real_is_real application-judgement "real" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (d formal-const-decl "[real -> bool]" r2v_diff_extension nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (d_b const-decl "{dd: list[real] |
   (length(dd) = 2 AND (d(car(dd)) AND d(car(cdr(dd))))) AND
    FORALL (x: real): (car(dd) <= x AND x <= car(cdr(dd))) IFF d(x)}"
     r2v_continuous_extension nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (deriv_domain? const-decl "bool" deriv_domain_def analysis)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (derivable? const-decl "bool" derivatives analysis)
    (deriv_fun type-eq-decl nil derivatives analysis)
    (deriv const-decl "[T -> real]" derivatives analysis)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (derivable? const-decl "bool" derivatives_def analysis)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (deriv const-decl "real" derivatives_def analysis)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (convergence const-decl "bool" lim_of_functions analysis)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (/= const-decl "boolean" notequal nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (setof type-eq-decl nil defined_types nil)
    (A const-decl "setof[nzreal]" derivatives_def analysis)
    (t skolem-const-decl "{tt: real | car(d_b) > tt}"
     r2v_diff_extension nil)
    (x skolem-const-decl "(A(car(d_b)))" r2v_diff_extension nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (adh const-decl "setof[real]" convergence_functions analysis)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (delta skolem-const-decl "posreal" r2v_diff_extension nil)
    (NQ const-decl "real" derivatives_def analysis)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (fullset const-decl "set" sets nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (both_sides_times1 formula-decl nil real_props nil)
    (div_cancel2 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (not_one_element formula-decl nil r2v_analysis nil)
    (deriv_domain formula-decl nil r2v_analysis nil)
    (g_1 skolem-const-decl "[real -> numfield]" r2v_diff_extension nil)
    (convergence const-decl "bool" convergence_functions analysis)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (convergent? const-decl "bool" lim_of_functions analysis)
    (deriv_def formula-decl nil derivatives_def analysis)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   shostak))
 (ext_deriv_extu_TCC1 0
  (ext_deriv_extu_TCC1-1 nil 3790516250
   ("" (skeep) (("" (typepred "d_b") (("" (grind) nil nil)) nil)) nil)
   ((d_b const-decl "{dd: list[real] |
   (length(dd) = 2 AND (d(car(dd)) AND d(car(cdr(dd))))) AND
    FORALL (x: real): (car(dd) <= x AND x <= car(cdr(dd))) IFF d(x)}"
     r2v_continuous_extension nil)
    (<= const-decl "bool" reals nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (d formal-const-decl "[real -> bool]" r2v_diff_extension nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   nil
   (ext_deriv_extu subtype
    "list_adt[real].cdr(r2v_continuous_extension[r2v_diff_extension.d].d_b)"
    "(list_adt[real].cons?)")))
 (ext_deriv_extu_TCC2 0
  (ext_deriv_extu_TCC2-1 nil 3790516250
   ("" (lemma "ext_derivable_ext")
    (("" (skeep)
      (("" (inst?)
        (("" (assert) (("" (inst -1 "t") (("" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((real_times_real_is_real application-judgement "real" reals nil)
    (< const-decl "bool" reals nil)
    (d_b const-decl "{dd: list[real] |
   (length(dd) = 2 AND (d(car(dd)) AND d(car(cdr(dd))))) AND
    FORALL (x: real): (car(dd) <= x AND x <= car(cdr(dd))) IFF d(x)}"
     r2v_continuous_extension nil)
    (<= const-decl "bool" reals nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil) (> const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis)
    (derivable? const-decl "bool" derivatives analysis)
    (d formal-const-decl "[real -> bool]" r2v_diff_extension nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (ext_derivable_ext formula-decl nil r2v_diff_extension nil))
   nil
   (ext_deriv_extu subtype "r2v_diff_extension.t"
    "{x | derivatives_def[real].derivable?(r2v_diff_extension.g, x)}")))
 (ext_deriv_extu 0
  (ext_deriv_extu-1 nil 3790519628
   ("" (skeep)
    (("" (skoletin)
      (("" (typepred "t")
        (("" (case "NOT d(t)")
          (("1" (lemma "deriv_def[(d)]")
            (("1" (lemma "deriv_def[real]")
              (("1" (typepred "f")
                (("1" (expand "derivable?" -1)
                  (("1" (inst -1 "car(cdr(d_b))")
                    (("1" (expand "derivable?" -1)
                      (("1" (expand "convergent?" -1)
                        (("1" (skeep -1)
                          (("1" (inst -3 "f" "l" "car(cdr(d_b))")
                            (("1" (assert)
                              (("1"
                                (flatten)
                                (("1"
                                  (inst
                                   -2
                                   "g_1"
                                   "deriv[(d)](f)(car(cdr(d_b)))"
                                   "t")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "convergence" -1)
                                      (("1"
                                        (expand "convergence")
                                        (("1"
                                          (expand "convergence" 1)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (split 1)
                                              (("1"
                                                (expand "adh" 1)
                                                (("1"
                                                  (skeep)
                                                  (("1"
                                                    (expand "adh" -1)
                                                    (("1"
                                                      (inst -1 "e!1")
                                                      (("1"
                                                        (skeep)
                                                        (("1"
                                                          (inst 1 "x")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (expand
                                                             "A"
                                                             1
                                                             1)
                                                            (("2"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (skeep)
                                                (("2"
                                                  (inst -2 "epsilon")
                                                  (("2"
                                                    (skeep)
                                                    (("2"
                                                      (inst
                                                       1
                                                       "min(delta,t-car(cdr(d_b)))")
                                                      (("1"
                                                        (skeep)
                                                        (("1"
                                                          (expand
                                                           "NQ"
                                                           1)
                                                          (("1"
                                                            (expand
                                                             "g_1"
                                                             1
                                                             2)
                                                            (("1"
                                                              (typepred
                                                               "d_b")
                                                              (("1"
                                                                (inst
                                                                 -5
                                                                 "car(d_b)")
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (expand
                                                                       "g_1"
                                                                       1
                                                                       1)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (case
                                                                           "deriv[(d)](f)(car(cdr(d_b))) * x / x = deriv[(d)](f)(car(cdr(d_b)))")
                                                                          (("1"
                                                                            (replace
                                                                             -1
                                                                             1)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (mult-by
                                                                             1
                                                                             "x")
                                                                            nil
                                                                            nil)
                                                                           ("3"
                                                                            (assert)
                                                                            (("3"
                                                                              (lemma
                                                                               "not_one_element")
                                                                              (("3"
                                                                                (propax)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("4"
                                                                            (lemma
                                                                             "deriv_domain")
                                                                            (("4"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide -)
                                                        (("2"
                                                          (hide 2 3)
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (lemma "not_one_element")
                                    (("2" (propax) nil nil))
                                    nil)
                                   ("3"
                                    (lemma "deriv_domain")
                                    (("3" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (typepred "d_b")
            (("2" (inst -5 "t")
              (("2" (flatten) (("2" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((not_one_element_real formula-decl nil deriv_domain analysis)
    (deriv_domain_real formula-decl nil deriv_domain analysis)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis)
    (real_times_real_is_real application-judgement "real" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (d formal-const-decl "[real -> bool]" r2v_diff_extension nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (d_b const-decl "{dd: list[real] |
   (length(dd) = 2 AND (d(car(dd)) AND d(car(cdr(dd))))) AND
    FORALL (x: real): (car(dd) <= x AND x <= car(cdr(dd))) IFF d(x)}"
     r2v_continuous_extension nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (deriv_domain? const-decl "bool" deriv_domain_def analysis)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (derivable? const-decl "bool" derivatives analysis)
    (deriv_fun type-eq-decl nil derivatives analysis)
    (deriv const-decl "[T -> real]" derivatives analysis)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (derivable? const-decl "bool" derivatives_def analysis)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (deriv const-decl "real" derivatives_def analysis)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (convergence const-decl "bool" lim_of_functions analysis)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (/= const-decl "boolean" notequal nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (setof type-eq-decl nil defined_types nil)
    (A const-decl "setof[nzreal]" derivatives_def analysis)
    (t skolem-const-decl "{tt: real | car(cdr(d_b)) < tt}"
     r2v_diff_extension nil)
    (x skolem-const-decl "(A(car(cdr(d_b))))" r2v_diff_extension nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (adh const-decl "setof[real]" convergence_functions analysis)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (delta skolem-const-decl "posreal" r2v_diff_extension nil)
    (NQ const-decl "real" derivatives_def analysis)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (fullset const-decl "set" sets nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (both_sides_times1 formula-decl nil real_props nil)
    (div_cancel2 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (not_one_element formula-decl nil r2v_analysis nil)
    (deriv_domain formula-decl nil r2v_analysis nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (g_1 skolem-const-decl "[real -> numfield]" r2v_diff_extension nil)
    (convergence const-decl "bool" convergence_functions analysis)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (convergent? const-decl "bool" lim_of_functions analysis)
    (deriv_def formula-decl nil derivatives_def analysis))
   shostak))
 (ext_d_TCC1 0
  (ext_d_TCC5-1 nil 3790442589
   ("" (skeep)
    (("" (expand "deriv_domain?" 1)
      (("" (skeep) (("" (inst 1 "e!1/2") (("" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (deriv_domain? const-decl "bool" deriv_domain_def analysis)
    (real_plus_real_is_real application-judgement "real" reals nil))
   nil
   (ext_d assuming "analysis@derivatives[real].derivatives"
    "deriv_domain: ASSUMPTION deriv_domain_def[T].deriv_domain?")))
 (ext_d_TCC2 0
  (ext_d_TCC6-1 nil 3790442589
   ("" (skeep)
    (("" (expand "not_one_element?" 1)
      (("" (skeep) (("" (inst 1 "x+1") (("" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (not_one_element? const-decl "bool" deriv_domain_def analysis))
   nil
   (ext_d assuming "analysis@derivatives[real].derivatives"
    "not_one_element: ASSUMPTION deriv_domain_def[T].not_one_element?")))
 (ext_d_TCC3 0
  (ext_d_TCC1-1 nil 3790516250
   ("" (skeep)
    (("" (skeep)
      (("" (assert)
        (("" (expand "derivable?" -1) (("" (inst -1 "x") nil nil))
          nil))
        nil))
      nil))
    nil)
   ((derivable? const-decl "bool" derivatives analysis)
    (d formal-const-decl "[real -> bool]" r2v_diff_extension nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil
   (ext_d subtype "r2v_diff_extension.x"
    "{x | derivatives_def[real].derivable?(r2v_diff_extension.ff, x)}")))
 (ext_d_TCC4 0
  (ext_d_TCC4-1 nil 3790516250 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (d formal-const-decl "[real -> bool]" r2v_diff_extension nil)
    (fullset const-decl "set" sets nil)
    (adh const-decl "setof[real]" convergence_functions analysis)
    (NQ const-decl "real" derivatives_def analysis)
    (convergence const-decl "bool" convergence_functions analysis)
    (convergence const-decl "bool" lim_of_functions analysis)
    (convergent? const-decl "bool" lim_of_functions analysis)
    (derivable? const-decl "bool" derivatives_def analysis)
    (derivable? const-decl "bool" derivatives analysis)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil))
   nil
   (ext_d subtype "r2v_diff_extension.x"
    "{x | derivatives_def[(r2v_diff_extension.d)].derivable?(r2v_diff_extension.f, x)}")))
 (ext_d_TCC5 0
  (ext_d_TCC9-1 nil 3790442589
   ("" (skeep)
    (("" (split 1)
      (("1" (assert)
        (("1" (expand "derivable?" 1)
          (("1" (lemma "ext_derivable_ext")
            (("1" (lemma "ext_derivable_int")
              (("1" (lemma "ext_derivable_lb")
                (("1" (lemma "ext_derivable_ub")
                  (("1" (skeep)
                    (("1" (inst -4 "f" "x_1")
                      (("1" (assert) nil nil)
                       ("2" (inst -3 "f" "x_1")
                        (("1" (assert) nil nil)
                         ("2" (inst -2 "f")
                          (("2" (assert)
                            (("2" (case "x_1=car(d_b)")
                              (("1" (assert) nil nil)
                               ("2"
                                (inst -1 "f")
                                (("2"
                                  (case "x_1=car(cdr(d_b))")
                                  (("1" (assert) nil nil)
                                   ("2"
                                    (hide 5)
                                    (("2"
                                      (hide -)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (flatten)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (skeep)
        (("2" (lemma "ext_deriv_lb")
          (("2" (lemma "ext_deriv_int")
            (("2" (lemma "ext_deriv_extl")
              (("2" (lemma "ext_deriv_extu")
                (("2" (assert)
                  (("2" (typepred "x_1")
                    (("2" (typepred "d_b")
                      (("2" (inst -5 "x_1")
                        (("2" (flatten)
                          (("2" (assert)
                            (("2" (flatten)
                              (("2"
                                (assert)
                                (("2"
                                  (case "x_1 = car(d_b)")
                                  (("1"
                                    (inst -13 "f")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand "deriv" -13 6)
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (hide -12)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (inst -11 "f" "x_1")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (hide -10)
                                            (("2"
                                              (hide -9)
                                              (("2"
                                                (lemma "ext_deriv_ub")
                                                (("2"
                                                  (hide -2)
                                                  (("2"
                                                    (typepred "x_1")
                                                    (("2"
                                                      (case
                                                       "NOT x_1 = car(cdr(d_b))")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (inst -3 "f")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (expand
                                                             "deriv"
                                                             -3
                                                             6)
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((derivable? const-decl "bool" derivatives analysis)
    (ext_derivable_int formula-decl nil r2v_diff_extension nil)
    (ext_derivable_ub formula-decl nil r2v_diff_extension nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (x_1 skolem-const-decl "real" r2v_diff_extension nil)
    (d_b const-decl "{dd: list[real] |
   (length(dd) = 2 AND (d(car(dd)) AND d(car(cdr(dd))))) AND
    FORALL (x: real): (car(dd) <= x AND x <= car(cdr(dd))) IFF d(x)}"
     r2v_continuous_extension nil)
    (<= const-decl "bool" reals nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (d formal-const-decl "[real -> bool]" r2v_diff_extension nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil) (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (< const-decl "bool" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (ext_derivable_lb formula-decl nil r2v_diff_extension nil)
    (ext_derivable_ext formula-decl nil r2v_diff_extension nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (ext_deriv_lb formula-decl nil r2v_diff_extension nil)
    (ext_deriv_extl formula-decl nil r2v_diff_extension nil)
    (deriv const-decl "[T -> real]" derivatives analysis)
    (ext_deriv_ub formula-decl nil r2v_diff_extension nil)
    (x_1 skolem-const-decl "(d)" r2v_diff_extension nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (ext_deriv_extu formula-decl nil r2v_diff_extension nil)
    (ext_deriv_int formula-decl nil r2v_diff_extension nil))
   nil
   (ext_d subtype
    "LAMBDA (x: reals.real): IF reals.<(x, list_adt[real].car(r2v_continuous_extension[r2v_diff_extension.d].d_b)) THEN (number_fields.+)(number_fields.*(derivatives[(r2v_diff_extension.d)].deriv(r2v_diff_extension.f)(list_adt[real].car(r2v_continuous_extension[r2v_diff_extension.d].d_b)), ((number_fields.-)(x, list_adt[real].car(r2v_continuous_extension[r2v_diff_extension.d].d_b)))), r2v_diff_extension.f(list_adt[real].car(r2v_continuous_extension[r2v_diff_extension.d].d_b))) ELSIF reals.>(x, list_adt[real].car(list_adt[real].cdr(r2v_continuous_extension[r2v_diff_extension.d].d_b))) THEN (number_fields.+)(number_fields.*(derivatives[(r2v_diff_extension.d)].deriv(r2v_diff_extension.f)(list_adt[real].car(list_adt[real].cdr(r2v_continuous_extension[r2v_diff_extension.d].d_b))), ((number_fields.-)(x, list_adt[real].car(list_adt[real].cdr(r2v_continuous_extension[r2v_diff_extension.d].d_b))))), r2v_diff_extension.f(list_adt[real].car(list_adt[real].cdr(r2v_continuous_extension[r2v_diff_extension.d].d_b)))) ELSE r2v_diff_extension.f(x) ENDIF"
    "{ff: [reals.real -> reals.real] | booleans.AND(derivatives[real].derivable?(ff), FORALL (x: (r2v_diff_extension.d)): booleans.AND(ff(x) = r2v_diff_extension.f(x), derivatives_def[real].deriv(ff, x) = derivatives_def[(r2v_diff_extension.d)].deriv(r2v_diff_extension.f, x)))}"))))

