(r2v_sequence_convergence
 (IMP_r2v_analysis_TCC1 0
  (IMP_r2v_analysis_TCC1-1 nil 3789399357
   ("" (lemma "non_empty") (("" (propax) nil nil)) nil)
   ((non_empty formula-decl nil r2v_sequence_convergence nil)) nil
   (IMP_r2v_analysis assuming
    "r2v_analysis[r2v_sequence_convergence.d].r2v_analysis"
    "non_empty: ASSUMPTION sets[real].nonempty?(r2v_analysis.d)")))
 (IMP_r2v_analysis_TCC2 0
  (IMP_r2v_analysis_TCC2-1 nil 3789399357
   ("" (lemma "connected") (("" (propax) nil nil)) nil)
   ((connected formula-decl nil r2v_sequence_convergence nil)) nil
   (IMP_r2v_analysis assuming
    "r2v_analysis[r2v_sequence_convergence.d].r2v_analysis"
    "connected: ASSUMPTION deriv_domain_def[(r2v_analysis.d)].connected?")))
 (IMP_r2v_analysis_TCC3 0
  (IMP_r2v_analysis_TCC3-1 nil 3789399357
   ("" (lemma "not_one_element") (("" (propax) nil nil)) nil)
   ((not_one_element formula-decl nil r2v_sequence_convergence nil))
   nil
   (IMP_r2v_analysis assuming
    "r2v_analysis[r2v_sequence_convergence.d].r2v_analysis"
    "not_one_element: ASSUMPTION deriv_domain_def[(r2v_analysis.d)].not_one_element?")))
 (conv_pw?_TCC1 0
  (conv_pw?_TCC1-1 nil 3789229381
   ("" (skeep)
    (("" (typepred "fn")
      (("" (skeep -1)
        (("" (inst-cp -1 "i")
          (("" (expand "length" 1 2)
            (("" (inst -1 "0")
              (("" (assert)
                (("" (typepred "fn(i)")
                  (("" (skeep -1)
                    (("" (inst -1 "choose[real]((d))")
                      (("1" (expand "length" -3)
                        (("1" (assert)
                          (("1" (reveal -)
                            (("1" (inst -1 "x")
                              (("1" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil)
                       ("2" (lemma "non_empty")
                        (("2" (propax) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((length const-decl "nat" r2v_def nil)
    (r2v type-eq-decl nil r2v_def nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil) (set type-eq-decl nil sets nil)
    (nonempty? const-decl "bool" sets nil)
    (choose const-decl "(p)" sets nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     Optimization_Dev))
   nil
   (conv_pw? subtype
    "r2v_sequence_convergence.fn(r2v_sequence_convergence.i)(r2v_sequence_convergence.x)"
    "matrices.VectorN(r2v_sequence_convergence.length(r2v_sequence_convergence.fn))")))
 (conv_pw?_TCC2 0
  (conv_pw?_TCC2-1 nil 3789229381
   ("" (skeep)
    (("" (typepred "f" "fn")
      (("" (skeep -1)
        (("" (skeep -3)
          (("" (expand "length" -2 1)
            (("" (inst-cp -1 "choose[real]((d))")
              (("" (inst -1 "x") (("" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((length const-decl "nat" r2v_def nil)
    (r2v type-eq-decl nil r2v_def nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (choose const-decl "(p)" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     Optimization_Dev))
   nil
   (conv_pw? subtype
    "r2v_sequence_convergence.f(r2v_sequence_convergence.x)"
    "matrices.VectorN(r2v_sequence_convergence.length(r2v_sequence_convergence.fn))")))
 (conv_pw?_TCC3 0
  (conv_pw?_TCC3-1 nil 3789229381 ("" (subtype-tcc) nil nil)
   ((list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (r2v type-eq-decl nil r2v_def nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     Optimization_Dev)
    (length const-decl "nat" r2v_def nil))
   nil
   (conv_pw? subtype
    "r2v_sequence_convergence.length(r2v_sequence_convergence.fn)"
    "posnat")))
 (conv_pw?_TCC4 0
  (conv_pw?_TCC4-1 nil 3789234035 ("" (subtype-tcc) nil nil)
   ((list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (r2v type-eq-decl nil r2v_def nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     Optimization_Dev)
    (length const-decl "nat" r2v_def nil))
   nil
   (conv_pw? subtype
    "r2v_sequence_convergence.length(r2v_sequence_convergence.fn)"
    "posnat")))
 (cauchy_pw?_TCC1 0
  (cauchy_pw?_TCC1-1 nil 3789229381
   ("" (skeep)
    (("" (typepred "fn")
      (("" (skeep -1)
        (("" (expand "length" 1 2)
          (("" (inst-cp -1 "0")
            (("" (inst -1 "i")
              (("" (typepred "fn(i)")
                (("" (skeep -1)
                  (("" (inst-cp -1 "choose[real]((d))")
                    (("1" (inst -1 "x")
                      (("1" (assert)
                        (("1" (expand "length" -3)
                          (("1" (assert) nil nil)) nil))
                        nil))
                      nil)
                     ("2" (lemma "non_empty") (("2" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((length const-decl "nat" r2v_def nil)
    (r2v type-eq-decl nil r2v_def nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     Optimization_Dev)
    (choose const-decl "(p)" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil))
   nil
   (cauchy_pw? subtype
    "r2v_sequence_convergence.fn(r2v_sequence_convergence.i)(r2v_sequence_convergence.x)"
    "matrices.VectorN(r2v_sequence_convergence.length(r2v_sequence_convergence.fn))")))
 (cauchy_conv_pw 0
  (cauchy_conv_pw-1 nil 3789231110
   ("" (skeep)
    (("" (expand "conv_pw?" 1)
      (("" (expand "cauchy_pw?" -1)
        ((""
          (inst 1
           "LAMBDA(x:(d)): choose({v:VectorN(length(fn))| convergence?(LAMBDA(i:nat): fn(i)(x),v)})")
          (("1" (expand "conv_pw?" 1)
            (("1" (assert)
              (("1" (skeep)
                (("1" (expand "convergence?" 1)
                  (("1" (assert) nil nil)) nil))
                nil))
              nil))
            nil)
           ("2" (split 1)
            (("1" (inst 1 "length(fn)")
              (("1" (skeep) (("1" (assert) nil nil)) nil)) nil)
             ("2" (assert)
              (("2" (expand "length" 1 1) (("2" (assert) nil nil))
                nil))
              nil))
            nil)
           ("3" (skeep 1)
            (("3" (inst -1 "x")
              (("3" (lemma "cauchy_convergence[length(fn)]")
                (("1" (inst -1 "LAMBDA (i: nat): fn(i)(x)")
                  (("1" (assert)
                    (("1" (split -1)
                      (("1" (skeep -1)
                        (("1" (expand "nonempty?" 1)
                          (("1" (expand "empty?" -2)
                            (("1" (inst -2 "L")
                              (("1"
                                (expand "member" 1)
                                (("1"
                                  (assert)
                                  (("1"
                                    (hide -2)
                                    (("1"
                                      (expand "convergence?")
                                      (("1"
                                        (expand "convergence?" 1 1)
                                        (("1" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide 2)
                        (("2" (expand "cauchy?")
                          (("2" (assert)
                            (("2" (expand "cauchy?" -1)
                              (("2" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide 2)
                    (("2" (skeep)
                      (("2" (typepred "fn")
                        (("2" (expand "length" 1 2)
                          (("2" (skeep)
                            (("2" (inst-cp -1 "0")
                              (("2"
                                (inst -1 "i")
                                (("2"
                                  (typepred "fn(i)")
                                  (("2"
                                    (skeep -1)
                                    (("2"
                                      (inst-cp -1 "choose[real]((d))")
                                      (("1"
                                        (inst -1 "x")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "length" -3)
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (lemma "non_empty")
                                        (("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (typepred "fn")
                  (("2" (assert)
                    (("2" (hide -1 -3 2)
                      (("2" (expand "consf?" -1)
                        (("2" (assert)
                          (("2" (expand "length" 1 1)
                            (("2" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("4" (skeep)
            (("4" (typepred "fn")
              (("4" (expand "consf?" -2)
                (("4" (expand "length" 1 1) (("4" (propax) nil nil))
                  nil))
                nil))
              nil))
            nil)
           ("5" (assert)
            (("5" (skeep 1)
              (("5" (hide -1)
                (("5" (typepred "fn")
                  (("5" (expand "length" 1 2)
                    (("5" (skeep -1)
                      (("5" (inst-cp -1 "0")
                        (("5" (inst-cp -1 "i")
                          (("5" (typepred "fn(i)")
                            (("5" (expand "length" -3 1)
                              (("5"
                                (skeep -1)
                                (("5"
                                  (inst-cp -1 "choose[real]((d))")
                                  (("5"
                                    (inst -1 "x")
                                    (("5" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((VectorN type-eq-decl nil matrices matrices)
    (length const-decl "nat" r2v_def nil)
    (r2v type-eq-decl nil r2v_def nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (convergence? const-decl "bool" vector_sequences Optimization_Dev)
    (vec_seq type-eq-decl nil domain_vec2real_def Optimization_Dev)
    (nonempty? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil) (choose const-decl "(p)" sets nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     Optimization_Dev)
    (convergence? const-decl "bool" vector_sequences Optimization_Dev)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (cauchy? const-decl "bool" Cauchy_seq Optimization_Dev)
    (cauchy? const-decl "bool" Cauchy_seq Optimization_Dev)
    (cauchy_convergence formula-decl nil Cauchy_seq Optimization_Dev))
   shostak))
 (conv_u?_TCC1 0
  (conv_u?_TCC1-1 nil 3789232294 ("" (subtype-tcc) nil nil)
   ((list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (r2v type-eq-decl nil r2v_def nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     Optimization_Dev)
    (length const-decl "nat" r2v_def nil))
   nil
   (conv_u? subtype
    "r2v_sequence_convergence.length(r2v_sequence_convergence.fn)"
    "posnat")))
 (conv_u?_TCC2 0
  (conv_u?_TCC2-1 nil 3789232294
   ("" (skeep)
    (("" (typepred "fn(i)(x)-f(x)")
      (("" (typepred "f(x)")
        (("" (hide -1 -2)
          (("" (typepred "fn" "f")
            (("" (skeep)
              (("" (skeep)
                (("" (inst-cp -3 "x")
                  (("" (inst -3 "choose[real]((d))")
                    (("1" (expand "length" -5 1)
                      (("1" (inst-cp -1 "0")
                        (("1" (inst -1 "i")
                          (("1" (assert)
                            (("1" (expand "length" -3 1)
                              (("1" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (lemma "non_empty") (("2" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((length const-decl "nat" r2v_def nil)
    (r2v type-eq-decl nil r2v_def nil)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (VectorN type-eq-decl nil matrices matrices)
    (Vector type-eq-decl nil matrices matrices)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     Optimization_Dev)
    (choose const-decl "(p)" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil))
   nil
   (conv_u? subtype
    "(matrices.-)(r2v_sequence_convergence.fn(r2v_sequence_convergence.i)(r2v_sequence_convergence.x), r2v_sequence_convergence.f(r2v_sequence_convergence.x))"
    "(list_adt[real].cons?)")))
 (conv_u?_TCC3 0
  (conv_u?_TCC3-1 nil 3789234035 ("" (subtype-tcc) nil nil)
   ((list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (r2v type-eq-decl nil r2v_def nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     Optimization_Dev)
    (length const-decl "nat" r2v_def nil))
   nil
   (conv_u? subtype
    "r2v_sequence_convergence.length(r2v_sequence_convergence.fn)"
    "posnat")))
 (cauchy_u?_TCC1 0
  (cauchy_u?_TCC2-1 nil 3789232294
   ("" (skeep)
    (("" (typepred "fn(i)(x)-fn(j)(x)" "fn(i)(x)" "fn(j)(x)")
      (("" (assert)
        (("" (hide -1 -3 -4)
          (("" (typepred "fn")
            (("" (skeep)
              (("" (inst-cp -1 "i")
                (("" (inst -1 "j")
                  (("" (typepred "fn(j)")
                    (("" (typepred "fn(i)")
                      (("" (skeep)
                        (("" (skeep)
                          (("" (inst-cp -1 "choose[real]((d))")
                            (("1" (inst-cp -3 "choose[real]((d))")
                              (("1"
                                (inst-cp -1 "x")
                                (("1"
                                  (assert)
                                  (("1"
                                    (inst -4 "x")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand "length" -6)
                                        (("1"
                                          (expand "length" -7)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (replace -2)
                                              (("1"
                                                (expand "max" -9)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand
                                                     "length"
                                                     -8)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (reveal -)
                                                        (("1"
                                                          (hide -4 -5)
                                                          (("1"
                                                            (hide -3)
                                                            (("1"
                                                              (inst
                                                               -2
                                                               "0")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (lemma "non_empty")
                              (("2" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((length const-decl "nat" r2v_def nil)
    (r2v type-eq-decl nil r2v_def nil)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (VectorN type-eq-decl nil matrices matrices)
    (Vector type-eq-decl nil matrices matrices)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (choose const-decl "(p)" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     Optimization_Dev))
   nil
   (cauchy_u? subtype
    "(matrices.-)(r2v_sequence_convergence.fn(r2v_sequence_convergence.i)(r2v_sequence_convergence.x), r2v_sequence_convergence.fn(r2v_sequence_convergence.j)(r2v_sequence_convergence.x))"
    "(list_adt[real].cons?)")))
 (conv_pw_equiv 0
  (conv_pw_equiv-1 nil 3789234052
   ("" (skeep)
    (("" (split 1)
      (("1" (flatten)
        (("1" (expand "conv_pw?" -1)
          (("1" (inst 1 "norm_inf(length(fn))")
            (("1" (expand "conv_pw?" 1)
              (("1" (skeep)
                (("1" (inst -1 "x")
                  (("1" (expand "convergence?" -1)
                    (("1" (expand "convergence?")
                      (("1" (inst -1 "norm_inf(length(fn))")
                        (("1" (expand "convergence?" 1)
                          (("1" (propax) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (typepred "fn")
              (("2" (expand "consf?" -2)
                (("2" (assert)
                  (("2" (expand "length" 1 1) (("2" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (flatten)
        (("2" (expand "conv_pw?" 1)
          (("2" (skeep)
            (("2" (skeep -1)
              (("2" (expand "convergence?" 1)
                (("2" (expand "conv_pw?" -1)
                  (("2" (expand "convergence?" 1)
                    (("2" (skeep)
                      (("2" (inst -1 "x")
                        (("2" (expand "convergence?" -1)
                          (("2" (expand "convergence?" -1)
                            (("2" (skeep)
                              (("2"
                                (lemma "equiv_norm[length(fn)]")
                                (("1"
                                  (typepred "nn")
                                  (("1"
                                    (typepred "nn!1")
                                    (("1"
                                      (inst -3 "nn!1" "nn")
                                      (("1"
                                        (expand "equiv?" -3)
                                        (("1"
                                          (skeep -3)
                                          (("1"
                                            (inst -4 "epsilon*c1")
                                            (("1"
                                              (skeep)
                                              (("1"
                                                (inst 1 "N")
                                                (("1"
                                                  (skeep)
                                                  (("1"
                                                    (inst -4 "NN")
                                                    (("1"
                                                      (inst
                                                       -3
                                                       "fn(NN)(x)-f(x)")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (div-by
                                                               -3
                                                               "c1")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (div-by
                                                                   -5
                                                                   "c1")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (typepred "fn")
                                                        (("2"
                                                          (typepred
                                                           "f")
                                                          (("2"
                                                            (skeep -1)
                                                            (("2"
                                                              (skeep
                                                               -3)
                                                              (("2"
                                                                (inst-cp
                                                                 -3
                                                                 "NN")
                                                                (("2"
                                                                  (inst-cp
                                                                   -1
                                                                   "x")
                                                                  (("2"
                                                                    (inst-cp
                                                                     -1
                                                                     "choose[real]((d))")
                                                                    (("1"
                                                                      (inst-cp
                                                                       -5
                                                                       "0")
                                                                      (("1"
                                                                        (expand
                                                                         "length"
                                                                         1
                                                                         2)
                                                                        (("1"
                                                                          (typepred
                                                                           "fn(NN)(x)-f(x)")
                                                                          (("1"
                                                                            (typepred
                                                                             "fn(NN)")
                                                                            (("1"
                                                                              (typepred
                                                                               "fn(0)")
                                                                              (("1"
                                                                                (skeep
                                                                                 -1)
                                                                                (("1"
                                                                                  (skeep
                                                                                   -2)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "length"
                                                                                     -10)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "length"
                                                                                       -11)
                                                                                      (("1"
                                                                                        (inst-cp
                                                                                         -1
                                                                                         "choose[real]((d))")
                                                                                        (("1"
                                                                                          (inst-cp
                                                                                           -3
                                                                                           "choose[real]((d))")
                                                                                          (("1"
                                                                                            (hide
                                                                                             -5)
                                                                                            (("1"
                                                                                              (inst-cp
                                                                                               -3
                                                                                               "x")
                                                                                              (("1"
                                                                                                (inst-cp
                                                                                                 -1
                                                                                                 "x")
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "max"
                                                                                                   -7)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (grind)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (lemma
                                                                       "non_empty")
                                                                      (("2"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (typepred "fn")
                                  (("2"
                                    (expand "consf?" -2)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (expand "length" 1 1)
                                        (("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((convergence? const-decl "bool" vector_sequences Optimization_Dev)
    (convergence? const-decl "bool" vector_sequences Optimization_Dev)
    (convergence? const-decl "bool" vector_sequences Optimization_Dev)
    (convergence? const-decl "bool" vector_sequences Optimization_Dev)
    (norm_inf const-decl "(norm?(m))" norms Optimization_Dev)
    (norm? const-decl "bool" norms Optimization_Dev)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (r2v type-eq-decl nil r2v_def nil)
    (length const-decl "nat" r2v_def nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     Optimization_Dev)
    (Vector type-eq-decl nil matrices matrices)
    (VectorN type-eq-decl nil matrices matrices)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (scal def-decl "VectorN(length(v2))" matrices matrices)
    (add def-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (sub const-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (* const-decl "VectorN(length(v2))" matrices matrices)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic Optimization_Dev)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (choose const-decl "(p)" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (equiv? const-decl "bool" norms_equiv Optimization_Dev)
    (equiv_norm formula-decl nil norms_equiv Optimization_Dev))
   shostak))
 (cauchy_pw_equiv 0
  (cauchy_pw_equiv-1 nil 3789234933
   ("" (skeep)
    (("" (split 1)
      (("1" (flatten)
        (("1" (expand "cauchy_pw?" -1)
          (("1" (inst 1 "norm_inf(length(fn))")
            (("1" (expand "cauchy_pw?" 1)
              (("1" (skeep)
                (("1" (inst -1 "x")
                  (("1" (expand "cauchy?")
                    (("1" (expand "cauchy?")
                      (("1" (skeep)
                        (("1" (inst -1 "norm_inf(length(fn))")
                          (("1" (inst -1 "epsilon") nil nil)
                           ("2" (typepred "fn")
                            (("2" (expand "consf?" -2)
                              (("2"
                                (assert)
                                (("2"
                                  (expand "length" 1 1)
                                  (("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (typepred "fn")
              (("2" (expand "consf?" -2)
                (("2" (expand "length" 1) (("2" (propax) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (flatten)
        (("2" (skeep)
          (("2" (expand "cauchy_pw?")
            (("2" (skeep)
              (("2" (inst -1 "x")
                (("2" (expand "cauchy?")
                  (("2" (expand "cauchy?")
                    (("2" (skeep)
                      (("2" (lemma "equiv_norm[length(fn)]")
                        (("1" (inst -1 "nn" "nn!1")
                          (("1" (skeep)
                            (("1" (expand "equiv?" -1)
                              (("1"
                                (skeep -1)
                                (("1"
                                  (inst -2 "epsilon/c2")
                                  (("1"
                                    (skeep)
                                    (("1"
                                      (inst 1 "N")
                                      (("1"
                                        (skeep)
                                        (("1"
                                          (inst -2 "MM" "NN")
                                          (("1"
                                            (mult-by -2 "c2")
                                            (("1"
                                              (inst
                                               -1
                                               "fn(NN)(x)-fn(MM)(x)")
                                              (("1" (assert) nil nil)
                                               ("2"
                                                (typepred
                                                 "fn(NN)(x)-fn(MM)(x)"
                                                 "fn")
                                                (("2"
                                                  (hide -1)
                                                  (("2"
                                                    (skeep -2)
                                                    (("2"
                                                      (inst-cp -2 "NN")
                                                      (("2"
                                                        (inst -2 "MM")
                                                        (("2"
                                                          (typepred
                                                           "fn(MM)"
                                                           "fn(NN)")
                                                          (("2"
                                                            (skeep)
                                                            (("2"
                                                              (skeep)
                                                              (("2"
                                                                (inst-cp
                                                                 -1
                                                                 "x")
                                                                (("2"
                                                                  (inst-cp
                                                                   -1
                                                                   "choose[real]((d))")
                                                                  (("1"
                                                                    (inst
                                                                     -4
                                                                     "choose[real]((d))")
                                                                    (("1"
                                                                      (expand
                                                                       "length"
                                                                       -6)
                                                                      (("1"
                                                                        (expand
                                                                         "length"
                                                                         -7)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (reveal
                                                                             -)
                                                                            (("1"
                                                                              (inst
                                                                               -1
                                                                               "x")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (hide
                                                                                   -2
                                                                                   -3
                                                                                   -4
                                                                                   -5
                                                                                   -6
                                                                                   -7
                                                                                   -8)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "max"
                                                                                     -8)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "length"
                                                                                         1
                                                                                         2)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (reveal
                                                                                             -)
                                                                                            (("1"
                                                                                              (inst
                                                                                               -3
                                                                                               "0")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (lemma
                                                                     "non_empty")
                                                                    (("2"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (typepred "fn")
                          (("2" (expand "consf?" -2)
                            (("2" (assert)
                              (("2"
                                (expand "length" 1 1)
                                (("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cauchy? const-decl "bool" Cauchy_seq Optimization_Dev)
    (cauchy? const-decl "bool" Cauchy_seq Optimization_Dev)
    (cauchy? const-decl "bool" Cauchy_seq Optimization_Dev)
    (cauchy? const-decl "bool" Cauchy_seq Optimization_Dev)
    (norm_inf const-decl "(norm?(m))" norms Optimization_Dev)
    (norm? const-decl "bool" norms Optimization_Dev)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (r2v type-eq-decl nil r2v_def nil)
    (length const-decl "nat" r2v_def nil)
    (equiv? const-decl "bool" norms_equiv Optimization_Dev)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     Optimization_Dev)
    (set type-eq-decl nil sets nil)
    (nonempty? const-decl "bool" sets nil)
    (choose const-decl "(p)" sets nil)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (VectorN type-eq-decl nil matrices matrices)
    (Vector type-eq-decl nil matrices matrices)
    (equiv_norm formula-decl nil norms_equiv Optimization_Dev))
   shostak))
 (conv_u_equiv_TCC1 0
  (conv_u_equiv_TCC1-1 nil 3789234913 ("" (subtype-tcc) nil nil)
   ((list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (r2v type-eq-decl nil r2v_def nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     Optimization_Dev)
    (length const-decl "nat" r2v_def nil))
   nil
   (conv_u_equiv subtype "r2v_sequence_convergence.f"
    "{ff: r2v_def[r2v_sequence_convergence.d].r2v | r2v_def[r2v_sequence_convergence.d].length(ff) = r2v_def[r2v_sequence_convergence.d].length(r2v_sequence_convergence.fn(0))}")))
 (conv_u_equiv 0
  (conv_u_equiv-1 nil 3789236494
   ("" (skeep)
    (("" (split 1)
      (("1" (flatten)
        (("1" (expand "conv_u?" -1)
          (("1" (inst -1 "norm_inf(length(fn))")
            (("1" (inst 1 "norm_inf(length(fn))")
              (("1" (expand "conv_u?" 1) (("1" (propax) nil nil)) nil)
               ("2" (typepred "fn")
                (("2" (expand "consf?")
                  (("2" (expand "length" 1 1) (("2" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (typepred "fn")
              (("2" (expand "consf?" -2)
                (("2" (assert)
                  (("2" (expand "length" +) (("2" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (flatten)
        (("2" (skeep)
          (("2" (expand "conv_u?")
            (("2" (skeep)
              (("2" (lemma "equiv_norm[length(fn)]")
                (("1" (inst -1 "nn!1" "nn")
                  (("1" (skeep)
                    (("1" (expand "equiv?" -1)
                      (("1" (skeep -1)
                        (("1" (inst -2 "eps*c1")
                          (("1" (skeep)
                            (("1" (inst 1 "N")
                              (("1"
                                (skeep)
                                (("1"
                                  (inst -2 "i" "x")
                                  (("1"
                                    (inst -1 "fn(i)(x)-f(x)")
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (div-by -3 "c1")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (div-by -1 "c1")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (typepred
                                       "fn(i)(x)-f(x)"
                                       "fn(i)(x)"
                                       "f(x)")
                                      (("2"
                                        (hide -1 -3 -4)
                                        (("2"
                                          (typepred "f")
                                          (("2"
                                            (typepred "fn")
                                            (("2"
                                              (skeep -1)
                                              (("2"
                                                (skeep -3)
                                                (("2"
                                                  (inst-cp -1 "0")
                                                  (("2"
                                                    (expand
                                                     "length"
                                                     1
                                                     2)
                                                    (("2"
                                                      (expand
                                                       "length"
                                                       -5
                                                       2)
                                                      (("2"
                                                        (inst-cp
                                                         -4
                                                         "x")
                                                        (("2"
                                                          (inst-cp
                                                           -4
                                                           "choose[real]((d))")
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "i")
                                                            (("1"
                                                              (typepred
                                                               "fn(i)")
                                                              (("1"
                                                                (skeep
                                                                 -1)
                                                                (("1"
                                                                  (inst-cp
                                                                   -1
                                                                   "x")
                                                                  (("1"
                                                                    (inst-cp
                                                                     -1
                                                                     "choose[real]((d))")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (lemma
                                                             "non_empty")
                                                            (("2"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (typepred "fn")
                  (("2" (expand "consf?" -2)
                    (("2" (assert)
                      (("2" (expand "length" 1 1)
                        (("2" (propax) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((norm_inf const-decl "(norm?(m))" norms Optimization_Dev)
    (norm? const-decl "bool" norms Optimization_Dev)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (r2v type-eq-decl nil r2v_def nil)
    (length const-decl "nat" r2v_def nil)
    (equiv? const-decl "bool" norms_equiv Optimization_Dev)
    (set type-eq-decl nil sets nil)
    (nonempty? const-decl "bool" sets nil)
    (choose const-decl "(p)" sets nil)
    (sub const-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (add def-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (scal def-decl "VectorN(length(v2))" matrices matrices)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (VectorN type-eq-decl nil matrices matrices)
    (Vector type-eq-decl nil matrices matrices)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     Optimization_Dev)
    (equiv_norm formula-decl nil norms_equiv Optimization_Dev))
   shostak))
 (cauchy_u_equiv 0
  (cauchy_u_equiv-1 nil 3789237363
   ("" (skeep)
    (("" (split)
      (("1" (flatten)
        (("1" (expand "cauchy_u?" -1)
          (("1" (inst 1 "norm_inf(length(fn))")
            (("1" (inst -1 "norm_inf(length(fn))")
              (("1" (expand "cauchy_u?" 1) (("1" (propax) nil nil))
                nil))
              nil)
             ("2" (typepred "fn")
              (("2" (expand "consf?" -2)
                (("2" (expand "length" 1 1) (("2" (propax) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (flatten)
        (("2" (expand "cauchy_u?" 1)
          (("2" (skeep)
            (("2" (skeep -1)
              (("2" (lemma "equiv_norm[length(fn)]")
                (("1" (inst -1 "nn" "nn!1")
                  (("1" (assert)
                    (("1" (expand "equiv?" -1)
                      (("1" (skeep -1)
                        (("1" (skeep 1)
                          (("1" (expand "cauchy_u?" -2)
                            (("1" (inst -2 "c1*eps")
                              (("1"
                                (skeep)
                                (("1"
                                  (inst 1 "N")
                                  (("1"
                                    (skeep)
                                    (("1"
                                      (inst -2 "i" "j" "x")
                                      (("1"
                                        (inst -1 "fn(i)(x)-fn(j)(x)")
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (div-by -1 "c1")
                                            (("1"
                                              (div-by -3 "c1")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (typepred
                                           "fn(i)(x)-fn(j)(x)"
                                           "fn")
                                          (("2"
                                            (hide -1)
                                            (("2"
                                              (skeep -2)
                                              (("2"
                                                (inst-cp -2 "i")
                                                (("2"
                                                  (inst -2 "j")
                                                  (("2"
                                                    (typepred
                                                     "fn(i)"
                                                     "fn(j)")
                                                    (("2"
                                                      (skeep)
                                                      (("2"
                                                        (skeep)
                                                        (("2"
                                                          (inst-cp
                                                           -1
                                                           "x")
                                                          (("2"
                                                            (inst-cp
                                                             -1
                                                             "choose[real]((d))")
                                                            (("1"
                                                              (inst
                                                               -4
                                                               "choose[real]((d))")
                                                              (("1"
                                                                (expand
                                                                 "length"
                                                                 -6)
                                                                (("1"
                                                                  (expand
                                                                   "length"
                                                                   -7)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (reveal
                                                                       -)
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         "x")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (hide
                                                                             -2
                                                                             -3
                                                                             -4
                                                                             -5
                                                                             -6
                                                                             -7
                                                                             -8)
                                                                            (("1"
                                                                              (expand
                                                                               "length"
                                                                               1
                                                                               2)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (reveal
                                                                                   -)
                                                                                  (("1"
                                                                                    (inst
                                                                                     -3
                                                                                     "0")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (hide
                                                                                         -5
                                                                                         -6
                                                                                         -7)
                                                                                        (("1"
                                                                                          (grind)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (lemma
                                                               "non_empty")
                                                              (("2"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (typepred "fn")
                  (("2" (expand "consf?" -2)
                    (("2" (assert)
                      (("2" (expand "length" 1 1)
                        (("2" (propax) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((norm_inf const-decl "(norm?(m))" norms Optimization_Dev)
    (norm? const-decl "bool" norms Optimization_Dev)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (r2v type-eq-decl nil r2v_def nil)
    (length const-decl "nat" r2v_def nil)
    (equiv? const-decl "bool" norms_equiv Optimization_Dev)
    (sub const-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (scal def-decl "VectorN(length(v2))" matrices matrices)
    (add def-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (choose const-decl "(p)" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (VectorN type-eq-decl nil matrices matrices)
    (Vector type-eq-decl nil matrices matrices)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     Optimization_Dev)
    (equiv_norm formula-decl nil norms_equiv Optimization_Dev))
   shostak))
 (cauchy_u_pw 0
  (cauchy_u_pw-1 nil 3789232671
   ("" (skeep)
    (("" (expand "cauchy_pw?")
      (("" (expand "cauchy_u?" -1)
        (("" (skeep)
          (("" (expand "cauchy?" 1)
            (("" (expand "cauchy?")
              (("" (skeep)
                (("" (inst -1 "nn")
                  (("" (skeep)
                    (("" (inst -1 "epsilon")
                      (("" (skeep)
                        (("" (inst 1 "N")
                          (("" (skeep)
                            (("" (inst -1 "NN" "MM" "x") nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cauchy? const-decl "bool" Cauchy_seq Optimization_Dev)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (norm? const-decl "bool" norms Optimization_Dev)
    (r2v type-eq-decl nil r2v_def nil)
    (length const-decl "nat" r2v_def nil)
    (cauchy? const-decl "bool" Cauchy_seq Optimization_Dev))
   shostak))
 (cauchy_u_conv_pw 0
  (cauchy_u_conv_pw-1 nil 3789232741
   ("" (lemma "cauchy_u_pw")
    (("" (lemma "cauchy_conv_pw")
      (("" (skeep)
        (("" (inst?) (("" (inst?) (("" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (r2v type-eq-decl nil r2v_def nil)
    (length const-decl "nat" r2v_def nil))
   shostak))
 (K_epsn 0
  (K_epsn-1 nil 3789310343
   ("" (skeep)
    (("" (flip-ineq 1)
      (("" (inst -2 "(K-C)/2")
        (("1" (assert) nil nil) ("2" (assert) nil nil)) nil))
      nil))
    nil)
   nil shostak))
 (norm_conv_bound_TCC1 0
  (norm_conv_bound_TCC1-1 nil 3789314621 ("" (subtype-tcc) nil nil)
   ((list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (r2v type-eq-decl nil r2v_def nil)
    (length const-decl "nat" r2v_def nil))
   nil
   (norm_conv_bound subtype "r2v_sequence_convergence.ff"
    "{ff: r2v_def[r2v_sequence_convergence.d].r2v | r2v_def[r2v_sequence_convergence.d].length(ff) = r2v_sequence_convergence.length(r2v_sequence_convergence.fn)}")))
 (norm_conv_bound_TCC2 0
  (norm_conv_bound_TCC1-1 nil 3789309596
   ("" (skeep)
    (("" (typepred "v-fn(j)(x)")
      (("" (typepred "v" "fn(j)")
        (("" (typepred "fn")
          (("" (hide -3)
            (("" (assert)
              (("" (expand "consf?" -2)
                (("" (expand "length" -3 2)
                  (("" (skeep)
                    (("" (skeep)
                      (("" (inst-cp -1 "0")
                        (("" (inst -1 "j") (("" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((length const-decl "nat" r2v_def nil)
    (r2v type-eq-decl nil r2v_def nil)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (VectorN type-eq-decl nil matrices matrices)
    (Vector type-eq-decl nil matrices matrices)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     Optimization_Dev))
   nil
   (norm_conv_bound subtype
    "(matrices.-)(r2v_sequence_convergence.v, r2v_sequence_convergence.fn(r2v_sequence_convergence.j)(r2v_sequence_convergence.x))"
    "(list_adt[real].cons?)")))
 (norm_conv_bound_TCC3 0
  (norm_conv_bound_TCC2-1 nil 3789309596
   ("" (skeep)
    (("" (typepred "v-f(x)" "v" "f(x)")
      (("" (hide -1 -3 -5)
        (("" (typepred "f")
          (("" (skeep)
            (("" (expand "length" -2 1)
              (("" (inst-cp -1 "choose[real]((d))")
                (("" (inst-cp -1 "x")
                  (("" (assert)
                    (("" (expand "length" -6 2)
                      (("" (assert)
                        (("" (typepred "fn")
                          (("" (expand "consf?" -2)
                            (("" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((length const-decl "nat" r2v_def nil)
    (r2v type-eq-decl nil r2v_def nil)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (VectorN type-eq-decl nil matrices matrices)
    (Vector type-eq-decl nil matrices matrices)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil) (set type-eq-decl nil sets nil)
    (nonempty? const-decl "bool" sets nil)
    (choose const-decl "(p)" sets nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     Optimization_Dev))
   nil
   (norm_conv_bound subtype
    "(matrices.-)(r2v_sequence_convergence.v, r2v_sequence_convergence.f(r2v_sequence_convergence.x))"
    "(list_adt[real].cons?)")))
 (norm_conv_bound 0
  (norm_conv_bound-1 nil 3789310047
   ("" (skeep)
    (("" (skeep -1)
      ((""
        (case " FORALL (j: {ii: nat | ii >= N}):
               abs( norm_inf(length(fn))(v - f(x)) - norm_inf(length(fn))(fn(j)(x)-f(x))) <= eps")
        (("1" (hide -2)
          (("1" (lemma "K_epsn")
            (("1" (inst -1 " norm_inf(length(fn))(v - f(x))" "eps")
              (("1" (assert)
                (("1" (hide 2)
                  (("1" (skeep)
                    (("1" (reveal -)
                      (("1" (hide -1 -2)
                        (("1" (typepred "f")
                          (("1" (hide -1 -2)
                            (("1" (expand "conv_pw?" -1)
                              (("1"
                                (inst -1 "x")
                                (("1"
                                  (expand "convergence?" -1)
                                  (("1"
                                    (expand "convergence?" -1)
                                    (("1"
                                      (inst -1 "norm_inf(length(fn))")
                                      (("1"
                                        (inst -1 "eps_1")
                                        (("1"
                                          (skeep)
                                          (("1"
                                            (inst -2 "max(N,N!1)+1")
                                            (("1"
                                              (inst -1 "max(N,N!1)+1")
                                              (("1" (assert) nil nil)
                                               ("2"
                                                (case
                                                 "NOT norm_inf(length(fn))(v - f(x)) -
                        norm_inf(length(fn))(fn(1 + max(N, N!1))(x) - f(x)) <= eps")
                                                (("1" (assert) nil nil)
                                                 ("2" (assert) nil nil)
                                                 ("3"
                                                  (case
                                                   "norm_inf(length(fn))(v - f(x))  <= eps + eps_1")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (assert)
          (("2" (hide 2)
            (("2" (skeep)
              (("2" (inst -1 "j")
                (("2" (lemma "reverse_triag")
                  (("2" (inst?)
                    (("1" (assert)
                      (("1"
                        (case "v - f(x) - (fn(j)(x) - f(x)) = v - fn(j)(x)")
                        (("1" (assert) nil nil)
                         ("2" (hide 2 -2 -1)
                          (("2" (lemma "quad_cancel")
                            (("2" (inst?)
                              (("1"
                                (assert)
                                (("1"
                                  (hide 2)
                                  (("1"
                                    (split 1)
                                    (("1"
                                      (typepred "f")
                                      (("1"
                                        (expand "length" -2 1)
                                        (("1"
                                          (typepred "v")
                                          (("1"
                                            (expand "length" -2 2)
                                            (("1"
                                              (skeep -3)
                                              (("1"
                                                (typepred "f")
                                                (("1"
                                                  (hide -1)
                                                  (("1"
                                                    (inst-cp -5 "x")
                                                    (("1"
                                                      (inst
                                                       -5
                                                       "choose[real]((d))")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (typepred "f" "fn")
                                      (("2"
                                        (skeep)
                                        (("2"
                                          (skeep)
                                          (("2"
                                            (inst-cp -1 "x")
                                            (("2"
                                              (inst-cp
                                               -1
                                               "choose[real]((d))")
                                              (("1"
                                                (inst-cp -6 "j")
                                                (("1"
                                                  (inst -6 "0")
                                                  (("1"
                                                    (typepred "fn(j)")
                                                    (("1"
                                                      (skeep -1)
                                                      (("1"
                                                        (inst-cp
                                                         -1
                                                         "x")
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "choose[real]((d))")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (expand
                                                               "length"
                                                               -6
                                                               1)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (expand
                                                                   "length"
                                                                   -9)
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (lemma "non_empty")
                                                (("2"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (typepred "fn")
                                (("2"
                                  (hide 2)
                                  (("2"
                                    (expand "consf?" -2)
                                    (("2"
                                      (skeep -1)
                                      (("2"
                                        (inst-cp -1 "0")
                                        (("2"
                                          (inst -1 "j")
                                          (("2"
                                            (typepred "fn(j)")
                                            (("2"
                                              (expand "length" -2 1)
                                              (("2"
                                                (skeep)
                                                (("2"
                                                  (typepred "fn")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (skeep -1)
                                                      (("2"
                                                        (inst-cp
                                                         -1
                                                         "j")
                                                        (("2"
                                                          (inst -1 "0")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (inst-cp
                                                               -4
                                                               "x")
                                                              (("2"
                                                                (inst
                                                                 -4
                                                                 "choose[real]((d))")
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (hide 2)
                                (("3"
                                  (typepred "f")
                                  (("3"
                                    (expand "length" -2)
                                    (("3"
                                      (skeep -1)
                                      (("3"
                                        (inst-cp
                                         -1
                                         "choose[real]((d))")
                                        (("3"
                                          (inst -1 "x")
                                          (("3"
                                            (assert)
                                            (("3"
                                              (typepred "fn")
                                              (("3"
                                                (expand "consf?" -2)
                                                (("3"
                                                  (skeep -1)
                                                  (("3"
                                                    (inst-cp -1 "0")
                                                    (("3"
                                                      (assert)
                                                      (("3"
                                                        (typepred
                                                         "fn(0)")
                                                        (("3"
                                                          (skeep -1)
                                                          (("3"
                                                            (inst-cp
                                                             -1
                                                             "choose[real]((d))")
                                                            (("3"
                                                              (inst-cp
                                                               -1
                                                               "x")
                                                              (("3"
                                                                (assert)
                                                                (("3"
                                                                  (expand
                                                                   "length"
                                                                   -6)
                                                                  (("3"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("4"
                                (typepred "v")
                                (("4"
                                  (typepred "fn")
                                  (("4"
                                    (expand "consf?" -2)
                                    (("4"
                                      (expand "length" -4 2)
                                      (("4" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide 2)
                      (("2" (hide -1)
                        (("2" (typepred "fn(j)(x)-f(x)")
                          (("2" (typepred "f")
                            (("2" (typepred "fn")
                              (("2"
                                (skeep -1)
                                (("2"
                                  (skeep -3)
                                  (("2"
                                    (inst-cp -1 "j")
                                    (("2"
                                      (inst-cp -1 "0")
                                      (("2"
                                        (inst-cp
                                         -5
                                         "choose[real]((d))")
                                        (("1"
                                          (inst -5 "x")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "length" -7 1)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand "length" 1 2)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (typepred
                                                       "fn(j)")
                                                      (("1"
                                                        (skeep)
                                                        (("1"
                                                          (inst-cp
                                                           -1
                                                           "choose[real]((d))")
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "x")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (expand
                                                                 "length"
                                                                 -5
                                                                 1)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (expand
                                                                     "length"
                                                                     -4)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (lemma "non_empty")
                                          (("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (hide -1 2)
                      (("3" (typepred "v-f(x)")
                        (("3" (typepred "v" "f")
                          (("3" (hide -1 -6)
                            (("3" (skeep)
                              (("3"
                                (expand "length" 1 2)
                                (("3"
                                  (expand "length" -1 2)
                                  (("3"
                                    (inst-cp -2 "x")
                                    (("3"
                                      (inst -2 "choose[real]((d))")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "length" -4 1)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (replace -1 -6)
                                              (("1"
                                                (replace -4 -6 rl)
                                                (("1" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (lemma "non_empty")
                                        (("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (hide -1 2)
          (("3" (skeep)
            (("3" (typepred "fn(j)(x)-f(x)")
              (("3" (hide -1)
                (("3" (typepred "f(x)")
                  (("3" (typepred "fn(j)(x)")
                    (("3" (hide -1 -2)
                      (("3" (typepred "f")
                        (("3" (typepred "fn(j)")
                          (("3" (typepred "fn")
                            (("3" (expand "consf?" -2)
                              (("3"
                                (skeep)
                                (("3"
                                  (skeep)
                                  (("3"
                                    (skeep)
                                    (("3"
                                      (inst-cp -1 "j")
                                      (("3"
                                        (inst -1 "0")
                                        (("3"
                                          (inst-cp
                                           -4
                                           "choose[real]((d))")
                                          (("1"
                                            (inst -4 "x")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (inst-cp
                                                 -6
                                                 "choose[real]((d))")
                                                (("1"
                                                  (inst -6 "x")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (lemma "non_empty")
                                            (("2" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((reverse_triag formula-decl nil norms Optimization_Dev)
    (add def-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (scal def-decl "VectorN(length(v2))" matrices matrices)
    (sub const-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (choose const-decl "(p)" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (quad_cancel formula-decl nil vector_arithmetic Optimization_Dev)
    (convergence? const-decl "bool" vector_sequences Optimization_Dev)
    (convergence? const-decl "bool" vector_sequences Optimization_Dev)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (norm? const-decl "bool" norms Optimization_Dev)
    (norm_inf const-decl "(norm?(m))" norms Optimization_Dev)
    (r2v type-eq-decl nil r2v_def nil)
    (length const-decl "nat" r2v_def nil)
    (Vector type-eq-decl nil matrices matrices)
    (VectorN type-eq-decl nil matrices matrices)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     Optimization_Dev))
   shostak))
 (cauchy_u_conv_u 0
  (cauchy_u_conv_u-1 nil 3789232766
   ("" (skeep)
    (("" (expand "conv_u?")
      (("" (lemma "conv_u_equiv")
        (("" (inst?)
          (("" (lemma "cauchy_u_conv_pw")
            (("" (inst -1 "fn")
              (("" (assert)
                (("" (expand "conv_pw?" -1)
                  (("" (skeep -1)
                    (("" (inst 1 "f")
                      (("1" (inst -2 "f")
                        (("1" (assert)
                          (("1" (hide 2)
                            (("1" (inst 1 "norm_inf(length(fn))")
                              (("1"
                                (expand "conv_u?" 1)
                                (("1"
                                  (expand "cauchy_u?" -2)
                                  (("1"
                                    (inst -2 "norm_inf(length(fn))")
                                    (("1"
                                      (skeep)
                                      (("1"
                                        (inst -2 "eps/2")
                                        (("1"
                                          (skeep)
                                          (("1"
                                            (inst 1 "N")
                                            (("1"
                                              (skeep)
                                              (("1"
                                                (inst -2 "i" "_" "x")
                                                (("1"
                                                  (lemma
                                                   "norm_conv_bound")
                                                  (("1"
                                                    (inst
                                                     -1
                                                     "fn"
                                                     "f"
                                                     "fn(i)(x)"
                                                     "eps/2"
                                                     "x")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (hide 2)
                                                        (("1"
                                                          (inst 1 "N")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (skeep)
                                                              (("1"
                                                                (inst
                                                                 -2
                                                                 "j")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide -2 2)
                                                      (("2"
                                                        (typepred "fn")
                                                        (("2"
                                                          (expand
                                                           "length"
                                                           1
                                                           2)
                                                          (("2"
                                                            (skeep)
                                                            (("2"
                                                              (inst-cp
                                                               -1
                                                               "0")
                                                              (("2"
                                                                (inst-cp
                                                                 -1
                                                                 "i")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (expand
                                                                     "length"
                                                                     -2
                                                                     1)
                                                                    (("2"
                                                                      (typepred
                                                                       "fn(i)")
                                                                      (("2"
                                                                        (skeep)
                                                                        (("2"
                                                                          (inst-cp
                                                                           -1
                                                                           "choose[real]((d))")
                                                                          (("2"
                                                                            (inst
                                                                             -1
                                                                             "x")
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (hide 2)
                                                      (("3"
                                                        (hide -2)
                                                        (("3"
                                                          (typepred
                                                           "f"
                                                           "fn")
                                                          (("3"
                                                            (assert)
                                                            (("3"
                                                              (expand
                                                               "length"
                                                               -2
                                                               2)
                                                              (("3"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (typepred "fn")
                                      (("2"
                                        (expand "consf?" -2)
                                        (("2"
                                          (expand "length" 1 1)
                                          (("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (typepred "fn")
                                (("2"
                                  (expand "consf?" -2)
                                  (("2"
                                    (expand "length" 1 1)
                                    (("2" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert)
                        (("2" (expand "length" 1 1)
                          (("2" (assert)
                            (("2" (typepred "fn")
                              (("2"
                                (typepred "f")
                                (("2"
                                  (skeep)
                                  (("2"
                                    (skeep)
                                    (("2"
                                      (expand "length" -2)
                                      (("2" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (r2v type-eq-decl nil r2v_def nil)
    (length const-decl "nat" r2v_def nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (norm? const-decl "bool" norms Optimization_Dev)
    (norm_inf const-decl "(norm?(m))" norms Optimization_Dev)
    (choose const-decl "(p)" sets nil)
    (nonempty? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (VectorN type-eq-decl nil matrices matrices)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     Optimization_Dev))
   shostak))
 (conv_u_cont 0
  (conv_u_cont-1 nil 3789298284
   ("" (skeep)
    (("" (expand "continuous?" 1)
      (("" (skeep)
        (("" (expand "continuous?" 1)
          (("" (skeep)
            (("" (expand "continuous?" 1)
              (("" (skeep)
                (("" (expand "conv_u?" -1)
                  (("" (inst -1 "norm_inf(length(fn))")
                    (("1" (inst -1 "epsilon/3")
                      (("1" (skeep)
                        (("1" (inst -2 "N+1")
                          (("1" (expand "continuous?" -2)
                            (("1" (inst -2 "i")
                              (("1"
                                (expand "continuous?" -2)
                                (("1"
                                  (inst -2 "x0")
                                  (("1"
                                    (expand "continuous?" -2)
                                    (("1"
                                      (inst -2 "epsilon/3")
                                      (("1"
                                        (skeep -2)
                                        (("1"
                                          (inst 1 "delta")
                                          (("1"
                                            (skeep)
                                            (("1"
                                              (inst -2 "x")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (hide -3)
                                                  (("1"
                                                    (case
                                                     "abs(nth(f, i)(x) - nth(f, i)(x0))  <= abs(nth(f, i)(x) - nth(fn(1+N),i)(x)) + abs(nth(fn(1 + N), i)(x) - nth(fn(1 + N), i)(x0)) + abs(nth(fn(1+N),i)(x0) - nth(f, i)(x0))")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (inst-cp
                                                         -2
                                                         "1+N"
                                                         "x0")
                                                        (("1"
                                                          (lemma
                                                           "norm_inf_nth_ineq")
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "fn(1 + N)(x0) - f(x0)"
                                                             "i")
                                                            (("1"
                                                              (case
                                                               "abs(nth(fn(1 + N)(x0) - f(x0), i)) = abs(nth(fn(1 + N), i)(x0) - nth(f, i)(x0))")
                                                              (("1"
                                                                (inst
                                                                 -4
                                                                 "N+1"
                                                                 "x")
                                                                (("1"
                                                                  (lemma
                                                                   "norm_inf_nth_ineq")
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     "(fn(N + 1)(x) - f(x))"
                                                                     "i")
                                                                    (("1"
                                                                      (expand
                                                                       "norm_inf"
                                                                       -5)
                                                                      (("1"
                                                                        (expand
                                                                         "norm_inf"
                                                                         -6)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (case
                                                                             "abs(nth(f, i)(x) - nth(fn(1 + N), i)(x)) =  abs(nth((fn(1 + N)(x) - f(x)), i))")
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil)
                                                                             ("2"
                                                                              (lemma
                                                                               "abs_diff_commute")
                                                                              (("2"
                                                                                (inst
                                                                                 -1
                                                                                 "nth(f, i)(x)"
                                                                                 "nth(fn(1 + N), i)(x)")
                                                                                (("2"
                                                                                  (replace
                                                                                   -1
                                                                                   1)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "nth"
                                                                                     1
                                                                                     1)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "nth"
                                                                                       1
                                                                                       2)
                                                                                      (("2"
                                                                                        (lemma
                                                                                         "nth_subtract")
                                                                                        (("2"
                                                                                          (inst?)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (split
                                                                                               -1)
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -1
                                                                                                 "i")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (hide
                                                                                                 -)
                                                                                                (("2"
                                                                                                  (hide
                                                                                                   2
                                                                                                   3)
                                                                                                  (("2"
                                                                                                    (typepred
                                                                                                     "fn(1+N)(x)")
                                                                                                    (("2"
                                                                                                      (typepred
                                                                                                       "fn(1+N)")
                                                                                                      (("2"
                                                                                                        (typepred
                                                                                                         "f")
                                                                                                        (("2"
                                                                                                          (typepred
                                                                                                           "fn")
                                                                                                          (("2"
                                                                                                            (skeep
                                                                                                             -1)
                                                                                                            (("2"
                                                                                                              (skeep
                                                                                                               -3)
                                                                                                              (("2"
                                                                                                                (typepred
                                                                                                                 "fn")
                                                                                                                (("2"
                                                                                                                  (skeep
                                                                                                                   -1)
                                                                                                                  (("2"
                                                                                                                    (inst-cp
                                                                                                                     -1
                                                                                                                     "1+N")
                                                                                                                    (("2"
                                                                                                                      (inst
                                                                                                                       -1
                                                                                                                       "0")
                                                                                                                      (("2"
                                                                                                                        (inst-cp
                                                                                                                         -6
                                                                                                                         "x")
                                                                                                                        (("2"
                                                                                                                          (expand
                                                                                                                           "length"
                                                                                                                           -2
                                                                                                                           1)
                                                                                                                          (("2"
                                                                                                                            (inst-cp
                                                                                                                             -6
                                                                                                                             "choose[real]((d))")
                                                                                                                            (("2"
                                                                                                                              (assert)
                                                                                                                              (("2"
                                                                                                                                (expand
                                                                                                                                 "length"
                                                                                                                                 -9
                                                                                                                                 1)
                                                                                                                                (("2"
                                                                                                                                  (assert)
                                                                                                                                  (("2"
                                                                                                                                    (reveal
                                                                                                                                     -)
                                                                                                                                    (("2"
                                                                                                                                      (hide
                                                                                                                                       -20)
                                                                                                                                      (("2"
                                                                                                                                        (hide
                                                                                                                                         -11
                                                                                                                                         -12
                                                                                                                                         -13
                                                                                                                                         -14
                                                                                                                                         -15
                                                                                                                                         -16
                                                                                                                                         -17
                                                                                                                                         -18
                                                                                                                                         -19
                                                                                                                                         -20)
                                                                                                                                        (("2"
                                                                                                                                          (typepred
                                                                                                                                           "fn(1+N)")
                                                                                                                                          (("2"
                                                                                                                                            (skeep
                                                                                                                                             -1)
                                                                                                                                            (("2"
                                                                                                                                              (inst-cp
                                                                                                                                               -1
                                                                                                                                               "choose[real]((d))")
                                                                                                                                              (("2"
                                                                                                                                                (inst
                                                                                                                                                 -1
                                                                                                                                                 "x")
                                                                                                                                                (("2"
                                                                                                                                                  (assert)
                                                                                                                                                  nil
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (hide
                                                                                             -)
                                                                                            (("2"
                                                                                              (hide
                                                                                               2
                                                                                               3)
                                                                                              (("2"
                                                                                                (typepred
                                                                                                 "f")
                                                                                                (("2"
                                                                                                  (typepred
                                                                                                   "fn")
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "consf?"
                                                                                                     -2)
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "length"
                                                                                                         -4
                                                                                                         1)
                                                                                                        (("2"
                                                                                                          (skeep
                                                                                                           -3)
                                                                                                          (("2"
                                                                                                            (inst-cp
                                                                                                             -3
                                                                                                             "choose[real]((d))")
                                                                                                            (("2"
                                                                                                              (inst
                                                                                                               -3
                                                                                                               "x")
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("3"
                                                                                            (hide
                                                                                             -)
                                                                                            (("3"
                                                                                              (hide
                                                                                               2
                                                                                               3)
                                                                                              (("3"
                                                                                                (typepred
                                                                                                 "fn(1+N)")
                                                                                                (("3"
                                                                                                  (typepred
                                                                                                   "fn")
                                                                                                  (("3"
                                                                                                    (expand
                                                                                                     "consf?"
                                                                                                     -2)
                                                                                                    (("3"
                                                                                                      (skeep
                                                                                                       -3)
                                                                                                      (("3"
                                                                                                        (skeep
                                                                                                         -1)
                                                                                                        (("3"
                                                                                                          (inst-cp
                                                                                                           -1
                                                                                                           "1+N")
                                                                                                          (("3"
                                                                                                            (inst-cp
                                                                                                             -4
                                                                                                             "choose[real]((d))")
                                                                                                            (("1"
                                                                                                              (inst
                                                                                                               -4
                                                                                                               "x")
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "length"
                                                                                                                   -2
                                                                                                                   1)
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    (("1"
                                                                                                                      (inst-cp
                                                                                                                       -1
                                                                                                                       "0")
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (lemma
                                                                                                               "non_empty")
                                                                                                              (("2"
                                                                                                                (propax)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide
                                                                       -)
                                                                      (("2"
                                                                        (hide
                                                                         2)
                                                                        (("2"
                                                                          (typepred
                                                                           "i")
                                                                          (("2"
                                                                            (typepred
                                                                             "(fn(1 + N)(x) - f(x))")
                                                                            (("2"
                                                                              (hide
                                                                               -1)
                                                                              (("2"
                                                                                (typepred
                                                                                 "f")
                                                                                (("2"
                                                                                  (skeep
                                                                                   -1)
                                                                                  (("2"
                                                                                    (inst-cp
                                                                                     -1
                                                                                     "choose[real]((d))")
                                                                                    (("1"
                                                                                      (inst
                                                                                       -1
                                                                                       "x")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "length"
                                                                                           -3
                                                                                           1)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "length"
                                                                                             -5
                                                                                             1)
                                                                                            (("1"
                                                                                              (typepred
                                                                                               "fn")
                                                                                              (("1"
                                                                                                (skeep)
                                                                                                (("1"
                                                                                                  (inst-cp
                                                                                                   -1
                                                                                                   "0")
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     -1
                                                                                                     "1+N")
                                                                                                    (("1"
                                                                                                      (typepred
                                                                                                       "fn(1+N)")
                                                                                                      (("1"
                                                                                                        (skeep
                                                                                                         -1)
                                                                                                        (("1"
                                                                                                          (inst-cp
                                                                                                           -1
                                                                                                           "choose[real]((d))")
                                                                                                          (("1"
                                                                                                            (inst
                                                                                                             -1
                                                                                                             "x")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (lemma
                                                                                       "non_empty")
                                                                                      (("2"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide
                                                                 -1
                                                                 -2
                                                                 -3
                                                                 -4
                                                                 -5)
                                                                (("2"
                                                                  (hide
                                                                   2)
                                                                  (("2"
                                                                    (lemma
                                                                     "nth_subtract")
                                                                    (("2"
                                                                      (expand
                                                                       "nth"
                                                                       1
                                                                       2)
                                                                      (("2"
                                                                        (expand
                                                                         "nth"
                                                                         1
                                                                         3)
                                                                        (("2"
                                                                          (inst?)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (split
                                                                               -1)
                                                                              (("1"
                                                                                (inst
                                                                                 -1
                                                                                 "i")
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (hide
                                                                                 2)
                                                                                (("2"
                                                                                  (typepred
                                                                                   "f"
                                                                                   "fn")
                                                                                  (("2"
                                                                                    (skeep)
                                                                                    (("2"
                                                                                      (skeep)
                                                                                      (("2"
                                                                                        (inst-cp
                                                                                         -1
                                                                                         "choose[real]((d))")
                                                                                        (("1"
                                                                                          (inst
                                                                                           -1
                                                                                           "x0")
                                                                                          (("1"
                                                                                            (inst-cp
                                                                                             -4
                                                                                             "1+N")
                                                                                            (("1"
                                                                                              (inst
                                                                                               -4
                                                                                               "0")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (typepred
                                                                                                   "fn(1+N)")
                                                                                                  (("1"
                                                                                                    (skeep
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (inst-cp
                                                                                                       -1
                                                                                                       "choose[real]((d))")
                                                                                                      (("1"
                                                                                                        (inst
                                                                                                         -1
                                                                                                         "x0")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "length"
                                                                                                             -5)
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "length"
                                                                                                                 -6)
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "length"
                                                                                                                     -7)
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (lemma
                                                                                           "non_empty")
                                                                                          (("2"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (hide
                                                                             2)
                                                                            (("2"
                                                                              (typepred
                                                                               "f")
                                                                              (("2"
                                                                                (typepred
                                                                                 "fn")
                                                                                (("2"
                                                                                  (expand
                                                                                   "consf?"
                                                                                   -2)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "length"
                                                                                     -4
                                                                                     1)
                                                                                    (("2"
                                                                                      (skeep
                                                                                       -3)
                                                                                      (("2"
                                                                                        (inst-cp
                                                                                         -3
                                                                                         "choose[real]((d))")
                                                                                        (("2"
                                                                                          (inst
                                                                                           -3
                                                                                           "x0")
                                                                                          (("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("3"
                                                                            (hide
                                                                             2)
                                                                            (("3"
                                                                              (typepred
                                                                               "fn")
                                                                              (("3"
                                                                                (expand
                                                                                 "consf?"
                                                                                 -2)
                                                                                (("3"
                                                                                  (skeep
                                                                                   -1)
                                                                                  (("3"
                                                                                    (inst-cp
                                                                                     -1
                                                                                     "0")
                                                                                    (("3"
                                                                                      (inst
                                                                                       -1
                                                                                       "1+N")
                                                                                      (("3"
                                                                                        (typepred
                                                                                         "fn(1+N)")
                                                                                        (("3"
                                                                                          (skeep
                                                                                           -1)
                                                                                          (("3"
                                                                                            (inst-cp
                                                                                             -1
                                                                                             "x0")
                                                                                            (("3"
                                                                                              (inst-cp
                                                                                               -1
                                                                                               "choose[real]((d))")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "length"
                                                                                                   -4
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (lemma
                                                                                                 "non_empty")
                                                                                                (("2"
                                                                                                  (propax)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              (("2"
                                                                (typepred
                                                                 "i")
                                                                (("2"
                                                                  (hide
                                                                   -2
                                                                   -3
                                                                   -4
                                                                   -5)
                                                                  (("2"
                                                                    (typepred
                                                                     "fn(1+N)(x0)-f(x0)")
                                                                    (("2"
                                                                      (hide
                                                                       -1)
                                                                      (("2"
                                                                        (expand
                                                                         "length"
                                                                         -2
                                                                         1)
                                                                        (("2"
                                                                          (typepred
                                                                           "f")
                                                                          (("2"
                                                                            (skeep
                                                                             -1)
                                                                            (("2"
                                                                              (inst-cp
                                                                               -1
                                                                               "choose[real]((d))")
                                                                              (("2"
                                                                                (inst
                                                                                 -1
                                                                                 "x0")
                                                                                (("2"
                                                                                  (typepred
                                                                                   "fn")
                                                                                  (("2"
                                                                                    (skeep
                                                                                     -1)
                                                                                    (("2"
                                                                                      (inst-cp
                                                                                       -1
                                                                                       "0")
                                                                                      (("2"
                                                                                        (inst
                                                                                         -1
                                                                                         "1+N")
                                                                                        (("2"
                                                                                          (typepred
                                                                                           "fn(1+N)")
                                                                                          (("2"
                                                                                            (skeep
                                                                                             -1)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "length"
                                                                                               -2)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "length"
                                                                                                 -3)
                                                                                                (("2"
                                                                                                  (inst-cp
                                                                                                   -1
                                                                                                   "choose[real]((d))")
                                                                                                  (("2"
                                                                                                    (inst
                                                                                                     -1
                                                                                                     "x0")
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      (("2"
                                                        (hide -1 -2 2)
                                                        (("2"
                                                          (lemma
                                                           "triangle")
                                                          (("2"
                                                            (case
                                                             "NOT nth(f, i)(x) - nth(f, i)(x0) = nth(fn(1 + N), i)(x0) - nth(f, i)(x0) + nth(fn(1 + N), i)(x) - nth(fn(1 + N), i)(x0) + nth(f, i)(x) - nth(fn(1 + N), i)(x)")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (replace
                                                               -1
                                                               1)
                                                              (("2"
                                                                (hide
                                                                 -1)
                                                                (("2"
                                                                  (inst-cp
                                                                   -1
                                                                   "nth(fn(1 + N), i)(x0) - nth(f, i)(x0)"
                                                                   "nth(fn(1 + N), i)(x) -
           nth(fn(1 + N), i)(x0)
           + nth(f, i)(x)
           - nth(fn(1 + N), i)(x)")
                                                                  (("2"
                                                                    (inst-cp
                                                                     -1
                                                                     "nth(fn(1 + N), i)(x) - nth(fn(1 + N), i)(x0)"
                                                                     "nth(f, i)(x) -
             nth(fn(1 + N), i)(x)")
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide 2)
                                (("2"
                                  (hide -1)
                                  (("2"
                                    (typepred "fn")
                                    (("2"
                                      (typepred "i")
                                      (("2"
                                        (typepred "f")
                                        (("2"
                                          (hide -1)
                                          (("2"
                                            (skeep -3)
                                            (("2"
                                              (inst-cp -3 "0")
                                              (("2"
                                                (inst -3 "1+N")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide 2)
                      (("2" (typepred "fn")
                        (("2" (expand "consf?" -2)
                          (("2" (expand "length" 1 1)
                            (("2" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((continuous? const-decl "bool" r2v_analysis nil)
    (continuous? const-decl "bool" continuous_functions analysis)
    (continuous? const-decl "bool" continuous_functions analysis)
    (norm_inf_nth_ineq formula-decl nil norms Optimization_Dev)
    (abs_diff_commute formula-decl nil abs_lems reals)
    (set type-eq-decl nil sets nil)
    (nonempty? const-decl "bool" sets nil)
    (choose const-decl "(p)" sets nil)
    (nth_subtract formula-decl nil vector_arithmetic Optimization_Dev)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (VectorN type-eq-decl nil matrices matrices)
    (Vector type-eq-decl nil matrices matrices)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     Optimization_Dev)
    (nth const-decl "[(d) -> real]" r2v_def nil)
    (norm_inf const-decl "(norm?(m))" norms Optimization_Dev)
    (norm? const-decl "bool" norms Optimization_Dev)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (r2v type-eq-decl nil r2v_def nil)
    (length const-decl "nat" r2v_def nil))
   shostak)))

