r2v_sequence_convergence[ d :[ real -> bool ] ] % Welcome
%  d - domain of the functions r2v

		: THEORY

%Created by                     JTS
%	 	           Jan 2019
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%| This defines sequence of r2v   |%
%| functions, as well as          |%
%| pointwise and uniform          |%
%| convergences. Cauchy and       |%
%| uniformly Cauchy is also       |%
%| defined. The relationshp       |%
%| between these are shown, as    |%
%| well as the equivalence of	  |%
%| convergence regardless of norm |%
%| Also the uniform limit theorem |%
%| is shown		          |%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%Last updated	           Jan 2019

%-----     %
  BEGIN
%     -----%

%-------------------------------------------------------------------------
%% Assume that the domain is nonempty, connected, and has more than
%  one element. These assumptions are overkill to define convergence
%-------------------------------------------------------------------------

  ASSUMING
  
    IMPORTING analysis@deriv_domain_def[(d)]
      non_empty : ASSUMPTION nonempty?(d)
      connected : ASSUMPTION connected?[(d)]
      not_one_element : ASSUMPTION not_one_element?[(d)]
      
  ENDASSUMING

%-------------------------------------------------------------------------
%% Importing definition and analysis of r2v.
%% Importing vector cauchy sequence from the optimization library
%-------------------------------------------------------------------------

 IMPORTING r2v_analysis[d]
 IMPORTING mv_analysis@Cauchy_seq

%-------------------------------------------------------------------------
%% Define a sequence of functions
%-------------------------------------------------------------------------

 r2v_seq: TYPE
  = {fn:[nat -> r2v] | EXISTS(m:nat): FORALL(i:nat): length(fn(i))=m}

%-------------------------------------------------------------------------
%% Define length and cons of a sequence of functions
%-------------------------------------------------------------------------

 length(fn:r2v_seq): nat
  = length(fn(0))

 consf?(fn:r2v_seq): bool
  = length(fn(0)) > 0

%-------------------------------------------------------------------------
%% Define pointwise convergence
%-------------------------------------------------------------------------

%For all norms
 conv_pw?(fn:(consf?))
  (f:{ ff:r2v | length(ff) = length(fn) }):
  bool = FORALL(x:(d)):
   convergence?[length(fn)](LAMBDA(i:nat): fn(i)(x),f(x))

 conv_pw?(fn:(consf?)):
  bool = EXISTS(f:{ ff:r2v | length(ff) = length(fn) }):
   conv_pw?(fn)(f)

%For a specific norm 
 conv_pw?(fn:(consf?), nn:(norm?(length(fn))))
  (f:{ ff:r2v| length(ff) = length(fn) }):
  bool = FORALL(x:(d)):
   convergence?[length(fn)](nn)(LAMBDA(i:nat): fn(i)(x),f(x))

 conv_pw?(fn:(consf?),nn:(norm?(length(fn)))):
  bool = EXISTS(f:{ ff:r2v | length(ff) = length(fn) }):
   conv_pw?(fn,nn)(f)

%-------------------------------------------------------------------------
%% Define pointwise cauchy convergence
%-------------------------------------------------------------------------

%For all norms
 cauchy_pw?(fn:(consf?)):
  bool = FORALL(x:(d)):
   cauchy?[length(fn)](LAMBDA(i:nat): fn(i)(x))
  
%For a specific norm 
 cauchy_pw?(fn:(consf?), nn:(norm?(length(fn)))):
  bool = FORALL(x:(d)):
   cauchy?[length(fn)](nn)(LAMBDA(i:nat): fn(i)(x))

%-------------------------------------------------------------------------
%% Pointwise cauchy implies pointwise convergence
%-------------------------------------------------------------------------

 cauchy_conv_pw: LEMMA
  FORALL(fn:(consf?)):
    cauchy_pw?(fn)
     IMPLIES
      conv_pw?(fn)

%-------------------------------------------------------------------------
%% Define uniform convergence
%-------------------------------------------------------------------------

%For all norms
 conv_u?(fn:{ ff:r2v_seq | length(ff) > 0 })
  (f:{ ff:r2v| length(ff) = length(fn(0)) }):
   bool
    = FORALL(nn: (norm?(length(fn)))):
       FORALL(eps:posreal):
        EXISTS(N:nat):
         FORALL(i:{ii:nat| ii >= N}, x:(d)): 
 	  nn(fn(i)(x)-f(x)) < eps

 conv_u?(fn:{ ff:r2v_seq | length(ff) > 0 }):
   bool
    = EXISTS(f:{ ff:r2v | length(ff) = length(fn(0)) }):
    conv_u?(fn)(f)

%For a specific norm 
 conv_u?(fn:{ ff:r2v_seq | length(ff) > 0 },
  nn:(norm?(length(fn))))
  (f:{ff:r2v| length(ff)= length(fn(0))}):
   bool
    = FORALL(eps:posreal):
       EXISTS(N:nat):
        FORALL(i:{ ii:nat | ii >= N}, x:(d)):
 	 nn(fn(i)(x) - f(x)) < eps

 conv_u?(fn:{ ff:r2v_seq | length(ff) > 0 },
  nn:(norm?(length(fn)))):
   bool
    = EXISTS(f:{ ff:r2v| length(ff) = length(fn(0)) }):
     conv_u?(fn,nn)(f)

%-------------------------------------------------------------------------
%% Define uniform cauchy
%-------------------------------------------------------------------------

%For all norms
 cauchy_u?(fn:{ ff:r2v_seq | length(ff)>0 }):
   bool
    = FORALL(nn: (norm?(length(fn)))):
       FORALL(eps:posreal):
        EXISTS(N:nat):
         FORALL(i, j:{ ii:nat | ii >= N }, x:(d)): 
	  nn(fn(i)(x) - fn(j)(x)) < eps

%For a specific norm
 cauchy_u?(fn:{ff:r2v_seq | length(ff) > 0},
  nn:(norm?(length(fn)))):
   bool
    = FORALL(eps:posreal):
       EXISTS(N:nat):
        FORALL(i, j:{ ii:nat| ii >= N }, x:(d)):
         nn(fn(i)(x) - fn(j)(x)) < eps

%-------------------------------------------------------------------------
%% It does matter what norm is used for convergence
%-------------------------------------------------------------------------

 conv_pw_equiv: LEMMA
  FORALL(fn:(consf?),
  f:{ ff:r2v| length(ff) = length(fn) }):
   conv_pw?(fn)(f)
    IFF
     EXISTS(nn:(norm?(length(fn)))):
     conv_pw?(fn,nn)(f)


 cauchy_pw_equiv: LEMMA
  FORALL(fn:(consf?)):
   cauchy_pw?(fn)
    IFF
     EXISTS(nn:(norm?(length(fn)))):
     cauchy_pw?(fn,nn)


 conv_u_equiv: LEMMA
  FORALL(fn:(consf?),
  f:{ ff:r2v | length(ff) = length(fn) }):
   conv_u?(fn)(f)
    IFF
     EXISTS(nn:(norm?(length(fn)))):
     conv_u?(fn, nn)(f)

 cauchy_u_equiv: LEMMA
  FORALL(fn:(consf?)):
   cauchy_u?(fn)
    IFF
     EXISTS(nn:(norm?(length(fn)))):
     cauchy_u?(fn, nn)

%-------------------------------------------------------------------------
%% Uniform cauchy implies pointwise cauchy
%-------------------------------------------------------------------------

 cauchy_u_pw: LEMMA
  FORALL(fn:(consf?)):
   cauchy_u?(fn)
    IMPLIES
     cauchy_pw?(fn)

%-------------------------------------------------------------------------
%% Uniform cauchy implies pointwise convergence
%-------------------------------------------------------------------------

 cauchy_u_conv_pw: LEMMA
  FORALL(fn:(consf?)):
   cauchy_u?(fn)
    IMPLIES
     conv_pw?(fn)

%-------------------------------------------------------------------------
%% Useful lemmas involving norms and limits. This first one probably
%  exists somewhere. The second one says that if a convergent
%  sequence of functions is bounded then that their limit is bounded
%  by the same bound.
%-------------------------------------------------------------------------

 K_epsn: LEMMA FORALL(K,C:real):
  (FORALL(eps:posreal): K-eps <= C)
   IMPLIES
    K <= C

 norm_conv_bound: LEMMA FORALL(fn:(consf?),
  f:{ ff:r2v| length(ff) = length(fn(0)) AND conv_pw?(fn)(ff) },
   v:VectorN(length(fn)), eps:real, x:(d)):
    (EXISTS(N:nat):
     FORALL (j: { ii: nat | ii >= N }):
      norm_inf(length(fn))(v - fn(j)(x)) <= eps)
       IMPLIES
        norm_inf(length(fn))(v-f(x)) <= eps
       
%-------------------------------------------------------------------------
%% Uniform cauchy implies uniform convergence 
%-------------------------------------------------------------------------

 cauchy_u_conv_u: LEMMA
  FORALL(fn:(consf?)):
   cauchy_u?(fn)
    IMPLIES
     conv_u?(fn)

%-------------------------------------------------------------------------
%% Uniform convergence of continuous functions is continuous
%-------------------------------------------------------------------------

 conv_u_cont: LEMMA
  FORALL(fn:(consf?),
  f:{ ff:r2v| length(ff) = length(fn(0)) }):
   (conv_u?(fn)(f) AND FORALL(i:nat): continuous?(fn(i)))
    IMPLIES
     continuous?(f)
    
 %~~~            End      ~~%
 END r2v_sequence_convergence
