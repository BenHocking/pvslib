(restrict_ode
 (restrict_TCC1 0
  (restrict_TCC1-1 nil 3793346216
   ("" (skeep)
    (("" (typepred "d1" "d2")
      (("" (inst -1 "x") (("" (assert) nil nil)) nil)) nil))
    nil)
   ((d2 formal-const-decl
     "{dd: [real -> bool] | FORALL (t: real): dd(t) IMPLIES d1(t)}"
     restrict_ode nil)
    (d1 formal-const-decl "[real -> bool]" restrict_ode nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis))
   nil (restrict subtype "restrict_ode.x" "(restrict_ode.d1)")))
 (restrict_cont_TCC1 0
  (restrict_cont_TCC1-1 nil 3793346469
   ("" (lemma "non_empty") (("" (propax) nil nil)) nil)
   ((non_empty formula-decl nil restrict_ode nil)) nil
   (restrict_cont assuming "ODE_def[(restrict_ode.d1)].ODE_def"
    "non_empty: ASSUMPTION sets[real].nonempty?(ODE_def.d)")))
 (restrict_cont_TCC2 0
  (restrict_cont_TCC2-1 nil 3793346469
   ("" (lemma "connected") (("" (propax) nil nil)) nil)
   ((connected formula-decl nil restrict_ode nil)) nil
   (restrict_cont assuming "ODE_def[(restrict_ode.d1)].ODE_def"
    "connected: ASSUMPTION deriv_domain_def[(ODE_def.d)].connected?")))
 (restrict_cont_TCC3 0
  (restrict_cont_TCC3-1 nil 3793346469
   ("" (lemma "not_one_element") (("" (propax) nil nil)) nil)
   ((not_one_element formula-decl nil restrict_ode nil)) nil
   (restrict_cont assuming "ODE_def[(restrict_ode.d1)].ODE_def"
    "not_one_element: ASSUMPTION deriv_domain_def[(ODE_def.d)].not_one_element?")))
 (restrict_cont_TCC4 0
  (restrict_cont_TCC4-1 nil 3793346469
   ("" (skeep) (("" (lemma "non_empty2") (("" (propax) nil nil)) nil))
    nil)
   ((non_empty2 formula-decl nil restrict_ode nil)) nil
   (restrict_cont assuming
    "ODE_continuous_def[(restrict_ode.d2)].ODE_continuous_def"
    "non_empty: ASSUMPTION sets[real].nonempty?(ODE_continuous_def.d)")))
 (restrict_cont_TCC5 0
  (restrict_cont_TCC5-1 nil 3793346469
   ("" (skeep) (("" (lemma "connected2") (("" (propax) nil nil)) nil))
    nil)
   ((connected2 formula-decl nil restrict_ode nil)) nil
   (restrict_cont assuming
    "ODE_continuous_def[(restrict_ode.d2)].ODE_continuous_def"
    "connected: ASSUMPTION deriv_domain_def[(ODE_continuous_def.d)].connected?")))
 (restrict_cont_TCC6 0
  (restrict_cont_TCC6-1 nil 3793346469
   ("" (skeep)
    (("" (lemma "not_one_element2") (("" (propax) nil nil)) nil)) nil)
   ((not_one_element2 formula-decl nil restrict_ode nil)) nil
   (restrict_cont assuming
    "ODE_continuous_def[(restrict_ode.d2)].ODE_continuous_def"
    "not_one_element: ASSUMPTION deriv_domain_def[(ODE_continuous_def.d)].not_one_element?")))
 (restrict_cont 0
  (restrict_cont-1 nil 3793346599
   ("" (skeep*)
    (("" (expand "cont_d?")
      (("" (skeep)
        (("" (inst?)
          (("" (expand "contD?")
            (("" (skeep)
              (("" (inst -1 "p")
                (("1" (expand "contp?")
                  (("1" (skeep)
                    (("1" (inst -1 "n1" "n2")
                      (("1" (skeep)
                        (("1" (inst -1 "eps")
                          (("1" (skeep)
                            (("1" (inst 1 "delta")
                              (("1"
                                (skeep)
                                (("1"
                                  (inst -1 "x_1")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "restrict" 1)
                                      (("1" (propax) nil nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (assert)
                                    (("2"
                                      (typepred "x_1")
                                      (("2"
                                        (typepred "d2" "d1")
                                        (("2"
                                          (inst -1 "car(x_1)")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide 2)
                  (("2" (typepred "p")
                    (("2" (typepred "d2")
                      (("2" (inst -1 "car(p)") (("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cont_d? const-decl "bool" ODE_continuous_def nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (VectorN type-eq-decl nil matrices matrices)
    (contp? const-decl "bool" continuity_multivar mv_analysis)
    (norm? const-decl "bool" norms mv_analysis)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (x_1 skolem-const-decl "(LAMBDA (x: VectorN(1)): (d2)(car(x)))"
     restrict_ode nil)
    (restrict const-decl "VectorN(n)" restrict_ode nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (p skolem-const-decl "(LAMBDA (x: VectorN(1)): (d2)(car(x)))"
     restrict_ode nil)
    (d2 formal-const-decl
     "{dd: [real -> bool] | FORALL (t: real): dd(t) IMPLIES d1(t)}"
     restrict_ode nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (d1 formal-const-decl "[real -> bool]" restrict_ode nil)
    (contD? const-decl "bool" continuity_multivar mv_analysis)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (restrict_Lip_TCC1 0
  (restrict_Lip_TCC1-1 nil 3793346823
   ("" (skeep) (("" (lemma "non_empty2") (("" (propax) nil nil)) nil))
    nil)
   ((non_empty2 formula-decl nil restrict_ode nil)) nil
   (restrict_Lip assuming
    "ODE_Lipschitz_def[(restrict_ode.d2)].ODE_Lipschitz_def"
    "non_empty: ASSUMPTION sets[real].nonempty?(ODE_Lipschitz_def.d)")))
 (restrict_Lip_TCC2 0
  (restrict_Lip_TCC2-1 nil 3793346823
   ("" (skeep) (("" (lemma "connected2") (("" (propax) nil nil)) nil))
    nil)
   ((connected2 formula-decl nil restrict_ode nil)) nil
   (restrict_Lip assuming
    "ODE_Lipschitz_def[(restrict_ode.d2)].ODE_Lipschitz_def"
    "connected: ASSUMPTION deriv_domain_def[(ODE_Lipschitz_def.d)].connected?")))
 (restrict_Lip_TCC3 0
  (restrict_Lip_TCC3-1 nil 3793346823
   ("" (skeep)
    (("" (lemma "not_one_element2") (("" (propax) nil nil)) nil)) nil)
   ((not_one_element2 formula-decl nil restrict_ode nil)) nil
   (restrict_Lip assuming
    "ODE_Lipschitz_def[(restrict_ode.d2)].ODE_Lipschitz_def"
    "not_one_element: ASSUMPTION deriv_domain_def[(ODE_Lipschitz_def.d)].not_one_element?")))
 (restrict_Lip 0
  (restrict_Lip-1 nil 3793346904
   ("" (skeep)
    (("" (expand "Lip_d?")
      (("" (skeep)
        (("" (inst -1 "n1")
          (("" (skeep)
            (("" (inst 1 "L")
              (("" (skeep)
                (("" (inst -1 "t" "y1" "y2")
                  (("1" (expand "restrict") (("1" (propax) nil nil))
                    nil)
                   ("2" (typepred "t" "d1")
                    (("2" (typepred "d2")
                      (("2" (inst -1 "t") (("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Lip_d? const-decl "bool" ODE_Lipschitz_def nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (norm? const-decl "bool" norms mv_analysis)
    (d1 formal-const-decl "[real -> bool]" restrict_ode nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (d2 formal-const-decl
     "{dd: [real -> bool] | FORALL (t: real): dd(t) IMPLIES d1(t)}"
     restrict_ode nil)
    (t skolem-const-decl "(d2)" restrict_ode nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices matrices)
    (restrict const-decl "VectorN(n)" restrict_ode nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis))
   shostak))
 (restrict_derivable_TCC1 0
  (restrict_derivable_TCC1-1 nil 3793983618
   ("" (skeep)
    (("" (skeep)
      (("" (typepred "d1" "d2")
        (("" (inst -1 "x") (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (d1 formal-const-decl "[real -> bool]" restrict_ode nil)
    (d2 formal-const-decl
     "{dd: [real -> bool] | FORALL (t: real): dd(t) IMPLIES d1(t)}"
     restrict_ode nil))
   nil
   (restrict_derivable subtype "restrict_ode.x" "(restrict_ode.d1)")))
 (restrict_derivable_TCC2 0
  (restrict_derivable_TCC2-1 nil 3793983618
   ("" (skeep) (("" (lemma "non_empty2") (("" (propax) nil nil)) nil))
    nil)
   ((non_empty2 formula-decl nil restrict_ode nil)) nil
   (restrict_derivable assuming
    "r2v_analysis[(restrict_ode.d2)].r2v_analysis"
    "non_empty: ASSUMPTION sets[real].nonempty?(r2v_analysis.d)")))
 (restrict_derivable_TCC3 0
  (restrict_derivable_TCC3-1 nil 3793983618
   ("" (skeep) (("" (lemma "connected2") (("" (propax) nil nil)) nil))
    nil)
   ((connected2 formula-decl nil restrict_ode nil)) nil
   (restrict_derivable assuming
    "r2v_analysis[(restrict_ode.d2)].r2v_analysis"
    "connected: ASSUMPTION deriv_domain_def[(r2v_analysis.d)].connected?")))
 (restrict_derivable_TCC4 0
  (restrict_derivable_TCC4-1 nil 3793983618
   ("" (skeep)
    (("" (lemma "not_one_element2") (("" (propax) nil nil)) nil)) nil)
   ((not_one_element2 formula-decl nil restrict_ode nil)) nil
   (restrict_derivable assuming
    "r2v_analysis[(restrict_ode.d2)].r2v_analysis"
    "not_one_element: ASSUMPTION deriv_domain_def[(r2v_analysis.d)].not_one_element?")))
 (restrict_derivable 0
  (restrict_derivable-1 nil 3793983721
   ("" (skeep)
    (("" (expand "derivable?" 1)
      (("" (expand "derivable?" -1)
        (("" (skeep)
          (("" (inst -1 "i")
            (("1" (lemma "derivable_subtype[(d1), (d2)]")
              (("1" (inst -1 "nth(y, i)")
                (("1" (assert)
                  (("1" (split -1)
                    (("1" (expand "restrict" -1)
                      (("1" (expand "restrict" 1)
                        (("1" (expand "nth") (("1" (propax) nil nil))
                          nil))
                        nil))
                      nil)
                     ("2"
                      (lemma " deriv_domain[(d2)]
")
                      (("1" (propax) nil nil)
                       ("2" (lemma "not_one_element2")
                        (("2" (propax) nil nil)) nil)
                       ("3" (lemma "connected2")
                        (("3" (propax) nil nil)) nil)
                       ("4" (lemma "non_empty2")
                        (("4" (propax) nil nil)) nil))
                      nil)
                     ("3" (lemma "not_one_element2")
                      (("3" (propax) nil nil)) nil))
                    nil))
                  nil))
                nil)
               ("2" (lemma "not_one_element") (("2" (propax) nil nil))
                nil)
               ("3"
                (lemma " deriv_domain[(d1)]
")
                (("3" (propax) nil nil)) nil)
               ("4" (skeep)
                (("4" (typepred "d1" "d2")
                  (("4" (inst -1 "x") (("4" (assert) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("2" (typepred "i")
              (("2" (expand "restrict" -1)
                (("2" (assert)
                  (("2" (expand "length") (("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((derivable? const-decl "bool" r2v_analysis nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis)
    (derivable_subtype formula-decl nil derivatives_subtype analysis)
    (deriv_domain? const-decl "bool" deriv_domain_def analysis)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (deriv_domain formula-decl nil r2v_analysis nil)
    (nonempty? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (connected? const-decl "bool" deriv_domain_def analysis)
    (not_one_element2 formula-decl nil restrict_ode nil)
    (connected2 formula-decl nil restrict_ode nil)
    (non_empty2 formula-decl nil restrict_ode nil)
    (nth const-decl "[(d) -> real]" r2v_def nil)
    (not_one_element formula-decl nil restrict_ode nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (d1 formal-const-decl "[real -> bool]" restrict_ode nil)
    (d2 formal-const-decl
     "{dd: [real -> bool] | FORALL (t: real): dd(t) IMPLIES d1(t)}"
     restrict_ode nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (r2v type-eq-decl nil r2v_def nil)
    (length const-decl "nat" r2v_def nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n skolem-const-decl "posnat" restrict_ode nil)
    (VectorN type-eq-decl nil matrices matrices)
    (restrict const-decl "R" restrict nil)
    (r2v_n type-eq-decl nil r2v_def nil)
    (y skolem-const-decl "r2v_n[(d1)](n)" restrict_ode nil)
    (i skolem-const-decl
       "{ii: nat | ii < length(restrict[(d1), (d2), VectorN(n)](y))}"
       restrict_ode nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   shostak))
 (restrict_deriv_TCC1 0
  (restrict_deriv_TCC2-1 nil 3793984498
   ("" (skeep)
    (("" (skeep)
      (("" (assert)
        (("" (typepred "deriv[(d1)](y)")
          (("" (skeep)
            (("" (expand "length" -2 1)
              (("" (inst-cp -1 "choose((d1))")
                (("" (inst -1 "x1")
                  (("" (assert)
                    (("" (replace -2 -3)
                      (("" (replace -1 -3 rl)
                        (("" (expand "length" -3 2)
                          (("" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((r2v_n type-eq-decl nil r2v_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (deriv def-decl "{ff: r2v | length(ff) = length(f)}" r2v_analysis
     nil)
    (length const-decl "nat" r2v_def nil)
    (derivable? const-decl "bool" r2v_analysis nil)
    (r2v type-eq-decl nil r2v_def nil)
    (length def-decl "nat" list_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (d1 formal-const-decl "[real -> bool]" restrict_ode nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (set type-eq-decl nil sets nil)
    (nonempty? const-decl "bool" sets nil)
    (choose const-decl "(p)" sets nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis))
   nil
   (restrict_deriv subtype
    "r2v_analysis[(restrict_ode.d1)].deriv(restrict_ode.y)"
    "[(restrict_ode.d1) -> matrices.VectorN(restrict_ode.n)]")))
 (restrict_deriv_TCC2 0
  (restrict_deriv_TCC1-1 nil 3793984498
   ("" (lemma "restrict_derivable") (("" (propax) nil nil)) nil)
   ((restrict_derivable formula-decl nil restrict_ode nil)) nil
   (restrict_deriv subtype
    "restrict[(restrict_ode.d1), (restrict_ode.d2), matrices.VectorN(restrict_ode.n)].restrict(restrict_ode.y)"
    "(r2v_analysis[(restrict_ode.d2)].derivable?)")))
 (restrict_deriv 0
  (restrict_deriv-1 nil 3793984821
   ("" (skeep)
    (("" (lemma "list_extensionality")
      (("" (decompose-equality 1)
        (("1"
          (inst -1
           "restrict[(d1), (d2), VectorN(n)](deriv[(d1)](y))(x!1)"
           " deriv[(d2)](restrict[(d1), (d2), VectorN(n)](y))(x!1)")
          (("1" (assert)
            (("1" (hide 1)
              (("1" (split 1)
                (("1" (assert)
                  (("1" (expand "restrict")
                    (("1" (assert)
                      (("1" (typepred "(deriv[(d1)](y))")
                        (("1"
                          (typepred
                           "deriv[(d2)](LAMBDA (s: (d2)): y(s))")
                          (("1" (skeep)
                            (("1" (skeep)
                              (("1"
                                (expand "length" -2 2)
                                (("1"
                                  (expand "length" -4 2)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (inst-cp -3 "choose((d1))")
                                      (("1"
                                        (inst-cp -3 "x!1")
                                        (("1"
                                          (inst-cp -1 "x!1")
                                          (("1"
                                            (inst-cp -1 "choose((d2))")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand "length" -8 1)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (inst
                                                     -5
                                                     "choose((d2))")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (replace -6 1)
                                                        (("1"
                                                          (replace
                                                           -3
                                                           1)
                                                          (("1"
                                                            (expand
                                                             "length"
                                                             -4
                                                             1)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (lemma "not_one_element2")
                            (("2" (propax) nil nil)) nil)
                           ("3" (lemma "connected2")
                            (("3" (propax) nil nil)) nil)
                           ("4" (lemma "non_empty2")
                            (("4" (propax) nil nil)) nil)
                           ("5" (split 1)
                            (("1" (assert)
                              (("1"
                                (skeep)
                                (("1"
                                  (inst 1 "m")
                                  (("1"
                                    (skeep)
                                    (("1"
                                      (inst-cp -1 "x")
                                      (("1"
                                        (expand "length" -3)
                                        (("1"
                                          (inst-cp -1 "choose((d1))")
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert)
                              (("2"
                                (lemma "restrict_derivable")
                                (("2"
                                  (inst -1 "n" "y")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (expand "restrict" -1 1)
                                      (("2" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("6" (skeep)
                            (("6" (typepred "d1" "d2")
                              (("6"
                                (inst -1 "s")
                                (("6" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (skeep)
                  (("2" (expand "restrict" 1)
                    (("2" (lemma "deriv_nth[(d1)]")
                      (("2" (inst -1 "y" "n!1")
                        (("1" (decompose-equality -1)
                          (("1" (inst -1 "x!1")
                            (("1" (expand "nth" -1 1)
                              (("1"
                                (replace -1 1)
                                (("1"
                                  (lemma "deriv_nth[(d2)]")
                                  (("1"
                                    (inst
                                     -1
                                     "(LAMBDA (s: (d2)): y(s))"
                                     "n!1")
                                    (("1"
                                      (decompose-equality -1)
                                      (("1"
                                        (inst -1 "x!1")
                                        (("1"
                                          (expand "nth" -1)
                                          (("1"
                                            (replace -1 1)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (lemma
                                                 "deriv_subtype_dd[(d1), (d2)]")
                                                (("1"
                                                  (inst
                                                   -1
                                                   "nth(y,n!1)")
                                                  (("1"
                                                    (split -1)
                                                    (("1"
                                                      (expand
                                                       "restrict"
                                                       -1)
                                                      (("1"
                                                        (decompose-equality
                                                         -1)
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "x!1")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (expand
                                                               "deriv"
                                                               1
                                                               1)
                                                              (("1"
                                                                (expand
                                                                 "nth"
                                                                 1
                                                                 1)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (expand
                                                                     "deriv"
                                                                     -1
                                                                     1)
                                                                    (("1"
                                                                      (expand
                                                                       "nth"
                                                                       -1
                                                                       1)
                                                                      (("1"
                                                                        (expand
                                                                         "nth"
                                                                         -1
                                                                         2)
                                                                        (("1"
                                                                          (expand
                                                                           "deriv"
                                                                           -1
                                                                           2)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (expand
                                                                               "deriv"
                                                                               1
                                                                               2)
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (typepred
                                                           "d1"
                                                           "d2")
                                                          (("2"
                                                            (inst
                                                             -1
                                                             "x!2")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("3"
                                                          (lemma
                                                           "not_one_element2")
                                                          (("3"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("4"
                                                          (lemma
                                                           "deriv_domain[(d2)]")
                                                          (("4"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("5"
                                                          (lemma
                                                           "restrict_derivable")
                                                          (("5"
                                                            (inst
                                                             -1
                                                             "n"
                                                             "y")
                                                            (("5"
                                                              (assert)
                                                              (("5"
                                                                (expand
                                                                 "restrict"
                                                                 -1)
                                                                (("5"
                                                                  (expand
                                                                   "derivable?"
                                                                   -1)
                                                                  (("5"
                                                                    (inst
                                                                     -1
                                                                     "n!1")
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (expand
                                                                         "nth"
                                                                         -1)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (expand
                                                                             "nth"
                                                                             1)
                                                                            (("1"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide
                                                                       -)
                                                                      (("2"
                                                                        (typepred
                                                                         "n!1")
                                                                        (("2"
                                                                          (expand
                                                                           "restrict"
                                                                           -1)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (expand
                                                                               "length"
                                                                               1
                                                                               1)
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("6"
                                                          (typepred
                                                           "d1"
                                                           "d2")
                                                          (("6"
                                                            (inst
                                                             -1
                                                             "s!1")
                                                            (("6"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (expand
                                                       "derivable?"
                                                       -3)
                                                      (("2"
                                                        (inst -3 "n!1")
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (assert)
                                                      (("3"
                                                        (lemma
                                                         "deriv_domain[(d2)]")
                                                        (("3"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("4"
                                                      (lemma
                                                       "not_one_element2")
                                                      (("4"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (lemma
                                                   "not_one_element")
                                                  (("2"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (lemma
                                                   "deriv_domain[(d1)]")
                                                  (("3"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("4"
                                                  (skeep)
                                                  (("4"
                                                    (typepred "d2")
                                                    (("4"
                                                      (inst -1 "x")
                                                      (("4"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (lemma "deriv_domain[(d2)]")
                                        (("2" (propax) nil nil))
                                        nil)
                                       ("3"
                                        (inst 1 "n")
                                        (("3"
                                          (skeep)
                                          (("3" (assert) nil nil))
                                          nil))
                                        nil)
                                       ("4"
                                        (lemma "not_one_element2")
                                        (("4" (propax) nil nil))
                                        nil)
                                       ("5"
                                        (lemma "connected2")
                                        (("5" (propax) nil nil))
                                        nil)
                                       ("6"
                                        (lemma "non_empty2")
                                        (("6" (propax) nil nil))
                                        nil)
                                       ("7"
                                        (lemma "restrict_derivable")
                                        (("7"
                                          (inst -1 "n" "y")
                                          (("7"
                                            (assert)
                                            (("7"
                                              (expand "restrict" -1)
                                              (("7" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("8"
                                        (inst 1 "n")
                                        (("8"
                                          (skeep)
                                          (("8" (assert) nil nil))
                                          nil))
                                        nil)
                                       ("9"
                                        (typepred "d2")
                                        (("9"
                                          (inst -1 "s!1")
                                          (("9" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (assert)
                                      (("2"
                                        (typepred "n!1")
                                        (("2"
                                          (expand "restrict" -1)
                                          (("2"
                                            (expand "length")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (split 1)
                                      (("1"
                                        (inst 1 "n")
                                        (("1"
                                          (skeep)
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (lemma "restrict_derivable")
                                        (("2"
                                          (inst -1 "n" "y")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (expand "restrict" -1)
                                              (("2" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("4"
                                      (skeep)
                                      (("4"
                                        (typepred "d2")
                                        (("4"
                                          (inst -1 "s")
                                          (("4" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (lemma "not_one_element2")
                                    (("2" (propax) nil nil))
                                    nil)
                                   ("3"
                                    (assert)
                                    (("3"
                                      (lemma "connected2")
                                      (("3" (propax) nil nil))
                                      nil))
                                    nil)
                                   ("4"
                                    (lemma "non_empty2")
                                    (("4" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert)
                          (("2" (expand "length" 1 1)
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (lemma "not_one_element2") (("2" (propax) nil nil))
            nil)
           ("3" (lemma "connected2") (("3" (propax) nil nil)) nil)
           ("4" (lemma "non_empty2") (("4" (propax) nil nil)) nil)
           ("5" (skeep)
            (("5" (typepred "d2")
              (("5" (inst -1 "x") (("5" (assert) nil nil)) nil)) nil))
            nil))
          nil)
         ("2" (skeep)
          (("2" (assert)
            (("2" (hide -1)
              (("2" (expand "restrict" 1 1)
                (("2" (typepred "deriv[(d2)](LAMBDA (s: (d2)): y(s))")
                  (("1" (expand "length" -2)
                    (("1" (skeep)
                      (("1" (inst-cp -1 "choose((d2))")
                        (("1" (inst-cp -1 "x1")
                          (("1" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("2" (lemma "not_one_element2")
                    (("2" (propax) nil nil)) nil)
                   ("3" (lemma "connected2") (("3" (propax) nil nil))
                    nil)
                   ("4" (lemma "non_empty2") (("4" (propax) nil nil))
                    nil)
                   ("5" (split 1)
                    (("1" (inst 1 "n")
                      (("1" (skeep) (("1" (assert) nil nil)) nil)) nil)
                     ("2" (lemma "restrict_derivable")
                      (("2" (inst -1 "n" "y")
                        (("2" (assert)
                          (("2" (expand "restrict" -1)
                            (("2" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("6" (skeep)
                    (("6" (typepred "d2")
                      (("6" (inst -1 "s") (("6" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (lemma "not_one_element2") (("3" (propax) nil nil)) nil)
         ("4" (lemma "connected2") (("4" (propax) nil nil)) nil)
         ("5" (lemma "non_empty2") (("5" (propax) nil nil)) nil)
         ("6" (typepred "d2")
          (("6" (skeep)
            (("6" (inst -1 "x") (("6" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list_extensionality formula-decl nil more_list_props structures)
    (deriv_nth formula-decl nil r2v_analysis nil)
    (deriv const-decl "[T -> real]" derivatives analysis)
    (deriv_fun type-eq-decl nil derivatives analysis)
    (derivable? const-decl "bool" derivatives analysis)
    (nth const-decl "[(d) -> real]" r2v_def nil)
    (deriv_domain? const-decl "bool" deriv_domain_def analysis)
    (not_one_element formula-decl nil restrict_ode nil)
    (deriv_domain formula-decl nil r2v_analysis nil)
    (deriv_subtype_dd formula-decl nil derivatives_subtype analysis)
    (n!1 skolem-const-decl
     "below(length(restrict[(d1), (d2), VectorN(n)](deriv[(d1)](y))(x!1)))"
     restrict_ode nil)
    (below type-eq-decl nil naturalnumbers nil)
    (x!1 skolem-const-decl "(d2)" restrict_ode nil)
    (< const-decl "bool" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (choose const-decl "(p)" sets nil)
    (not_one_element2 formula-decl nil restrict_ode nil)
    (connected2 formula-decl nil restrict_ode nil)
    (non_empty2 formula-decl nil restrict_ode nil)
    (restrict_derivable formula-decl nil restrict_ode nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (d1 formal-const-decl "[real -> bool]" restrict_ode nil)
    (d2 formal-const-decl
     "{dd: [real -> bool] | FORALL (t: real): dd(t) IMPLIES d1(t)}"
     restrict_ode nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (VectorN type-eq-decl nil matrices matrices)
    (r2v type-eq-decl nil r2v_def nil)
    (derivable? const-decl "bool" r2v_analysis nil)
    (length const-decl "nat" r2v_def nil)
    (deriv def-decl "{ff: r2v | length(ff) = length(f)}" r2v_analysis
     nil)
    (n skolem-const-decl "posnat" restrict_ode nil)
    (restrict const-decl "R" restrict nil)
    (r2v_n type-eq-decl nil r2v_def nil)
    (y skolem-const-decl "r2v_n[(d1)](n)" restrict_ode nil)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (connected? const-decl "bool" deriv_domain_def analysis)
    (nonempty? const-decl "bool" sets nil)
    (set type-eq-decl nil sets nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic
     mv_analysis))
   shostak)))

