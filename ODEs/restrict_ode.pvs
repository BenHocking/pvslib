restrict_ode[d1: [real -> bool],
  d2:{dd:[real->bool]| FORALL(t:real): dd(t) IMPLIES d1(t)}] % Welcome
  % d1 - larger domain
  % d2 - smaller domain
		: THEORY

%Created by                     JTS
%	 	           Mar 2020
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%| Defines the restrict function  %|
%| and shows continuity and       %|
%| Lipchitz are preserved under   %|
%| restriction        	  	  %|
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%Last Updated	           Mar 2020

%-----     %
  BEGIN
%     -----%
  
%-------------------------------------------------------------------------
%% Assume that the domain is nonempty, connected, and has more than
%  one element.
%-------------------------------------------------------------------------

  ASSUMING
  
    IMPORTING analysis@deriv_domain_def
      non_empty : ASSUMPTION nonempty?(d1)
      connected : ASSUMPTION connected?[(d1)]
      not_one_element : ASSUMPTION not_one_element?[(d1)]
      
      non_empty2 : ASSUMPTION nonempty?(d2)
      connected2 : ASSUMPTION connected?[(d2)]
      not_one_element2 : ASSUMPTION not_one_element?[(d2)] 
   ENDASSUMING

%-------------------------------------------------------------------------
%% Importing basic analysis for r2v functions
%% Importing definition of derivatives for functions f: [(d) -> real]
%  must import r2v_analysis first, do have the deriv_domain lemma
%-------------------------------------------------------------------------

IMPORTING ODE_continuous_def
IMPORTING analysis@derivatives_subtype

%-------------------------------------------------------------------------
%% Define restrict of an ODE function from one larger domain (d1) to a
%  smaller domain (d2)
%-------------------------------------------------------------------------

 restrict(n:nat,
   f:[[(d1), VectorN(n)]->VectorN(n)])(x:(d2),v:VectorN(n)):
    VectorN(n) =
    f(x,v)

%-------------------------------------------------------------------------
%% restrict of a continuous function is continuous
%-------------------------------------------------------------------------

 restrict_cont: LEMMA
  FORALL(n:posnat,f:od_f[(d1)](n)):
   cont_d?[(d1)](n)(f) IMPLIES
   cont_d?[(d2)](n)(restrict(n,f))

%-------------------------------------------------------------------------
%% restrict of a Lipschitz function is continuous
%-------------------------------------------------------------------------

 restrict_Lip: LEMMA
  FORALL(n:posnat,f:od_f[(d1)](n)):
   Lip_d?[(d1)](n)(f) IMPLIES
   Lip_d?[(d2)](n)(restrict(n,f))

%-------------------------------------------------------------------------
%% restrict of a derivable function is derivable
%-------------------------------------------------------------------------

 restrict_derivable: LEMMA
  FORALL(n:posnat,y:r2v_n[(d1)](n)):
   derivable?[(d1)](y) IMPLIES
   derivable?[(d2)](restrict[(d1), (d2), VectorN(n)](y))

%-------------------------------------------------------------------------
%% derivative of restrict function is restrict of derivative
%-------------------------------------------------------------------------

 restrict_deriv: LEMMA
  FORALL(n:posnat,y:r2v_n[(d1)](n)):
   derivable?[(d1)](y) IMPLIES
   restrict[(d1),(d2),VectorN(n)](deriv[(d1)](y)) =
   deriv[(d2)](restrict[(d1), (d2), VectorN(n)](y))

  %~     END  ~~~%
  END restrict_ode
