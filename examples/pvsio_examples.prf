(pvsio_examples
 (hello_you_TCC1 0
  (hello_you_TCC1-1 nil 3771056088 ("" (subtype-tcc) nil nil)
   ((rat nonempty-type-eq-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (O const-decl "finseq" finite_sequences nil)
    (concat const-decl "string" stdstr nil)
    (skip const-decl "void" stdlang nil)
    (printstr const-decl "void" stdio nil)
    ({\|\|} const-decl "Lisp" stdprog nil)
    (fail const-decl "void" stdlang nil)
    (assert const-decl "void" stdio nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil (hello_you subtype "pvsio_examples.r" "nonneg_real")))
 (cat_TCC1 0
  (cat_TCC1-1 nil 3902491508 ("" (subtype-tcc) nil nil)
   ((input_mode? const-decl "bool" stdio_utils pvsio_utils)) nil
   (cat subtype "stdio.input" "(stdio_utils.input_mode?)")))
 (safe_quadratic_TCC1 0
  (safe_quadratic_TCC1-1 nil 3897935609 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (/= const-decl "boolean" notequal nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sq const-decl "nonneg_real" sq reals)
    (real_times_real_is_real application-judgement "real" reals nil))
   nil (safe_quadratic subtype "pvsio_examples.d" "nonneg_real")))
 (pp_rat_off_TCC1 0
  (pp_rat_off_TCC1-1 nil 3902491508 ("" (grind) nil nil)
   ((minus_odd_is_odd application-judgement "odd_int" integers nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (every adt-def-decl "boolean" list_adt nil)
    (prog const-decl
          "T"
     stdprog nil)
    (^ const-decl "real" exponentiation nil)
    (expt def-decl "real" exponentiation nil)
    (set const-decl "void" stdprog nil)
    (skip const-decl "void" stdlang nil)
    (def const-decl "T" stdprog nil))
   nil
   (pp_rat_off subtype
    "stdprog[list[numfield]].prog(stdprog[nat].set(stdmath.PRECISION, 0), (: (number_fields.-)(1), number_fields./(1, 2), number_fields./((number_fields.-)(1), 7), number_fields./(50, 99), number_fields./((number_fields.-)(20435934594359), 349543959345934), exponentiation.^(10, ((number_fields.-)(8))) :))"
    "list[rat]")))
 (pp_rat_on_TCC1 0
  (pp_rat_on_TCC1-1 nil 3902491508 ("" (grind) nil nil)
   ((minus_odd_is_odd application-judgement "odd_int" integers nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (every adt-def-decl "boolean" list_adt nil)
    (prog const-decl
          "T"
     stdprog nil)
    (^ const-decl "real" exponentiation nil)
    (expt def-decl "real" exponentiation nil)
    (set const-decl "void" stdprog nil)
    (skip const-decl "void" stdlang nil)
    (def const-decl "T" stdprog nil))
   nil
   (pp_rat_on subtype
    "stdprog[list[numfield]].prog(stdprog[nat].set(stdmath.PRECISION, 6), (: (number_fields.-)(1), number_fields./(1, 2), number_fields./((number_fields.-)(1), 7), number_fields./(50, 99), number_fields./((number_fields.-)(20435934594359), 349543959345934), exponentiation.^(10, ((number_fields.-)(8))) :))"
    "list[rat]")))
 (a_fact 0 (a_fact-1 nil 3897935805 ("" (propax) nil nil) nil shostak)))

