(middle_third_stage
 (byzantine_overlap 0
  (byzantine_overlap-1 nil 3403960816
   ("" (expand "byz_overlap_imprecision?")
    (("" (skosimp*)
      (("" (forward-chain "byzantine_intersection_nonempty")
        (("" (expand "overlap_imprecision?")
          (("" (inst?)
            (("" (assert)
              (("" (expand "reduce_overlap?")
                (("" (skosimp*)
                  (("" (expand "enabled_nonempty?")
                    (("" (inst-cp - "d2!1")
                      (("" (inst - "d1!1")
                        ((""
                          (expand "byzantine_intersection_majority?")
                          (("" (use "middle_third_overlap")
                            (("" (assert)
                              ((""
                                (inst?)
                                (("" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((overlap_imprecision? const-decl "bool" inexact_reduce_stage nil)
    (byzantine_intersection_majority? const-decl "bool"
     fault_assumptions_stage nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (empty? const-decl "bool" sets nil)
    (enabled const-decl "finite_set[below(S)]" fault_assumptions_stage
     nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (middle_third_overlap formula-decl nil middle_third_overlap nil)
    (<= const-decl "bool" reals nil)
    (enabled_nonempty? const-decl "bool" fault_assumptions_stage nil)
    (reduce_overlap? const-decl "bool" reduce_choice nil)
    (D formal-const-decl "posnat" middle_third_stage nil)
    (S formal-const-decl "posnat" middle_third_stage nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (rcvd_matrix_stage type-eq-decl nil node_functions_stage nil)
    (check_stage type-eq-decl nil node_functions_stage nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (byzantine_intersection_nonempty formula-decl nil
     fault_assumptions_stage nil)
    (byz_overlap_imprecision? const-decl "bool" middle_third_stage
     nil))
   shostak))
 (middle_third_convergence 0
  (middle_third_convergence-1 nil 3403962308
   ("" (skosimp*)
    (("" (forward-chain "byzantine_overlap")
      (("" (use "convergence") (("" (assert) nil nil)) nil)) nil))
    nil)
   ((byzantine_overlap formula-decl nil middle_third_stage nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (D formal-const-decl "posnat" middle_third_stage nil)
    (below type-eq-decl nil naturalnumbers nil)
    (S formal-const-decl "posnat" middle_third_stage nil)
    (check_stage type-eq-decl nil node_functions_stage nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (rcvd_matrix_stage type-eq-decl nil node_functions_stage nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (sent_vec_stage type-eq-decl nil node_functions_stage nil)
    (ne_seqs type-eq-decl nil seqs structures)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (dom type-eq-decl nil min_seq structures)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (min const-decl "{t: T |
   (FORALL (ii: dom(s)): t <= seq(s)(ii)) AND
    (EXISTS (jj: dom(s)): seq(s)(jj) = t)}" min_seq structures)
    (dom type-eq-decl nil max_seq structures)
    (max const-decl "{t: T |
   (FORALL (ii: dom(s)): seq(s)(ii) <= t) AND
    (EXISTS (jj: dom(s)): seq(s)(jj) = t)}" max_seq structures)
    (consensus_function type-eq-decl nil ordered_finite_sequences nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (empty? const-decl "bool" sets nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (tau_type type-eq-decl nil tau_declaration nil)
    (byz const-decl "tau_type" tau_declaration nil)
    (convergence formula-decl nil inexact_reduce_stage nil)
    (error formal-const-decl "real" middle_third_stage nil))
   shostak))
 (reduce_convergence2 0
  (reduce_convergence2-1 nil 3893326206
   ("" (skosimp*)
    (("" (lemma "reduce_agreement_propagation")
      (("" (inst - "max" "min" _ "d1!1" "d2!1" _ _ _ _ _ _)
        (("" (inst?)
          (("" (inst?)
            (("" (assert)
              (("" (expand "quorum_imprecision?")
                (("" (skosimp*)
                  (("" (forward-chain "quorum_nonempty")
                    (("" (forward-chain "convergence_overlap")
                      (("" (expand "overlap?")
                        (("" (inst - "d1!1" "d2!1")
                          (("" (expand "enabled_nonempty?")
                            (("" (inst-cp - "d1!1")
                              ((""
                                (inst - "d2!1")
                                ((""
                                  (expand "reduce_choice")
                                  ((""
                                    (expand "reduce_choice")
                                    ((""
                                      (assert)
                                      ((""
                                        (hide -3 -4 -5 -6 -7 1 2)
                                        ((""
                                          (expand "convergent?")
                                          ((""
                                            (inst?)
                                            ((""
                                              (assert)
                                              ((""
                                                (hide-all-but 1)
                                                ((""
                                                  (rewrite
                                                   "reduce_length[S,real,<=]")
                                                  ((""
                                                    (lemma
                                                     "max_length_bound")
                                                    ((""
                                                      (inst?)
                                                      ((""
                                                        (inst-cp
                                                         -
                                                         "d1!1")
                                                        ((""
                                                          (inst
                                                           -
                                                           "d2!1")
                                                          ((""
                                                            (expand
                                                             "M"
                                                             -)
                                                            ((""
                                                              (assert)
                                                              ((""
                                                                (rewrite
                                                                 "reduce_length[S,real,<=]")
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((error formal-const-decl "real" middle_third_stage nil)
    (D formal-const-decl "posnat" middle_third_stage nil)
    (S formal-const-decl "posnat" middle_third_stage nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (reduce_agreement_propagation formula-decl nil inexact_reduce_stage
     nil)
    (tau_type type-eq-decl nil tau_declaration nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (sent_vec_stage type-eq-decl nil node_functions_stage nil)
    (rcvd_matrix_stage type-eq-decl nil node_functions_stage nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (check_stage type-eq-decl nil node_functions_stage nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (convergence_overlap formula-decl nil inexact_reduce_stage nil)
    (reduce_choice const-decl "T" reduce_choice nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (convergent? const-decl "bool" middle_third_stage nil)
    (reduce_length formula-decl nil reduce_properties nil)
    (M const-decl "nat" reduce_choice nil)
    (max_length_bound formula-decl nil reduce_choice nil)
    (vec type-eq-decl nil node nil)
    (reduce const-decl "ne_seqs" reduce_properties nil)
    (enabled const-decl "finite_set[below(S)]" fault_assumptions_stage
     nil)
    (nnreal type-eq-decl nil real_types nil)
    (reduce_choice const-decl "T" reduce_properties nil)
    (enabled_nonempty? const-decl "bool" fault_assumptions_stage nil)
    (overlap? const-decl "bool" inexact_reduce_stage nil)
    (quorum_nonempty formula-decl nil fault_assumptions_stage nil)
    (quorum_imprecision? const-decl "bool" inexact_comm_stage nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (empty? const-decl "bool" sets nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (below type-eq-decl nil naturalnumbers nil)
    (consensus_function type-eq-decl nil ordered_finite_sequences nil)
    (max const-decl "{t: T |
   (FORALL (ii: dom(s)): seq(s)(ii) <= t) AND
    (EXISTS (jj: dom(s)): seq(s)(jj) = t)}" max_seq structures)
    (dom type-eq-decl nil max_seq structures)
    (min const-decl "{t: T |
   (FORALL (ii: dom(s)): t <= seq(s)(ii)) AND
    (EXISTS (jj: dom(s)): seq(s)(jj) = t)}" min_seq structures)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (dom type-eq-decl nil min_seq structures)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (ne_seqs type-eq-decl nil seqs structures)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   shostak))
 (convergence2 0
  (convergence2-1 nil 3893326039
   ("" (skosimp*)
    (("" (use "v_min_witness[D, real, <=]")
      (("" (use "v_max_witness[D, real, <=]")
        (("" (skosimp*)
          (("" (replace*)
            (("" (hide -4 -2)
              (("" (use "reduce_convergence2")
                (("" (ground)
                  (("" (use "minmax_diameter") (("" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((v_min_witness formula-decl nil select_minmax nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (D formal-const-decl "posnat" middle_third_stage nil)
    (<= const-decl "bool" reals nil)
    (reduce_choice const-decl "T" reduce_choice nil)
    (error formal-const-decl "real" middle_third_stage nil)
    (check_stage type-eq-decl nil node_functions_stage nil)
    (rcvd_matrix_stage type-eq-decl nil node_functions_stage nil)
    (S formal-const-decl "posnat" middle_third_stage nil)
    (consensus_function type-eq-decl nil ordered_finite_sequences nil)
    (max const-decl "{t: T |
   (FORALL (ii: dom(s)): seq(s)(ii) <= t) AND
    (EXISTS (jj: dom(s)): seq(s)(jj) = t)}" max_seq structures)
    (dom type-eq-decl nil max_seq structures)
    (min const-decl "{t: T |
   (FORALL (ii: dom(s)): t <= seq(s)(ii)) AND
    (EXISTS (jj: dom(s)): seq(s)(jj) = t)}" min_seq structures)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (dom type-eq-decl nil min_seq structures)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (ne_seqs type-eq-decl nil seqs structures)
    (tau_type type-eq-decl nil tau_declaration nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (vec type-eq-decl nil node nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (empty? const-decl "bool" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (minmax_diameter formula-decl nil inexact_reduce_stage nil)
    (sent_vec_stage type-eq-decl nil node_functions_stage nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (reduce_convergence2 formula-decl nil middle_third_stage nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (v_max_witness formula-decl nil select_minmax nil))
   shostak))
 (middle_third_convergence_2 0
  (middle_third_convergence_2-1 nil 3892825316
   ("" (skosimp*)
    (("" (forward-chain "byzantine_overlap")
      (("" (use "convergence2") (("" (assert) nil nil)) nil)) nil))
    nil)
   ((byzantine_overlap formula-decl nil middle_third_stage nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (D formal-const-decl "posnat" middle_third_stage nil)
    (below type-eq-decl nil naturalnumbers nil)
    (S formal-const-decl "posnat" middle_third_stage nil)
    (check_stage type-eq-decl nil node_functions_stage nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (rcvd_matrix_stage type-eq-decl nil node_functions_stage nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (sent_vec_stage type-eq-decl nil node_functions_stage nil)
    (ne_seqs type-eq-decl nil seqs structures)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (dom type-eq-decl nil min_seq structures)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (min const-decl "{t: T |
   (FORALL (ii: dom(s)): t <= seq(s)(ii)) AND
    (EXISTS (jj: dom(s)): seq(s)(jj) = t)}" min_seq structures)
    (dom type-eq-decl nil max_seq structures)
    (max const-decl "{t: T |
   (FORALL (ii: dom(s)): seq(s)(ii) <= t) AND
    (EXISTS (jj: dom(s)): seq(s)(jj) = t)}" max_seq structures)
    (consensus_function type-eq-decl nil ordered_finite_sequences nil)
    (set type-eq-decl nil sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (empty? const-decl "bool" sets nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (tau_type type-eq-decl nil tau_declaration nil)
    (byz const-decl "tau_type" tau_declaration nil)
    (convergence2 formula-decl nil middle_third_stage nil))
   shostak))
 (mean_convergence_midpoint 0
  (mean_convergence_midpoint-1 nil 3893330793
   ("" (skosimp*)
    (("" (expand "midpoint")
      (("" (rewrite "min_minmax" :dir rl)
        (("" (lemma "mean_convergence")
          (("" (inst?)
            (("" (inst -1 "k!1")
              (("" (assert)
                (("" (rewrite "min_minmax")
                  (("" (assert)
                    (("" (rewrite "max_minmax")
                      (("" (assert)
                        (("" (hide 2)
                          (("" (expand "minmax" 1)
                            (("" (expand "list2finseq")
                              ((""
                                (expand "length" 1)
                                ((""
                                  (expand "length" 1)
                                  ((""
                                    (expand "length" 1)
                                    (("" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (midpoint const-decl "real" real_finite_sequences nil)
    (mean_convergence formula-decl nil real_finite_sequences nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (max_minmax formula-decl nil ordered_finite_sequences nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (length def-decl "nat" list_props nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (mean_consensus name-judgement "consensus_function"
     real_finite_sequences nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (minmax const-decl "ne_seqs" ordered_finite_sequences nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (<= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (ne_seqs type-eq-decl nil seqs structures)
    (> const-decl "bool" reals nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (min_minmax formula-decl nil ordered_finite_sequences nil))
   shostak))
 (mean_convergence_midpoint_0 0
  (mean_convergence_midpoint_0-1 nil 3893341625
   ("" (skosimp*)
    (("" (expand "midpoint")
      (("" (rewrite "min_minmax" :dir rl)
        (("" (lemma "mean_convergence")
          (("" (inst?)
            (("" (inst -1 "k!1")
              (("" (assert)
                (("" (rewrite "min_minmax")
                  (("" (assert)
                    (("" (rewrite "max_minmax")
                      (("" (assert)
                        (("" (hide 2)
                          (("" (expand "minmax" 1)
                            (("" (expand "list2finseq")
                              ((""
                                (expand "length" 1)
                                ((""
                                  (expand "length" 1)
                                  ((""
                                    (expand "length" 1)
                                    ((""
                                      (reveal +)
                                      ((""
                                        (typepred "k!1")
                                        ((""
                                          (case "NOT k!1=1")
                                          (("1" (assert) nil nil)
                                           ("2"
                                            (replace -1)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (hide 2)
                                                (("2"
                                                  (hide -2)
                                                  (("2"
                                                    (typepred "s2!1")
                                                    (("2"
                                                      (typepred "s1!1")
                                                      (("2"
                                                        (case
                                                         "NOT s1!1`length=1")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (case
                                                           "NOT s2!1`length=1")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (expand
                                                             "mean"
                                                             1
                                                             1)
                                                            (("2"
                                                              (replace
                                                               -2)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (expand
                                                                   "sum"
                                                                   1)
                                                                  (("2"
                                                                    (replace
                                                                     -2)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (expand
                                                                         "sigma"
                                                                         1)
                                                                        (("2"
                                                                          (expand
                                                                           "sigma"
                                                                           1)
                                                                          (("2"
                                                                            (typepred
                                                                             "min(s1!1)")
                                                                            (("2"
                                                                              (skeep
                                                                               -2)
                                                                              (("2"
                                                                                (typepred
                                                                                 "jj")
                                                                                (("2"
                                                                                  (case
                                                                                   "NOT jj=0")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil)
                                                                                   ("2"
                                                                                    (replace
                                                                                     -1)
                                                                                    (("2"
                                                                                      (case
                                                                                       " mean(minmax(s2!1)) =  max(s2!1)")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil)
                                                                                       ("2"
                                                                                        (hide
                                                                                         2)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "minmax"
                                                                                           1)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "list2finseq"
                                                                                             1)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "mean"
                                                                                               1)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "length"
                                                                                                 1
                                                                                                 1)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "length"
                                                                                                   1
                                                                                                   1)
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "length"
                                                                                                     1
                                                                                                     1)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "length"
                                                                                                       1)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "length"
                                                                                                         1)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "length"
                                                                                                           1)
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "sum"
                                                                                                             1)
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "sigma"
                                                                                                               1)
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "sigma"
                                                                                                                 1)
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "sigma"
                                                                                                                   1)
                                                                                                                  (("2"
                                                                                                                    (expand
                                                                                                                     "nth"
                                                                                                                     1)
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       "nth"
                                                                                                                       1)
                                                                                                                      (("2"
                                                                                                                        (typepred
                                                                                                                         "min(s2!1)")
                                                                                                                        (("2"
                                                                                                                          (typepred
                                                                                                                           "max(s2!1)")
                                                                                                                          (("2"
                                                                                                                            (skeep*)
                                                                                                                            (("2"
                                                                                                                              (case
                                                                                                                               "NOT jj!1 = 0")
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (case
                                                                                                                                 "NOT jj!2=0")
                                                                                                                                (("1"
                                                                                                                                  (assert)
                                                                                                                                  nil
                                                                                                                                  nil)
                                                                                                                                 ("2"
                                                                                                                                  (assert)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (midpoint const-decl "real" real_finite_sequences nil)
    (mean_convergence formula-decl nil real_finite_sequences nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (max_minmax formula-decl nil ordered_finite_sequences nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sum const-decl "real" real_finite_sequences nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (odd_minus_odd_is_even application-judgement "even_int" integers
     nil)
    (dom type-eq-decl nil max_seq structures)
    (max const-decl "{t: T |
   (FORALL (ii: dom(s)): seq(s)(ii) <= t) AND
    (EXISTS (jj: dom(s)): seq(s)(jj) = t)}" max_seq structures)
    (TRUE const-decl "bool" booleans nil)
    (nth def-decl "T" list_props nil) (< const-decl "bool" reals nil)
    (dom type-eq-decl nil min_seq structures)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (min const-decl "{t: T |
   (FORALL (ii: dom(s)): t <= seq(s)(ii)) AND
    (EXISTS (jj: dom(s)): seq(s)(jj) = t)}" min_seq structures)
    (sigma def-decl "real" sigma reals)
    (mean const-decl "real" real_finite_sequences nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (length def-decl "nat" list_props nil)
    (max_in_consensus name-judgement "in_consensus_function"
     inexact_reduce_stage nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (mean_consensus name-judgement "consensus_function"
     real_finite_sequences nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (minmax const-decl "ne_seqs" ordered_finite_sequences nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (min_in_consensus name-judgement "in_consensus_function"
     inexact_reduce_stage nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (<= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (ne_seqs type-eq-decl nil seqs structures)
    (> const-decl "bool" reals nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (min_minmax formula-decl nil ordered_finite_sequences nil))
   shostak))
 (midpoint_convergence_mean 0
  (midpoint_convergence_mean-1 nil 3893333524
   ("" (skosimp*)
    (("" (expand "midpoint")
      (("" (rewrite "max_minmax" :dir rl)
        (("" (lemma "mean_convergence")
          (("" (inst?)
            (("" (inst - k!1)
              (("" (assert)
                (("" (rewrite "min_minmax")
                  (("" (rewrite "max_minmax")
                    (("" (assert)
                      (("" (hide-all-but 1)
                        (("" (expand "minmax")
                          (("" (expand "list2finseq")
                            (("" (expand "length")
                              ((""
                                (expand "length")
                                ((""
                                  (expand "length")
                                  ((""
                                    (reveal -)
                                    (("" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (midpoint const-decl "real" real_finite_sequences nil)
    (mean_convergence formula-decl nil real_finite_sequences nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (min_minmax formula-decl nil ordered_finite_sequences nil)
    (length def-decl "nat" list_props nil)
    (list2finseq const-decl "finseq[T]" list2finseq nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (mean_consensus name-judgement "consensus_function"
     real_finite_sequences nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (>= const-decl "bool" reals nil)
    (nnreal type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (minmax const-decl "ne_seqs" ordered_finite_sequences nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (<= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (ne_seqs type-eq-decl nil seqs structures)
    (> const-decl "bool" reals nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (max_minmax formula-decl nil ordered_finite_sequences nil))
   shostak))
 (convergent_mean_midpoint 0
  (convergent_mean_midpoint-1 nil 3893333833
   ("" (expand "convergent?")
    (("" (skosimp*)
      (("" (lemma "mean_convergence_midpoint")
        (("" (inst?)
          (("" (inst - "k!1")
            (("" (assert)
              (("" (assert)
                ((""
                  (case " (delta!1 * k!1 - delta!1) / k!1 <=  (delta!1 * i!1 - delta!1 + delta!1 * k!1) / (i!1 + k!1)")
                  (("1" (assert) nil nil)
                   ("2" (assert)
                    (("2" (hide 2) (("2" (cross-mult 1) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (nnreal type-eq-decl nil real_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (> const-decl "bool" reals nil)
    (ne_seqs type-eq-decl nil seqs structures)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (midpoint_consensus name-judgement "consensus_function"
     real_finite_sequences nil)
    (mean_consensus name-judgement "consensus_function"
     real_finite_sequences nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (times_div2 formula-decl nil real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (div_mult_pos_le2 formula-decl nil real_props nil)
    (div_mult_pos_le1 formula-decl nil real_props nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (mean_convergence_midpoint formula-decl nil middle_third_stage nil)
    (convergent? const-decl "bool" middle_third_stage nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil))
   shostak))
 (convergent_midpoint_mean 0
  (convergent_midpoint_mean-1 nil 3893334185
   ("" (expand "convergent?")
    (("" (skosimp*)
      (("" (lemma "midpoint_convergence_mean")
        (("" (inst?)
          (("" (inst - "k!1")
            (("" (assert)
              (("" (assert)
                ((""
                  (case " (delta!1 * k!1 - delta!1) / k!1 <=  (delta!1 * i!1 - delta!1 + delta!1 * k!1) / (i!1 + k!1)")
                  (("1" (assert) nil nil)
                   ("2" (assert)
                    (("2" (hide 2) (("2" (cross-mult 1) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (nnreal type-eq-decl nil real_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (> const-decl "bool" reals nil)
    (ne_seqs type-eq-decl nil seqs structures)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (mean_consensus name-judgement "consensus_function"
     real_finite_sequences nil)
    (midpoint_consensus name-judgement "consensus_function"
     real_finite_sequences nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (<= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (times_div2 formula-decl nil real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (div_mult_pos_le2 formula-decl nil real_props nil)
    (div_mult_pos_le1 formula-decl nil real_props nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (midpoint_convergence_mean formula-decl nil middle_third_stage nil)
    (convergent? const-decl "bool" middle_third_stage nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil))
   shostak))
 (middle_third_convergence_mean_midpoint 0
  (middle_third_convergence_mean_midpoint-1 nil 3893334222
   ("" (skosimp*)
    (("" (lemma "middle_third_convergence_2")
      (("" (inst?)
        (("" (inst?)
          (("" (assert)
            (("" (lemma "convergent_mean_midpoint")
              ((""
                (inst -1 "X!1 -  max_length(rcvd!1, check!1, byz)"
                 " max_length(rcvd!1, check!1, byz)")
                (("" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((middle_third_convergence_2 formula-decl nil middle_third_stage
     nil)
    (sent_vec_stage type-eq-decl nil node_functions_stage nil)
    (convergent_mean_midpoint formula-decl nil middle_third_stage nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (tau_type type-eq-decl nil tau_declaration nil)
    (error formal-const-decl "real" middle_third_stage nil)
    (max_length const-decl "nat" reduce_choice nil)
    (byz const-decl "tau_type" tau_declaration nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (rcvd_matrix_stage type-eq-decl nil node_functions_stage nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (empty? const-decl "bool" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (check_stage type-eq-decl nil node_functions_stage nil)
    (S formal-const-decl "posnat" middle_third_stage nil)
    (below type-eq-decl nil naturalnumbers nil)
    (D formal-const-decl "posnat" middle_third_stage nil)
    (midpoint const-decl "real" real_finite_sequences nil)
    (mean const-decl "real" real_finite_sequences nil)
    (consensus_function type-eq-decl nil ordered_finite_sequences nil)
    (max const-decl "{t: T |
   (FORALL (ii: dom(s)): seq(s)(ii) <= t) AND
    (EXISTS (jj: dom(s)): seq(s)(jj) = t)}" max_seq structures)
    (dom type-eq-decl nil max_seq structures)
    (min const-decl "{t: T |
   (FORALL (ii: dom(s)): t <= seq(s)(ii)) AND
    (EXISTS (jj: dom(s)): seq(s)(jj) = t)}" min_seq structures)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (dom type-eq-decl nil min_seq structures)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (ne_seqs type-eq-decl nil seqs structures)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (mean_consensus name-judgement "consensus_function"
     real_finite_sequences nil)
    (midpoint_consensus name-judgement "consensus_function"
     real_finite_sequences nil))
   shostak))
 (middle_third_convergence_mean_midpoint_0 0
  (middle_third_convergence_mean_midpoint_0-1 nil 3893340504
   ("" (skosimp*)
    (("" (expand "enabled_within?" -5)
      (("" (typepred "dst_set!1") (("" (postpone) nil nil)) nil)) nil))
    nil)
   nil shostak))
 (middle_third_convergence_midpoint_mean 0
  (middle_third_convergence_midpoint_mean-1 nil 3893334669
   ("" (skosimp*)
    (("" (lemma "middle_third_convergence_2")
      (("" (inst?)
        (("" (inst?)
          (("" (assert)
            (("" (lemma "convergent_midpoint_mean")
              ((""
                (inst -1 "X!1 -  max_length(rcvd!1, check!1, byz)"
                 " max_length(rcvd!1, check!1, byz)")
                (("" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((middle_third_convergence_2 formula-decl nil middle_third_stage
     nil)
    (sent_vec_stage type-eq-decl nil node_functions_stage nil)
    (convergent_midpoint_mean formula-decl nil middle_third_stage nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (tau_type type-eq-decl nil tau_declaration nil)
    (error formal-const-decl "real" middle_third_stage nil)
    (max_length const-decl "nat" reduce_choice nil)
    (byz const-decl "tau_type" tau_declaration nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (rcvd_matrix_stage type-eq-decl nil node_functions_stage nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (empty? const-decl "bool" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (check_stage type-eq-decl nil node_functions_stage nil)
    (S formal-const-decl "posnat" middle_third_stage nil)
    (below type-eq-decl nil naturalnumbers nil)
    (D formal-const-decl "posnat" middle_third_stage nil)
    (mean const-decl "real" real_finite_sequences nil)
    (midpoint const-decl "real" real_finite_sequences nil)
    (consensus_function type-eq-decl nil ordered_finite_sequences nil)
    (max const-decl "{t: T |
   (FORALL (ii: dom(s)): seq(s)(ii) <= t) AND
    (EXISTS (jj: dom(s)): seq(s)(jj) = t)}" max_seq structures)
    (dom type-eq-decl nil max_seq structures)
    (min const-decl "{t: T |
   (FORALL (ii: dom(s)): t <= seq(s)(ii)) AND
    (EXISTS (jj: dom(s)): seq(s)(jj) = t)}" min_seq structures)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (dom type-eq-decl nil min_seq structures)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (ne_seqs type-eq-decl nil seqs structures)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (midpoint_consensus name-judgement "consensus_function"
     real_finite_sequences nil)
    (mean_consensus name-judgement "consensus_function"
     real_finite_sequences nil))
   shostak))
 (mean_convergence 0
  (mean_convergence-1 nil 3403969276
   ("" (skosimp*)
    (("" (use "middle_third_convergence")
      (("" (assert)
        (("" (replace*) (("" (rewrite "convergent_mean") nil nil))
          nil))
        nil))
      nil))
    nil)
   ((middle_third_convergence formula-decl nil middle_third_stage nil)
    (rcvd_matrix_stage type-eq-decl nil node_functions_stage nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (empty? const-decl "bool" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (check_stage type-eq-decl nil node_functions_stage nil)
    (S formal-const-decl "posnat" middle_third_stage nil)
    (below type-eq-decl nil naturalnumbers nil)
    (D formal-const-decl "posnat" middle_third_stage nil)
    (mean const-decl "real" real_finite_sequences nil)
    (consensus_function type-eq-decl nil ordered_finite_sequences nil)
    (max const-decl "{t: T |
   (FORALL (ii: dom(s)): seq(s)(ii) <= t) AND
    (EXISTS (jj: dom(s)): seq(s)(jj) = t)}" max_seq structures)
    (dom type-eq-decl nil max_seq structures)
    (min const-decl "{t: T |
   (FORALL (ii: dom(s)): t <= seq(s)(ii)) AND
    (EXISTS (jj: dom(s)): seq(s)(jj) = t)}" min_seq structures)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (dom type-eq-decl nil min_seq structures)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (ne_seqs type-eq-decl nil seqs structures)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (mean_consensus name-judgement "consensus_function"
     real_finite_sequences nil)
    (sent_vec_stage type-eq-decl nil node_functions_stage nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (convergent_mean formula-decl nil real_finite_sequences nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (tau_type type-eq-decl nil tau_declaration nil)
    (error formal-const-decl "real" middle_third_stage nil)
    (max_length const-decl "nat" reduce_choice nil)
    (byz const-decl "tau_type" tau_declaration nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   shostak))
 (midpoint_convergence 0
  (midpoint_convergence-1 nil 3403969481
   ("" (skosimp*)
    (("" (lemma "middle_third_convergence")
      (("" (inst?)
        (("" (inst?)
          (("" (inst - 2 "epsilon!1")
            (("" (rewrite "convergent_midpoint")
              (("" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((middle_third_convergence formula-decl nil middle_third_stage nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (sent_vec_stage type-eq-decl nil node_functions_stage nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (byz const-decl "tau_type" tau_declaration nil)
    (max_length const-decl "nat" reduce_choice nil)
    (error formal-const-decl "real" middle_third_stage nil)
    (tau_type type-eq-decl nil tau_declaration nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (convergent_midpoint formula-decl nil real_finite_sequences nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (rcvd_matrix_stage type-eq-decl nil node_functions_stage nil)
    (non_empty_finite_set type-eq-decl nil finite_sets nil)
    (empty? const-decl "bool" sets nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (finite_set type-eq-decl nil finite_sets nil)
    (is_finite const-decl "bool" finite_sets nil)
    (set type-eq-decl nil sets nil)
    (check_stage type-eq-decl nil node_functions_stage nil)
    (S formal-const-decl "posnat" middle_third_stage nil)
    (below type-eq-decl nil naturalnumbers nil)
    (D formal-const-decl "posnat" middle_third_stage nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (midpoint const-decl "real" real_finite_sequences nil)
    (consensus_function type-eq-decl nil ordered_finite_sequences nil)
    (max const-decl "{t: T |
   (FORALL (ii: dom(s)): seq(s)(ii) <= t) AND
    (EXISTS (jj: dom(s)): seq(s)(jj) = t)}" max_seq structures)
    (dom type-eq-decl nil max_seq structures)
    (min const-decl "{t: T |
   (FORALL (ii: dom(s)): t <= seq(s)(ii)) AND
    (EXISTS (jj: dom(s)): seq(s)(jj) = t)}" min_seq structures)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (dom type-eq-decl nil min_seq structures)
    (> const-decl "bool" reals nil)
    (finite_sequence type-eq-decl nil finite_sequences nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (ne_seqs type-eq-decl nil seqs structures)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (midpoint_consensus name-judgement "consensus_function"
     real_finite_sequences nil))
   shostak)))

