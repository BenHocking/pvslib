(domain_equivalence
 (axm_ulp_fnd_ulp_pos_TCC1 0
  (axm_ulp_fnd_ulp_pos_TCC1-1 nil 3878983376 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (axm_ulp_fnd_ulp_pos subtype "real_defs.abs(domain_equivalence.x)"
    "posreal")))
 (axm_ulp_fnd_ulp_pos_TCC2 0
  (axm_ulp_fnd_ulp_pos_TCC2-1 nil 3878983376 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (/= const-decl "boolean" notequal nil))
   nil
   (axm_ulp_fnd_ulp_pos subtype "domain_equivalence.radix"
    "{r | log.r /= 1}")))
 (axm_ulp_fnd_ulp_pos 0
  (axm_ulp_fnd_ulp_pos-1 nil 3878983387
   ("" (skeep)
    (("" (beta)
      (("" (case "NOT x=0 AND x>=0")
        (("1" (hide -2)
          (("1" (flatten)
            (("1" (expand "RND_Min")
              (("1" (use "RND_aux_alt_def")
                (("1" (replace -1)
                  (("1" (hide -1)
                    (("1" (assert)
                      (("1" (expand "RND_aux_alt")
                        (("1" (use "log_def")
                          (("1" (expand "vNum")
                            (("1" (replace -1 :dir rl)
                              (("1"
                                (hide -1)
                                (("1"
                                  (lift-if)
                                  (("1"
                                    (split)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (expand "emin")
                                        (("1"
                                          (case
                                           "floor(log(radix)(abs(x))) < emin[radix, precision,
 e_max]")
                                          (("1"
                                            (expand "max")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand "emin")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (use "dExp_emax")
                                                    (("1"
                                                      (replace -1)
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (expand "emin")
                                            (("2"
                                              (use "dExp_emax")
                                              (("2"
                                                (replace -1)
                                                (("2"
                                                  (hide -1)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (case
                                                       "radix ^ (-(e_max - 2 + precision) - 1) * radix ^ precision = radix ^ (1 - e_max)")
                                                      (("1"
                                                        (replace -1)
                                                        (("1"
                                                          (hide -1)
                                                          (("1"
                                                            (expand
                                                             "abs")
                                                            (("1"
                                                              (lemma
                                                               "floor_def")
                                                              (("1"
                                                                (inst
                                                                 -1
                                                                 "log(radix)(x)")
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (hide
                                                                     -2)
                                                                    (("1"
                                                                      (both-sides-f
                                                                       -2
                                                                       "log(radix)")
                                                                      (("1"
                                                                        (lemma
                                                                         "log_expt")
                                                                        (("1"
                                                                          (inst
                                                                           -1
                                                                           "radix"
                                                                           "1 - e_max")
                                                                          (("1"
                                                                            (use
                                                                             "real_expt_int_rew")
                                                                            (("1"
                                                                              (replace
                                                                               -1)
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (rewrite
                                                                         "both_sides_log_gt1_lt")
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (lemma
                                                         "expt_plus")
                                                        (("2"
                                                          (inst
                                                           -1
                                                           "(-(e_max - 2 + precision) - 1)"
                                                           "precision"
                                                           "radix")
                                                          (("2"
                                                            (replace
                                                             -1)
                                                            (("2"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (flatten)
                                      (("2"
                                        (lemma "log_mult")
                                        (("2"
                                          (inst
                                           -1
                                           "radix"
                                           "x"
                                           "radix / radix ^ precision")
                                          (("2"
                                            (expand "log" 2 1)
                                            (("2"
                                              (replace -1)
                                              (("2"
                                                (use "log_div")
                                                (("2"
                                                  (replace -1)
                                                  (("2"
                                                    (hide -1)
                                                    (("2"
                                                      (use "log_ne1x")
                                                      (("2"
                                                        (replace -1)
                                                        (("2"
                                                          (hide -1)
                                                          (("2"
                                                            (hide -1)
                                                            (("2"
                                                              (lemma
                                                               "log_expt")
                                                              (("2"
                                                                (inst
                                                                 -1
                                                                 "radix"
                                                                 "precision")
                                                                (("2"
                                                                  (use
                                                                   "real_expt_int_rew")
                                                                  (("2"
                                                                    (replace
                                                                     -1)
                                                                    (("2"
                                                                      (replace
                                                                       -2)
                                                                      (("2"
                                                                        (case
                                                                         "floor(log(radix)(abs(x))) >= emin[radix, precision, e_max]")
                                                                        (("1"
                                                                          (expand
                                                                           "max")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (expand
                                                                               "abs")
                                                                              (("1"
                                                                                (hide-all-but
                                                                                 2)
                                                                                (("1"
                                                                                  (lemma
                                                                                   "floor_plus_int")
                                                                                  (("1"
                                                                                    (inst
                                                                                     -1
                                                                                     "-precision"
                                                                                     "1 + log(radix)(x)")
                                                                                    (("1"
                                                                                      (replace
                                                                                       -1)
                                                                                      (("1"
                                                                                        (hide
                                                                                         -1)
                                                                                        (("1"
                                                                                          (lemma
                                                                                           "floor_plus_int")
                                                                                          (("1"
                                                                                            (inst
                                                                                             -1
                                                                                             "1"
                                                                                             "
 log(radix)(x)")
                                                                                            (("1"
                                                                                              (replace
                                                                                               -1)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (hide-all-but
                                                                           (-3
                                                                            1
                                                                            2
                                                                            4))
                                                                          (("2"
                                                                            (expand
                                                                             "abs")
                                                                            (("2"
                                                                              (case
                                                                               "(x >= radix ^ (-dExp - 1) * radix ^ precision
)")
                                                                              (("1"
                                                                                (hide
                                                                                 2)
                                                                                (("1"
                                                                                  (expand
                                                                                   "emin")
                                                                                  (("1"
                                                                                    (use
                                                                                     "dExp_emax")
                                                                                    (("1"
                                                                                      (replace
                                                                                       -1)
                                                                                      (("1"
                                                                                        (hide
                                                                                         -1)
                                                                                        (("1"
                                                                                          (both-sides-f
                                                                                           -1
                                                                                           "log(radix)")
                                                                                          (("1"
                                                                                            (case
                                                                                             "log(radix) (radix ^
 (-(e_max - 1 + precision - 1) - 1) * radix ^ precision) = 1 - e_max")
                                                                                            (("1"
                                                                                              (replace
                                                                                               -1)
                                                                                              (("1"
                                                                                                (hide
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (both-sides-f
                                                                                                   -1
                                                                                                   "floor")
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (hide-all-but
                                                                                               1)
                                                                                              (("2"
                                                                                                (rewrite
                                                                                                 "log_mult")
                                                                                                (("2"
                                                                                                  (use
                                                                                                   "real_expt_int_rew")
                                                                                                  (("2"
                                                                                                    (replace
                                                                                                     -1
                                                                                                     :dir
                                                                                                     rl)
                                                                                                    (("2"
                                                                                                      (hide
                                                                                                       -1)
                                                                                                      (("2"
                                                                                                        (rewrite
                                                                                                         "real_expt_int_rew"
                                                                                                         :dir
                                                                                                         rl)
                                                                                                        (("2"
                                                                                                          (rewrite
                                                                                                           "log_expt")
                                                                                                          (("2"
                                                                                                            (rewrite
                                                                                                             "log_expt")
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (rewrite
                                                                                             "both_sides_log_gt1_ge")
                                                                                            (("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide 2)
                            (("2" (expand "vNum")
                              (("2"
                                (assert)
                                (("2"
                                  (typepred "radix")
                                  (("2"
                                    (typepred "precision")
                                    (("2"
                                      (case "radix ^ precision > 0")
                                      (("1"
                                        (case "x*radix > 0")
                                        (("1"
                                          (assert)
                                          (("1" (grind-reals) nil nil))
                                          nil)
                                         ("2" (grind-reals) nil nil))
                                        nil)
                                       ("2" (grind-reals) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (assert) nil nil))
        nil))
      nil))
    nil)
   ((RND_Min const-decl "(Fcanonic?(b))" float float_unbounded)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (log_def formula-decl nil ln_exp_def power)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (dExp formal-const-decl "{d: posnat | d > 2 * (precision - 1) - 1}"
     domain_equivalence nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (precision formal-const-decl "above(1)" domain_equivalence nil)
    (vNum const-decl "posnat" float float_unbounded)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (Format type-eq-decl nil float float_unbounded)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (x skolem-const-decl "real" domain_equivalence nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (log_ne1x formula-decl nil log power)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (both_sides_log_gt1_ge formula-decl nil log power)
    (floor_plus_int formula-decl nil floor_ceil nil)
    (log_div formula-decl nil log power)
    (log const-decl "real" log power)
    (log_mult formula-decl nil log power)
    (< const-decl "bool" reals nil)
    (integer nonempty-type-from-decl nil integers nil)
    (<= const-decl "bool" reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (log const-decl "real" log power)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (nonpos_int nonempty-type-eq-decl nil integers nil)
    (negint nonempty-type-eq-decl nil integers nil)
    (e_max formal-const-decl "above(1)" domain_equivalence nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (dExp_emax formula-decl nil domain_equivalence nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (^ const-decl "real" exponentiation nil)
    (floor_def formula-decl nil floor_ceil nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (nnreal type-eq-decl nil real_types nil)
    (real_expt_int_rew formula-decl nil real_expt power)
    (log_expt formula-decl nil log power)
    (both_sides_log_gt1_lt formula-decl nil log power)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (expt_plus formula-decl nil exponentiation nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (emin const-decl "negint" ieee754_domain float_bounded_axiomatic)
    (pos_div_gt formula-decl nil real_props nil)
    (pos_times_gt formula-decl nil real_props nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (div_mult_pos_ge1 formula-decl nil real_props nil)
    (zero_times1 formula-decl nil real_props nil)
    (RND_aux_alt const-decl "(Fcanonic?(b))" float float_unbounded)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (radix formal-const-decl "above(1)" domain_equivalence nil)
    (above nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (RND_aux_alt_def formula-decl nil float float_unbounded)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil))
   shostak))
 (axm_ulp_fnd_ulp 0
  (axm_ulp_fnd_ulp-1 nil 3876929245
   ("" (skeep)
    (("" (expand "ulp")
      (("" (expand "ulp")
        (("" (expand "Fulp")
          ((""
            (case "(Fexp (Fnormalize((# Prec := precision, dExp := dExp #)) (RND_ToZero[radix]((# Prec := precision, dExp := dExp #))(x))) ) = IF x = 0 THEN emin[radix, precision, e_max] ELSE (max(floor(log(radix )(abs(x))), emin[radix, precision, e_max])) ENDIF - precision + 1")
            (("1" (replace -1 1) (("1" (propax) nil nil)) nil)
             ("2" (hide 2)
              (("2" (use "FnormalizeCorrect")
                (("2" (split)
                  (("1" (use "FcanonicUnique")
                    (("1" (assert)
                      (("1" (hide -2)
                        (("1" (replace -1 1 :hide? TRUE)
                          (("1" (lift-if)
                            (("1" (split)
                              (("1"
                                (flatten)
                                (("1"
                                  (replace -1 1)
                                  (("1"
                                    (expand "emin")
                                    (("1"
                                      (case
                                       "2 - e_max - precision= -dExp")
                                      (("1"
                                        (replace -1 1)
                                        (("1"
                                          (hide -1)
                                          (("1"
                                            (expand "RND_ToZero")
                                            (("1"
                                              (expand "RND_Min")
                                              (("1"
                                                (expand "RND_aux")
                                                (("1" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide 2)
                                        (("2"
                                          (use "dExp_emax")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (expand "RND_ToZero")
                                  (("2"
                                    (lift-if)
                                    (("2"
                                      (split)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (use "axm_ulp_fnd_ulp_pos")
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (expand "RND_Max")
                                          (("2"
                                            (expand "Fopp")
                                            (("2"
                                              (name "y" "-x")
                                              (("2"
                                                (case "y>0")
                                                (("1"
                                                  (case
                                                   "abs(x)=abs(-x)")
                                                  (("1"
                                                    (replace -1)
                                                    (("1"
                                                      (replace -3)
                                                      (("1"
                                                        (use
                                                         "axm_ulp_fnd_ulp_pos")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (expand "abs")
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide 2)
                    (("2" (use "FcanonicBounded")
                      (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (typepred "radix") (("3" (assert) nil nil)) nil)
             ("4" (hide-all-but 1) (("4" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((ulp const-decl "posreal" ieee754_domain float_bounded_axiomatic)
    (ulp const-decl "posreal" float float_unbounded)
    (Fulp const-decl "real" float float_unbounded)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (RND_Min const-decl "(Fcanonic?(b))" float float_unbounded)
    (int_times_int_is_int application-judgement "int" integers nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (expt def-decl "real" exponentiation nil)
    (^ const-decl "real" exponentiation nil)
    (vNum const-decl "posnat" float float_unbounded)
    (log_nat def-decl "[n: nat, {y | y < p AND x = p ^ n * y}]" log_nat
     reals)
    (RND_aux const-decl "(Fcanonic?(b))" float float_unbounded)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (dExp_emax formula-decl nil domain_equivalence nil)
    (axm_ulp_fnd_ulp_pos formula-decl nil domain_equivalence nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (RND_Max const-decl "(Fcanonic?(b))" float float_unbounded)
    (minus_real_is_real application-judgement "real" reals nil)
    (Fopp const-decl "float" float float_unbounded)
    (FcanonicUnique formula-decl nil float float_unbounded)
    (FcanonicBounded formula-decl nil float float_unbounded)
    (FnormalizeCorrect formula-decl nil float float_unbounded)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (rat_max application-judgement "{s: rat | s >= q AND s >= r}"
     real_defs nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (> const-decl "bool" reals nil)
    (above nonempty-type-eq-decl nil integers nil)
    (radix formal-const-decl "above(1)" domain_equivalence nil)
    (Format type-eq-decl nil float float_unbounded)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (float type-eq-decl nil float float_unbounded)
    (Fbounded? const-decl "bool" float float_unbounded)
    (Fcanonic? const-decl "bool" float float_unbounded)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (FtoR const-decl "real" float float_unbounded)
    (<= const-decl "bool" reals nil)
    (Fnormalize def-decl
     "{x: (Fcanonic?(b)) | FtoR(x) = FtoR(f):: real AND Fexp(x) <= Fexp(f)}"
     float float_unbounded)
    (precision formal-const-decl "above(1)" domain_equivalence nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (dExp formal-const-decl "{d: posnat | d > 2 * (precision - 1) - 1}"
     domain_equivalence nil)
    (RND_ToZero const-decl "(Fcanonic?(b))" float float_unbounded)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (nonpos_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (negint nonempty-type-eq-decl nil integers nil)
    (e_max formal-const-decl "above(1)" domain_equivalence nil)
    (emin const-decl "negint" ieee754_domain float_bounded_axiomatic)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (integer nonempty-type-from-decl nil integers nil)
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (/= const-decl "boolean" notequal nil)
    (log const-decl "real" log power)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (ulp const-decl "posreal" float float_unbounded))
   shostak)))

