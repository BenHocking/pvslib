(arithmetic_poly
 (init_polyplus_TCC1 0
  (init_polyplus_TCC1-1 nil 3777802202
   ("" (skeep) (("" (expand "max" 1) (("" (grind) nil nil)) nil)) nil)
   ((max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (length def-decl "nat" list_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (listn_0 name-judgement "listn[real](0)" standard_form_poly nil))
   nil
   (init_polyplus subtype "arithmetic_poly.g"
    "{ff: standard_form_poly.Polynomial | list_props[real].length(ff) = real_defs.max(list_props[real].length(arithmetic_poly.f), list_props[real].length(arithmetic_poly.g))}")))
 (init_polyplus_TCC2 0
  (init_polyplus_TCC2-1 nil 3777802202 ("" (subtype-tcc) nil nil)
   ((listn_0 name-judgement "listn[real](0)" standard_form_poly nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (Polynomial type-eq-decl nil standard_form_poly nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil))
   nil
   (init_polyplus subtype "arithmetic_poly.f"
    "{ff: standard_form_poly.Polynomial | list_props[real].length(ff) = real_defs.max(list_props[real].length(arithmetic_poly.f), list_props[real].length(arithmetic_poly.g))}")))
 (init_polyplus_TCC3 0
  (init_polyplus_TCC3-1 nil 3777802202 ("" (subtype-tcc) nil nil)
   ((listn_0 name-judgement "listn[real](0)" standard_form_poly nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (Polynomial type-eq-decl nil standard_form_poly nil))
   nil
   (init_polyplus subtype "arithmetic_poly.f"
    "(list_adt[real].cons?)")))
 (init_polyplus_TCC4 0
  (init_polyplus_TCC4-1 nil 3777802202 ("" (subtype-tcc) nil nil)
   ((listn_0 name-judgement "listn[real](0)" standard_form_poly nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (Polynomial type-eq-decl nil standard_form_poly nil))
   nil
   (init_polyplus subtype "arithmetic_poly.g"
    "(list_adt[real].cons?)")))
 (init_polyplus_TCC5 0
  (init_polyplus_TCC5-1 nil 3777802202 ("" (termination-tcc) nil nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (length def-decl "nat" list_props nil)
    (Polynomial type-eq-decl nil standard_form_poly nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (listn_0 name-judgement "listn[real](0)" standard_form_poly nil))
   nil
   (init_polyplus termination
    "arithmetic_poly.init_polyplus(list_adt[real].cdr(arithmetic_poly.f), list_adt[real].cdr(arithmetic_poly.g))"
    "nil")))
 (init_polyplus_TCC6 0
  (init_polyplus_TCC6-1 nil 3777802202
   ("" (skeep)
    (("" (expand "length" 3 1)
      (("" (typepred "v(cdr[real](f), cdr[real](g))")
        (("" (hide -1)
          (("" (expand "max" 3 1)
            (("" (lift-if)
              (("" (split 3)
                (("1" (flatten)
                  (("1" (expand "length" -1)
                    (("1" (expand "max" -2)
                      (("1" (assert)
                        (("1" (expand "length" 1 2)
                          (("1" (propax) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (expand "length" 1)
                    (("2" (expand "max" -1)
                      (("2" (assert)
                        (("2" (expand "length" 2 2)
                          (("2" (propax) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((listn_0 name-judgement "listn[real](0)" standard_form_poly nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (Polynomial type-eq-decl nil standard_form_poly nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (length def-decl "nat" list_props nil))
   nil
   (init_polyplus subtype
    "list_adt[real].cons((number_fields.+)(list_adt[real].car(arithmetic_poly.f), list_adt[real].car(arithmetic_poly.g)), arithmetic_poly.init_polyplus(list_adt[real].cdr(arithmetic_poly.f), list_adt[real].cdr(arithmetic_poly.g)))"
    "{ff: standard_form_poly.Polynomial | list_props[real].length(ff) = real_defs.max(list_props[real].length(arithmetic_poly.f), list_props[real].length(arithmetic_poly.g))}")))
 (init_polyscale_TCC1 0
  (init_polyscale_TCC1-1 nil 3777802202 ("" (subtype-tcc) nil nil)
   ((listn_0 name-judgement "listn[real](0)" standard_form_poly nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (Polynomial type-eq-decl nil standard_form_poly nil))
   nil
   (init_polyscale subtype "arithmetic_poly.f"
    "(list_adt[real].cons?)")))
 (init_polyscale_TCC2 0
  (init_polyscale_TCC2-1 nil 3777802202 ("" (termination-tcc) nil nil)
   ((listn_0 name-judgement "listn[real](0)" standard_form_poly nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (Polynomial type-eq-decl nil standard_form_poly nil)
    (length def-decl "nat" list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (init_polyscale termination
    "arithmetic_poly.init_polyscale(arithmetic_poly.r, list_adt[real].cdr(arithmetic_poly.f))"
    "nil")))
 (init_polyscale_TCC3 0
  (init_polyscale_TCC3-1 nil 3777802202
   ("" (skeep)
    (("" (expand "length" 2 1)
      (("" (typepred "v(r,cdr(f))")
        (("" (assert)
          (("" (expand "length" 2 2) (("" (propax) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((length def-decl "nat" list_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (Polynomial type-eq-decl nil standard_form_poly nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (listn_0 name-judgement "listn[real](0)" standard_form_poly nil))
   nil
   (init_polyscale subtype
    "list_adt[real].cons(number_fields.*(arithmetic_poly.r, list_adt[real].car(arithmetic_poly.f)), arithmetic_poly.init_polyscale(arithmetic_poly.r, list_adt[real].cdr(arithmetic_poly.f)))"
    "{ff: standard_form_poly.Polynomial | list_props[real].length(ff) = list_props[real].length(arithmetic_poly.f)}")))
 (init_polymult_TCC1 0
  (init_polymult_TCC1-1 nil 3777802202 ("" (subtype-tcc) nil nil)
   ((nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (length_null formula-decl nil more_list_props "structures/")
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (Polynomial type-eq-decl nil standard_form_poly nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (listn_0 name-judgement "listn[real](0)" standard_form_poly nil))
   nil
   (init_polymult subtype "list_adt[real].null"
    "{ff: standard_form_poly.Polynomial | booleans.AND((booleans.IMPLIES(booleans.OR(list_adt[real].null?(arithmetic_poly.f), list_adt[real].null?(arithmetic_poly.g)), list_props[real].length(ff) = 0)), (booleans.IMPLIES((booleans.AND((booleans.NOT)(list_adt[real].null?(arithmetic_poly.f)), (booleans.NOT)(list_adt[real].null?(arithmetic_poly.g)))), list_props[real].length(ff) = (number_fields.-)((number_fields.+)(list_props[real].length(arithmetic_poly.f), list_props[real].length(arithmetic_poly.g)), 1))))}")))
 (init_polymult_TCC2 0
  (init_polymult_TCC2-1 nil 3777802202 ("" (subtype-tcc) nil nil)
   ((nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (Polynomial type-eq-decl nil standard_form_poly nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (listn_0 name-judgement "listn[real](0)" standard_form_poly nil))
   nil
   (init_polymult subtype
    "arithmetic_poly.init_polyscale(list_adt[real].car(arithmetic_poly.f), arithmetic_poly.g)"
    "{ff: standard_form_poly.Polynomial | booleans.AND((booleans.IMPLIES(booleans.OR(list_adt[real].null?(arithmetic_poly.f), list_adt[real].null?(arithmetic_poly.g)), list_props[real].length(ff) = 0)), (booleans.IMPLIES((booleans.AND((booleans.NOT)(list_adt[real].null?(arithmetic_poly.f)), (booleans.NOT)(list_adt[real].null?(arithmetic_poly.g)))), list_props[real].length(ff) = (number_fields.-)((number_fields.+)(list_props[real].length(arithmetic_poly.f), list_props[real].length(arithmetic_poly.g)), 1))))}")))
 (init_polymult_TCC3 0
  (init_polymult_TCC3-2 nil 3777802782
   ("" (skeep)
    (("" (split 4)
      (("1" (flatten) (("1" (assert) nil nil)) nil)
       ("2" (flatten)
        (("2" (typepred " v(cdr[real](f), cons[real](0, g))")
          (("2" (hide -1)
            (("2" (assert)
              (("2" (case "null?(cdr(f))")
                (("1" (assert)
                  (("1"
                    (typepred
                     "init_polyplus(init_polyscale(car[real](f), g),
                         v(cdr[real](f), cons[real](0, g)))")
                    (("1" (hide -1)
                      (("1" (replace -3)
                        (("1" (expand "max" -1)
                          (("1" (replace -1 3)
                            (("1"
                              (typepred
                               "init_polyscale(car[real](f), g)")
                              (("1"
                                (hide -1)
                                (("1"
                                  (replace -1 3)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "length" 3)
                                      (("1"
                                        (expand "length" 3)
                                        (("1" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert)
                  (("2" (hide -1)
                    (("2"
                      (typepred
                       "init_polyplus(init_polyscale(car[real](f), g),
                         v(cdr[real](f), cons[real](0, g)))")
                      (("2" (hide -1)
                        (("2" (expand "max" -1)
                          (("2" (lift-if -1)
                            (("2" (split -1)
                              (("1"
                                (flatten)
                                (("1"
                                  (replace -2)
                                  (("1"
                                    (replace -3 4)
                                    (("1"
                                      (expand "length" 4 2)
                                      (("1"
                                        (expand "length" 4 2)
                                        (("1" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (assert)
                                (("2"
                                  (flatten)
                                  (("2"
                                    (replace -1 5)
                                    (("2"
                                      (typepred
                                       "init_polyscale(car[real](f), g)")
                                      (("2"
                                        (hide -1)
                                        (("2"
                                          (replace -1)
                                          (("2"
                                            (replace -3 1)
                                            (("2"
                                              (expand "length" 1 3)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (expand "length" 5 1)
                                                  (("2"
                                                    (expand
                                                     "length"
                                                     1
                                                     2)
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (Polynomial type-eq-decl nil standard_form_poly nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (init_polyplus def-decl
     "{ff: Polynomial | length(ff) = max(length(f), length(g))}"
     arithmetic_poly nil)
    (init_polyscale def-decl
     "{ff: Polynomial | length(ff) = length(f)}" arithmetic_poly nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (listn_0 name-judgement "listn[real](0)" standard_form_poly nil))
   nil
   (init_polymult subtype
    "arithmetic_poly.init_polyplus(arithmetic_poly.init_polyscale(list_adt[real].car(arithmetic_poly.f), arithmetic_poly.g), arithmetic_poly.init_polymult(list_adt[real].cdr(arithmetic_poly.f), list_adt[real].cons(0, arithmetic_poly.g)))"
    "{ff: standard_form_poly.Polynomial | booleans.AND((booleans.IMPLIES(booleans.OR(list_adt[real].null?(arithmetic_poly.f), list_adt[real].null?(arithmetic_poly.g)), list_props[real].length(ff) = 0)), (booleans.IMPLIES((booleans.AND((booleans.NOT)(list_adt[real].null?(arithmetic_poly.f)), (booleans.NOT)(list_adt[real].null?(arithmetic_poly.g)))), list_props[real].length(ff) = (number_fields.-)((number_fields.+)(list_props[real].length(arithmetic_poly.f), list_props[real].length(arithmetic_poly.g)), 1))))}"))
  (init_polymult_TCC3-1 nil 3777802202 ("" (subtype-tcc) nil nil) nil
   nil
   (init_polymult subtype
    "arithmetic_poly.init_polyplus(arithmetic_poly.init_polyscale(list_adt[real].car(arithmetic_poly.f), arithmetic_poly.g), arithmetic_poly.init_polymult(list_adt[real].cdr(arithmetic_poly.f), list_adt[real].cons(0, arithmetic_poly.g)))"
    "{ff: standard_form_poly.Polynomial | booleans.AND((booleans.IMPLIES(booleans.OR(list_adt[real].null?(arithmetic_poly.f), list_adt[real].null?(arithmetic_poly.g)), list_props[real].length(ff) = 0)), (booleans.IMPLIES((booleans.AND((booleans.NOT)(list_adt[real].null?(arithmetic_poly.f)), (booleans.NOT)(list_adt[real].null?(arithmetic_poly.g)))), list_props[real].length(ff) = (number_fields.-)((number_fields.+)(list_props[real].length(arithmetic_poly.f), list_props[real].length(arithmetic_poly.g)), 1))))}")))
 (init_polyexp_TCC1 0
  (init_polyexp_TCC1-1 nil 3778842333 ("" (subtype-tcc) nil nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (length_null formula-decl nil more_list_props "structures/")
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (Polynomial type-eq-decl nil standard_form_poly nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (listn_0 name-judgement "listn[real](0)" standard_form_poly nil))
   nil
   (init_polyexp subtype "list_adt[real].null"
    "{ff: standard_form_poly.Polynomial | booleans.AND((booleans.IMPLIES(list_adt[real].null?(arithmetic_poly.f), list_props[real].length(ff) = 0)), booleans.AND((booleans.IMPLIES((booleans.AND(list_adt[real].cons?(arithmetic_poly.f), arithmetic_poly.k = 0)), list_props[real].length(ff) = 1)), (booleans.IMPLIES((booleans.AND(list_adt[real].cons?(arithmetic_poly.f), reals.>(arithmetic_poly.k, 0))), list_props[real].length(ff) = (number_fields.-)((number_fields.+)(1, number_fields.*(list_props[real].length(arithmetic_poly.f), arithmetic_poly.k)), arithmetic_poly.k)))))}")))
 (init_polyexp_TCC2 0
  (init_polyexp_TCC2-1 nil 3778842333
   ("" (skeep) (("" (assert) nil nil)) nil)
   ((listn_0 name-judgement "listn[real](0)" standard_form_poly nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (length_singleton formula-decl nil more_list_props "structures/"))
   nil
   (init_polyexp subtype "(: 1 :)"
    "{ff: standard_form_poly.Polynomial | booleans.AND((booleans.IMPLIES(list_adt[real].null?(arithmetic_poly.f), list_props[real].length(ff) = 0)), booleans.AND((booleans.IMPLIES((booleans.AND(list_adt[real].cons?(arithmetic_poly.f), arithmetic_poly.k = 0)), list_props[real].length(ff) = 1)), (booleans.IMPLIES((booleans.AND(list_adt[real].cons?(arithmetic_poly.f), reals.>(arithmetic_poly.k, 0))), list_props[real].length(ff) = (number_fields.-)((number_fields.+)(1, number_fields.*(list_props[real].length(arithmetic_poly.f), arithmetic_poly.k)), arithmetic_poly.k)))))}")))
 (init_polyexp_TCC3 0
  (init_polyexp_TCC3-1 nil 3778842333 ("" (subtype-tcc) nil nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (Polynomial type-eq-decl nil standard_form_poly nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (listn_0 name-judgement "listn[real](0)" standard_form_poly nil))
   nil
   (init_polyexp subtype "(number_fields.-)(arithmetic_poly.k, 1)"
    "nat")))
 (init_polyexp_TCC4 0
  (init_polyexp_TCC4-1 nil 3778842333 ("" (termination-tcc) nil nil)
   nil nil
   (init_polyexp termination
    "arithmetic_poly.init_polyexp(arithmetic_poly.f, (number_fields.-)(arithmetic_poly.k, 1))"
    "nil")))
 (init_polyexp_TCC5 0
  (init_polyexp_TCC5-1 nil 3778842333
   ("" (skeep)
    (("" (assert)
      (("" (typepred "v(f,k-1)")
        (("" (hide -1)
          (("" (hide -1)
            (("" (case "k-1=0")
              (("1" (assert)
                (("1" (typepred "init_polymult(f, v(f, k - 1))")
                  (("1" (hide -1) (("1" (assert) nil nil)) nil)) nil))
                nil)
               ("2" (hide -1)
                (("2" (case "k-1>0")
                  (("1" (assert)
                    (("1" (typepred "init_polymult(f, v(f, k - 1))")
                      (("1" (hide -1)
                        (("1" (case "null?(v(f,k-1))")
                          (("1" (assert)
                            (("1" (replace -1)
                              (("1"
                                (expand "length" -4)
                                (("1"
                                  (assert)
                                  (("1"
                                    (case
                                     "NOT  length(cdr(f)) * k - length(cdr(f)) = length(cdr(f))*(k-1)")
                                    (("1" (assert) nil nil)
                                     ("2"
                                      (case
                                       "NOT 0 = 1 + length(cdr(f)) * (k - 1)")
                                      (("1" (assert) nil nil)
                                       ("2"
                                        (hide -6)
                                        (("2"
                                          (case
                                           "NOT length(cdr(f)) * (k - 1)>0")
                                          (("1"
                                            (case
                                             "FORALL (a,b:int): (a>=0 and b>0) IMPLIES a*b>=0")
                                            (("1"
                                              (inst
                                               -1
                                               "length(cdr(f))"
                                               "k-1")
                                              (("1" (assert) nil nil))
                                              nil)
                                             ("2"
                                              (assert)
                                              (("2"
                                                (skeep)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (replace -1)
                                                    (("2"
                                                      (div-by 1 "b")
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide -1) (("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (typepred "k") (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((OR const-decl "[bool, bool -> bool]" booleans nil)
    (init_polymult def-decl "{ff: Polynomial |
   (null?(f) OR null?(g) IMPLIES length(ff) = 0) AND
    ((NOT null?(f) AND NOT null?(g)) IMPLIES
      length(ff) = length(f) + length(g) - 1)}" arithmetic_poly nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (both_sides_div_pos_ge1 formula-decl nil real_props nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (times_div_cancel2 formula-decl nil extra_real_props nil)
    (/= const-decl "boolean" notequal nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (rat_div_nzrat_is_rat application-judgement "rat" rationals nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (Polynomial type-eq-decl nil standard_form_poly nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (> const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (listn_0 name-judgement "listn[real](0)" standard_form_poly nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil
   (init_polyexp subtype
    "arithmetic_poly.init_polymult(arithmetic_poly.f, arithmetic_poly.init_polyexp(arithmetic_poly.f, (number_fields.-)(arithmetic_poly.k, 1)))"
    "{ff: standard_form_poly.Polynomial | booleans.AND((booleans.IMPLIES(list_adt[real].null?(arithmetic_poly.f), list_props[real].length(ff) = 0)), booleans.AND((booleans.IMPLIES((booleans.AND(list_adt[real].cons?(arithmetic_poly.f), arithmetic_poly.k = 0)), list_props[real].length(ff) = 1)), (booleans.IMPLIES((booleans.AND(list_adt[real].cons?(arithmetic_poly.f), reals.>(arithmetic_poly.k, 0))), list_props[real].length(ff) = (number_fields.-)((number_fields.+)(1, number_fields.*(list_props[real].length(arithmetic_poly.f), arithmetic_poly.k)), arithmetic_poly.k)))))}")))
 (init_polysub_TCC1 0
  (init_polysub_TCC1-1 nil 3778493816 ("" (subtype-tcc) nil nil)
   ((listn_0 name-judgement "listn[real](0)" standard_form_poly nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (Polynomial type-eq-decl nil standard_form_poly nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (init_polysub subtype
    "arithmetic_poly.init_polyplus(arithmetic_poly.f, arithmetic_poly.init_polyscale((number_fields.-)(1), arithmetic_poly.g))"
    "{ff: standard_form_poly.Polynomial | list_props[real].length(ff) = real_defs.max(list_props[real].length(arithmetic_poly.f), list_props[real].length(arithmetic_poly.g))}")))
 (assoc_init_polyplus 0
  (assoc_init_polyplus-1 nil 3777802695
   ("" (induct "f")
    (("1" (assert)
      (("1" (skeep)
        (("1" (expand "init_polyplus" 1 2)
          (("1" (expand "init_polyplus" 1 2) (("1" (propax) nil nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (assert)
      (("2" (skeep)
        (("2" (induct "g" 1)
          (("1" (assert)
            (("1" (skeep)
              (("1" (expand "init_polyplus" 1 2)
                (("1" (expand "init_polyplus" 1 3)
                  (("1" (propax) nil nil)) nil))
                nil))
              nil))
            nil)
           ("2" (assert)
            (("2" (skeep)
              (("2" (skeep)
                (("2" (expand "init_polyplus" 1 4)
                  (("2" (assert)
                    (("2" (case "null?(h)")
                      (("1" (assert)
                        (("1" (expand "init_polyplus" 1 1)
                          (("1" (expand "init_polyplus" 1 1)
                            (("1" (propax) nil nil)) nil))
                          nil))
                        nil)
                       ("2" (assert)
                        (("2" (expand "init_polyplus" 2 1)
                          (("2" (lift-if)
                            (("2" (expand "init_polyplus" 2 1)
                              (("2"
                                (assert)
                                (("2"
                                  (expand "init_polyplus" 2 1)
                                  (("2"
                                    (expand "init_polyplus" 2 3)
                                    (("2"
                                      (decompose-equality 2)
                                      (("2"
                                        (inst
                                         -2
                                         "cons2_var_1"
                                         "cdr(h)")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (replace -2 1 rl)
                                            (("2"
                                              (expand
                                               "init_polyplus"
                                               1
                                               2)
                                              (("2" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (list_cons_extensionality formula-decl nil list_adt nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (listn_0 name-judgement "listn[real](0)" standard_form_poly nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (init_polyplus def-decl
     "{ff: Polynomial | length(ff) = max(length(f), length(g))}"
     arithmetic_poly nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Polynomial type-eq-decl nil standard_form_poly nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   nil))
 (poly_scale_assoc 0
  (poly_scale_assoc-1 nil 3777802804
   ("" (induct "f")
    (("1" (skeep) (("1" (grind) nil nil)) nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (expand "init_polyscale" 1 2)
          (("2" (expand "init_polyscale" 1 3)
            (("2" (expand "init_polyscale" 1 1)
              (("2" (decompose-equality 1)
                (("2" (inst -1 "r1" "r2") nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (list_cons_extensionality formula-decl nil list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (listn_0 name-judgement "listn[real](0)" standard_form_poly nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (init_polyscale def-decl
     "{ff: Polynomial | length(ff) = length(f)}" arithmetic_poly nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Polynomial type-eq-decl nil standard_form_poly nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   nil))
 (poly_scale_dist1 0
  (poly_scale_dist1-1 nil 3777802823
   ("" (induct "f")
    (("1" (skeep)
      (("1" (expand "init_polyplus" 1 1)
        (("1" (expand "init_polyscale" 1 2)
          (("1" (expand "init_polyplus" 1 1) (("1" (propax) nil nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (expand "init_polyscale" 1 2)
          (("2" (expand "init_polyplus" 1 1)
            (("2" (case "g=null")
              (("1" (assert)
                (("1" (replace -1 1)
                  (("1" (expand "init_polyscale" 1 3)
                    (("1" (expand "init_polyplus" 1 1)
                      (("1" (expand "init_polyscale" 1 1)
                        (("1" (propax) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (assert)
                (("2" (expand "init_polyscale" 2 1)
                  (("2" (expand "init_polyplus" 2 2)
                    (("2" (typepred "init_polyscale(r,g)")
                      (("2" (case "init_polyscale(r,g)=null")
                        (("1" (replace -1 -2)
                          (("1" (assert) (("1" (grind) nil nil)) nil))
                          nil)
                         ("2" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (listn_0 name-judgement "listn[real](0)" standard_form_poly nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (init_polyplus def-decl
     "{ff: Polynomial | length(ff) = max(length(f), length(g))}"
     arithmetic_poly nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (init_polyscale def-decl
     "{ff: Polynomial | length(ff) = length(f)}" arithmetic_poly nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Polynomial type-eq-decl nil standard_form_poly nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   nil))
 (poly_scale_dist2 0
  (poly_scale_dist2-1 nil 3777802844
   ("" (induct "f")
    (("1" (skeep) (("1" (grind) nil nil)) nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (case "cons2_var=null")
          (("1" (replace -1 1)
            (("1" (expand "init_polyscale" 1 2)
              (("1" (expand "init_polyscale" 1 1)
                (("1" (expand "init_polyscale" 1 1)
                  (("1" (expand "init_polyscale" 1 1)
                    (("1" (expand "init_polyscale" 1 1)
                      (("1" (expand "init_polyscale" 1 1)
                        (("1" (expand "init_polyplus" 1 1)
                          (("1" (decompose-equality 1)
                            (("1" (expand "init_polyplus" 1 1)
                              (("1" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (expand "init_polyscale" 2 1)
            (("2" (expand "init_polyscale" 2 2)
              (("2" (expand "init_polyscale" 2 3)
                (("2" (expand "init_polyplus" 2 1)
                  (("2" (decompose-equality 2)
                    (("2" (inst -1 "r1" "r2") nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (list_cons_extensionality formula-decl nil list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (listn_0 name-judgement "listn[real](0)" standard_form_poly nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (init_polyplus def-decl
     "{ff: Polynomial | length(ff) = max(length(f), length(g))}"
     arithmetic_poly nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (init_polyscale def-decl
     "{ff: Polynomial | length(ff) = length(f)}" arithmetic_poly nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Polynomial type-eq-decl nil standard_form_poly nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   nil))
 (poly_scale_mult1 0
  (poly_scale_mult1-1 nil 3777802886
   ("" (induct "f")
    (("1" (skeep)
      (("1" (expand "init_polymult" 1 2)
        (("1" (expand "init_polyscale" 1 2)
          (("1" (expand "init_polymult" 1 1)
            (("1" (expand "init_polyscale" 1 1)
              (("1" (propax) nil nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skeep)
      (("2" (case "cons2_var=null")
        (("1" (replace -1 1)
          (("1" (expand "init_polyscale" 1 2)
            (("1" (expand "init_polyscale" 1 2)
              (("1" (skeep)
                (("1" (case "g=null")
                  (("1" (replace -1 1)
                    (("1" (hide -) (("1" (grind) nil nil)) nil)) nil)
                   ("2" (expand "init_polymult" 2 2)
                    (("2" (assert)
                      (("2" (expand "init_polymult" 2 1)
                        (("2" (expand "length" 2 1)
                          (("2" (assert)
                            (("2" (lemma "poly_scale_assoc")
                              (("2"
                                (inst -1 "r" "cons1_var" "g")
                                nil
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (skeep)
          (("2" (case "g=null")
            (("1" (replace -1 2)
              (("1" (hide -2) (("1" (grind) nil nil)) nil)) nil)
             ("2" (expand "init_polymult" 3 1)
              (("2" (assert)
                (("2" (expand "length" 3 1)
                  (("2" (expand "length" 3 1)
                    (("2" (assert)
                      (("2" (assert)
                        (("2" (expand "init_polyscale" 3 3)
                          (("2" (expand "init_polymult" 3 2)
                            (("2" (expand "length" 3 1)
                              (("2"
                                (typepred
                                 "init_polyscale(r,cons2_var)"
                                 3)
                                (("2"
                                  (hide -1)
                                  (("2"
                                    (replace -1 3)
                                    (("2"
                                      (expand "length" 3 1)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (inst-cp -4 "r" "cons(0,g)")
                                          (("2"
                                            (replace -5 3 rl)
                                            (("2"
                                              (lemma
                                               "poly_scale_dist1")
                                              (("2"
                                                (inst
                                                 -1
                                                 "r"
                                                 "init_polyscale(cons1_var, g)"
                                                 "init_polymult(cons2_var,
                                                                 cons(0, g))")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (replace -1 3)
                                                    (("2"
                                                      (lemma
                                                       "poly_scale_assoc")
                                                      (("2"
                                                        (inst
                                                         -1
                                                         "r"
                                                         "cons1_var"
                                                         "g")
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (poly_scale_dist1 formula-decl nil arithmetic_poly nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (odd? const-decl "bool" integers nil)
    (> const-decl "bool" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (length_singleton formula-decl nil more_list_props "structures/")
    (poly_scale_assoc formula-decl nil arithmetic_poly nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (listn_0 name-judgement "listn[real](0)" standard_form_poly nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (init_polymult def-decl "{ff: Polynomial |
   (null?(f) OR null?(g) IMPLIES length(ff) = 0) AND
    ((NOT null?(f) AND NOT null?(g)) IMPLIES
      length(ff) = length(f) + length(g) - 1)}" arithmetic_poly nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (init_polyscale def-decl
     "{ff: Polynomial | length(ff) = length(f)}" arithmetic_poly nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Polynomial type-eq-decl nil standard_form_poly nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil))
 (poly_scale_one 0
  (poly_scale_one-1 nil 3777802915
   ("" (induct "f")
    (("1" (grind) nil nil)
     ("2" (skeep)
      (("2" (expand "init_polyscale" 1 1)
        (("2" (decompose-equality 1) nil nil)) nil))
      nil))
    nil)
   ((list_cons_extensionality formula-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (listn_0 name-judgement "listn[real](0)" standard_form_poly nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (init_polyscale def-decl
     "{ff: Polynomial | length(ff) = length(f)}" arithmetic_poly nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Polynomial type-eq-decl nil standard_form_poly nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   nil))
 (last_plus_TCC1 0
  (last_plus_TCC1-1 nil 3777810365
   ("" (skeep)
    (("" (typepred "init_polyplus(f,g)")
      (("" (hide -1) (("" (grind) nil nil)) nil)) nil))
    nil)
   ((cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (init_polyplus def-decl
     "{ff: Polynomial | length(ff) = max(length(f), length(g))}"
     arithmetic_poly nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Polynomial type-eq-decl nil standard_form_poly nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (listn_0 name-judgement "listn[real](0)" standard_form_poly nil))
   nil
   (last_plus subtype
    "arithmetic_poly.init_polyplus(arithmetic_poly.f, arithmetic_poly.g)"
    "{ff: standard_form_poly.Polynomial | list_adt[real].cons?(ff)}")))
 (last_plus_TCC2 0
  (last_plus_TCC2-1 nil 3777810734
   ("" (skeep)
    (("" (typepred "g")
      (("" (typepred "f") (("" (grind) nil nil)) nil)) nil))
    nil)
   ((cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Polynomial type-eq-decl nil standard_form_poly nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (listn_0 name-judgement "listn[real](0)" standard_form_poly nil))
   nil
   (last_plus subtype "arithmetic_poly.g"
    "{ff: standard_form_poly.Polynomial | list_adt[real].cons?(ff)}")))
 (last_plus 0
  (last_plus-1 nil 3777810414
   ("" (induct "f")
    (("1" (assert) nil nil) ("2" (assert) nil nil)
     ("3" (skeep)
      (("3" (skeep)
        (("3" (case "cons2_var=null")
          (("1" (replace -1 1)
            (("1" (typepred "g")
              (("1" (expand "length" -2 2)
                (("1" (assert)
                  (("1" (expand "length" -2 2)
                    (("1" (case "NOT g= (: car(g) :)")
                      (("1" (decompose-equality 1)
                        (("1" (expand "length" -2)
                          (("1" (expand "length" -2)
                            (("1" (assert) nil nil)) nil))
                          nil))
                        nil)
                       ("2" (replace -1 1)
                        (("2" (hide -) (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (assert)
            (("2" (expand "last" 2 2)
              (("2" (expand "length" 2)
                (("2" (lift-if 2)
                  (("2" (split 2)
                    (("1" (flatten)
                      (("1" (expand "length" -1 1)
                        (("1" (assert) nil nil)) nil))
                      nil)
                     ("2" (flatten)
                      (("2" (inst -1 "cdr(g)")
                        (("1" (expand "init_polyplus" 2 1)
                          (("1" (assert)
                            (("1" (lift-if 2)
                              (("1"
                                (typepred "g")
                                (("1"
                                  (expand "length" -2 1)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (lift-if -2)
                                      (("1"
                                        (split -2)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (expand "length" -2)
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (flatten)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (expand "last" 3 1)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (expand "length" 3 1)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (typepred
                                                       "init_polyplus(cons2_var, cdr(g))")
                                                      (("2"
                                                        (typepred "g")
                                                        (("2"
                                                          (expand
                                                           "length"
                                                           -2)
                                                          (("2"
                                                            (expand
                                                             "max"
                                                             -4)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (reveal
                                                                 -)
                                                                (("2"
                                                                  (expand
                                                                   "last"
                                                                   3
                                                                   3)
                                                                  (("2"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (typepred "g")
                          (("2" (expand "length" -2)
                            (("2" (assert)
                              (("2"
                                (lift-if -2)
                                (("2"
                                  (split -2)
                                  (("1"
                                    (flatten)
                                    (("1" (assert) nil nil))
                                    nil)
                                   ("2"
                                    (flatten)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (hide 2)
      (("4" (skeep)
        (("4" (skeep)
          (("4" (typepred "g")
            (("4" (expand "length" -2) (("4" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("5" (hide 2)
      (("5" (skeep)
        (("5" (skeep)
          (("5" (typepred "g")
            (("5" (typepred "init_polyplus(f, g)")
              (("5" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (list_cons_extensionality formula-decl nil list_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (g skolem-const-decl
     "{gg: Polynomial | length(gg) = length(cons(cons1_var, cons2_var))}"
     arithmetic_poly nil)
    (cons2_var skolem-const-decl "list[real]" arithmetic_poly nil)
    (cons1_var skolem-const-decl "real" arithmetic_poly nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (listn_0 name-judgement "listn[real](0)" standard_form_poly nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (last def-decl "real" standard_form_poly nil)
    (list type-decl nil list_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (Polynomial type-eq-decl nil standard_form_poly nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (init_polyplus def-decl
     "{ff: Polynomial | length(ff) = max(length(f), length(g))}"
     arithmetic_poly nil))
   shostak))
 (last_plus1_TCC1 0
  (last_plus1_TCC1-1 nil 3777816302
   ("" (skeep)
    (("" (typepred "init_polyplus(f,g)")
      (("" (typepred "f" "g") (("" (grind) nil nil)) nil)) nil))
    nil)
   ((> const-decl "bool" reals nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (init_polyplus def-decl
     "{ff: Polynomial | length(ff) = max(length(f), length(g))}"
     arithmetic_poly nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Polynomial type-eq-decl nil standard_form_poly nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (listn_0 name-judgement "listn[real](0)" standard_form_poly nil))
   nil
   (last_plus1 subtype
    "arithmetic_poly.init_polyplus(arithmetic_poly.f, arithmetic_poly.g)"
    "{ff: standard_form_poly.Polynomial | list_adt[real].cons?(ff)}")))
 (last_plus1_TCC2 0
  (last_plus1_TCC2-1 nil 3777816302 ("" (subtype-tcc) nil nil)
   ((listn_0 name-judgement "listn[real](0)" standard_form_poly nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (Polynomial type-eq-decl nil standard_form_poly nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (last_plus1 subtype "arithmetic_poly.g"
    "{ff: standard_form_poly.Polynomial | list_adt[real].cons?(ff)}")))
 (last_plus1 0
  (last_plus1-1 nil 3777816302
   ("" (induct "f")
    (("1" (assert) nil nil) ("2" (assert) nil nil)
     ("3" (skeep)
      (("3" (skeep)
        (("3" (case "cons2_var=null")
          (("1" (replace -1 1)
            (("1" (expand "init_polyplus" 1 1)
              (("1" (typepred "g")
                (("1" (expand "length" -2)
                  (("1" (assert)
                    (("1" (lift-if -2)
                      (("1" (split -2)
                        (("1" (assert) nil nil)
                         ("2" (flatten)
                          (("2" (assert)
                            (("2" (expand "last" 2 1)
                              (("2"
                                (lift-if 2)
                                (("2"
                                  (split 2)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (expand "length" -1)
                                      (("1"
                                        (expand "init_polyplus" -1)
                                        (("1"
                                          (expand "last" 1)
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (flatten)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (expand "init_polyplus" 2 1)
                                        (("2"
                                          (expand "last" 2 2)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (lift-if 2)
                                              (("2"
                                                (split 2)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand
                                                       "length"
                                                       2)
                                                      (("1"
                                                        (expand
                                                         "init_polyplus"
                                                         2
                                                         1)
                                                        (("1"
                                                          (expand
                                                           "length"
                                                           -1)
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (assert)
            (("2" (expand "init_polyplus" 2 1)
              (("2" (typepred "g")
                (("2" (expand "length" -2)
                  (("2" (assert)
                    (("2" (lift-if -2)
                      (("2" (split -2)
                        (("1" (flatten) (("1" (assert) nil nil)) nil)
                         ("2" (assert)
                          (("2" (flatten)
                            (("2" (assert)
                              (("2"
                                (inst -3 "cdr(g)")
                                (("2"
                                  (expand "last" 3 1)
                                  (("2"
                                    (expand "length" 3 1)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (typepred
                                         "init_polyplus(cons2_var, cdr(g))")
                                        (("2"
                                          (expand "max" -2)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (expand "last" 3 2)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (lift-if 3)
                                                  (("2"
                                                    (split 3)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (typepred
                                                           "g")
                                                          (("1"
                                                            (expand
                                                             "length"
                                                             -2)
                                                            (("1"
                                                              (expand
                                                               "length"
                                                               -3)
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (flatten)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (hide 2)
      (("4" (skeep)
        (("4" (skeep)
          (("4" (typepred "g")
            (("4" (expand "length" -2) (("4" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("5" (hide 2)
      (("5" (skeep)
        (("5" (skeep)
          (("5" (typepred "init_polyplus(f,g)") (("5" (grind) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (listn_0 name-judgement "listn[real](0)" standard_form_poly nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (last def-decl "real" standard_form_poly nil)
    (list type-decl nil list_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (Polynomial type-eq-decl nil standard_form_poly nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (init_polyplus def-decl
     "{ff: Polynomial | length(ff) = max(length(f), length(g))}"
     arithmetic_poly nil))
   shostak))
 (last_scale_TCC1 0
  (last_scale_TCC1-1 nil 3777809860
   ("" (subtype-tcc)
    (("" (typepred "init_polyscale(c!1,g!1)")
      (("" (expand "length" -2) (("" (assert) nil nil)) nil)) nil))
    nil)
   ((init_polyscale def-decl
     "{ff: Polynomial | length(ff) = length(f)}" arithmetic_poly nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (listn_0 name-judgement "listn[real](0)" standard_form_poly nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Polynomial type-eq-decl nil standard_form_poly nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil))
   nil
   (last_scale subtype
    "arithmetic_poly.init_polyscale(arithmetic_poly.c, arithmetic_poly.g)"
    "{ff: standard_form_poly.Polynomial | list_adt[real].cons?(ff)}")))
 (last_scale 0
  (last_scale-1 nil 3777809862
   ("" (induct "g")
    (("1" (assert) nil nil) ("2" (assert) nil nil)
     ("3" (assert)
      (("3" (skeep)
        (("3" (skeep)
          (("3" (case "cons2_var=null")
            (("1" (replace -1 1)
              (("1" (expand "last" 1 1)
                (("1" (expand "length" 1 1)
                  (("1" (assert)
                    (("1" (expand "init_polyscale" 1 1)
                      (("1" (expand "init_polyscale" 1 1)
                        (("1" (expand "last" 1 1)
                          (("1" (expand "length" 1 1)
                            (("1" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand "last" 2 1)
              (("2" (expand "length" 2 1)
                (("2" (assert)
                  (("2" (expand "length" 2 1)
                    (("2" (assert)
                      (("2" (lift-if)
                        (("2" (split 2)
                          (("1" (flatten) (("1" (assert) nil nil)) nil)
                           ("2" (flatten)
                            (("2" (assert)
                              (("2"
                                (expand "init_polyscale" 2 1)
                                (("2"
                                  (inst -1 "c")
                                  (("2"
                                    (expand "last" 2 2)
                                    (("2"
                                      (expand "length" 2 1)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (lift-if 2)
                                          (("2"
                                            (split 2)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (typepred
                                                   "init_polyscale(c, cons2_var)")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand
                                                       "length"
                                                       -2
                                                       2)
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2" (flatten) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (skeep)
      (("4" (hide 2)
        (("4" (skeep)
          (("4" (typepred "init_polyscale" 1 1)
            (("4" (typepred "init_polyscale(c,g)")
              (("4" (assert)
                (("4" (expand "length" -2 2) (("4" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (odd? const-decl "bool" integers nil)
    (> const-decl "bool" reals nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (listn_0 name-judgement "listn[real](0)" standard_form_poly nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (last def-decl "real" standard_form_poly nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (list type-decl nil list_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (Polynomial type-eq-decl nil standard_form_poly nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (init_polyscale def-decl
     "{ff: Polynomial | length(ff) = length(f)}" arithmetic_poly nil))
   shostak))
 (last_mult_TCC1 0
  (last_mult_TCC1-1 nil 3777809712
   ("" (skeep)
    (("" (typepred "init_polymult(f,g)")
      (("" (assert)
        (("" (assert)
          (("" (expand "length" -2)
            (("" (expand "length" -3) (("" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (listn_0 name-judgement "listn[real](0)" standard_form_poly nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (Polynomial type-eq-decl nil standard_form_poly nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (init_polymult def-decl "{ff: Polynomial |
   (null?(f) OR null?(g) IMPLIES length(ff) = 0) AND
    ((NOT null?(f) AND NOT null?(g)) IMPLIES
      length(ff) = length(f) + length(g) - 1)}" arithmetic_poly nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil))
   nil
   (last_mult subtype
    "arithmetic_poly.init_polymult(arithmetic_poly.f, arithmetic_poly.g)"
    "{ff: standard_form_poly.Polynomial | list_adt[real].cons?(ff)}")))
 (last_mult 0
  (last_mult-1 nil 3777809758
   ("" (induct "f")
    (("1" (assert) nil nil) ("2" (assert) nil nil)
     ("3" (skeep)
      (("3" (skeep)
        (("3" (case "cons2_var=null")
          (("1" (expand "last" 1 1)
            (("1" (expand "length" 1 1)
              (("1" (assert)
                (("1" (expand "init_polymult" 1 1)
                  (("1" (expand "length" 1 1)
                    (("1" (lemma "last_scale")
                      (("1" (inst -1 "cons1_var" "g") nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (assert)
            (("2" (expand "last" 2 1)
              (("2" (expand "length" 2 1)
                (("2" (assert)
                  (("2" (lift-if 2)
                    (("2" (split 2)
                      (("1" (flatten)
                        (("1" (assert)
                          (("1" (expand "length" -1)
                            (("1" (assert) nil nil)) nil))
                          nil))
                        nil)
                       ("2" (flatten)
                        (("2" (assert)
                          (("2" (expand "init_polymult" 2 1)
                            (("2" (expand "length" 2 1)
                              (("2"
                                (lemma "last_plus")
                                (("2"
                                  (lemma "last_plus1")
                                  (("2"
                                    (inst
                                     -1
                                     "init_polyscale(cons1_var, g)"
                                     "init_polymult(cons2_var, cons(0, g))")
                                    (("1"
                                      (replace -1 2)
                                      (("1"
                                        (inst -3 "cons(0,g)")
                                        (("1"
                                          (expand "last" -3 2)
                                          (("1"
                                            (expand "length" -3 1)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (lift-if -3)
                                                (("1"
                                                  (split -3)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (case
                                                       "NOT g=null")
                                                      (("1"
                                                        (expand
                                                         "length"
                                                         -1)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (replace -1 2)
                                                        (("2"
                                                          (typepred
                                                           "g")
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (flatten)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (assert)
                                      (("2"
                                        (typepred
                                         "init_polymult(cons2_var, cons[real](0, g))"
                                         "init_polyscale(cons1_var, g)")
                                        (("2"
                                          (hide -1 -3)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (hide -1)
                                              (("2"
                                                (hide -1)
                                                (("2"
                                                  (replace -1)
                                                  (("2"
                                                    (typepred
                                                     "init_polymult(cons2_var, cons[real](0, g))")
                                                    (("2"
                                                      (hide -1)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (hide -1)
                                                          (("2"
                                                            (replace
                                                             -1
                                                             1)
                                                            (("2"
                                                              (expand
                                                               "length"
                                                               1
                                                               1)
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (typepred
                                       "init_polyscale(cons1_var, g)")
                                      (("3"
                                        (typepred "g")
                                        (("3"
                                          (expand "length" -4)
                                          (("3" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (hide 2)
      (("4" (skeep)
        (("4" (skeep)
          (("4" (typepred "init_polymult(f, g)")
            (("4" (assert)
              (("4" (expand "length" -2)
                (("4" (assert)
                  (("4" (expand "length" -3 1)
                    (("4" (assert)
                      (("4" (expand "length" -3)
                        (("4" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((init_polymult def-decl "{ff: Polynomial |
   (null?(f) OR null?(g) IMPLIES length(ff) = 0) AND
    ((NOT null?(f) AND NOT null?(g)) IMPLIES
      length(ff) = length(f) + length(g) - 1)}" arithmetic_poly nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Polynomial type-eq-decl nil standard_form_poly nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (last def-decl "real" standard_form_poly nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list_induction formula-decl nil list_adt nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (listn_0 name-judgement "listn[real](0)" standard_form_poly nil)
    (last_plus formula-decl nil arithmetic_poly nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (init_polyscale def-decl
     "{ff: Polynomial | length(ff) = length(f)}" arithmetic_poly nil)
    (cons1_var skolem-const-decl "real" arithmetic_poly nil)
    (g skolem-const-decl "{ff: Polynomial | cons?(ff)}" arithmetic_poly
     nil)
    (> const-decl "bool" reals nil)
    (cons2_var skolem-const-decl "list[real]" arithmetic_poly nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (last_plus1 formula-decl nil arithmetic_poly nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (last_scale formula-decl nil arithmetic_poly nil)
    (null adt-constructor-decl "(null?)" list_adt nil))
   shostak))
 (standard_polymult 0
  (standard_polymult-1 nil 3777817269
   ("" (skeep)
    (("" (expand "standard_form?" 1)
      (("" (split 1)
        (("1" (propax) nil nil)
         ("2" (flatten)
          (("2" (lemma "last_mult")
            (("2" (inst -1 "f" "g")
              (("1" (split 2)
                (("1" (typepred "f" "g")
                  (("1" (hide -1 -3)
                    (("1" (expand "standard_form?" -1)
                      (("1" (expand "standard_form?" -2)
                        (("1" (split -1)
                          (("1" (assert)
                            (("1" (expand "init_polymult")
                              (("1" (propax) nil nil)) nil))
                            nil)
                           ("2" (flatten)
                            (("2" (split -2)
                              (("1"
                                (expand "init_polymult")
                                (("1" (assert) nil nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (split -1)
                                  (("1" (propax) nil nil)
                                   ("2"
                                    (split -1)
                                    (("1" (propax) nil nil)
                                     ("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (propax) nil nil))
                nil)
               ("2" (expand "init_polymult") (("2" (assert) nil nil))
                nil)
               ("3" (expand "init_polymult") (("3" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((standard_form? const-decl "bool" standard_form_poly nil)
    (f skolem-const-decl "(standard_form?)" arithmetic_poly nil)
    (Polynomial type-eq-decl nil standard_form_poly nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (g skolem-const-decl "(standard_form?)" arithmetic_poly nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (init_polymult def-decl "{ff: Polynomial |
   (null?(f) OR null?(g) IMPLIES length(ff) = 0) AND
    ((NOT null?(f) AND NOT null?(g)) IMPLIES
      length(ff) = length(f) + length(g) - 1)}" arithmetic_poly nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (last_mult formula-decl nil arithmetic_poly nil)
    (listn_0 name-judgement "listn[real](0)" standard_form_poly nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   shostak))
 (reflex_init 0
  (reflex_init-1 nil 3777821202
   ("" (induct "f")
    (("1" (skeep)
      (("1" (grind)
        (("1" (expand "init_polyplus" 1)
          (("1" (lift-if) (("1" (assert) nil nil)) nil)) nil))
        nil))
      nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (expand "init_polyplus" 1 2)
          (("2" (assert)
            (("2" (lift-if)
              (("2" (split)
                (("1" (flatten)
                  (("1" (expand "init_polyplus" 1)
                    (("1" (assert) nil nil)) nil))
                  nil)
                 ("2" (flatten)
                  (("2" (assert)
                    (("2" (expand "init_polyplus" 2 1)
                      (("2" (assert)
                        (("2" (decompose-equality 2)
                          (("2" (inst -1 "cdr(g)") nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (list_cons_extensionality formula-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (listn_0 name-judgement "listn[real](0)" standard_form_poly nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (init_polyplus def-decl
     "{ff: Polynomial | length(ff) = max(length(f), length(g))}"
     arithmetic_poly nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Polynomial type-eq-decl nil standard_form_poly nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   nil))
 (reflex_init1 0
  (reflex_init1-1 nil 3777821243
   ("" (skeep)
    (("" (expand "polyplus")
      (("" (lemma "reflex_init")
        (("" (inst -1 "f" "g") (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((polyplus const-decl "(standard_form?)" arithmetic_poly nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (Polynomial type-eq-decl nil standard_form_poly nil)
    (reflex_init formula-decl nil arithmetic_poly nil)
    (listn_0 name-judgement "listn[real](0)" standard_form_poly nil))
   nil))
 (add_car_TCC1 0
  (add_car_TCC1-1 nil 3777985748
   ("" (skeep)
    (("" (typepred "f" "g")
      (("" (typepred "init_polyplus(f,g)")
        (("" (expand "max" -2)
          (("" (expand "length" -2)
            (("" (assert)
              (("" (lift-if -2)
                (("" (split -2)
                  (("1" (flatten) (("1" (assert) nil nil)) nil)
                   ("2" (flatten) (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (real nonempty-type-from-decl nil reals nil)
    (Polynomial type-eq-decl nil standard_form_poly nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (init_polyplus def-decl
     "{ff: Polynomial | length(ff) = max(length(f), length(g))}"
     arithmetic_poly nil)
    (listn_0 name-judgement "listn[real](0)" standard_form_poly nil))
   nil
   (add_car subtype
    "arithmetic_poly.init_polyplus(arithmetic_poly.f, arithmetic_poly.g)"
    "(list_adt[real].cons?)")))
 (add_car 0
  (add_car-1 nil 3777986065
   ("" (induct "f")
    (("1" (assert) nil nil) ("2" (assert) nil nil)
     ("3" (assert)
      (("3" (skeep)
        (("3" (case "cons2_var=null")
          (("1" (replace -1 1)
            (("1" (skeep)
              (("1" (expand "init_polyplus" 1 1)
                (("1" (propax) nil nil)) nil))
              nil))
            nil)
           ("2" (assert)
            (("2" (skeep)
              (("2" (expand "init_polyplus" 2 1)
                (("2" (propax) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (hide 2)
      (("4" (skeep)
        (("4" (skeep)
          (("4" (typepred "init_polyplus(f,g)")
            (("4" (assert)
              (("4" (expand "max" -2)
                (("4" (typepred "g")
                  (("4" (expand "length") (("4" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (listn_0 name-judgement "listn[real](0)" standard_form_poly nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (list type-decl nil list_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (Polynomial type-eq-decl nil standard_form_poly nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (init_polyplus def-decl
     "{ff: Polynomial | length(ff) = max(length(f), length(g))}"
     arithmetic_poly nil))
   shostak))
 (mult_car 0
  (mult_car-1 nil 3777985578
   ("" (induct "f")
    (("1" (assert) nil nil) ("2" (assert) nil nil)
     ("3" (skeep)
      (("3" (skeep)
        (("3" (case "cons2_var=null")
          (("1" (replace -1 1)
            (("1" (lemma "add_car")
              (("1" (expand "init_polymult" 1 1)
                (("1" (expand "length" 1 1)
                  (("1" (expand "init_polyscale" 1 1)
                    (("1" (propax) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (assert)
            (("2" (expand "init_polymult" 2 1)
              (("2" (expand "length" 2 1)
                (("2" (expand "length" 2 1)
                  (("2" (assert)
                    (("2" (lift-if 2)
                      (("2" (split 2)
                        (("1" (flatten) (("1" (assert) nil nil)) nil)
                         ("2" (flatten)
                          (("2" (lemma "add_car")
                            (("2"
                              (inst -1 "init_polyscale(cons1_var,g)"
                               "init_polymult(cons2_var,cons(0,g))")
                              (("1"
                                (replace -1 2)
                                (("1"
                                  (expand "init_polyscale" 2 1)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (inst -2 "cons(0,g)")
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (typepred
                                 "init_polymult(cons2_var, cons[real](0, g))")
                                (("2"
                                  (assert)
                                  (("2"
                                    (expand "length" -2)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (expand "length" -3)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (typepred
                                 "init_polyscale(cons1_var, g)")
                                (("3"
                                  (expand "length" -2)
                                  (("3" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (hide 2)
      (("4" (skeep)
        (("4" (skeep)
          (("4" (typepred "init_polymult(f,g)")
            (("4" (assert)
              (("4" (expand "length" -2)
                (("4" (assert)
                  (("4" (expand "length" -3) (("4" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((init_polymult def-decl "{ff: Polynomial |
   (null?(f) OR null?(g) IMPLIES length(ff) = 0) AND
    ((NOT null?(f) AND NOT null?(g)) IMPLIES
      length(ff) = length(f) + length(g) - 1)}" arithmetic_poly nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Polynomial type-eq-decl nil standard_form_poly nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list_induction formula-decl nil list_adt nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (listn_0 name-judgement "listn[real](0)" standard_form_poly nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons2_var skolem-const-decl "list[real]" arithmetic_poly nil)
    (g skolem-const-decl "{ff: Polynomial | cons?(ff)}" arithmetic_poly
     nil)
    (cons1_var skolem-const-decl "real" arithmetic_poly nil)
    (init_polyscale def-decl
     "{ff: Polynomial | length(ff) = length(f)}" arithmetic_poly nil)
    (add_car formula-decl nil arithmetic_poly nil)
    (null adt-constructor-decl "(null?)" list_adt nil))
   shostak))
 (zero_p_TCC1 0
  (zero_p_TCC1-1 nil 3777822184 ("" (subtype-tcc) nil nil)
   ((bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (length_null formula-decl nil more_list_props "structures/"))
   nil
   (zero_p subtype "list_adt[real].null"
    "{f: standard_form_poly.Polynomial | list_props[real].length(f) = arithmetic_poly.n}")))
 (zero_p_TCC2 0
  (zero_p_TCC2-1 nil 3777822184 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (zero_p subtype "(number_fields.-)(arithmetic_poly.n, 1)" "nat")))
 (zero_p_TCC3 0
  (zero_p_TCC3-1 nil 3777822184 ("" (termination-tcc) nil nil) nil nil
   (zero_p termination
    "arithmetic_poly.zero_p((number_fields.-)(arithmetic_poly.n, 1))"
    "nil")))
 (zero_p_TCC4 0
  (zero_p_TCC4-2 nil 3777822646
   ("" (skeep) (("" (expand "length" 2 1) (("" (assert) nil nil)) nil))
    nil)
   ((length def-decl "nat" list_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (listn_0 name-judgement "listn[real](0)" standard_form_poly nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (zero_p subtype
    "list_adt[real].cons(0, arithmetic_poly.zero_p((number_fields.-)(arithmetic_poly.n, 1)))"
    "{f: standard_form_poly.Polynomial | list_props[real].length(f) = arithmetic_poly.n}"))
  (zero_p_TCC4-1 nil 3777822184 ("" (subtype-tcc) nil nil) nil nil
   (zero_p subtype
    "list_adt[real].cons(0, arithmetic_poly.zero_p((number_fields.-)(arithmetic_poly.n, 1)))"
    "{f: standard_form_poly.Polynomial | list_props[real].length(f) = arithmetic_poly.n}")))
 (zero_eval_TCC1 0
  (zero_eval_TCC1-1 nil 3777822184 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (listn_0 name-judgement "listn[real](0)" standard_form_poly nil))
   nil
   (zero_eval subtype "arithmetic_poly.deg"
    "integers.upfrom((number_fields.-)(list_props[real].length(arithmetic_poly.zero_p(arithmetic_poly.n)), 1))")))
 (zero_eval 0
  (zero_eval-1 nil 3777822670
   ("" (induct "n")
    (("1" (assert)
      (("1" (expand "zero_p" 1)
        (("1" (expand "init_eval" 1 1) (("1" (propax) nil nil)) nil))
        nil))
      nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (expand "init_eval" 1 1)
          (("2" (lift-if 1)
            (("2" (split 1)
              (("1" (propax) nil nil)
               ("2" (flatten)
                (("2" (expand "zero_p" 2)
                  (("2" (assert)
                    (("2" (inst -1 "x" "deg" "acc") nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2) (("3" (skeep) (("3" (assert) nil nil)) nil)) nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (listn_0 name-judgement "listn[real](0)" standard_form_poly nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (init_eval def-decl "real" eval_poly nil)
    (pred type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (length def-decl "nat" list_props nil)
    (Polynomial type-eq-decl nil standard_form_poly nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (zero_p def-decl "{f: Polynomial | length(f) = n}" arithmetic_poly
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (last_zero_TCC1 0
  (last_zero_TCC1-1 nil 3777822184 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (listn_0 name-judgement "listn[real](0)" standard_form_poly nil))
   nil
   (last_zero subtype "arithmetic_poly.zero_p(arithmetic_poly.n)"
    "{ff: standard_form_poly.Polynomial | list_adt[real].cons?(ff)}")))
 (last_zero 0
  (last_zero-1 nil 3777822696
   ("" (induct "n")
    (("1" (assert) nil nil) ("2" (assert) nil nil)
     ("3" (skeep)
      (("3" (case "j=0")
        (("1" (replace -1 1)
          (("1" (expand "zero_p" 1)
            (("1" (expand "zero_p" 1)
              (("1" (expand "last" 1)
                (("1" (expand "length" 1)
                  (("1" (expand "length" 1) (("1" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (assert)
          (("2" (expand "zero_p" 2)
            (("2" (expand "last" 2 1)
              (("2" (expand "length" 2 1) (("2" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (assert)
      (("4" (skeep)
        (("4" (expand "zero_p" 1) (("4" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (listn_0 name-judgement "listn[real](0)" standard_form_poly nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (last def-decl "real" standard_form_poly nil)
    (pred type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil) (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (Polynomial type-eq-decl nil standard_form_poly nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (zero_p def-decl "{f: Polynomial | length(f) = n}" arithmetic_poly
     nil))
   nil))
 (chop_zero_TCC1 0
  (chop_zero_TCC1-1 nil 3777822184 ("" (subtype-tcc) nil nil) nil nil
   (chop_zero subtype "(number_fields.-)(arithmetic_poly.n, 1)"
    "nat")))
 (chop_zero 0
  (chop_zero-1 nil 3777822723
   ("" (induct "n")
    (("1" (assert) nil nil) ("2" (assert) nil nil)
     ("3" (skeep)
      (("3" (case "j=0")
        (("1" (replace -1 1)
          (("1" (expand "zero_p" 1)
            (("1" (expand "zero_p" 1)
              (("1" (expand "chop" 1)
                (("1" (expand "length" 1)
                  (("1" (expand "length" 1) (("1" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (assert)
          (("2" (expand "zero_p" 2)
            (("2" (expand "chop" 2 1)
              (("2" (expand "length" 2 1) (("2" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (skeep) (("4" (assert) nil nil)) nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (listn_0 name-judgement "listn[real](0)" standard_form_poly nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (zero_p def-decl "{f: Polynomial | length(f) = n}" arithmetic_poly
     nil)
    (length def-decl "nat" list_props nil)
    (chop def-decl "Polynomial" standard_form_poly nil)
    (Polynomial type-eq-decl nil standard_form_poly nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (list type-decl nil list_adt nil)
    (pred type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil))
 (standard_zero 0
  (standard_zero-1 nil 3777822761
   ("" (induct "n")
    (("1" (expand "zero_p" 1 1)
      (("1" (expand "standard_form" 1 1)
        (("1" (expand "standard_form?" 1 1) (("1" (propax) nil nil))
          nil))
        nil))
      nil)
     ("2" (assert)
      (("2" (skeep)
        (("2" (expand "zero_p" 1 1)
          (("2" (expand "standard_form" 1 1)
            (("2" (lift-if 1)
              (("2" (split 1)
                (("1" (expand "standard_form?" 1 1)
                  (("1" (lemma "last_zero")
                    (("1" (inst -1 "j+1")
                      (("1" (expand "zero_p" -1 1)
                        (("1" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (lemma "chop_zero")
                    (("2" (inst -1 "j+1")
                      (("2" (expand "zero_p" -1 1)
                        (("2" (replace -1 2) (("2" (propax) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((chop_zero formula-decl nil arithmetic_poly nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (last_zero formula-decl nil arithmetic_poly nil)
    (listn_0 name-judgement "listn[real](0)" standard_form_poly nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (zero_p def-decl "{f: Polynomial | length(f) = n}" arithmetic_poly
     nil)
    (standard_form def-decl
     "{ff: (standard_form?) | length(ff) <= length(f)}"
     standard_form_poly nil)
    (length def-decl "nat" list_props nil)
    (<= const-decl "bool" reals nil)
    (standard_form? const-decl "bool" standard_form_poly nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (Polynomial type-eq-decl nil standard_form_poly nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (list type-decl nil list_adt nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil))
 (zero_p_props 0
  (zero_p_props-1 nil 3777822976
   ("" (induct "n")
    (("1" (assert) nil nil) ("2" (assert) nil nil)
     ("3" (skeep)
      (("3" (assert)
        (("3" (split -1)
          (("1" (assert)
            (("1" (expand "last" 1)
              (("1" (expand "zero_p" 1)
                (("1" (expand "last" 1)
                  (("1" (assert)
                    (("1" (lift-if)
                      (("1" (split)
                        (("1" (propax) nil nil)
                         ("2" (typepred "j")
                          (("2" (case "j=0")
                            (("1" (grind 2) nil nil)
                             ("2" (assert) (("2" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (grind) nil nil))
          nil))
        nil))
      nil)
     ("4" (hide 2)
      (("4" (skeep)
        (("4" (expand "zero_p" 1) (("4" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (listn_0 name-judgement "listn[real](0)" standard_form_poly nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (last def-decl "real" standard_form_poly nil)
    (pred type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil) (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (Polynomial type-eq-decl nil standard_form_poly nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (zero_p def-decl "{f: Polynomial | length(f) = n}" arithmetic_poly
     nil))
   shostak))
 (zero_p_props1 0
  (zero_p_props1-1 nil 3777823029
   ("" (induct "n")
    (("1" (assert) nil nil) ("2" (assert) nil nil)
     ("3" (skeep)
      (("3" (case "j=0")
        (("1" (replace -1 1)
          (("1" (expand "zero_p" 1)
            (("1" (expand "zero_p" 1)
              (("1" (expand "chop" 1)
                (("1" (expand "length" 1)
                  (("1" (assert)
                    (("1" (expand "length" 1 1)
                      (("1" (propax) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (assert)
          (("2" (expand "zero_p" 2 1)
            (("2" (expand "chop" 2 1)
              (("2" (expand "length" 2 1)
                (("2" (assert)
                  (("2" (replace -1 2)
                    (("2" (expand "zero_p" 2 2)
                      (("2" (propax) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (assert) (("4" (skeep) (("4" (assert) nil nil)) nil)) nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (listn_0 name-judgement "listn[real](0)" standard_form_poly nil)
    (length_null formula-decl nil more_list_props "structures/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (zero_p def-decl "{f: Polynomial | length(f) = n}" arithmetic_poly
     nil)
    (length def-decl "nat" list_props nil)
    (chop def-decl "Polynomial" standard_form_poly nil)
    (Polynomial type-eq-decl nil standard_form_poly nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (list type-decl nil list_adt nil)
    (pred type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak))
 (zero_p_init_polyplus 0
  (zero_p_init_polyplus-1 nil 3777823151
   ("" (assert)
    (("" (induct "f")
      (("1" (skeep)
        (("1" (expand "length" -1)
          (("1" (assert)
            (("1" (typepred "i")
              (("1" (case "NOT i=0")
                (("1" (assert) nil nil)
                 ("2" (replace -1 1)
                  (("2" (expand "zero_p" 1 1)
                    (("2" (expand "init_polyplus" 1 1)
                      (("2" (propax) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (skeep)
        (("2" (skeep)
          (("2" (case "cons2_var=null")
            (("1" (replace -1 1)
              (("1" (replace -1 -3)
                (("1" (expand "length" -3)
                  (("1" (expand "length" -3)
                    (("1" (case "i=0")
                      (("1" (replace -1 1)
                        (("1" (expand "zero_p" 1 1)
                          (("1" (expand "init_polyplus" 1 1)
                            (("1" (propax) nil nil)) nil))
                          nil))
                        nil)
                       ("2" (assert)
                        (("2" (case "NOT i=1")
                          (("1" (assert) nil nil)
                           ("2" (replace -1 1)
                            (("2" (replace -1 2)
                              (("2"
                                (expand "zero_p" 2 1)
                                (("2"
                                  (expand "zero_p" 2 1)
                                  (("2"
                                    (expand "init_polyplus" 2 1)
                                    (("2"
                                      (expand "init_polyplus" 2 1)
                                      (("2" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (assert)
              (("2" (expand "zero_p" 2 1)
                (("2" (assert)
                  (("2" (case "i=0")
                    (("1" (assert)
                      (("1" (expand "init_polyplus" 2 1)
                        (("1" (propax) nil nil)) nil))
                      nil)
                     ("2" (assert)
                      (("2" (expand "init_polyplus" 3 1)
                        (("2" (decompose-equality 3)
                          (("2" (inst -1 "i-1")
                            (("2" (assert)
                              (("2"
                                (expand "length" -1)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((list type-decl nil list_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Polynomial type-eq-decl nil standard_form_poly nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (init_polyplus def-decl
     "{ff: Polynomial | length(ff) = max(length(f), length(g))}"
     arithmetic_poly nil)
    (zero_p def-decl "{f: Polynomial | length(f) = n}" arithmetic_poly
     nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list_induction formula-decl nil list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (listn_0 name-judgement "listn[real](0)" standard_form_poly nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (list_cons_extensionality formula-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil))
   shostak))
 (zero_p_scal 0
  (zero_p_scal-1 nil 3777823363
   ("" (induct "g")
    (("1" (grind) nil nil)
     ("2" (skeep)
      (("2" (expand "init_polyscale" 1 1)
        (("2" (expand "zero_p" 1 1)
          (("2" (expand "length" 1 1)
            (("2" (assert)
              (("2" (decompose-equality 1)
                (("1" (expand "length" 1) (("1" (propax) nil nil)) nil)
                 ("2" (expand "length" 1) (("2" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (list_cons_extensionality formula-decl nil list_adt nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (cons2_var skolem-const-decl "list[real]" arithmetic_poly nil)
    (cons1_var skolem-const-decl "real" arithmetic_poly nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (listn_0 name-judgement "listn[real](0)" standard_form_poly nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (zero_p def-decl "{f: Polynomial | length(f) = n}" arithmetic_poly
     nil)
    (init_polyscale def-decl
     "{ff: Polynomial | length(ff) = length(f)}" arithmetic_poly nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Polynomial type-eq-decl nil standard_form_poly nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   shostak))
 (zero_p_scal1 0
  (zero_p_scal1-1 nil 3777823464
   ("" (induct "i")
    (("1" (skeep)
      (("1" (expand "init_polyscale")
        (("1" (expand "zero_p") (("1" (propax) nil nil)) nil)) nil))
      nil)
     ("2" (expand "init_polyscale")
      (("2" (skeep)
        (("2" (skeep)
          (("2" (expand "zero_p" 1)
            (("2" (expand "init_polyscale" 1)
              (("2" (decompose-equality 1)
                (("1" (inst -1 "r") nil nil)
                 ("2" (flatten) (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (list_cons_extensionality formula-decl nil list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (j skolem-const-decl "nat" arithmetic_poly nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (listn_0 name-judgement "listn[real](0)" standard_form_poly nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (zero_p def-decl "{f: Polynomial | length(f) = n}" arithmetic_poly
     nil)
    (init_polyscale def-decl
     "{ff: Polynomial | length(ff) = length(f)}" arithmetic_poly nil)
    (length def-decl "nat" list_props nil)
    (Polynomial type-eq-decl nil standard_form_poly nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (list type-decl nil list_adt nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (zero_p_mult_TCC1 0
  (zero_p_mult_TCC1-1 nil 3777822184 ("" (subtype-tcc) nil nil)
   ((listn_0 name-judgement "listn[real](0)" standard_form_poly nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Polynomial type-eq-decl nil standard_form_poly nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil
   (zero_p_mult subtype
    "(number_fields.-)((number_fields.+)(arithmetic_poly.i, list_props[real].length(arithmetic_poly.g)), 1)"
    "nat")))
 (zero_p_mult 0
  (zero_p_mult-1 nil 3777823531
   ("" (induct "i" 1)
    (("1" (skeep) (("1" (grind) nil nil)) nil)
     ("2" (flatten)
      (("2" (skeep)
        (("2" (expand "zero_p" 1 1)
          (("2" (expand "init_polymult" 1 1)
            (("2" (typepred "g") (("2" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil)
     ("3" (skeep)
      (("3" (skeep)
        (("3" (case "j=0")
          (("1" (replace -1 1)
            (("1" (expand "zero_p" 1 1)
              (("1" (expand "zero_p" 1 1)
                (("1" (expand "init_polymult" 1 1)
                  (("1" (expand "length" 1 1)
                    (("1" (lemma "zero_p_scal")
                      (("1" (inst -1 "g") nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (assert)
            (("2" (expand "zero_p" 2 1)
              (("2" (expand "init_polymult" 2 1)
                (("2" (expand "length" 2 1)
                  (("2" (assert)
                    (("2" (typepred "zero_p(j)")
                      (("2" (hide -1)
                        (("2" (expand "length" -1)
                          (("2" (assert)
                            (("2" (lemma "zero_p_scal")
                              (("2"
                                (inst -1 "g")
                                (("2"
                                  (replace -1 2)
                                  (("2"
                                    (inst -3 "cons(0,g)")
                                    (("2"
                                      (replace -3 2)
                                      (("2"
                                        (lemma "zero_p_init_polyplus")
                                        (("2"
                                          (inst
                                           -1
                                           "zero_p(length(cons(0, g)) - 1 + j)"
                                           "length(g)")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (split -1)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (replace -1 2)
                                                  (("1"
                                                    (expand
                                                     "length"
                                                     2
                                                     1)
                                                    (("1"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (typepred
                                                 "zero_p(length(cons(0, g)) - 1 + j)")
                                                (("2"
                                                  (hide -1)
                                                  (("2"
                                                    (expand
                                                     "length"
                                                     -1
                                                     3)
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (expand "length" 1 1)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (hide 2)
      (("4" (skeep) (("4" (skeep) (("4" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((zero_p_scal formula-decl nil arithmetic_poly nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (g skolem-const-decl "{gg: Polynomial | cons?(gg)}" arithmetic_poly
     nil)
    (j skolem-const-decl "nat" arithmetic_poly nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (zero_p_init_polyplus formula-decl nil arithmetic_poly nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (listn_0 name-judgement "listn[real](0)" standard_form_poly nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (zero_p def-decl "{f: Polynomial | length(f) = n}" arithmetic_poly
     nil)
    (init_polymult def-decl "{ff: Polynomial |
   (null?(f) OR null?(g) IMPLIES length(ff) = 0) AND
    ((NOT null?(f) AND NOT null?(g)) IMPLIES
      length(ff) = length(f) + length(g) - 1)}" arithmetic_poly nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (pred type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil) (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Polynomial type-eq-decl nil standard_form_poly nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (length def-decl "nat" list_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak))
 (zero_p_multr 0
  (zero_p_multr-1 nil 3777823828
   ("" (induct "g")
    (("1" (skeep) (("1" (typepred "g!1") (("1" (propax) nil nil)) nil))
      nil)
     ("2" (assert) nil nil)
     ("3" (skeep)
      (("3" (skeep)
        (("3" (case "cons2_var=null")
          (("1" (replace -1 1)
            (("1" (expand "length" 1 1)
              (("1" (expand "length" 1 1)
                (("1" (expand "init_polymult" 1 1)
                  (("1" (case "i=0")
                    (("1" (replace -1 1)
                      (("1" (expand "zero_p" 1 1)
                        (("1" (expand "zero_p" 1 1)
                          (("1" (propax) nil nil)) nil))
                        nil))
                      nil)
                     ("2" (assert)
                      (("2" (typepred "zero_p(i)")
                        (("2" (typepred "zero_p(i)")
                          (("2" (hide -1)
                            (("2" (expand "length" -1 1)
                              (("2"
                                (assert)
                                (("2"
                                  (lemma "zero_p_scal1")
                                  (("2"
                                    (inst -1 "cons1_var" "i")
                                    nil
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (assert)
            (("2" (expand "length" 2 1)
              (("2" (expand "init_polymult" 2 1)
                (("2" (typepred "i")
                  (("2" (assert)
                    (("2" (typepred "zero_p(i)")
                      (("2" (hide -1)
                        (("2" (expand "length" 2 1)
                          (("2" (expand "length" 2 1)
                            (("2" (assert)
                              (("2"
                                (lift-if 2)
                                (("2"
                                  (assert)
                                  (("2"
                                    (lemma "zero_p_scal1")
                                    (("2"
                                      (inst -1 "cons1_var" "i")
                                      (("2"
                                        (replace -1 2)
                                        (("2"
                                          (lemma "zero_p_scal1")
                                          (("2"
                                            (lemma
                                             "zero_p_init_polyplus")
                                            (("2"
                                              (inst -6 "i+1")
                                              (("2"
                                                (expand "zero_p" -6 1)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (replace -6 2)
                                                    (("2"
                                                      (inst
                                                       -1
                                                       "zero_p(length(cons2_var) + i)"
                                                       "i")
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (hide 2)
      (("4" (skeep) (("4" (skeep) (("4" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (length_singleton formula-decl nil more_list_props "structures/")
    (zero_p_scal1 formula-decl nil arithmetic_poly nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (zero_p_init_polyplus formula-decl nil arithmetic_poly nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (length_null formula-decl nil more_list_props "structures/")
    (listn_0 name-judgement "listn[real](0)" standard_form_poly nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (zero_p def-decl "{f: Polynomial | length(f) = n}" arithmetic_poly
     nil)
    (init_polymult def-decl "{ff: Polynomial |
   (null?(f) OR null?(g) IMPLIES length(ff) = 0) AND
    ((NOT null?(f) AND NOT null?(g)) IMPLIES
      length(ff) = length(f) + length(g) - 1)}" arithmetic_poly nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Polynomial type-eq-decl nil standard_form_poly nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (list type-decl nil list_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   shostak))
 (cons_init_poly_plus 0
  (cons_init_poly_plus-1 nil 3777824891
   ("" (induct "f")
    (("1" (skeep)
      (("1" (expand "init_polyplus" 1 1)
        (("1" (expand "init_polyplus" 1 1)
          (("1" (assert)
            (("1" (expand "init_polyplus" 1) (("1" (propax) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (case "g=null")
          (("1" (replace -1 1)
            (("1" (expand "init_polyplus" 1 1)
              (("1" (expand "init_polyplus" 1 1)
                (("1" (decompose-equality 1)
                  (("1" (expand "init_polyplus" 1 1)
                    (("1" (propax) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (assert)
            (("2" (inst -1 "cons1_var+car(g)" "cdr(g)")
              (("2" (expand "init_polyplus" 2 1)
                (("2" (assert) (("2" (grind) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (list_cons_extensionality formula-decl nil list_adt nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (listn_0 name-judgement "listn[real](0)" standard_form_poly nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (init_polyplus def-decl
     "{ff: Polynomial | length(ff) = max(length(f), length(g))}"
     arithmetic_poly nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Polynomial type-eq-decl nil standard_form_poly nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   nil))
 (poly_mult_cons 0
  (poly_mult_cons-1 nil 3777826400
   ("" (induct "f")
    (("1" (assert) nil nil) ("2" (flatten) nil nil)
     ("3" (skeep)
      (("3" (skeep)
        (("3" (case "cons2_var=null")
          (("1" (replace -1 1)
            (("1" (expand "init_polymult" 1 1)
              (("1" (expand "length")
                (("1" (expand "init_polymult" 1 1)
                  (("1" (expand "length" 1 1)
                    (("1" (expand "length" 1 1)
                      (("1" (assert)
                        (("1" (lemma "zero_p_scal")
                          (("1" (lemma "zero_p_init_polyplus")
                            (("1" (inst -2 "g")
                              (("1"
                                (replace -2 1)
                                (("1"
                                  (inst
                                   -1
                                   "init_polymult(cons(cons1_var, null),
                                         cons(0, g))"
                                   "length(g)")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (split -1)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (replace -1 1)
                                          (("1"
                                            (expand
                                             "init_polymult"
                                             1
                                             1)
                                            (("1"
                                              (expand "length" 1 1)
                                              (("1"
                                                (expand
                                                 "init_polyscale"
                                                 1
                                                 2)
                                                (("1"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (decompose-equality 2)
                                        (("1"
                                          (typepred
                                           "init_polymult(cons(cons1_var, null), cons(0, g))")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (hide -1)
                                              (("1"
                                                (expand "length" -1 2)
                                                (("1"
                                                  (expand
                                                   "length"
                                                   -1
                                                   2)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand
                                                       "length"
                                                       2
                                                       1)
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (typepred
                                           "init_polymult(cons(cons1_var, null), cons(0, g))")
                                          (("2"
                                            (hide -1)
                                            (("2"
                                              (expand "length" -1 2)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (typepred
                                           "init_polymult(cons(cons1_var, null), cons(0, g))")
                                          (("3"
                                            (expand "length" -2 2)
                                            (("3" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (assert)
            (("2" (expand "init_polymult" 2 1)
              (("2" (expand "length" 2 1)
                (("2" (expand "length" 2 1)
                  (("2" (assert)
                    (("2" (assert)
                      (("2" (lemma "cons_init_poly_plus")
                        (("2"
                          (inst -1 "0" "init_polyscale(cons1_var, g)"
                           "init_polymult(cons2_var, cons(0, g))")
                          (("2" (replace -1 2)
                            (("2" (inst -2 "cons(0,g)")
                              (("2"
                                (split -2)
                                (("1"
                                  (assert)
                                  (("1"
                                    (replace -1 2)
                                    (("1"
                                      (expand "init_polymult" 2 2)
                                      (("1"
                                        (expand "length" 2 1)
                                        (("1"
                                          (expand "length" 2 1)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "length" 2 1)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (lemma "zero_p_scal")
                                                  (("1"
                                                    (inst -1 "g")
                                                    (("1"
                                                      (replace -1 2)
                                                      (("1"
                                                        (lemma
                                                         "zero_p_init_polyplus")
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "init_polymult(cons(cons1_var, cons2_var),
                                           cons(0, g))"
                                                           "length(g)")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (split
                                                               -1)
                                                              (("1"
                                                                (replace
                                                                 -1
                                                                 2)
                                                                (("1"
                                                                  (expand
                                                                   "init_polymult"
                                                                   2
                                                                   2)
                                                                  (("1"
                                                                    (expand
                                                                     "length"
                                                                     2
                                                                     1)
                                                                    (("1"
                                                                      (expand
                                                                       "length"
                                                                       2
                                                                       1)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (expand
                                                                           "init_polyscale"
                                                                           2
                                                                           2)
                                                                          (("1"
                                                                            (expand
                                                                             "init_polymult"
                                                                             2
                                                                             1)
                                                                            (("1"
                                                                              (expand
                                                                               "length"
                                                                               2
                                                                               1)
                                                                              (("1"
                                                                                (expand
                                                                                 "length"
                                                                                 2
                                                                                 1)
                                                                                (("1"
                                                                                  (lemma
                                                                                   "zero_p_scal")
                                                                                  (("1"
                                                                                    (inst
                                                                                     -1
                                                                                     "cons(0,g)")
                                                                                    (("1"
                                                                                      (replace
                                                                                       -1
                                                                                       2)
                                                                                      (("1"
                                                                                        (lemma
                                                                                         "zero_p_init_polyplus")
                                                                                        (("1"
                                                                                          (inst
                                                                                           -1
                                                                                           "init_polymult(cons2_var,
                                                          cons
                                                          (0,
                                                           cons(0, g)))"
                                                                                           "length(cons(0,g))")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (typepred
                                                                                               "init_polymult(cons2_var, cons(0, cons(0, g)))")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (hide
                                                                                                     -2)
                                                                                                    (("1"
                                                                                                      (replace
                                                                                                       -2
                                                                                                       1)
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "length"
                                                                                                         1
                                                                                                         2)
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (typepred
                                                                 "init_polymult(cons2_var, cons(0, cons(0, g)))")
                                                                (("2"
                                                                  (typepred
                                                                   "(init_polymult(cons(cons1_var, cons2_var), cons(0, g)))")
                                                                  (("2"
                                                                    (expand
                                                                     "length"
                                                                     -2
                                                                     2)
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (assert)
                                  (("2"
                                    (typepred
                                     "init_polymult(cons2_var, cons(0, g))")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (typepred
                                           "init_polymult(cons2_var, cons(0, g))")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (hide -2)
                                              (("2"
                                                (hide -2)
                                                (("2"
                                                  (expand "length" -4)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((list type-decl nil list_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (Polynomial type-eq-decl nil standard_form_poly nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (init_polymult def-decl "{ff: Polynomial |
   (null?(f) OR null?(g) IMPLIES length(ff) = 0) AND
    ((NOT null?(f) AND NOT null?(g)) IMPLIES
      length(ff) = length(f) + length(g) - 1)}" arithmetic_poly nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list_induction formula-decl nil list_adt nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (listn_0 name-judgement "listn[real](0)" standard_form_poly nil)
    (cons_init_poly_plus formula-decl nil arithmetic_poly nil)
    (zero_p_init_polyplus formula-decl nil arithmetic_poly nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (init_polyplus def-decl
     "{ff: Polynomial | length(ff) = max(length(f), length(g))}"
     arithmetic_poly nil)
    (zero_p def-decl "{f: Polynomial | length(f) = n}" arithmetic_poly
     nil)
    (g skolem-const-decl "{gg: Polynomial | cons?(gg)}" arithmetic_poly
     nil)
    (cons1_var skolem-const-decl "real" arithmetic_poly nil)
    (list_cons_extensionality formula-decl nil list_adt nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (length_singleton formula-decl nil more_list_props "structures/")
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (init_polyscale def-decl
     "{ff: Polynomial | length(ff) = length(f)}" arithmetic_poly nil)
    (zero_p_scal formula-decl nil arithmetic_poly nil)
    (null adt-constructor-decl "(null?)" list_adt nil))
   shostak))
 (chop_last_equiv 0
  (chop_last_equiv-1 nil 3777882763
   (""
    (case "FORALL (n:nat, f, g: {ff: Polynomial | cons?(ff)}):
               (length(f)=n AND length(g)=n) IMPLIES ((last(f) = last(g) AND chop(f) = chop(g)) IFF f = g)")
    (("1" (skeep)
      (("1" (inst -1 "length(f)" "f" "g")
        (("1" (assert)
          (("1" (split 1)
            (("1" (flatten)
              (("1" (lemma "chop_length")
                (("1" (inst-cp -1 "f")
                  (("1" (inst -1 "g") (("1" (assert) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("2" (flatten) (("2" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (induct "n")
        (("1" (skeep)
          (("1" (expand "length" -) (("1" (assert) nil nil)) nil)) nil)
         ("2" (skeep)
          (("2" (skeep)
            (("2" (case "j=0")
              (("1" (replace -1 -4)
                (("1" (replace -1 -3)
                  (("1" (assert)
                    (("1" (expand "last" 1)
                      (("1" (expand "chop" 1)
                        (("1" (case "NOT f = (: car(f):)")
                          (("1" (assert)
                            (("1" (decompose-equality 1)
                              (("1"
                                (expand "length" -3)
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "length" -3)
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (case "NOT g = (: car(g) :)")
                            (("1" (assert)
                              (("1"
                                (decompose-equality 1)
                                (("1"
                                  (expand "length" -5)
                                  (("1"
                                    (expand "length" -5)
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert)
                              (("2"
                                (replace -1 1)
                                (("2"
                                  (replace -2 1)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (split 1)
                                      (("1"
                                        (flatten)
                                        (("1" (assert) nil nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (split 2)
                (("1" (flatten)
                  (("1" (expand "last" -1)
                    (("1" (assert)
                      (("1" (expand "chop" -2)
                        (("1" (assert)
                          (("1" (decompose-equality -2)
                            (("1" (inst -4 "cdr(f)" "cdr(g)")
                              (("1"
                                (assert)
                                (("1"
                                  (expand "length" -5)
                                  (("1"
                                    (expand "length" -6)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (case
                                         "NOT f = cons(car(f),cdr(f))")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (decompose-equality 1)
                                            nil
                                            nil))
                                          nil)
                                         ("2"
                                          (case
                                           "NOT g= cons(car(g),cdr(g))")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (decompose-equality 1)
                                              nil
                                              nil))
                                            nil)
                                           ("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (replace -1 1) (("2" (propax) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (list_cons_extensionality formula-decl nil list_adt nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (listn_0 name-judgement "listn[real](0)" standard_form_poly nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (chop_length formula-decl nil standard_form_poly nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Polynomial type-eq-decl nil standard_form_poly nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (last def-decl "real" standard_form_poly nil)
    (chop def-decl "Polynomial" standard_form_poly nil))
   shostak))
 (standard_null 0
  (standard_null-1 nil 3777882942
   ("" (induct "n")
    (("1" (skeep)
      (("1" (typepred "f")
        (("1" (expand "zero_p" 1)
          (("1" (hide -1)
            (("1" (expand "standard_form" 1 1)
              (("1" (expand "standard_form?" 1 1)
                (("1" (assert)
                  (("1" (expand "length" -1)
                    (("1" (lift-if -1)
                      (("1" (assert)
                        (("1" (expand "length" -1)
                          (("1" (lift-if -1)
                            (("1" (split -1)
                              (("1" (assert) nil nil)
                               ("2"
                                (lift-if 1)
                                (("2"
                                  (flatten)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (split -1)
                                      (("1" (propax) nil nil)
                                       ("2"
                                        (flatten)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (typepred "j")
          (("2" (expand "zero_p" 1 1)
            (("2" (split 1)
              (("1" (flatten)
                (("1" (expand "standard_form" -1)
                  (("1" (expand "standard_form?" -1)
                    (("1" (assert)
                      (("1" (lift-if)
                        (("1" (typepred "f")
                          (("1" (hide -1)
                            (("1" (assert)
                              (("1"
                                (split -2)
                                (("1"
                                  (expand "length" -2)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (inst -4 "chop(f)")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (lemma "zero_p_props1")
                                          (("1"
                                            (inst -1 "j+1")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (lemma
                                                     "chop_last_equiv")
                                                    (("1"
                                                      (inst
                                                       -1
                                                       "f"
                                                       "zero_p(j+1)")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (split -1)
                                                            (("1"
                                                              (expand
                                                               "zero_p"
                                                               -1)
                                                              (("1"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (lemma
                                                               "zero_p_props")
                                                              (("2"
                                                                (inst
                                                                 -1
                                                                 "1+j")
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (lemma "chop_length")
                                        (("2"
                                          (inst -1 "f")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (assert)
                (("2" (flatten)
                  (("2" (lemma "zero_p_props")
                    (("2" (expand "standard_form" 1)
                      (("2" (expand "standard_form?" 1 1)
                        (("2" (assert)
                          (("2" (lift-if)
                            (("2" (assert)
                              (("2"
                                (case "NOT f = zero_p(j+1)")
                                (("1"
                                  (expand "zero_p" 1)
                                  (("1" (propax) nil nil))
                                  nil)
                                 ("2"
                                  (assert)
                                  (("2"
                                    (inst -2 "1+j")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (lemma "zero_p_props1")
                                        (("2"
                                          (inst -1 "1+j")
                                          (("2"
                                            (replace -2 -1 rl)
                                            (("2"
                                              (inst -6 "chop(f)")
                                              (("1" (assert) nil nil)
                                               ("2"
                                                (lemma "chop_length")
                                                (("2"
                                                  (inst -1 "f")
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (chop def-decl "Polynomial" standard_form_poly nil)
    (j skolem-const-decl "nat" arithmetic_poly nil)
    (f skolem-const-decl "{ff: Polynomial | length(ff) = 1 + j}"
     arithmetic_poly nil)
    (zero_p_props1 formula-decl nil arithmetic_poly nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (zero_p_props formula-decl nil arithmetic_poly nil)
    (chop_last_equiv formula-decl nil arithmetic_poly nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (chop_length formula-decl nil standard_form_poly nil)
    (listn_0 name-judgement "listn[real](0)" standard_form_poly nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (zero_p def-decl "{f: Polynomial | length(f) = n}" arithmetic_poly
     nil)
    (standard_form def-decl
     "{ff: (standard_form?) | length(ff) <= length(f)}"
     standard_form_poly nil)
    (<= const-decl "bool" reals nil)
    (standard_form? const-decl "bool" standard_form_poly nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Polynomial type-eq-decl nil standard_form_poly nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (standard_form_polyscale 0
  (standard_form_polyscale-1 nil 3777883470
   ("" (induct "f")
    (("1" (skeep) (("1" (grind) nil nil)) nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (case "r=0")
          (("1" (replace -1 1)
            (("1" (lemma "zero_p_scal")
              (("1" (inst-cp -1 "cons(cons1_var, cons2_var)")
                (("1" (replace -2 1)
                  (("1"
                    (inst -1 "standard_form
                                          (cons(cons1_var, cons2_var))")
                    (("1" (replace -1 1)
                      (("1" (lemma "standard_null")
                        (("1"
                          (inst-cp -1
                           "length(cons(cons1_var, cons2_var))"
                           "zero_p(length(cons(cons1_var, cons2_var)))")
                          (("1" (flatten -2)
                            (("1"
                              (inst -1 "length(standard_form
                                           (cons(cons1_var, cons2_var)))"
                               "zero_p(length(standard_form
                                           (cons(cons1_var, cons2_var))))")
                              (("1"
                                (flatten)
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (case "cons2_var=null")
            (("1" (case "cons1_var=0")
              (("1" (replace -1 2)
                (("1" (replace -2 2)
                  (("1" (hide -1 -2 -3 1) (("1" (grind) nil nil)) nil))
                  nil))
                nil)
               ("2" (replace -1 3)
                (("2" (hide -1 -2) (("2" (grind) nil nil)) nil)) nil))
              nil)
             ("2" (expand "init_polyscale" 3 1)
              (("2" (expand "init_polyscale" 3 2)
                (("2" (lift-if 3)
                  (("2" (split 3)
                    (("1" (flatten)
                      (("1" (lemma "standard_null")
                        (("1"
                          (inst -1 "length(cons(cons1_var, cons2_var))"
                           "cons(cons1_var, cons2_var)")
                          (("1" (flatten)
                            (("1" (assert)
                              (("1"
                                (expand "zero_p" -1 1)
                                (("1"
                                  (expand "length" -1 1)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "length" -1)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (lift-if -1)
                                          (("1"
                                            (split -1)
                                            (("1" (assert) nil nil)
                                             ("2"
                                              (flatten)
                                              (("2"
                                                (decompose-equality -1)
                                                (("2"
                                                  (replace -1 2)
                                                  (("2"
                                                    (replace -2 2)
                                                    (("2"
                                                      (replace -2 2)
                                                      (("2"
                                                        (lemma
                                                         "zero_p_scal1")
                                                        (("2"
                                                          (inst
                                                           -1
                                                           "r"
                                                           "length(cons2_var)")
                                                          (("2"
                                                            (expand
                                                             "standard_form"
                                                             2
                                                             2)
                                                            (("2"
                                                              (lemma
                                                               "standard_form_cdr2")
                                                              (("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (lemma "standard_form_cdr2")
                        (("2" (inst -1 "cons(cons1_var,cons2_var)")
                          (("1" (replace -1 2)
                            (("1" (assert)
                              (("1"
                                (case
                                 "null?(standard_form(cons(r * cons1_var,
                                          init_polyscale(r, cons2_var))))")
                                (("1"
                                  (lemma "standard_null_decomp")
                                  (("1"
                                    (inst
                                     -1
                                     "cons(r * cons1_var,
                                       init_polyscale(r, cons2_var))")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (inst -5 "r")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (case
                                               "NOT  standard_form(init_polyscale(r, standard_form(cons2_var)))=null")
                                              (("1"
                                                (lemma
                                                 "standard_null_decomp")
                                                (("1"
                                                  (inst
                                                   -1
                                                   "cons(r * cons1_var,
                                          init_polyscale(r, standard_form(cons2_var)))")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (lemma
                                                 "standard_null_decomp")
                                                (("2"
                                                  (inst
                                                   -1
                                                   "cons(r * cons1_var,
                                          init_polyscale(r, standard_form(cons2_var)))")
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (case
                                   "null?( standard_form(cons(r * cons1_var,
                                             init_polyscale(r, standard_form(cons2_var)))))")
                                  (("1"
                                    (lemma "standard_null_decomp")
                                    (("1"
                                      (inst
                                       -1
                                       "cons(r * cons1_var,
                                          init_polyscale(r, standard_form(cons2_var)))")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (inst -5 "r")
                                            (("1"
                                              (lemma
                                               "standard_null_decomp")
                                              (("1"
                                                (inst
                                                 -1
                                                 "cons(r * cons1_var,
                                         init_polyscale(r, cons2_var))")
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (lemma "standard_form_cdr2")
                                    (("2"
                                      (inst-cp
                                       -1
                                       "(cons(r * cons1_var,
                                         init_polyscale(r, cons2_var)))")
                                      (("1"
                                        (inst
                                         -1
                                         "cons(r * cons1_var,
                                            init_polyscale(r, standard_form(cons2_var)))")
                                        (("1"
                                          (inst -4 "r")
                                          (("1" (assert) nil nil))
                                          nil)
                                         ("2" (assert) nil nil))
                                        nil)
                                       ("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((zero_p_scal formula-decl nil arithmetic_poly nil)
    (zero_p def-decl "{f: Polynomial | length(f) = n}" arithmetic_poly
     nil)
    (standard_null formula-decl nil arithmetic_poly nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons1_var skolem-const-decl "real" arithmetic_poly nil)
    (cons2_var skolem-const-decl "list[real]" arithmetic_poly nil)
    (r skolem-const-decl "real" arithmetic_poly nil)
    (standard_null_decomp formula-decl nil standard_form_poly nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (standard_form_cdr2 formula-decl nil standard_form_poly nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (zero_p_scal1 formula-decl nil arithmetic_poly nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (last def-decl "real" standard_form_poly nil)
    (chop def-decl "Polynomial" standard_form_poly nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (listn_0 name-judgement "listn[real](0)" standard_form_poly nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (init_polyscale def-decl
     "{ff: Polynomial | length(ff) = length(f)}" arithmetic_poly nil)
    (standard_form def-decl
     "{ff: (standard_form?) | length(ff) <= length(f)}"
     standard_form_poly nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (<= const-decl "bool" reals nil)
    (standard_form? const-decl "bool" standard_form_poly nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Polynomial type-eq-decl nil standard_form_poly nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   shostak))
 (chop_plus 0
  (chop_plus-1 nil 3777802938
   (""
    (case "FORALL (n:nat, f: {ff: Polynomial | NOT standard_form?(ff)}, g: Polynomial):
                      length(f)=n IMPLIES polyplus(f, g) = polyplus(chop(f), g)")
    (("1" (skeep) (("1" (inst -1 "length(f)" "f" "g") nil nil)) nil)
     ("2" (hide 2)
      (("2" (induct "n")
        (("1" (skeep)
          (("1" (case "NOT f=null")
            (("1" (expand "length" -1) (("1" (assert) nil nil)) nil)
             ("2" (replace -1 1) (("2" (grind) nil nil)) nil))
            nil))
          nil)
         ("2" (skeep)
          (("2" (skeep)
            (("2" (case "f=null")
              (("1" (typepred "f")
                (("1" (expand "standard_form?" 1)
                  (("1" (assert) nil nil)) nil))
                nil)
               ("2" (case "j=0")
                (("1" (lemma "chop_length")
                  (("1" (inst -1 "f")
                    (("1" (case "not chop(f)=null")
                      (("1" (replace -4 -1)
                        (("1" (replace -2 -1)
                          (("1" (expand "length" -1)
                            (("1" (assert) nil nil)) nil))
                          nil))
                        nil)
                       ("2" (replace -1 2)
                        (("2" (typepred "f")
                          (("2" (hide -1)
                            (("2" (case "not f = (:car(f):)")
                              (("1"
                                (decompose-equality 1)
                                (("1"
                                  (expand "length" -5)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "length" -5)
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (replace -1 1)
                                (("2"
                                  (replace -1 3)
                                  (("2"
                                    (expand "standard_form?" 1)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (split 1)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "last" -1)
                                            (("1"
                                              (replace -1 2)
                                              (("1"
                                                (expand "polyplus" 2)
                                                (("1"
                                                  (expand
                                                   "init_polyplus"
                                                   2)
                                                  (("1"
                                                    (case "null?(g)")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand
                                                         "standard_form"
                                                         2)
                                                        (("1"
                                                          (expand
                                                           "chop"
                                                           2)
                                                          (("1"
                                                            (expand
                                                             "standard_form?"
                                                             2
                                                             1)
                                                            (("1"
                                                              (expand
                                                               "standard_form"
                                                               2
                                                               1)
                                                              (("1"
                                                                (expand
                                                                 "standard_form?"
                                                                 2
                                                                 1)
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      (("2"
                                                        (expand
                                                         "init_polyplus"
                                                         3
                                                         1)
                                                        (("2"
                                                          (case
                                                           "Not g =  cons(car(g), cdr(g))")
                                                          (("1"
                                                            (decompose-equality
                                                             1)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert) nil nil))
                    nil))
                  nil)
                 ("2" (assert)
                  (("2" (expand "polyplus" 3)
                    (("2" (case "g=null")
                      (("1" (replace -1 3)
                        (("1" (typepred "f")
                          (("1" (hide -1)
                            (("1" (expand "init_polyplus" 4)
                              (("1"
                                (assert)
                                (("1"
                                  (lemma "chop_length")
                                  (("1"
                                    (inst -1 "f")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (replace -4 -1)
                                        (("1"
                                          (expand "length" -1)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand
                                               "standard_form"
                                               4
                                               1)
                                              (("1" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (case "chop(f)=null")
                        (("1" (lemma "chop_length")
                          (("1" (inst -1 "f")
                            (("1" (replace -4 -1)
                              (("1"
                                (expand "length" -1)
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert)
                          (("2" (expand "init_polyplus" 5)
                            (("2"
                              (case "standard_form(init_polyplus(cdr(f), cdr(g)))=null IFF standard_form(init_polyplus(cdr(chop(f)), cdr(g)))=null")
                              (("1"
                                (case
                                 "standard_form(init_polyplus(cdr(f),cdr(g)))=null")
                                (("1"
                                  (assert)
                                  (("1"
                                    (lemma "standard_form_car")
                                    (("1"
                                      (inst
                                       -1
                                       "cons(car(f) + car(g),
                                                             init_polyplus(cdr(f), cdr(g)))")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (replace -1 5)
                                          (("1"
                                            (lemma "standard_form_car")
                                            (("1"
                                              (inst
                                               -1
                                               "cons(car(chop(f))+ car(g),
                                                                  init_polyplus(cdr(chop(f)), cdr(g)))")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (replace -1 5)
                                                  (("1"
                                                    (lemma
                                                     "first_chop")
                                                    (("1"
                                                      (inst -1 "f")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (typepred
                                                 "init_polyplus(cdr(chop(f)), cdr(g))")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (lemma
                                                     "chop_length")
                                                    (("2"
                                                      (inst -1 "f")
                                                      (("2"
                                                        (hide -2)
                                                        (("2"
                                                          (replace
                                                           -7
                                                           -1)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (expand
                                                               "length"
                                                               -1)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (case
                                                                   "j=1")
                                                                  (("1"
                                                                    (replace
                                                                     -1
                                                                     -2)
                                                                    (("1"
                                                                      (case
                                                                       "NOT cdr(chop(f))=null")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (expand
                                                                           "length"
                                                                           -2)
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (replace
                                                                         -1
                                                                         -4)
                                                                        (("2"
                                                                          (expand
                                                                           "length"
                                                                           -4
                                                                           2)
                                                                          (("2"
                                                                            (case
                                                                             "length(g)=1")
                                                                            (("1"
                                                                              (case
                                                                               "not cdr(g)=null")
                                                                              (("1"
                                                                                (expand
                                                                                 "length"
                                                                                 -1)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "length"
                                                                                     -1)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (replace
                                                                                 -1
                                                                                 -6)
                                                                                (("2"
                                                                                  (expand
                                                                                   "length"
                                                                                   -6
                                                                                   2)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "max"
                                                                                     -6)
                                                                                    (("2"
                                                                                      (replace
                                                                                       -1
                                                                                       6)
                                                                                      (("2"
                                                                                        (replace
                                                                                         -3
                                                                                         6)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "init_polyplus"
                                                                                           6)
                                                                                          (("2"
                                                                                            (lemma
                                                                                             "first_chop")
                                                                                            (("2"
                                                                                              (inst
                                                                                               -1
                                                                                               "f")
                                                                                              (("2"
                                                                                                (replace
                                                                                                 -1
                                                                                                 6)
                                                                                                (("2"
                                                                                                  (propax)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (expand
                                                                               "length"
                                                                               1)
                                                                              (("2"
                                                                                (expand
                                                                                 "max"
                                                                                 -4)
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (expand
                                                                     "max"
                                                                     -2
                                                                     1)
                                                                    (("2"
                                                                      (lift-if
                                                                       -2)
                                                                      (("2"
                                                                        (split
                                                                         -2)
                                                                        (("1"
                                                                          (flatten)
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (expand
                                                                           "length"
                                                                           -2
                                                                           1)
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (assert)
                                        (("2"
                                          (typepred
                                           "init_polyplus(cdr(f),cdr(g))")
                                          (("2"
                                            (hide -1)
                                            (("2"
                                              (case "cdr(f)=null")
                                              (("1"
                                                (case "cdr(g)=null")
                                                (("1"
                                                  (replace -1 -3)
                                                  (("1"
                                                    (replace -2 -3)
                                                    (("1"
                                                      (expand "max" -3)
                                                      (("1"
                                                        (replace -1 6)
                                                        (("1"
                                                          (replace
                                                           -2
                                                           6)
                                                          (("1"
                                                            (expand
                                                             "length"
                                                             -7)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand "length" -6)
                                                  (("2"
                                                    (expand
                                                     "length"
                                                     -6)
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand "max" -1)
                                                (("2"
                                                  (lift-if -1)
                                                  (("2"
                                                    (split -1)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (expand
                                                         "length"
                                                         -2
                                                         1)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (flatten)
                                                      (("2"
                                                        (expand
                                                         "length"
                                                         -1
                                                         1)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (expand
                                                             "length"
                                                             -1)
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (lemma "standard_form_cdr3")
                                      (("2"
                                        (inst
                                         -1
                                         "cons(car(f)+ car(g),
                                                             init_polyplus(cdr(f), cdr(g)))")
                                        (("2"
                                          (lemma "standard_form_cdr3")
                                          (("2"
                                            (replace -2 7)
                                            (("2"
                                              (inst
                                               -1
                                               "cons(car(chop(f))+ car(g),
                                                              init_polyplus(cdr(chop(f)), cdr(g)))")
                                              (("2"
                                                (replace -1 7)
                                                (("2"
                                                  (decompose-equality
                                                   7)
                                                  (("1"
                                                    (lemma
                                                     "first_chop")
                                                    (("1"
                                                      (inst -1 "f")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (inst
                                                     -4
                                                     "cdr(f)"
                                                     "cdr(g)")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand
                                                         "length"
                                                         -5)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (expand
                                                             "polyplus"
                                                             -4)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (lemma
                                                                 "chop_cdr")
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "f")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (expand
                                                       "length"
                                                       -5)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (typepred
                                                           "f")
                                                          (("2"
                                                            (hide -1)
                                                            (("2"
                                                              (lemma
                                                               "standard_form_cdr1")
                                                              (("2"
                                                                (inst
                                                                 -1
                                                                 "f")
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (inst -1 "cdr(f)" "cdr(g)")
                                (("1"
                                  (expand "length" -2)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "polyplus" -1)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (lemma "chop_cdr")
                                          (("1"
                                            (inst -1 "f")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (replace -1 1)
                                                (("1"
                                                  (split 1)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (flatten)
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand "length" -2)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (typepred "f")
                                      (("2"
                                        (hide -1)
                                        (("2"
                                          (lemma "standard_form_cdr1")
                                          (("2"
                                            (inst -1 "f")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((IFF const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (standard_form_cdr3 formula-decl nil standard_form_poly nil)
    (standard_form_cdr1 formula-decl nil standard_form_poly nil)
    (chop_cdr formula-decl nil standard_form_poly nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (g skolem-const-decl "Polynomial" arithmetic_poly nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (> const-decl "bool" reals nil)
    (first_chop formula-decl nil standard_form_poly nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (int_max application-judgement "{k: int | i <= k AND j <= k}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (length_null formula-decl nil more_list_props "structures/")
    (standard_form_car formula-decl nil standard_form_poly nil)
    (chop_length formula-decl nil standard_form_poly nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (list_cons_extensionality formula-decl nil list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (standard_form def-decl
     "{ff: (standard_form?) | length(ff) <= length(f)}"
     standard_form_poly nil)
    (last def-decl "real" standard_form_poly nil)
    (f skolem-const-decl "{ff: Polynomial | NOT standard_form?(ff)}"
     arithmetic_poly nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (init_polyplus def-decl
     "{ff: Polynomial | length(ff) = max(length(f), length(g))}"
     arithmetic_poly nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (listn_0 name-judgement "listn[real](0)" standard_form_poly nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Polynomial type-eq-decl nil standard_form_poly nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (standard_form? const-decl "bool" standard_form_poly nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (polyplus const-decl "(standard_form?)" arithmetic_poly nil)
    (chop def-decl "Polynomial" standard_form_poly nil))
   nil))
 (standard_eliminatel 0
  (standard_eliminatel-1 nil 3777821302
   (""
    (case "FORALL (n:nat, f, g: Polynomial):
               length(f)=n IMPLIES polyplus(f, g) = standard_form(init_polyplus(standard_form(f), g))")
    (("1" (skeep) (("1" (inst -1 "length(f)" "f" "g") nil nil)) nil)
     ("2" (hide 2)
      (("2" (induct "n")
        (("1" (skeep)
          (("1" (case "NOT f=null")
            (("1" (expand "length" -) (("1" (assert) nil nil)) nil)
             ("2" (replace -1 1)
              (("2" (hide -1 -2) (("2" (grind) nil nil)) nil)) nil))
            nil))
          nil)
         ("2" (skeep)
          (("2" (skeep)
            (("2" (case "standard_form?(f)")
              (("1" (expand "standard_form" 1 2)
                (("1" (assert)
                  (("1" (expand "polyplus" 1 1)
                    (("1" (propax) nil nil)) nil))
                  nil))
                nil)
               ("2" (assert)
                (("2" (expand "standard_form" 2 2)
                  (("2" (inst -1 "chop(f)" "g")
                    (("2" (lemma "chop_length")
                      (("2" (inst -1 "f")
                        (("2" (assert)
                          (("2" (lemma "chop_plus")
                            (("2" (inst -1 "f" "g")
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((chop_length formula-decl nil standard_form_poly nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (chop_plus formula-decl nil arithmetic_poly nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (chop def-decl "Polynomial" standard_form_poly nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (listn_0 name-judgement "listn[real](0)" standard_form_poly nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Polynomial type-eq-decl nil standard_form_poly nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (standard_form? const-decl "bool" standard_form_poly nil)
    (polyplus const-decl "(standard_form?)" arithmetic_poly nil)
    (<= const-decl "bool" reals nil)
    (standard_form def-decl
     "{ff: (standard_form?) | length(ff) <= length(f)}"
     standard_form_poly nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (init_polyplus def-decl
     "{ff: Polynomial | length(ff) = max(length(f), length(g))}"
     arithmetic_poly nil))
   shostak))
 (standard_eliminater 0
  (standard_eliminater-1 nil 3777821679
   ("" (lemma "standard_eliminatel")
    (("" (lemma "reflex_init1")
      (("" (skeep)
        (("" (inst-cp -1 "f" "g")
          (("" (inst-cp -3 "g" "f")
            (("" (assert)
              (("" (inst -1 "standard_form(g)" "f")
                (("" (assert)
                  (("" (replace -2 -4 rl)
                    (("" (expand "polyplus" -1)
                      (("" (replace -1 -4) (("" (propax) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((reflex_init1 formula-decl nil arithmetic_poly nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (Polynomial type-eq-decl nil standard_form_poly nil)
    (polyplus const-decl "(standard_form?)" arithmetic_poly nil)
    (standard_form def-decl
     "{ff: (standard_form?) | length(ff) <= length(f)}"
     standard_form_poly nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (<= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (standard_form? const-decl "bool" standard_form_poly nil)
    (listn_0 name-judgement "listn[real](0)" standard_form_poly nil)
    (standard_eliminatel formula-decl nil arithmetic_poly nil))
   nil))
 (standard_eliminate1 0
  (standard_eliminate1-2 nil 3777821703
   ("" (skeep)
    (("" (lemma "standard_eliminatel")
      (("" (lemma "standard_eliminater")
        (("" (inst -1 "f" "g")
          (("" (inst -2 "f" "standard_form(g)")
            (("" (assert)
              (("" (expand "polyplus" -2 1) (("" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((standard_eliminatel formula-decl nil arithmetic_poly nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (Polynomial type-eq-decl nil standard_form_poly nil)
    (polyplus const-decl "(standard_form?)" arithmetic_poly nil)
    (standard_form def-decl
     "{ff: (standard_form?) | length(ff) <= length(f)}"
     standard_form_poly nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (<= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (standard_form? const-decl "bool" standard_form_poly nil)
    (standard_eliminater formula-decl nil arithmetic_poly nil)
    (listn_0 name-judgement "listn[real](0)" standard_form_poly nil))
   nil)
  (standard_eliminate1-1 nil 3777821349 ("" (postpone) nil nil) nil
   shostak))
 (standard_eliminate_multl 0
  (standard_eliminate_multl-2 nil 3777826094
   ("" (induct "f")
    (("1" (skeep) (("1" (grind) nil nil)) nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (case "g=null")
          (("1" (replace -1 1)
            (("1" (expand "polymult" 1 1)
              (("1" (expand "init_polymult" 1 1)
                (("1" (expand "init_polymult" 1 1)
                  (("1" (propax) nil nil)) nil))
                nil))
              nil))
            nil)
           ("2" (case "cons2_var=null")
            (("1" (replace -1 2)
              (("1" (expand "polymult" 2 1)
                (("1" (expand "init_polymult" 2 1)
                  (("1" (assert)
                    (("1" (case "cons1_var = 0")
                      (("1" (replace -1 2)
                        (("1" (expand "standard_form" 2 3)
                          (("1" (expand "standard_form?" 2)
                            (("1" (expand "last" 2)
                              (("1"
                                (expand "length" 2)
                                (("1"
                                  (expand "chop" 2)
                                  (("1"
                                    (expand "length" 2)
                                    (("1"
                                      (expand "standard_form" 2 3)
                                      (("1"
                                        (expand "standard_form?" 2 1)
                                        (("1"
                                          (expand "init_polymult" 2 1)
                                          (("1"
                                            (expand
                                             "standard_form"
                                             2
                                             2)
                                            (("1"
                                              (expand "standard_form?")
                                              (("1"
                                                (lemma "zero_p_scal")
                                                (("1"
                                                  (inst -1 "g")
                                                  (("1"
                                                    (replace -1 2)
                                                    (("1"
                                                      (lemma
                                                       "standard_null")
                                                      (("1"
                                                        (inst
                                                         -1
                                                         "length(g)"
                                                         "zero_p(length(g))")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (expand "standard_form" 3 3)
                        (("2" (expand "standard_form?" 3 1)
                          (("2" (expand "last" 3 1)
                            (("2" (expand "length" 3 1)
                              (("2"
                                (assert)
                                (("2"
                                  (expand "init_polymult" 3)
                                  (("2"
                                    (expand "length" 3)
                                    (("2" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (assert)
              (("2" (expand "polymult" 3)
                (("2" (expand "init_polymult" 3 1)
                  (("2" (expand "length" 3)
                    (("2" (assert)
                      (("2" (expand "length" 3 1)
                        (("2" (assert)
                          (("2" (assert)
                            (("2" (lemma "standard_eliminater")
                              (("2"
                                (inst
                                 -1
                                 "init_polyscale(cons1_var,g)"
                                 "init_polymult(cons2_var,cons(0,g))")
                                (("2"
                                  (expand "polyplus" -1 1)
                                  (("2"
                                    (replace -1 3)
                                    (("2"
                                      (inst -2 "cons(0,g)")
                                      (("2"
                                        (expand "polymult" -2 1)
                                        (("2"
                                          (replace -2 3)
                                          (("2"
                                            (case
                                             "standard_form(cons(cons1_var,cons2_var))=null")
                                            (("1"
                                              (replace -1 3)
                                              (("1"
                                                (lemma
                                                 "standard_null_decomp")
                                                (("1"
                                                  (inst
                                                   -1
                                                   "cons(cons1_var,cons2_var)")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (flatten)
                                                      (("1"
                                                        (case
                                                         "NOT standard_form(cons2_var) = null")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (replace
                                                           -1
                                                           3)
                                                          (("2"
                                                            (expand
                                                             "init_polymult"
                                                             3
                                                             1)
                                                            (("2"
                                                              (expand
                                                               "standard_form"
                                                               3
                                                               2)
                                                              (("2"
                                                                (expand
                                                                 "init_polyscale"
                                                                 3
                                                                 1)
                                                                (("2"
                                                                  (expand
                                                                   "init_polyplus"
                                                                   3
                                                                   1)
                                                                  (("2"
                                                                    (expand
                                                                     "init_polymult"
                                                                     3
                                                                     1)
                                                                    (("2"
                                                                      (expand
                                                                       "standard_form"
                                                                       3
                                                                       2)
                                                                      (("2"
                                                                        (expand
                                                                         "standard_form"
                                                                         -2)
                                                                        (("2"
                                                                          (expand
                                                                           "standard_form?"
                                                                           -2)
                                                                          (("2"
                                                                            (expand
                                                                             "last"
                                                                             -2)
                                                                            (("2"
                                                                              (expand
                                                                               "length"
                                                                               -2)
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (lift-if
                                                                                   -2)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (split
                                                                                       -2)
                                                                                      (("1"
                                                                                        (flatten)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (replace
                                                                                             -1
                                                                                             3)
                                                                                            (("1"
                                                                                              (lemma
                                                                                               "zero_p_scal")
                                                                                              (("1"
                                                                                                (lemma
                                                                                                 "standard_null")
                                                                                                (("1"
                                                                                                  (lemma
                                                                                                   "standard_null")
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     -1
                                                                                                     "length(cons(0, zero_p(length(cdr(g)))))"
                                                                                                     "cons(0, zero_p(length(cdr(g))))")
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "zero_p"
                                                                                                       -1
                                                                                                       2)
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (case
                                                                                                           "NOT 0 * car(g)=0")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (replace
                                                                                                             -1
                                                                                                             3)
                                                                                                            (("2"
                                                                                                              (inst
                                                                                                               -4
                                                                                                               "cdr(g)")
                                                                                                              (("2"
                                                                                                                (replace
                                                                                                                 -4
                                                                                                                 3
                                                                                                                 lr)
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  (("2"
                                                                                                                    (lift-if
                                                                                                                     1)
                                                                                                                    (("2"
                                                                                                                      (split
                                                                                                                       1)
                                                                                                                      (("1"
                                                                                                                        (flatten)
                                                                                                                        (("1"
                                                                                                                          (replace
                                                                                                                           -1
                                                                                                                           4)
                                                                                                                          (("1"
                                                                                                                            (expand
                                                                                                                             "zero_p"
                                                                                                                             4)
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               "standard_form"
                                                                                                                               4)
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 "standard_form?")
                                                                                                                                (("1"
                                                                                                                                  (expand
                                                                                                                                   "last")
                                                                                                                                  (("1"
                                                                                                                                    (expand
                                                                                                                                     "length")
                                                                                                                                    (("1"
                                                                                                                                      (expand
                                                                                                                                       "length")
                                                                                                                                      (("1"
                                                                                                                                        (expand
                                                                                                                                         "chop")
                                                                                                                                        (("1"
                                                                                                                                          (expand
                                                                                                                                           "length")
                                                                                                                                          (("1"
                                                                                                                                            (expand
                                                                                                                                             "length")
                                                                                                                                            (("1"
                                                                                                                                              (expand
                                                                                                                                               "standard_form")
                                                                                                                                              (("1"
                                                                                                                                                (propax)
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (flatten)
                                                                                                                        (("2"
                                                                                                                          (assert)
                                                                                                                          (("2"
                                                                                                                            (expand
                                                                                                                             "zero_p"
                                                                                                                             2
                                                                                                                             2)
                                                                                                                            (("2"
                                                                                                                              (expand
                                                                                                                               "length"
                                                                                                                               2
                                                                                                                               2)
                                                                                                                              (("2"
                                                                                                                                (assert)
                                                                                                                                (("2"
                                                                                                                                  (expand
                                                                                                                                   "length"
                                                                                                                                   2
                                                                                                                                   2)
                                                                                                                                  (("2"
                                                                                                                                    (typepred
                                                                                                                                     "zero_p(length(cdr(g)))")
                                                                                                                                    (("2"
                                                                                                                                      (assert)
                                                                                                                                      (("2"
                                                                                                                                        (expand
                                                                                                                                         "zero_p"
                                                                                                                                         2
                                                                                                                                         2)
                                                                                                                                        (("2"
                                                                                                                                          (replace
                                                                                                                                           -2
                                                                                                                                           2)
                                                                                                                                          (("2"
                                                                                                                                            (propax)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (case
                                               "standard_form(cons2_var)=null")
                                              (("1"
                                                (lemma
                                                 "standard_form_car")
                                                (("1"
                                                  (inst
                                                   -1
                                                   "cons(cons1_var,cons2_var)")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (replace -1 4)
                                                      (("1"
                                                        (replace -1 1)
                                                        (("1"
                                                          (expand
                                                           "standard_form"
                                                           1
                                                           1)
                                                          (("1"
                                                            (expand
                                                             "standard_form?"
                                                             1
                                                             1)
                                                            (("1"
                                                              (expand
                                                               "last"
                                                               1
                                                               1)
                                                              (("1"
                                                                (expand
                                                                 "length"
                                                                 1
                                                                 1)
                                                                (("1"
                                                                  (lift-if
                                                                   1)
                                                                  (("1"
                                                                    (split
                                                                     1)
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (replace
                                                                         -1
                                                                         1)
                                                                        (("1"
                                                                          (expand
                                                                           "chop"
                                                                           1)
                                                                          (("1"
                                                                            (expand
                                                                             "length"
                                                                             1)
                                                                            (("1"
                                                                              (expand
                                                                               "standard_form")
                                                                              (("1"
                                                                                (propax)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (expand
                                                                         "standard_form"
                                                                         5
                                                                         5)
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (expand
                                                                             "standard_form?"
                                                                             5)
                                                                            (("2"
                                                                              (expand
                                                                               "last"
                                                                               5)
                                                                              (("2"
                                                                                (expand
                                                                                 "length"
                                                                                 5)
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (replace
                                                                                     -2
                                                                                     5)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "init_polymult"
                                                                                       5
                                                                                       1)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "standard_form"
                                                                                         5
                                                                                         2)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "init_polymult"
                                                                                           5
                                                                                           1)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "length"
                                                                                             5
                                                                                             1)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "init_polyplus"
                                                                                               5
                                                                                               1)
                                                                                              (("2"
                                                                                                (lift-if
                                                                                                 5)
                                                                                                (("2"
                                                                                                  (split
                                                                                                   5)
                                                                                                  (("1"
                                                                                                    (flatten)
                                                                                                    (("1"
                                                                                                      (hide
                                                                                                       -2
                                                                                                       -3
                                                                                                       -4
                                                                                                       -5
                                                                                                       2
                                                                                                       3
                                                                                                       4
                                                                                                       5)
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "standard_form")
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "standard_form?")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (propax)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (assert)
                                                (("2"
                                                  (lemma
                                                   "standard_form_cdr3")
                                                  (("2"
                                                    (inst
                                                     -1
                                                     "cons
                                                             (cons1_var, cons2_var)")
                                                    (("2"
                                                      (replace -1 5)
                                                      (("2"
                                                        (expand
                                                         "init_polymult"
                                                         5
                                                         2)
                                                        (("2"
                                                          (expand
                                                           "length"
                                                           5)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (expand
                                                               "length"
                                                               5
                                                               1)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (lemma
                                                                     "standard_eliminater")
                                                                    (("2"
                                                                      (inst
                                                                       -1
                                                                       "init_polyscale(cons1_var, g)"
                                                                       "init_polymult(standard_form(cons2_var),
                                                             cons(0, g))")
                                                                      (("2"
                                                                        (expand
                                                                         "polyplus"
                                                                         -1)
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((null adt-constructor-decl "(null?)" list_adt nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (standard_eliminater formula-decl nil arithmetic_poly nil)
    (polyplus const-decl "(standard_form?)" arithmetic_poly nil)
    (standard_form_car formula-decl nil standard_form_poly nil)
    (standard_form_cdr3 formula-decl nil standard_form_poly nil)
    (init_polyplus def-decl
     "{ff: Polynomial | length(ff) = max(length(f), length(g))}"
     arithmetic_poly nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (standard_null_decomp formula-decl nil standard_form_poly nil)
    (init_polyscale def-decl
     "{ff: Polynomial | length(ff) = length(f)}" arithmetic_poly nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (last def-decl "real" standard_form_poly nil)
    (chop def-decl "Polynomial" standard_form_poly nil)
    (standard_null formula-decl nil arithmetic_poly nil)
    (zero_p def-decl "{f: Polynomial | length(f) = n}" arithmetic_poly
     nil)
    (zero_p_scal formula-decl nil arithmetic_poly nil)
    (length_singleton formula-decl nil more_list_props "structures/")
    (listn_0 name-judgement "listn[real](0)" standard_form_poly nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (init_polymult def-decl "{ff: Polynomial |
   (null?(f) OR null?(g) IMPLIES length(ff) = 0) AND
    ((NOT null?(f) AND NOT null?(g)) IMPLIES
      length(ff) = length(f) + length(g) - 1)}" arithmetic_poly nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (standard_form def-decl
     "{ff: (standard_form?) | length(ff) <= length(f)}"
     standard_form_poly nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (<= const-decl "bool" reals nil)
    (polymult const-decl "(standard_form?)" arithmetic_poly nil)
    (standard_form? const-decl "bool" standard_form_poly nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Polynomial type-eq-decl nil standard_form_poly nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil)
  (standard_eliminate_multl-1 nil 3777821930
   ("" (induct "f")
    (("1" (skeep) (("1" (grind) nil nil)) nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (case "g=null")
          (("1" (replace -1 1)
            (("1" (expand "polymult" 1 1)
              (("1" (expand "init_polymult" 1 1)
                (("1" (expand "init_polymult" 1 1)
                  (("1" (expand "standard_form")
                    (("1" (expand "standard_form?")
                      (("1" (propax) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (case "cons2_var=null")
            (("1" (postpone) nil nil) ("2" (postpone) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (standard_eliminate_multr 0
  (standard_eliminate_multr-1 nil 3777884429
   ("" (induct "f")
    (("1" (skeep) (("1" (grind) nil nil)) nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (expand "polymult" 1 1)
          (("2" (case "g=null")
            (("1" (replace -1 1)
              (("1" (expand "init_polymult" 1 1)
                (("1" (expand "standard_form" 1 3)
                  (("1" (expand "standard_form?" 1 1)
                    (("1" (expand "init_polymult" 1 1)
                      (("1" (propax) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (case "standard_form(g)=null")
              (("1" (lemma "standard_null")
                (("1" (inst -1 "length(g)" "g")
                  (("1" (flatten)
                    (("1" (assert)
                      (("1" (replace -3 2)
                        (("1" (replace -1 2)
                          (("1" (lemma "zero_p_multr")
                            (("1"
                              (inst -1 "length(g)"
                               "cons(cons1_var,cons2_var)")
                              (("1"
                                (replace -1 2)
                                (("1"
                                  (expand "init_polymult" 2 1)
                                  (("1"
                                    (lemma "standard_null")
                                    (("1"
                                      (inst
                                       -1
                                       "length(cons(cons1_var, cons2_var)) + length(g)
                                                  - 1"
                                       "zero_p(length(cons(cons1_var, cons2_var)) + length(g)
                                                  - 1)")
                                      (("1"
                                        (expand "standard_form" 2 2)
                                        (("1" (assert) nil nil))
                                        nil)
                                       ("2"
                                        (expand "length" 1)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (expand "length" 1)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (case "cons2_var=null")
                (("1" (replace -1 3)
                  (("1" (expand "init_polymult" 3)
                    (("1" (assert)
                      (("1" (lemma "standard_form_polyscale")
                        (("1" (inst -1 "cons1_var" "g") nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert)
                  (("2" (expand "init_polymult" 4)
                    (("2" (assert)
                      (("2" (expand "length" 4)
                        (("2" (assert)
                          (("2" (case "length(cons2_var)=0")
                            (("1" (expand "length" -1)
                              (("1" (assert) nil nil)) nil)
                             ("2" (assert)
                              (("2"
                                (case
                                 "NOT (standard_form(init_polymult(cons2_var,
                                                                                  cons(0, g))) = null IFF standard_form(init_polymult(cons2_var,
                                                                                   cons
                                                                                   (0,
                                                                                    standard_form(g)))) = null)")
                                (("1"
                                  (assert)
                                  (("1"
                                    (split 1)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (inst -2 "cons(0, g)")
                                        (("1"
                                          (lemma "standard_form_cdr3")
                                          (("1"
                                            (inst -1 "cons(0, g)")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (replace -1 -3)
                                                (("1"
                                                  (expand
                                                   "polymult"
                                                   -3
                                                   1)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (flatten)
                                      (("2"
                                        (inst -2 "cons(0,g)")
                                        (("2"
                                          (lemma "standard_form_cdr3")
                                          (("2"
                                            (inst -1 "cons(0,g)")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (replace -1 -3)
                                                (("2"
                                                  (expand
                                                   "polymult"
                                                   -3
                                                   1)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (lemma "standard_eliminater")
                                  (("2"
                                    (inst-cp
                                     -1
                                     "init_polyscale(cons1_var, g)"
                                     "init_polymult(cons2_var,
                                                              cons(0, g))")
                                    (("2"
                                      (expand "polyplus" -2 1)
                                      (("2"
                                        (replace -2 5)
                                        (("2"
                                          (inst
                                           -1
                                           "init_polyscale(cons1_var,
                                                                standard_form(g))"
                                           "init_polymult(cons2_var,
                                                               cons
                                                               (0,
                                                                standard_form(g)))")
                                          (("2"
                                            (expand "polyplus" -1 1)
                                            (("2"
                                              (replace -1 5)
                                              (("2"
                                                (inst -4 "cons(0,g)")
                                                (("2"
                                                  (lemma
                                                   "standard_form_cdr3")
                                                  (("2"
                                                    (inst
                                                     -1
                                                     "cons(0,g)")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (replace -1 -5)
                                                        (("2"
                                                          (expand
                                                           "polymult"
                                                           -5
                                                           1)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (replace
                                                               -5
                                                               5)
                                                              (("2"
                                                                (hide
                                                                 -)
                                                                (("2"
                                                                  (lemma
                                                                   "standard_eliminatel")
                                                                  (("2"
                                                                    (inst-cp
                                                                     -1
                                                                     "init_polyscale(cons1_var,
                                                                standard_form(g))"
                                                                     "standard_form(init_polymult
                                                               (cons2_var,
                                                                cons
                                                                (0,
                                                                 standard_form(g))))")
                                                                    (("2"
                                                                      (expand
                                                                       "polyplus"
                                                                       -2)
                                                                      (("2"
                                                                        (replace
                                                                         -2
                                                                         5)
                                                                        (("2"
                                                                          (inst
                                                                           -1
                                                                           "init_polyscale(cons1_var, g)"
                                                                           "standard_form(init_polymult
                                                              (cons2_var,
                                                               cons
                                                               (0,
                                                                standard_form(g))))")
                                                                          (("2"
                                                                            (expand
                                                                             "polyplus"
                                                                             -1)
                                                                            (("2"
                                                                              (replace
                                                                               -1
                                                                               5)
                                                                              (("2"
                                                                                (hide
                                                                                 -)
                                                                                (("2"
                                                                                  (lemma
                                                                                   "standard_form_polyscale")
                                                                                  (("2"
                                                                                    (inst
                                                                                     -1
                                                                                     "cons1_var"
                                                                                     "g")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (> const-decl "bool" reals nil)
    (g skolem-const-decl "Polynomial" arithmetic_poly nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (cons1_var skolem-const-decl "real" arithmetic_poly nil)
    (cons2_var skolem-const-decl "list[real]" arithmetic_poly nil)
    (zero_p def-decl "{f: Polynomial | length(f) = n}" arithmetic_poly
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (zero_p_multr formula-decl nil arithmetic_poly nil)
    (standard_null formula-decl nil arithmetic_poly nil)
    (standard_eliminater formula-decl nil arithmetic_poly nil)
    (polyplus const-decl "(standard_form?)" arithmetic_poly nil)
    (standard_eliminatel formula-decl nil arithmetic_poly nil)
    (init_polyscale def-decl
     "{ff: Polynomial | length(ff) = length(f)}" arithmetic_poly nil)
    (standard_form_cdr3 formula-decl nil standard_form_poly nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (length_singleton formula-decl nil more_list_props "structures/")
    (standard_form_polyscale formula-decl nil arithmetic_poly nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (listn_0 name-judgement "listn[real](0)" standard_form_poly nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (init_polymult def-decl "{ff: Polynomial |
   (null?(f) OR null?(g) IMPLIES length(ff) = 0) AND
    ((NOT null?(f) AND NOT null?(g)) IMPLIES
      length(ff) = length(f) + length(g) - 1)}" arithmetic_poly nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (standard_form def-decl
     "{ff: (standard_form?) | length(ff) <= length(f)}"
     standard_form_poly nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (<= const-decl "bool" reals nil)
    (polymult const-decl "(standard_form?)" arithmetic_poly nil)
    (standard_form? const-decl "bool" standard_form_poly nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Polynomial type-eq-decl nil standard_form_poly nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   shostak))
 (standard_eliminate_mult1 0
  (standard_eliminate_mult1-1 nil 3777884676
   ("" (skeep)
    (("" (lemma "standard_eliminate_multl")
      (("" (lemma "standard_eliminate_multr")
        (("" (inst -1 "f" "g")
          (("" (inst -2 "f" "standard_form(g)")
            (("" (assert)
              (("" (expand "polymult" -2 1) (("" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((standard_eliminate_multl formula-decl nil arithmetic_poly nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (Polynomial type-eq-decl nil standard_form_poly nil)
    (polymult const-decl "(standard_form?)" arithmetic_poly nil)
    (standard_form def-decl
     "{ff: (standard_form?) | length(ff) <= length(f)}"
     standard_form_poly nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (<= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (standard_form? const-decl "bool" standard_form_poly nil)
    (standard_eliminate_multr formula-decl nil arithmetic_poly nil)
    (listn_0 name-judgement "listn[real](0)" standard_form_poly nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   shostak))
 (standard_polymult2 0
  (standard_polymult2-1 nil 3777884771
   ("" (skeep)
    (("" (lemma "standard_eliminate_mult1")
      (("" (inst -1 "f" "g")
        (("" (expand "polymult" -1)
          (("" (assert)
            (("" (lemma "standard_polymult")
              (("" (inst -1 "standard_form(f)" "standard_form(g)")
                (("" (assert)
                  (("" (expand "standard_form" -2 2)
                    (("" (propax) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((standard_eliminate_mult1 formula-decl nil arithmetic_poly nil)
    (polymult const-decl "(standard_form?)" arithmetic_poly nil)
    (standard_polymult formula-decl nil arithmetic_poly nil)
    (standard_form def-decl
     "{ff: (standard_form?) | length(ff) <= length(f)}"
     standard_form_poly nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (<= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (standard_form? const-decl "bool" standard_form_poly nil)
    (Polynomial type-eq-decl nil standard_form_poly nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (listn_0 name-judgement "listn[real](0)" standard_form_poly nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   shostak))
 (Poly_zero_TCC1 0
  (Poly_zero_TCC1-1 nil 3778846719 ("" (subtype-tcc) nil nil)
   ((standard_form? const-decl "bool" standard_form_poly nil)
    (listn_0 name-judgement "listn[real](0)" standard_form_poly nil))
   nil
   (Poly_zero subtype "list_adt[real].null"
    "{tt: standard_form_poly.Polynomial | standard_form_poly.standard_form?(tt)}")))
 (assocpr_init 0
  (assocpr_init-1 nil 3779187538
   ("" (induct "t1")
    (("1" (skeep)
      (("1" (expand "init_polyplus" 1 2)
        (("1" (expand "init_polyplus" 1 2) (("1" (propax) nil nil))
          nil))
        nil))
      nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (case "t2=null")
          (("1" (replace -1 1)
            (("1" (case "t3=null")
              (("1" (replace -1 1)
                (("1" (expand "init_polyplus" 1 2)
                  (("1" (expand "init_polyplus" 1 1)
                    (("1" (expand "init_polyplus" 1 2)
                      (("1" (expand "init_polyplus" 1 1)
                        (("1" (propax) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (expand "init_polyplus" 2 2)
                (("2" (expand "init_polyplus" 2 3)
                  (("2" (propax) nil nil)) nil))
                nil))
              nil))
            nil)
           ("2" (case "t3=null")
            (("1" (replace -1 2)
              (("1" (expand "init_polyplus" 2 1)
                (("1" (expand "init_polyplus" 2 4)
                  (("1" (assert)
                    (("1" (lift-if)
                      (("1" (split 2)
                        (("1" (flatten) (("1" (assert) nil nil)) nil)
                         ("2" (propax) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (assert)
              (("2" (expand "init_polyplus" 3 2)
                (("2" (expand "init_polyplus" 3 4)
                  (("2" (expand "init_polyplus" 3 1)
                    (("2" (expand "init_polyplus" 3 3)
                      (("2" (decompose-equality 3)
                        (("2" (inst -1 "cdr(t2)" "cdr(t3)") nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (list_cons_extensionality formula-decl nil list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (listn_0 name-judgement "listn[real](0)" standard_form_poly nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (init_polyplus def-decl
     "{ff: Polynomial | length(ff) = max(length(f), length(g))}"
     arithmetic_poly nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Polynomial type-eq-decl nil standard_form_poly nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   nil))
 (assocpr1_init 0
  (assocpr1_init-1 nil 3779187595
   ("" (skeep)
    (("" (lemma "assocpr_init")
      (("" (lemma "reflex_init")
        (("" (inst-cp -2 "t1" "t2" "t3")
          (("" (replace -3 1)
            (("" (inst -1 "t2" "t3")
              (("" (replace -1 1)
                (("" (replace -1 1 rl)
                  (("" (replace -1 1)
                    (("" (inst -2 "t1" "t3" "t2")
                      (("" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((assocpr_init formula-decl nil arithmetic_poly nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (Polynomial type-eq-decl nil standard_form_poly nil)
    (reflex_init formula-decl nil arithmetic_poly nil)
    (listn_0 name-judgement "listn[real](0)" standard_form_poly nil))
   nil))
 (assocpr2_init 0
  (assocpr2_init-1 nil 3779187619
   ("" (lemma "assocpr_init")
    (("" (skeep)
      (("" (inst -1 "t1" "t2" "t3")
        (("" (lemma "reflex_init")
          (("" (inst -1 "t1" "t2")
            (("" (replace -1 -2)
              (("" (replace -2 1 rl)
                (("" (lemma "assocpr_init")
                  (("" (inst -1 "t2" "t1" "t3") nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((listn_0 name-judgement "listn[real](0)" standard_form_poly nil)
    (reflex_init formula-decl nil arithmetic_poly nil)
    (Polynomial type-eq-decl nil standard_form_poly nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (assocpr_init formula-decl nil arithmetic_poly nil))
   nil))
 (assocpr3_init 0
  (assocpr3_init-1 nil 3779187644
   ("" (skeep)
    (("" (lemma "assocpr_init")
      (("" (inst-cp -1 "t1" "t2" "init_polyplus(t3,t4)")
        (("" (replace -2 1)
          (("" (hide -2)
            (("" (lemma "reflex_init")
              (("" (inst-cp -1 "t3" "t4")
                (("" (replace -2 1)
                  (("" (inst-cp -3 "t2" "t4" "t3")
                    (("" (replace -4 1 rl)
                      (("" (inst-cp -1 "init_polyplus(t2,t4)" "t3")
                        (("" (replace -2 1 lr)
                          ((""
                            (inst -4 "t1" "t3" "init_polyplus(t2,t4)")
                            (("" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((assocpr_init formula-decl nil arithmetic_poly nil)
    (reflex_init formula-decl nil arithmetic_poly nil)
    (init_polyplus def-decl
     "{ff: Polynomial | length(ff) = max(length(f), length(g))}"
     arithmetic_poly nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Polynomial type-eq-decl nil standard_form_poly nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (listn_0 name-judgement "listn[real](0)" standard_form_poly nil))
   nil))
 (assocpr 0
  (assocpr-1 nil 3779187668
   ("" (expand "polyplus" 1)
    (("" (skeep)
      (("" (lemma "standard_eliminatel")
        (("" (lemma "standard_eliminater")
          (("" (inst -2 "init_polyplus(t1,t2)" "t3")
            (("" (replace -2 1 rl)
              (("" (inst -1 "t1" "init_polyplus(t2,t3)")
                (("" (replace -1 1 rl)
                  (("" (expand "polyplus" 1)
                    (("" (lemma "assocpr_init")
                      (("" (inst -1 "t1" "t2" "t3")
                        (("" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((listn_0 name-judgement "listn[real](0)" standard_form_poly nil)
    (standard_eliminater formula-decl nil arithmetic_poly nil)
    (assocpr_init formula-decl nil arithmetic_poly nil)
    (standard_form? const-decl "bool" standard_form_poly nil)
    (init_polyplus def-decl
     "{ff: Polynomial | length(ff) = max(length(f), length(g))}"
     arithmetic_poly nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Polynomial type-eq-decl nil standard_form_poly nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (standard_eliminatel formula-decl nil arithmetic_poly nil)
    (polyplus const-decl "(standard_form?)" arithmetic_poly nil))
   nil))
 (poly_plus_mult1 0
  (poly_plus_mult1-1 nil 3779187741
   ("" (induct "f")
    (("1" (skeep)
      (("1" (expand "init_polymult" 1 1)
        (("1" (expand "init_polyplus" 1 1)
          (("1" (expand "init_polyplus" 1 1) (("1" (propax) nil nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skeep)
      (("2" (induct "g" 1)
        (("1" (skeep)
          (("1" (expand "init_polymult" 1 2)
            (("1" (expand "init_polyplus" 1 2)
              (("1" (expand "init_polyplus" 1 1)
                (("1" (lift-if 1)
                  (("1" (split)
                    (("1" (assert)
                      (("1" (flatten) (("1" (assert) nil nil)) nil))
                      nil)
                     ("2" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (skeep)
          (("2" (skeep)
            (("2" (case "h=null")
              (("1" (replace -1 1)
                (("1" (expand "init_polymult" 1 1)
                  (("1" (expand "init_polymult" 1 1)
                    (("1" (expand "init_polyplus" 1 1)
                      (("1" (expand "init_polymult" 1 1)
                        (("1" (propax) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (case "cons2_var_1=null")
                (("1" (replace -1 2)
                  (("1" (expand "init_polymult" 2 2)
                    (("1" (assert)
                      (("1" (expand "init_polyplus" 2 2)
                        (("1" (expand "init_polyplus" 2 2)
                          (("1" (assert)
                            (("1" (case "cons2_var=null")
                              (("1"
                                (assert)
                                (("1"
                                  (replace -1 2)
                                  (("1"
                                    (expand "init_polymult" 2 1)
                                    (("1"
                                      (expand "length" 2 1)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (lemma "poly_scale_dist2")
                                          (("1"
                                            (inst
                                             -1
                                             "cons1_var"
                                             "cons1_var_1"
                                             "h")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand
                                                 "init_polymult"
                                                 2
                                                 1)
                                                (("1"
                                                  (expand "length" 2 1)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (assert)
                                (("2"
                                  (expand "init_polymult" 3 2)
                                  (("2"
                                    (expand "length" 3 1)
                                    (("2"
                                      (expand "length" 3 1)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (expand
                                             "init_polymult"
                                             3
                                             1)
                                            (("2"
                                              (expand "length" 3 1)
                                              (("2"
                                                (expand "length" 3 1)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (lemma
                                                     "assocpr1_init")
                                                    (("2"
                                                      (inst
                                                       -1
                                                       "init_polyscale(cons1_var, h)"
                                                       "init_polymult(cons2_var,
                                                            cons(0, h))"
                                                       "init_polyscale(cons1_var_1, h)")
                                                      (("2"
                                                        (replace -1 3)
                                                        (("2"
                                                          (lemma
                                                           "poly_scale_dist2")
                                                          (("2"
                                                            (inst
                                                             -1
                                                             "cons1_var"
                                                             "cons1_var_1"
                                                             "h")
                                                            (("2"
                                                              (replace
                                                               -1
                                                               3)
                                                              (("2"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert)
                  (("2" (case "cons2_var=null")
                    (("1" (replace -1 3)
                      (("1" (expand "init_polymult" 3 1)
                        (("1" (expand "length" 3 1)
                          (("1" (expand "init_polyplus" 3 2)
                            (("1" (expand "init_polyplus" 3 2)
                              (("1"
                                (expand "init_polymult" 3 2)
                                (("1"
                                  (expand "length" 3 1)
                                  (("1"
                                    (expand "length" 3 1)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "init_polymult" 3 1)
                                          (("1"
                                            (expand "length" 3 1)
                                            (("1"
                                              (expand "length" 3 1)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (lemma
                                                   "assocpr_init")
                                                  (("1"
                                                    (inst
                                                     -1
                                                     "init_polyscale(cons1_var, h)"
                                                     "init_polyscale(cons1_var_1, h)"
                                                     "init_polymult(cons2_var_1,
                                                            cons(0, h))")
                                                    (("1"
                                                      (replace -1 3 rl)
                                                      (("1"
                                                        (lemma
                                                         "poly_scale_dist2")
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "cons1_var"
                                                           "cons1_var_1"
                                                           "h")
                                                          (("1"
                                                            (replace
                                                             -1
                                                             3)
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert)
                      (("2" (expand "init_polymult" 4 2)
                        (("2" (expand "length" 4 1)
                          (("2" (expand "length" 4 1)
                            (("2" (assert)
                              (("2"
                                (assert)
                                (("2"
                                  (expand "init_polymult" 4 1)
                                  (("2"
                                    (expand "length" 4 1)
                                    (("2"
                                      (expand "length" 4 1)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (lemma "assocpr3_init")
                                            (("2"
                                              (inst
                                               -1
                                               "init_polyscale(cons1_var,h)"
                                               "init_polymult(cons2_var,cons(0,h))"
                                               "init_polyscale(cons1_var_1,h)"
                                               "init_polymult(cons2_var_1,cons(0,h))")
                                              (("2"
                                                (replace -1 4)
                                                (("2"
                                                  (inst-cp
                                                   -3
                                                   "cons2_var_1"
                                                   "cons(0,h)")
                                                  (("2"
                                                    (replace -4 4)
                                                    (("2"
                                                      (expand
                                                       "init_polymult"
                                                       4
                                                       2)
                                                      (("2"
                                                        (typepred
                                                         "init_polyplus(cons(cons1_var, cons2_var),
                                          cons(cons1_var_1, cons2_var_1))")
                                                        (("2"
                                                          (hide -1)
                                                          (("2"
                                                            (hide
                                                             -2
                                                             -3
                                                             -4
                                                             -5)
                                                            (("2"
                                                              (expand
                                                               "length"
                                                               -1
                                                               1)
                                                              (("2"
                                                                (lift-if
                                                                 -1)
                                                                (("2"
                                                                  (split
                                                                   -1)
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (expand
                                                                       "length"
                                                                       -2)
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (expand
                                                                         "length"
                                                                         -1
                                                                         1)
                                                                        (("2"
                                                                          (expand
                                                                           "length"
                                                                           5
                                                                           1)
                                                                          (("2"
                                                                            (lift-if
                                                                             -1)
                                                                            (("2"
                                                                              (split
                                                                               -1)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (flatten)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "length"
                                                                                     -2)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "length"
                                                                                         -2)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (flatten)
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "init_polyplus"
                                                                                     6
                                                                                     5)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "init_polyplus"
                                                                                       6
                                                                                       5)
                                                                                      (("2"
                                                                                        (lemma
                                                                                         "poly_scale_dist2")
                                                                                        (("2"
                                                                                          (inst
                                                                                           -1
                                                                                           "cons1_var"
                                                                                           "cons1_var_1"
                                                                                           "h")
                                                                                          (("2"
                                                                                            (replace
                                                                                             -1
                                                                                             6
                                                                                             rl)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((null adt-constructor-decl "(null?)" list_adt nil)
    (posint_max application-judgement "{k: posint | i <= k AND j <= k}"
     real_defs nil)
    (posrat_max application-judgement "{s: posrat | s >= q AND s >= r}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (assocpr3_init formula-decl nil arithmetic_poly nil)
    (assocpr_init formula-decl nil arithmetic_poly nil)
    (length_singleton formula-decl nil more_list_props "structures/")
    (poly_scale_dist2 formula-decl nil arithmetic_poly nil)
    (init_polyscale def-decl
     "{ff: Polynomial | length(ff) = length(f)}" arithmetic_poly nil)
    (assocpr1_init formula-decl nil arithmetic_poly nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (listn_0 name-judgement "listn[real](0)" standard_form_poly nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (init_polymult def-decl "{ff: Polynomial |
   (null?(f) OR null?(g) IMPLIES length(ff) = 0) AND
    ((NOT null?(f) AND NOT null?(g)) IMPLIES
      length(ff) = length(f) + length(g) - 1)}" arithmetic_poly nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (init_polyplus def-decl
     "{ff: Polynomial | length(ff) = max(length(f), length(g))}"
     arithmetic_poly nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Polynomial type-eq-decl nil standard_form_poly nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   nil))
 (poly_plus_mult2 0
  (poly_plus_mult2-1 nil 3779187839
   ("" (induct "f")
    (("1" (skeep)
      (("1" (expand "init_polymult" 1 3)
        (("1" (expand "init_polymult" 1 2)
          (("1" (expand "init_polymult" 1 1)
            (("1" (expand "init_polyplus" 1 1) (("1" (propax) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (case "g=null")
          (("1" (case "h=null")
            (("1" (replace -1 1)
              (("1" (replace -2 1)
                (("1" (expand "init_polymult" 1 1)
                  (("1" (expand "init_polymult" 1 1)
                    (("1" (expand "init_polyplus" 1 2)
                      (("1" (expand "init_polymult" 1 1)
                        (("1" (expand "init_polyplus" 1 1)
                          (("1" (propax) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand "init_polymult" 2 1)
              (("2" (assert)
                (("2" (replace -1 2)
                  (("2" (expand "init_polyplus" 2 2)
                    (("2" (expand "init_polyplus" 2 1)
                      (("2" (propax) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (case "h=null")
            (("1" (replace -1 2)
              (("1" (expand "init_polymult" 2 2)
                (("1" (expand "init_polyplus" 2 2)
                  (("1" (assert)
                    (("1" (case "cons2_var=null")
                      (("1" (replace -1 2)
                        (("1" (expand "init_polymult" 2 1)
                          (("1" (expand "length" 2 1)
                            (("1" (expand "init_polymult" 2 1)
                              (("1"
                                (expand "length" 2 1)
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "init_polyplus" 2 1)
                                    (("1"
                                      (lift-if 2)
                                      (("1"
                                        (split 2)
                                        (("1"
                                          (flatten)
                                          (("1" (assert) nil nil))
                                          nil)
                                         ("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert)
                        (("2" (expand "init_polymult" 3 1)
                          (("2" (expand "length" 3 1)
                            (("2" (expand "length" 3 1)
                              (("2"
                                (case "length(cons2_var)=0")
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "length" -1 1)
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (assert)
                                  (("2"
                                    (expand "length" 1)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (expand "init_polymult" 4 2)
                                        (("2"
                                          (expand "length" 4)
                                          (("2"
                                            (expand
                                             "init_polyplus"
                                             4
                                             1)
                                            (("2"
                                              (typepred
                                               "init_polyplus(init_polyscale(cons1_var, g),
                                         init_polymult(cons2_var, cons(0, g)))")
                                              (("2"
                                                (hide -1)
                                                (("2"
                                                  (typepred
                                                   "init_polyscale(cons1_var, g)")
                                                  (("2"
                                                    (hide -1)
                                                    (("2"
                                                      (typepred
                                                       "init_polymult(cons2_var, cons(0, g))")
                                                      (("2"
                                                        (hide -1)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (expand
                                                             "length"
                                                             -3)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (lift-if
                                                                 -3)
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (split
                                                                     -3)
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (hide
                                                                           -2)
                                                                          (("2"
                                                                            (lift-if
                                                                             5)
                                                                            (("2"
                                                                              (split
                                                                               5)
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (propax)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand "init_polymult" 3 1)
              (("2" (case "cons2_var=null")
                (("1" (assert)
                  (("1" (expand "length" 3 1)
                    (("1" (assert)
                      (("1" (replace -1 3)
                        (("1" (expand "init_polymult" 3 1)
                          (("1" (expand "length" 3)
                            (("1" (assert)
                              (("1"
                                (expand "init_polymult" 3 1)
                                (("1"
                                  (typepred "init_polyplus(g,h)")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (lift-if 3)
                                      (("1"
                                        (split 3)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (expand "init_polyplus" -1)
                                            (("1" (propax) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (flatten)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (lemma
                                               "poly_scale_dist1")
                                              (("2"
                                                (inst
                                                 -1
                                                 "cons1_var"
                                                 "g"
                                                 "h")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert)
                  (("2" (expand "length" 4 1)
                    (("2" (assert)
                      (("2" (case "length(cons2_var)=0")
                        (("1" (expand "length" -1 1)
                          (("1" (assert) nil nil)) nil)
                         ("2" (assert)
                          (("2" (expand "init_polymult" 5 3)
                            (("2" (typepred "init_polyplus(g,h)")
                              (("2"
                                (hide -1)
                                (("2"
                                  (expand "length" -1)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (lift-if -1)
                                      (("2"
                                        (split -1)
                                        (("1" (assert) nil nil)
                                         ("2"
                                          (flatten)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (expand "length" 6 1)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (expand
                                                   "init_polymult"
                                                   6
                                                   2)
                                                  (("2"
                                                    (expand
                                                     "length"
                                                     6
                                                     1)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (lemma
                                                         "assocpr3_init")
                                                        (("2"
                                                          (inst
                                                           -1
                                                           "init_polyscale(cons1_var, g)"
                                                           "init_polymult(cons2_var,
                                                              cons(0, g))"
                                                           "init_polyscale(cons1_var, h)"
                                                           "init_polymult(cons2_var,
                                                              cons(0, h))")
                                                          (("2"
                                                            (replace
                                                             -1
                                                             6)
                                                            (("2"
                                                              (hide -1)
                                                              (("2"
                                                                (inst
                                                                 -2
                                                                 "cons(0,g)"
                                                                 "cons(0,h)")
                                                                (("2"
                                                                  (replace
                                                                   -2
                                                                   6)
                                                                  (("2"
                                                                    (expand
                                                                     "init_polyplus"
                                                                     6
                                                                     3)
                                                                    (("2"
                                                                      (lemma
                                                                       "poly_scale_dist1")
                                                                      (("2"
                                                                        (inst
                                                                         -1
                                                                         "cons1_var"
                                                                         "g"
                                                                         "h")
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (list type-decl nil list_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Polynomial type-eq-decl nil standard_form_poly nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (init_polyplus def-decl
     "{ff: Polynomial | length(ff) = max(length(f), length(g))}"
     arithmetic_poly nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (init_polymult def-decl "{ff: Polynomial |
   (null?(f) OR null?(g) IMPLIES length(ff) = 0) AND
    ((NOT null?(f) AND NOT null?(g)) IMPLIES
      length(ff) = length(f) + length(g) - 1)}" arithmetic_poly nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list_induction formula-decl nil list_adt nil)
    (listn_0 name-judgement "listn[real](0)" standard_form_poly nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (init_polyscale def-decl
     "{ff: Polynomial | length(ff) = length(f)}" arithmetic_poly nil)
    (length_singleton formula-decl nil more_list_props "structures/")
    (poly_scale_dist1 formula-decl nil arithmetic_poly nil)
    (posrat_max application-judgement "{s: posrat | s >= q AND s >= r}"
     real_defs nil)
    (posint_max application-judgement "{k: posint | i <= k AND j <= k}"
     real_defs nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (assocpr3_init formula-decl nil arithmetic_poly nil)
    (null adt-constructor-decl "(null?)" list_adt nil))
   nil))
 (abelianpr_init 0
  (abelianpr_init-1 nil 3779188137
   ("" (induct "t1")
    (("1" (skeep)
      (("1" (grind)
        (("1" (expand "init_polyplus" 1 1)
          (("1" (lift-if 1)
            (("1" (split 1)
              (("1" (flatten) (("1" (assert) nil nil)) nil)
               ("2" (propax) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (case "t2=null")
          (("1" (replace -1 1)
            (("1" (expand "init_polyplus" 1 1)
              (("1" (expand "init_polyplus" 1 1)
                (("1" (propax) nil nil)) nil))
              nil))
            nil)
           ("2" (expand "init_polyplus" 2 1)
            (("2" (assert)
              (("2" (expand "init_polyplus" 2 2)
                (("2" (decompose-equality 2)
                  (("2" (inst -1 "cdr(t2)") nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (list_cons_extensionality formula-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (listn_0 name-judgement "listn[real](0)" standard_form_poly nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (init_polyplus def-decl
     "{ff: Polynomial | length(ff) = max(length(f), length(g))}"
     arithmetic_poly nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Polynomial type-eq-decl nil standard_form_poly nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   nil))
 (abelianpr 0
  (abelianpr-1 nil 3779188177
   ("" (lemma "abelianpr_init")
    (("" (expand "polyplus" 1)
      (("" (skeep)
        (("" (inst -1 "t1" "t2")
          (("" (replace -1 1) (("" (propax) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((polyplus const-decl "(standard_form?)" arithmetic_poly nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (Polynomial type-eq-decl nil standard_form_poly nil)
    (standard_form? const-decl "bool" standard_form_poly nil)
    (listn_0 name-judgement "listn[real](0)" standard_form_poly nil)
    (abelianpr_init formula-decl nil arithmetic_poly nil))
   nil))
 (assocmultpr_init 0
  (assocmultpr_init-1 nil 3778846863
   ("" (induct "t1")
    (("1" (expand "init_polymult" 1) (("1" (propax) nil nil)) nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (case "t2=null")
          (("1" (replace -1 1)
            (("1" (expand "init_polymult" 1 2)
              (("1" (expand "init_polymult" 1 1)
                (("1" (expand "init_polymult" 1 2)
                  (("1" (expand "init_polymult" 1 1)
                    (("1" (propax) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (case "t3=null")
            (("1" (replace -1 2)
              (("1" (expand "init_polymult" 2 2)
                (("1" (expand "init_polymult" 2 2)
                  (("1" (expand "init_polymult" 2 1)
                    (("1" (propax) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("2" (case "init_polymult(t2,t3)=null")
              (("1" (typepred "init_polymult(t2,t3)")
                (("1" (assert)
                  (("1" (assert)
                    (("1" (hide -1)
                      (("1" (hide -1)
                        (("1" (replace -2)
                          (("1" (expand "length" -1)
                            (("1" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (case "cons2_var=null")
                (("1" (replace -1 4)
                  (("1" (expand "init_polymult" 4 1)
                    (("1" (assert)
                      (("1" (expand "init_polymult" 4 3)
                        (("1" (expand "length" 4)
                          (("1" (lemma "poly_scale_mult1")
                            (("1" (inst -1 "cons1_var" "t2" "t3") nil
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert)
                  (("2" (expand "init_polymult" 5 1)
                    (("2" (expand "length" 5)
                      (("2" (expand "length" 5)
                        (("2" (assert)
                          (("2" (assert)
                            (("2" (lemma "poly_mult_cons")
                              (("2"
                                (inst -1 "t2" "t3")
                                (("2"
                                  (assert)
                                  (("2"
                                    (replace -1 5)
                                    (("2"
                                      (inst-cp -2 "cons(0,t2)" "t3")
                                      (("2"
                                        (replace -3 5)
                                        (("2"
                                          (expand "init_polymult" 5 5)
                                          (("2"
                                            (expand "length" 5 1)
                                            (("2"
                                              (expand "length" 5 1)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (lemma
                                                   "poly_scale_mult1")
                                                  (("2"
                                                    (inst
                                                     -1
                                                     "cons1_var"
                                                     "t2"
                                                     "t3")
                                                    (("2"
                                                      (replace -1 5)
                                                      (("2"
                                                        (lemma
                                                         "poly_plus_mult1")
                                                        (("2"
                                                          (inst
                                                           -1
                                                           "init_polyscale(cons1_var,t2)"
                                                           "init_polymult(cons2_var,cons(0,t2))"
                                                           "t3")
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (list type-decl nil list_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Polynomial type-eq-decl nil standard_form_poly nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (init_polymult def-decl "{ff: Polynomial |
   (null?(f) OR null?(g) IMPLIES length(ff) = 0) AND
    ((NOT null?(f) AND NOT null?(g)) IMPLIES
      length(ff) = length(f) + length(g) - 1)}" arithmetic_poly nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list_induction formula-decl nil list_adt nil)
    (listn_0 name-judgement "listn[real](0)" standard_form_poly nil)
    (poly_scale_mult1 formula-decl nil arithmetic_poly nil)
    (length_singleton formula-decl nil more_list_props "structures/")
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (poly_plus_mult1 formula-decl nil arithmetic_poly nil)
    (init_polyscale def-decl
     "{ff: Polynomial | length(ff) = length(f)}" arithmetic_poly nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (poly_mult_cons formula-decl nil arithmetic_poly nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (null adt-constructor-decl "(null?)" list_adt nil))
   shostak))
 (assocmultpr 0
  (assocmultpr-1 nil 3779188458
   ("" (lemma "assocmultpr_init")
    (("" (skeep)
      (("" (expand "polymult" 1)
        (("" (lemma "standard_eliminate_multr")
          (("" (lemma "standard_eliminate_multl")
            (("" (inst -1 "init_polymult(t1,t2)" "t3")
              (("" (replace -1 1 rl)
                (("" (inst -2 "t1" "init_polymult(t2,t3)")
                  (("" (replace -2 1 rl)
                    (("" (expand "polymult" 1)
                      (("" (inst -3 "t1" "t2" "t3")
                        (("" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((listn_0 name-judgement "listn[real](0)" standard_form_poly nil)
    (standard_eliminate_multr formula-decl nil arithmetic_poly nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (Polynomial type-eq-decl nil standard_form_poly nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (init_polymult def-decl "{ff: Polynomial |
   (null?(f) OR null?(g) IMPLIES length(ff) = 0) AND
    ((NOT null?(f) AND NOT null?(g)) IMPLIES
      length(ff) = length(f) + length(g) - 1)}" arithmetic_poly nil)
    (standard_form? const-decl "bool" standard_form_poly nil)
    (standard_eliminate_multl formula-decl nil arithmetic_poly nil)
    (polymult const-decl "(standard_form?)" arithmetic_poly nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (assocmultpr_init formula-decl nil arithmetic_poly nil))
   nil))
 (distl 0
  (distl-1 nil 3779188757
   ("" (skeep)
    (("" (expand "polyplus" 1)
      (("" (expand "polymult" 1)
        (("" (lemma "standard_eliminate1")
          (("" (inst -1 "init_polymult(t1,t2)" "init_polymult(t1,t3)")
            (("" (expand "polyplus" -1)
              (("" (replace -1 1 rl)
                (("" (lemma "standard_eliminate_multr")
                  (("" (inst -1 "t1" "init_polyplus(t2,t3)")
                    (("" (expand "polymult" -1)
                      (("" (replace -1 1 rl)
                        (("" (lemma "poly_plus_mult2")
                          (("" (inst -1 "t1" "t2" "t3")
                            (("" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((polyplus const-decl "(standard_form?)" arithmetic_poly nil)
    (standard_eliminate1 formula-decl nil arithmetic_poly nil)
    (standard_eliminate_multr formula-decl nil arithmetic_poly nil)
    (poly_plus_mult2 formula-decl nil arithmetic_poly nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (init_polyplus def-decl
     "{ff: Polynomial | length(ff) = max(length(f), length(g))}"
     arithmetic_poly nil)
    (standard_form? const-decl "bool" standard_form_poly nil)
    (init_polymult def-decl "{ff: Polynomial |
   (null?(f) OR null?(g) IMPLIES length(ff) = 0) AND
    ((NOT null?(f) AND NOT null?(g)) IMPLIES
      length(ff) = length(f) + length(g) - 1)}" arithmetic_poly nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (real nonempty-type-from-decl nil reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Polynomial type-eq-decl nil standard_form_poly nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (polymult const-decl "(standard_form?)" arithmetic_poly nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (listn_0 name-judgement "listn[real](0)" standard_form_poly nil))
   nil))
 (distr 0
  (distr-1 nil 3779188780
   ("" (skeep)
    (("" (expand "polymult" 1)
      (("" (expand "polyplus" 1)
        (("" (lemma "standard_eliminate1")
          (("" (inst -1 "init_polymult(t1,t3)" "init_polymult(t2,t3)")
            (("" (expand "polyplus" -1 1)
              (("" (replace -1 1 rl)
                (("" (lemma "standard_eliminate_multl")
                  (("" (inst -1 "init_polyplus(t1,t2)" "t3")
                    (("" (expand "polymult" -1 1)
                      (("" (replace -1 1 rl)
                        (("" (lemma "poly_plus_mult1")
                          (("" (inst -1 "t1" "t2" "t3")
                            (("" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (polymult const-decl "(standard_form?)" arithmetic_poly nil)
    (standard_eliminate1 formula-decl nil arithmetic_poly nil)
    (standard_eliminate_multl formula-decl nil arithmetic_poly nil)
    (poly_plus_mult1 formula-decl nil arithmetic_poly nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (init_polyplus def-decl
     "{ff: Polynomial | length(ff) = max(length(f), length(g))}"
     arithmetic_poly nil)
    (standard_form? const-decl "bool" standard_form_poly nil)
    (init_polymult def-decl "{ff: Polynomial |
   (null?(f) OR null?(g) IMPLIES length(ff) = 0) AND
    ((NOT null?(f) AND NOT null?(g)) IMPLIES
      length(ff) = length(f) + length(g) - 1)}" arithmetic_poly nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (real nonempty-type-from-decl nil reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (Polynomial type-eq-decl nil standard_form_poly nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (polyplus const-decl "(standard_form?)" arithmetic_poly nil)
    (listn_0 name-judgement "listn[real](0)" standard_form_poly nil))
   nil))
 (eval_add 0
  (eval_add-1 nil 3777990171
   ("" (induct "f")
    (("1" (skeep)
      (("1" (grind)
        (("1" (expand "init_eval" 1 2)
          (("1" (decompose-equality 1) nil nil)) nil))
        nil))
      nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (expand "init_polyplus" 1 1)
          (("2" (case "g=null")
            (("1" (assert)
              (("1" (replace -1 1)
                (("1" (decompose-equality 1)
                  (("1" (expand "+" 1)
                    (("1" (expand "eval" 1 1)
                      (("1" (expand "init_eval" 1)
                        (("1" (propax) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (assert)
              (("2" (expand "eval" 2 1)
                (("2" (expand "init_eval" 2 1)
                  (("2" (decompose-equality 2)
                    (("1" (expand "+" 1)
                      (("1" (expand "length" 1 1)
                        (("1" (lemma "expt_x0_aux")
                          (("1" (inst -1 "x!1")
                            (("1" (expand "^")
                              (("1"
                                (replace -1 1)
                                (("1"
                                  (assert)
                                  (("1"
                                    (case "NOT 1*cons1_var=cons1_var")
                                    (("1" (assert) nil nil)
                                     ("2"
                                      (replace -1 1)
                                      (("2"
                                        (lemma "init_eval_acc")
                                        (("2"
                                          (inst
                                           -1
                                           "(init_polyplus(cons2_var, cdr(g)))"
                                           "length(init_polyplus(cons2_var, cdr(g)))"
                                           "car(g) + cons1_var")
                                          (("1"
                                            (replace -1 1)
                                            (("1"
                                              (expand "+")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand "eval" -4 1)
                                                  (("1"
                                                    (lemma
                                                     "eval_poly_times_x")
                                                    (("1"
                                                      (inst
                                                       -5
                                                       "cdr(g)")
                                                      (("1"
                                                        (inst
                                                         -1
                                                         "(init_polyplus(cons2_var, cdr(g)))"
                                                         "length(init_polyplus(cons2_var, cdr(g)))"
                                                         "x!1"
                                                         "0")
                                                        (("1"
                                                          (decompose-equality
                                                           -5)
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "x!1")
                                                            (("1"
                                                              (replace
                                                               -1
                                                               -2)
                                                              (("1"
                                                                (hide
                                                                 -1
                                                                 -3)
                                                                (("1"
                                                                  (case
                                                                   "NOT 0 * x!1=0")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (replace
                                                                     -1
                                                                     -2)
                                                                    (("2"
                                                                      (replace
                                                                       -2
                                                                       1
                                                                       rl)
                                                                      (("2"
                                                                        (expand
                                                                         "eval"
                                                                         1
                                                                         3)
                                                                        (("2"
                                                                          (expand
                                                                           "init_eval"
                                                                           1
                                                                           1)
                                                                          (("2"
                                                                            (expand
                                                                             "length"
                                                                             1
                                                                             1)
                                                                            (("2"
                                                                              (expand
                                                                               "^")
                                                                              (("2"
                                                                                (replace
                                                                                 -4
                                                                                 1)
                                                                                (("2"
                                                                                  (case
                                                                                   "car(g) + eval(cdr(g))(x!1) * x!1 = eval(g)(x!1)")
                                                                                  (("1"
                                                                                    (replace
                                                                                     -1
                                                                                     1)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "eval"
                                                                                         1
                                                                                         1)
                                                                                        (("1"
                                                                                          (lemma
                                                                                           "eval_poly_times_x")
                                                                                          (("1"
                                                                                            (inst
                                                                                             -1
                                                                                             "cons2_var"
                                                                                             "length(cons2_var)"
                                                                                             "x!1"
                                                                                             "0")
                                                                                            (("1"
                                                                                              (replace
                                                                                               -1
                                                                                               1)
                                                                                              (("1"
                                                                                                (case
                                                                                                 "NOT 0 * x!1=0")
                                                                                                (("1"
                                                                                                  (propax)
                                                                                                  nil
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (replace
                                                                                                     -1
                                                                                                     1)
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (lemma
                                                                                                         "init_eval_acc")
                                                                                                        (("2"
                                                                                                          (inst
                                                                                                           -1
                                                                                                           "cons2_var"
                                                                                                           "length(cons2_var)"
                                                                                                           "cons1_var")
                                                                                                          (("1"
                                                                                                            (replace
                                                                                                             -1
                                                                                                             1)
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (case
                                                                                                             "NOT cons2_var=null")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (replace
                                                                                                               -1
                                                                                                               2)
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "length"
                                                                                                                 2)
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "init_eval"
                                                                                                                   2
                                                                                                                   1)
                                                                                                                  (("2"
                                                                                                                    (expand
                                                                                                                     "init_eval"
                                                                                                                     2
                                                                                                                     1)
                                                                                                                    (("2"
                                                                                                                      (propax)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (hide
                                                                                       2)
                                                                                      (("2"
                                                                                        (lemma
                                                                                         "eval_poly_times_x")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "eval"
                                                                                           1)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "init_eval"
                                                                                             1
                                                                                             2)
                                                                                            (("2"
                                                                                              (inst
                                                                                               -1
                                                                                               "cdr(g)"
                                                                                               "length(g)-1"
                                                                                               "x!1"
                                                                                               "0")
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "length"
                                                                                                 -1
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (replace
                                                                                                   -1
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "^")
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (replace
                                                                                                         -5
                                                                                                         1)
                                                                                                        (("1"
                                                                                                          (lemma
                                                                                                           "init_eval_acc")
                                                                                                          (("1"
                                                                                                            (inst
                                                                                                             -1
                                                                                                             "cdr(g)"
                                                                                                             "length(g)-1"
                                                                                                             "car(g)*1")
                                                                                                            (("1"
                                                                                                              (replace
                                                                                                               -1
                                                                                                               1)
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (case
                                                                                                               "NOT cdr(g)=null")
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (replace
                                                                                                                 -1
                                                                                                                 2)
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "init_eval"
                                                                                                                   2)
                                                                                                                  (("2"
                                                                                                                    (propax)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (expand
                                                                                                 "length"
                                                                                                 1
                                                                                                 1)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (typepred
                                             "(init_polyplus(cons2_var, cdr[real](g)))")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (case "cons2_var=null")
                                                (("1"
                                                  (replace -1 2)
                                                  (("1"
                                                    (hide -)
                                                    (("1"
                                                      (expand
                                                       "eval"
                                                       2
                                                       1)
                                                      (("1"
                                                        (grind)
                                                        (("1"
                                                          (lemma
                                                           "init_eval_acc")
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "cdr(g)"
                                                             "length(cdr(g))"
                                                             "car(g)")
                                                            (("1"
                                                              (replace
                                                               -1
                                                               2)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (lemma
                                                                   "init_eval_acc")
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     "cdr(g)"
                                                                     "length(cdr(g))"
                                                                     "car(g)+cons1_var")
                                                                    (("1"
                                                                      (replace
                                                                       -1
                                                                       2)
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (case "cdr(g)=null")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand "max" -3)
                                                      (("1"
                                                        (expand
                                                         "length"
                                                         -3)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    (("2"
                                                      (expand "max" -2)
                                                      (("2"
                                                        (hide
                                                         -1
                                                         -3
                                                         -4
                                                         -5)
                                                        (("2"
                                                          (hide 4 5)
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "length" 1 1)
                      (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((expt_x0_aux formula-decl nil exponentiation nil)
    (eval_poly_times_x formula-decl nil eval_poly nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (expt def-decl "real" exponentiation nil)
    (init_eval_acc formula-decl nil eval_poly nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (g skolem-const-decl "Polynomial" arithmetic_poly nil)
    (cons1_var skolem-const-decl "real" arithmetic_poly nil)
    (cons2_var skolem-const-decl "list[real]" arithmetic_poly nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (init_eval def-decl "real" eval_poly nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (listn_0 name-judgement "listn[real](0)" standard_form_poly nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (+ const-decl "[T -> real]" real_fun_ops "reals/")
    (init_polyplus def-decl
     "{ff: Polynomial | length(ff) = max(length(f), length(g))}"
     arithmetic_poly nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (eval const-decl "[real -> real]" eval_poly nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Polynomial type-eq-decl nil standard_form_poly nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   shostak))
 (init_eval_scal_TCC1 0
  (init_eval_scal_TCC1-1 nil 3777807827 ("" (subtype-tcc) nil nil)
   ((listn_0 name-judgement "listn[real](0)" standard_form_poly nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Polynomial type-eq-decl nil standard_form_poly nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (init_eval_scal subtype "arithmetic_poly.deg"
    "integers.upfrom((number_fields.-)(list_props[real].length(arithmetic_poly.init_polyscale(arithmetic_poly.r, arithmetic_poly.f)), 1))")))
 (init_eval_scal 0
  (init_eval_scal-1 nil 3777807921
   ("" (induct "f")
    (("1" (skeep) (("1" (grind) nil nil)) nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (expand "init_polyscale" 1 1)
          (("2" (expand "init_eval" 1 1)
            (("2" (expand "init_eval" 1 2)
              (("2"
                (inst -1 "x" "r" "deg" "cons1_var *
                      x ^ (1 - length(cons(cons1_var, cons2_var)) + deg)
                      + acc")
                (("2" (replace -1 1 rl)
                  (("2"
                    (case "NOT length(cons(r * cons1_var,
                                         init_polyscale(r, cons2_var))) = length(cons(cons1_var, cons2_var))")
                    (("1" (assert)
                      (("1" (expand "length" 1)
                        (("1" (typepred "init_polyscale(r,cons2_var)")
                          (("1" (propax) nil nil)) nil))
                        nil))
                      nil)
                     ("2" (replace -1 1)
                      (("2"
                        (case "NOT (x ^ (1 - length(cons(cons1_var, cons2_var)) + deg)) *
                            cons1_var
                            * r
                            + r * acc =  r *
                             (cons1_var *
                               x ^ (1 - length(cons(cons1_var, cons2_var)) + deg)
                               + acc)")
                        (("1" (assert) nil nil)
                         ("2" (replace -1 1) (("2" (propax) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2)
      (("3" (skeep)
        (("3" (typepred "deg")
          (("3" (typepred "init_polyscale(r,f)")
            (("3" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (^ const-decl "real" exponentiation nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (listn_0 name-judgement "listn[real](0)" standard_form_poly nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (init_eval def-decl "real" eval_poly nil)
    (list type-decl nil list_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Polynomial type-eq-decl nil standard_form_poly nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (init_polyscale def-decl
     "{ff: Polynomial | length(ff) = length(f)}" arithmetic_poly nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil))
   nil))
 (eval_scale 0
  (eval_scale-1 nil 3777992903
   ("" (skeep)
    (("" (expand "eval" 1)
      (("" (lemma "init_eval_scal")
        (("" (inst -1 "x" "r" "f" "length(f)-1" "0")
          (("" (case "length(init_polyscale(r,f))= length(f)")
            (("1" (replace -1 1) (("1" (assert) nil nil)) nil)
             ("2" (typepred "init_polyscale" 1)
              (("2" (typepred "init_polyscale(r,f)")
                (("2" (propax) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((eval const-decl "[real -> real]" eval_poly nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (list type-decl nil list_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Polynomial type-eq-decl nil standard_form_poly nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (odd? const-decl "bool" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (init_polyscale def-decl
     "{ff: Polynomial | length(ff) = length(f)}" arithmetic_poly nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (init_eval_scal formula-decl nil arithmetic_poly nil)
    (listn_0 name-judgement "listn[real](0)" standard_form_poly nil))
   nil))
 (eval_sub 0
  (eval_sub-1 nil 3778493978
   ("" (skeep)
    (("" (lemma "eval_add")
      (("" (lemma "eval_scale")
        (("" (expand "init_polysub")
          (("" (inst -2 "f" "init_polyscale(-1,g)")
            (("" (replace -2 1)
              (("" (decompose-equality 1)
                (("" (inst -1 "x!1" "-1" "g")
                  (("" (assert)
                    (("" (expand "+" 1)
                      (("" (assert)
                        (("" (replace -1 1)
                          (("" (expand "-" 1) (("" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((eval_add formula-decl nil arithmetic_poly nil)
    (init_polysub const-decl
     "{ff: Polynomial | length(ff) = max(length(f), length(g))}"
     arithmetic_poly nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (+ const-decl "[T -> real]" real_fun_ops "reals/")
    (eval const-decl "[real -> real]" eval_poly nil)
    (- const-decl "[T -> real]" real_fun_ops "reals/")
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (init_polyscale def-decl
     "{ff: Polynomial | length(ff) = length(f)}" arithmetic_poly nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (Polynomial type-eq-decl nil standard_form_poly nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (eval_scale formula-decl nil arithmetic_poly nil)
    (listn_0 name-judgement "listn[real](0)" standard_form_poly nil))
   shostak))
 (sub_zerop 0
  (sub_zerop-1 nil 3778494354
   ("" (induct "f")
    (("1" (skeep)
      (("1" (typepred "g")
        (("1" (expand "length" -2)
          (("1" (assert)
            (("1" (lift-if -2)
              (("1" (split -2)
                (("1" (assert) (("1" (grind) nil nil)) nil)
                 ("2" (flatten) (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (split 1)
          (("1" (flatten)
            (("1" (expand "zero_p" -1)
              (("1" (expand "length" -1)
                (("1" (assert)
                  (("1" (lift-if -1)
                    (("1" (assert)
                      (("1" (expand "init_polysub" -1 1)
                        (("1" (expand "init_polyscale" -1)
                          (("1" (case "g=null")
                            (("1" (typepred "g")
                              (("1"
                                (assert)
                                (("1"
                                  (expand "length" -2)
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert)
                              (("2"
                                (expand "init_polyplus" -1)
                                (("2"
                                  (decompose-equality -1)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (decompose-equality 2)
                                      (("2"
                                        (inst -3 "cdr(g)")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "init_polysub" 3)
                                            (("1" (propax) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (assert)
                                          (("2"
                                            (typepred "g")
                                            (("2"
                                              (expand "length" -2)
                                              (("2" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (assert)
            (("2" (flatten)
              (("2" (inst -2 "cdr(g)")
                (("1" (assert)
                  (("1" (case "g=null")
                    (("1" (typepred "g")
                      (("1" (expand "length" -2)
                        (("1" (assert) nil nil)) nil))
                      nil)
                     ("2" (case "cdr(g)=cons2_var")
                      (("1" (assert)
                        (("1" (expand "init_polysub" 2 1)
                          (("1" (expand "init_polyscale" 2)
                            (("1" (expand "init_polyplus" 2)
                              (("1"
                                (expand "zero_p" 2 1)
                                (("1"
                                  (expand "length" 2)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (decompose-equality 2)
                                      (("1"
                                        (decompose-equality -2)
                                        nil
                                        nil)
                                       ("2"
                                        (expand "init_polysub" -3)
                                        (("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (decompose-equality -1)
                        (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("2" (typepred "g")
                  (("2" (expand "length" -2) (("2" (assert) nil nil))
                    nil))
                  nil)
                 ("3" (typepred "g")
                  (("3" (expand "length" -2) (("3" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (list_cons_extensionality formula-decl nil list_adt nil)
    (g skolem-const-decl
     "{gg: Polynomial | length(gg) = length(cons(cons1_var, cons2_var))}"
     arithmetic_poly nil)
    (cons2_var skolem-const-decl "list[real]" arithmetic_poly nil)
    (cons1_var skolem-const-decl "real" arithmetic_poly nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (init_polyplus def-decl
     "{ff: Polynomial | length(ff) = max(length(f), length(g))}"
     arithmetic_poly nil)
    (init_polyscale def-decl
     "{ff: Polynomial | length(ff) = length(f)}" arithmetic_poly nil)
    (length_null formula-decl nil more_list_props "structures/")
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (listn_0 name-judgement "listn[real](0)" standard_form_poly nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (zero_p def-decl "{f: Polynomial | length(f) = n}" arithmetic_poly
     nil)
    (init_polysub const-decl
     "{ff: Polynomial | length(ff) = max(length(f), length(g))}"
     arithmetic_poly nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Polynomial type-eq-decl nil standard_form_poly nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   shostak))
 (eval_prod 0
  (eval_prod-1 nil 3777912043
   ("" (induct "f")
    (("1" (skeep)
      (("1" (expand "init_polymult" 1 1)
        (("1" (expand "eval" 1)
          (("1" (expand "init_eval" 1)
            (("1" (assert)
              (("1" (lift-if 1)
                (("1" (split 1)
                  (("1" (flatten) (("1" (assert) nil nil)) nil)
                   ("2" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (case "g=null")
          (("1" (replace -1 1)
            (("1" (expand "init_polymult" 1 1)
              (("1" (expand "eval" 1 1)
                (("1" (expand "init_eval" 1 1)
                  (("1" (expand "eval" 1 2)
                    (("1" (expand "init_eval" 1 1)
                      (("1" (propax) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (case "cons2_var=null")
            (("1" (replace -1 2)
              (("1" (expand "init_polymult" 2 1)
                (("1" (assert)
                  (("1" (expand "eval" 2 2)
                    (("1" (assert)
                      (("1" (expand "init_eval" 2 1)
                        (("1" (assert)
                          (("1" (expand "init_eval" 2 1)
                            (("1" (assert)
                              (("1"
                                (lemma "expt_x0_aux")
                                (("1"
                                  (inst -1 "x")
                                  (("1"
                                    (expand "^")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (lemma "eval_scale")
                                        (("1"
                                          (inst -1 "x" "cons1_var" "g")
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand "init_polymult" 3 1)
              (("2" (assert)
                (("2" (expand "length" 3 1)
                  (("2" (assert)
                    (("2" (lift-if 3)
                      (("2" (split 3)
                        (("1" (flatten)
                          (("1" (expand "length" -1)
                            (("1" (assert) nil nil)) nil))
                          nil)
                         ("2" (flatten)
                          (("2" (assert)
                            (("2" (lemma "eval_add")
                              (("2"
                                (inst
                                 -1
                                 "init_polyscale(cons1_var,g)"
                                 "init_polymult(cons2_var,cons(0,g))")
                                (("2"
                                  (replace -1 2)
                                  (("2"
                                    (lemma "eval_scale")
                                    (("2"
                                      (expand "+")
                                      (("2"
                                        (inst -1 "x" "cons1_var" "g")
                                        (("2"
                                          (replace -1 2)
                                          (("2"
                                            (inst -3 "cons(0,g)" "x")
                                            (("2"
                                              (replace -3 2)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (expand "eval" 2 4)
                                                  (("2"
                                                    (expand
                                                     "init_eval"
                                                     2
                                                     1)
                                                    (("2"
                                                      (expand
                                                       "length"
                                                       2
                                                       1)
                                                      (("2"
                                                        (lemma
                                                         "init_eval_acc")
                                                        (("2"
                                                          (inst
                                                           -1
                                                           "cons2_var"
                                                           "length(cons2_var)"
                                                           "cons1_var*x^(0)")
                                                          (("2"
                                                            (replace
                                                             -1
                                                             2)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (lemma
                                                                 "expt_x0_aux")
                                                                (("2"
                                                                  (inst
                                                                   -1
                                                                   "x")
                                                                  (("2"
                                                                    (expand
                                                                     "^")
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (replace
                                                                         -1
                                                                         2)
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (expand
                                                                             "eval"
                                                                             2
                                                                             1)
                                                                            (("2"
                                                                              (lemma
                                                                               "eval_poly_times_x")
                                                                              (("2"
                                                                                (inst
                                                                                 -1
                                                                                 "cons2_var"
                                                                                 "length(cons2_var)"
                                                                                 "x"
                                                                                 "0")
                                                                                (("2"
                                                                                  (case
                                                                                   "NOT 0*x=0")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil)
                                                                                   ("2"
                                                                                    (replace
                                                                                     -1
                                                                                     -2)
                                                                                    (("2"
                                                                                      (replace
                                                                                       -2
                                                                                       2
                                                                                       rl)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (lemma
                                                                                           "eval_cons")
                                                                                          (("2"
                                                                                            (inst
                                                                                             -1
                                                                                             "g"
                                                                                             "x")
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (case
                                                                                                 "NOT eval(g)(x) * (init_eval(cons2_var, length(cons2_var) - 1, 0)(x) * x) = eval(g)(x)* x * (init_eval(cons2_var, length(cons2_var) - 1, 0)(x))")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (case
                                                                                                       "eval(g)(x)=0")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (div-by
                                                                                                         2
                                                                                                         "eval(g)(x)")
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((null adt-constructor-decl "(null?)" list_adt nil)
    (eval_add formula-decl nil arithmetic_poly nil)
    (+ const-decl "[T -> real]" real_fun_ops "reals/")
    (/= const-decl "boolean" notequal nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (eval_poly_times_x formula-decl nil eval_poly nil)
    (eval_cons formula-decl nil eval_poly nil)
    (both_sides_div1 formula-decl nil real_props nil)
    (times_div_cancel1 formula-decl nil extra_real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (init_eval_acc formula-decl nil eval_poly nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (init_polyscale def-decl
     "{ff: Polynomial | length(ff) = length(f)}" arithmetic_poly nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (length_singleton formula-decl nil more_list_props "structures/")
    (int_minus_int_is_int application-judgement "int" integers nil)
    (eval_scale formula-decl nil arithmetic_poly nil)
    (^ const-decl "real" exponentiation nil)
    (expt_x0_aux formula-decl nil exponentiation nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    (init_eval def-decl "real" eval_poly nil)
    (listn_0 name-judgement "listn[real](0)" standard_form_poly nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (init_polymult def-decl "{ff: Polynomial |
   (null?(f) OR null?(g) IMPLIES length(ff) = 0) AND
    ((NOT null?(f) AND NOT null?(g)) IMPLIES
      length(ff) = length(f) + length(g) - 1)}" arithmetic_poly nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (eval const-decl "[real -> real]" eval_poly nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Polynomial type-eq-decl nil standard_form_poly nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil))
   shostak))
 (eval_zero 0
  (eval_zero-2 nil 3779186512
   (""
    (case "FORALL (n:nat, f: Polynomial):
                      length(f)=n IMPLIES (f = zero_p(length(f)) IFF (eval(f) = LAMBDA (x: real): 0))")
    (("1" (skeep) (("1" (inst -1 "length(f)" "f") nil nil)) nil)
     ("2" (hide 2)
      (("2" (induct "n")
        (("1" (skeep)
          (("1" (case "NOT f=null")
            (("1" (expand "length" -1) (("1" (assert) nil nil)) nil)
             ("2" (expand "zero_p")
              (("2" (expand "length")
                (("2" (assert)
                  (("2" (expand "eval")
                    (("2" (expand "init_eval") (("2" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (skeep)
          (("2" (skeep)
            (("2" (split 1)
              (("1" (flatten)
                (("1" (case "cdr(f) = zero_p(length(cdr(f)))")
                  (("1" (inst -3 "cdr(f)")
                    (("1" (assert)
                      (("1" (expand "length" -4)
                        (("1" (assert)
                          (("1" (expand "eval" 1 1)
                            (("1" (expand "eval" -3 1)
                              (("1"
                                (expand "init_eval" 1 1)
                                (("1"
                                  (decompose-equality 1)
                                  (("1"
                                    (expand "length" 1 1)
                                    (("1"
                                      (lemma "init_eval_acc")
                                      (("1"
                                        (inst
                                         -1
                                         "cdr(f)"
                                         "length(cdr(f))"
                                         "car(f)*x!1^0")
                                        (("1"
                                          (decompose-equality -1)
                                          (("1"
                                            (inst -1 "x!1")
                                            (("1"
                                              (replace -1 1)
                                              (("1"
                                                (case "car(f) = 0")
                                                (("1"
                                                  (replace -1 1)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (lemma
                                                       "eval_poly_times_x")
                                                      (("1"
                                                        (inst
                                                         -1
                                                         "cdr(f)"
                                                         "length(cdr(f))"
                                                         "x!1"
                                                         "0")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand "zero_p" -3)
                                                  (("2"
                                                    (case "f=null")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (decompose-equality
                                                       -3)
                                                      (("2"
                                                        (case
                                                         "NOT f=cons(car(f),cdr(f))")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (decompose-equality
                                                             1)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          (("2"
                                                            (replace
                                                             -1
                                                             -4)
                                                            (("2"
                                                              (replace
                                                               -1
                                                               -5)
                                                              (("2"
                                                                (decompose-equality
                                                                 -5)
                                                                (("2"
                                                                  (expand
                                                                   "length"
                                                                   -5)
                                                                  (("2"
                                                                    (decompose-equality
                                                                     -5)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (case "NOT cdr(f)=null")
                                          (("1" (assert) nil nil)
                                           ("2"
                                            (replace -1 2)
                                            (("2"
                                              (expand "init_eval" 2 1)
                                              (("2"
                                                (case "car(f)=0")
                                                (("1" (assert) nil nil)
                                                 ("2"
                                                  (expand "zero_p" -3)
                                                  (("2"
                                                    (expand
                                                     "length"
                                                     -3)
                                                    (("2"
                                                      (case
                                                       "NOT f=cons(car(f),cdr(f))")
                                                      (("1"
                                                        (decompose-equality
                                                         1)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (replace -1 -4)
                                                        (("2"
                                                          (decompose-equality
                                                           -4)
                                                          (("2"
                                                            (case
                                                             "NOT j=0")
                                                            (("1"
                                                              (expand
                                                               "length"
                                                               -6)
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (replace
                                                               -1
                                                               -5)
                                                              (("2"
                                                                (expand
                                                                 "zero_p"
                                                                 -5)
                                                                (("2"
                                                                  (decompose-equality
                                                                   -5)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (expand "zero_p" -1 1)
                    (("2" (assert)
                      (("2" (case "f=cons(car(f),cdr(f))")
                        (("1" (replace -1 -2)
                          (("1" (expand "length" -2)
                            (("1" (decompose-equality -2) nil nil))
                            nil))
                          nil)
                         ("2" (decompose-equality 1) nil nil))
                        nil))
                      nil))
                    nil)
                   ("3" (expand "length" -3) (("3" (assert) nil nil))
                    nil))
                  nil))
                nil)
               ("2" (flatten)
                (("2" (expand "zero_p" 1 1)
                  (("2" (expand "length" -3)
                    (("2" (assert)
                      (("2" (lift-if 1)
                        (("2" (split 1)
                          (("1" (flatten)
                            (("1" (assert)
                              (("1"
                                (expand "length" -1)
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (assert)
                              (("2"
                                (case "NOT f = cons(car(f),cdr(f))")
                                (("1" (decompose-equality 1) nil nil)
                                 ("2"
                                  (assert)
                                  (("2"
                                    (replace -1 2)
                                    (("2"
                                      (decompose-equality 2)
                                      (("1"
                                        (decompose-equality -2)
                                        (("1"
                                          (inst-cp -1 "0")
                                          (("1"
                                            (lemma "eval_car")
                                            (("1"
                                              (inst -1 "f")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand "zero_p" 1 1)
                                        (("2"
                                          (case "car(f)=0")
                                          (("1"
                                            (replace -1 -2)
                                            (("1"
                                              (replace -1)
                                              (("1"
                                                (expand "length" 1)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (lift-if 1)
                                                    (("1"
                                                      (split 1)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (expand
                                                           "length"
                                                           -1)
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (flatten)
                                                        (("2"
                                                          (lemma
                                                           "eval_cons")
                                                          (("2"
                                                            (inst
                                                             -5
                                                             "cdr(f)")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (flatten)
                                                                (("2"
                                                                  (hide
                                                                   -5)
                                                                  (("2"
                                                                    (split
                                                                     -5)
                                                                    (("1"
                                                                      (expand
                                                                       "zero_p"
                                                                       -1)
                                                                      (("1"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (apply-extensionality
                                                                       1)
                                                                      (("2"
                                                                        (inst
                                                                         -1
                                                                         "cdr(f)"
                                                                         "x!1")
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (reveal
                                                                             +)
                                                                            (("2"
                                                                              (reveal
                                                                               -)
                                                                              (("2"
                                                                                (hide
                                                                                 -2)
                                                                                (("2"
                                                                                  (hide
                                                                                   -2)
                                                                                  (("2"
                                                                                    (hide
                                                                                     -2)
                                                                                    (("2"
                                                                                      (hide
                                                                                       -2)
                                                                                      (("2"
                                                                                        (hide
                                                                                         -2)
                                                                                        (("2"
                                                                                          (case
                                                                                           "x!1=0")
                                                                                          (("1"
                                                                                            (case
                                                                                             "FORALL(x:{xx:real| xx /= 0}): eval(cdr(f))(x)=0")
                                                                                            (("1"
                                                                                              (case
                                                                                               "eval(cdr(f))(x!1)>0")
                                                                                              (("1"
                                                                                                (lemma
                                                                                                 "pos_ball")
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -1
                                                                                                   "cdr(f)"
                                                                                                   "x!1")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (skeep)
                                                                                                      (("1"
                                                                                                        (skeep
                                                                                                         -1)
                                                                                                        (("1"
                                                                                                          (inst
                                                                                                           -1
                                                                                                           "Eps/2")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (inst
                                                                                                               -3
                                                                                                               "Eps/2+x!1")
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (assert)
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "abs"
                                                                                                               1
                                                                                                               1)
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (case
                                                                                                 "eval(cdr(f))(x!1)<0")
                                                                                                (("1"
                                                                                                  (lemma
                                                                                                   "neg_ball")
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     -1
                                                                                                     "cdr(f)"
                                                                                                     "x!1")
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (skeep
                                                                                                         -1)
                                                                                                        (("1"
                                                                                                          (inst
                                                                                                           -1
                                                                                                           "Eps/2")
                                                                                                          (("1"
                                                                                                            (inst
                                                                                                             -3
                                                                                                             "Eps/2+x!1")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (expand
                                                                                                             "abs"
                                                                                                             1
                                                                                                             1)
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (skeep
                                                                                               1)
                                                                                              (("2"
                                                                                                (inst
                                                                                                 -2
                                                                                                 "cdr(f)"
                                                                                                 "x")
                                                                                                (("2"
                                                                                                  (typepred
                                                                                                   "x")
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (assert)
                                            (("2"
                                              (expand "length" 2 1)
                                              (("2"
                                                (lift-if 2)
                                                (("2"
                                                  (split 2)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (expand
                                                       "length"
                                                       -1)
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (flatten)
                                                    (("2"
                                                      (inst
                                                       -3
                                                       "cdr(f)")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (flatten)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (expand
                                                               "length"
                                                               2
                                                               1)
                                                              (("2"
                                                                (expand
                                                                 "zero_p"
                                                                 -4)
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (lemma
                                                                     "eval_cons")
                                                                    (("2"
                                                                      (lemma
                                                                       "eval_car")
                                                                      (("2"
                                                                        (inst
                                                                         -1
                                                                         "f")
                                                                        (("2"
                                                                          (decompose-equality
                                                                           -4)
                                                                          (("2"
                                                                            (inst
                                                                             -1
                                                                             "0")
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (init_eval_acc formula-decl nil eval_poly nil)
    (length_null formula-decl nil more_list_props "structures/")
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (list_cons_extensionality formula-decl nil list_adt nil)
    (eval_poly_times_x formula-decl nil eval_poly nil)
    (f skolem-const-decl "Polynomial" arithmetic_poly nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (eval_car formula-decl nil eval_poly nil)
    (eval_cons formula-decl nil eval_poly nil)
    (> const-decl "bool" reals nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (< const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (Eps skolem-const-decl "posreal" arithmetic_poly nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (pos_ball formula-decl nil eval_poly nil)
    (neg_ball formula-decl nil eval_poly nil)
    (Eps skolem-const-decl "posreal" arithmetic_poly nil)
    (init_eval def-decl "real" eval_poly nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (listn_0 name-judgement "listn[real](0)" standard_form_poly nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Polynomial type-eq-decl nil standard_form_poly nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (zero_p def-decl "{f: Polynomial | length(f) = n}" arithmetic_poly
     nil)
    (eval const-decl "[real -> real]" eval_poly nil))
   nil)
  (eval_zero-1 nil 3778428381
   (""
    (case "FORALL (n:nat, f: Polynomial):
        length(f)=n IMPLIES (f = zero_p(length(f)) IFF (eval(f) = LAMBDA (x: real): 0))")
    (("1" (skeep) (("1" (inst -1 "length(f)" "f") nil nil)) nil)
     ("2" (hide 2)
      (("2" (induct "n")
        (("1" (skeep)
          (("1" (case "NOT f=null")
            (("1" (expand "length" -1) (("1" (assert) nil nil)) nil)
             ("2" (expand "zero_p")
              (("2" (expand "length")
                (("2" (assert)
                  (("2" (expand "eval")
                    (("2" (expand "init_eval") (("2" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (skeep)
          (("2" (skeep)
            (("2" (split 1)
              (("1" (flatten)
                (("1" (case "cdr(f) = zero_p(length(cdr(f)))")
                  (("1" (inst -3 "cdr(f)")
                    (("1" (assert)
                      (("1" (expand "length" -4)
                        (("1" (assert)
                          (("1" (expand "eval" 1 1)
                            (("1" (expand "eval" -3 1)
                              (("1"
                                (expand "init_eval" 1 1)
                                (("1"
                                  (decompose-equality 1)
                                  (("1"
                                    (expand "length" 1 1)
                                    (("1"
                                      (lemma "init_eval_acc")
                                      (("1"
                                        (inst
                                         -1
                                         "cdr(f)"
                                         "length(cdr(f))"
                                         "car(f)*x!1^0")
                                        (("1"
                                          (decompose-equality -1)
                                          (("1"
                                            (inst -1 "x!1")
                                            (("1"
                                              (replace -1 1)
                                              (("1"
                                                (case "car(f) = 0")
                                                (("1"
                                                  (replace -1 1)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (lemma
                                                       "eval_poly_times_x")
                                                      (("1"
                                                        (inst
                                                         -1
                                                         "cdr(f)"
                                                         "length(cdr(f))"
                                                         "x!1"
                                                         "0")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand "zero_p" -3)
                                                  (("2"
                                                    (case "f=null")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (decompose-equality
                                                       -3)
                                                      (("2"
                                                        (case
                                                         "NOT f=cons(car(f),cdr(f))")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (decompose-equality
                                                             1)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          (("2"
                                                            (replace
                                                             -1
                                                             -4)
                                                            (("2"
                                                              (replace
                                                               -1
                                                               -5)
                                                              (("2"
                                                                (decompose-equality
                                                                 -5)
                                                                (("2"
                                                                  (expand
                                                                   "length"
                                                                   -5)
                                                                  (("2"
                                                                    (decompose-equality
                                                                     -5)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (case "NOT cdr(f)=null")
                                          (("1" (assert) nil nil)
                                           ("2"
                                            (replace -1 2)
                                            (("2"
                                              (expand "init_eval" 2 1)
                                              (("2"
                                                (case "car(f)=0")
                                                (("1" (assert) nil nil)
                                                 ("2"
                                                  (expand "zero_p" -3)
                                                  (("2"
                                                    (expand
                                                     "length"
                                                     -3)
                                                    (("2"
                                                      (case
                                                       "NOT f=cons(car(f),cdr(f))")
                                                      (("1"
                                                        (decompose-equality
                                                         1)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (replace -1 -4)
                                                        (("2"
                                                          (decompose-equality
                                                           -4)
                                                          (("2"
                                                            (case
                                                             "NOT j=0")
                                                            (("1"
                                                              (expand
                                                               "length"
                                                               -6)
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (replace
                                                               -1
                                                               -5)
                                                              (("2"
                                                                (expand
                                                                 "zero_p"
                                                                 -5)
                                                                (("2"
                                                                  (decompose-equality
                                                                   -5)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (expand "zero_p" -1 1)
                    (("2" (assert)
                      (("2" (case "f=cons(car(f),cdr(f))")
                        (("1" (replace -1 -2)
                          (("1" (expand "length" -2)
                            (("1" (decompose-equality -2) nil nil))
                            nil))
                          nil)
                         ("2" (decompose-equality 1) nil nil))
                        nil))
                      nil))
                    nil)
                   ("3" (expand "length" -3) (("3" (assert) nil nil))
                    nil))
                  nil))
                nil)
               ("2" (flatten)
                (("2" (expand "zero_p" 1 1)
                  (("2" (expand "length" -3)
                    (("2" (assert)
                      (("2" (lift-if 1)
                        (("2" (split 1)
                          (("1" (flatten)
                            (("1" (assert)
                              (("1"
                                (expand "length" -1)
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (assert)
                              (("2"
                                (case "NOT f = cons(car(f),cdr(f))")
                                (("1" (decompose-equality 1) nil nil)
                                 ("2"
                                  (assert)
                                  (("2"
                                    (replace -1 2)
                                    (("2"
                                      (decompose-equality 2)
                                      (("1"
                                        (decompose-equality -2)
                                        (("1"
                                          (inst-cp -1 "0")
                                          (("1"
                                            (lemma "eval_car")
                                            (("1"
                                              (inst -1 "f")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand "zero_p" 1 1)
                                        (("2"
                                          (case "car(f)=0")
                                          (("1"
                                            (replace -1 -2)
                                            (("1"
                                              (replace -1)
                                              (("1"
                                                (expand "length" 1)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (lift-if 1)
                                                    (("1"
                                                      (split 1)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (expand
                                                           "length"
                                                           -1)
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (flatten)
                                                        (("2"
                                                          (lemma
                                                           "eval_cons")
                                                          (("2"
                                                            (inst
                                                             -5
                                                             "cdr(f)")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (flatten)
                                                                (("2"
                                                                  (hide
                                                                   -5)
                                                                  (("2"
                                                                    (split
                                                                     -5)
                                                                    (("1"
                                                                      (expand
                                                                       "zero_p"
                                                                       -1)
                                                                      (("1"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (apply-extensionality
                                                                       1)
                                                                      (("2"
                                                                        (inst
                                                                         -1
                                                                         "cdr(f)"
                                                                         "x!1")
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (reveal
                                                                             +)
                                                                            (("2"
                                                                              (reveal
                                                                               -)
                                                                              (("2"
                                                                                (hide
                                                                                 -2)
                                                                                (("2"
                                                                                  (hide
                                                                                   -2)
                                                                                  (("2"
                                                                                    (hide
                                                                                     -2)
                                                                                    (("2"
                                                                                      (hide
                                                                                       -2)
                                                                                      (("2"
                                                                                        (hide
                                                                                         -2)
                                                                                        (("2"
                                                                                          (case
                                                                                           "x!1=0")
                                                                                          (("1"
                                                                                            (case
                                                                                             "FORALL(x:{xx:real| xx /= 0}): eval(cdr(f))(x)=0")
                                                                                            (("1"
                                                                                              (case
                                                                                               "eval(cdr(f))(x!1)>0")
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "eval"
                                                                                                 -8
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "init_eval"
                                                                                                   -8)
                                                                                                  (("1"
                                                                                                    (decompose-equality
                                                                                                     -8)
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       -1
                                                                                                       "x!1")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (lemma
                                                                                                           "init_eval_acc")
                                                                                                          (("1"
                                                                                                            (inst
                                                                                                             -1
                                                                                                             "cdr(f)"
                                                                                                             "length(f)-1"
                                                                                                             "car(f)*x!1^0")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (decompose-equality
                                                                                                                 -1)
                                                                                                                (("1"
                                                                                                                  (inst
                                                                                                                   -1
                                                                                                                   "x!1")
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    (("1"
                                                                                                                      (replace
                                                                                                                       -8
                                                                                                                       -1)
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        (("1"
                                                                                                                          (lemma
                                                                                                                           "eval_car")
                                                                                                                          (("1"
                                                                                                                            (inst
                                                                                                                             -1
                                                                                                                             "cdr(f)")
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              (("1"
                                                                                                                                (postpone)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (postpone)
                                                                                                      nil
                                                                                                      nil)
                                                                                                     ("3"
                                                                                                      (postpone)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (postpone)
                                                                                                nil
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (postpone)
                                                                                              nil
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (postpone)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (postpone) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (eval_eq 0
  (eval_eq-1 nil 3778425377
   ("" (skeep)
    (("" (split)
      (("1" (flatten)
        (("1" (lemma "eval_sub")
          (("1" (inst -1 "f" "g")
            (("1" (decompose-equality 1) nil nil)) nil))
          nil))
        nil)
       ("2" (flatten)
        (("2" (lemma "sub_zerop")
          (("2" (typepred "f" "g")
            (("2" (hide -1 -2)
              (("2" (inst -2 "f" "g")
                (("2" (assert)
                  (("2"
                    (case "not eval(f)-eval(g) = LAMBDA(x:real): 0")
                    (("1" (decompose-equality 1)
                      (("1" (decompose-equality -2)
                        (("1" (inst -1 "x!1")
                          (("1" (assert)
                            (("1" (expand "-" 1)
                              (("1" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (lemma "eval_sub")
                      (("2" (inst -1 "f" "g")
                        (("2" (assert)
                          (("2" (replace -1 -2 rl)
                            (("2" (lemma "eval_zero")
                              (("2"
                                (inst -1 "init_polysub(f,g)")
                                (("2"
                                  (assert)
                                  (("2"
                                    (typepred "init_polysub(f,g)")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (expand "max" -2)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((eval_sub formula-decl nil arithmetic_poly nil)
    (eval const-decl "[real -> real]" eval_poly nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Polynomial type-eq-decl nil standard_form_poly nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (sub_zerop formula-decl nil arithmetic_poly nil)
    (eval_zero formula-decl nil arithmetic_poly nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (init_polysub const-decl
     "{ff: Polynomial | length(ff) = max(length(f), length(g))}"
     arithmetic_poly nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (- const-decl "[T -> real]" real_fun_ops "reals/")
    (NOT const-decl "[bool -> bool]" booleans nil)
    (listn_0 name-judgement "listn[real](0)" standard_form_poly nil))
   shostak))
 (mult_commute 0
  (mult_commute-1 nil 3778853083
   ("" (skeep)
    (("" (lemma "eval_prod")
      ((""
        (case "eval( init_polymult(f, g)) = eval(init_polymult(g, f))")
        (("1" (lemma "eval_eq")
          (("1" (inst -1 "init_polymult(f,g)" "init_polymult(g,f)")
            (("1" (assert) nil nil)
             ("2" (typepred "init_polymult(g,f)" "init_polymult(f,g)")
              (("2" (hide -1 -3)
                (("2" (assert)
                  (("2" (splash -1)
                    (("1" (assert)
                      (("1" (typepred "init_polymult(g, f)")
                        (("1" (assert)
                          (("1" (hide -1)
                            (("1" (flatten) (("1" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "init_polymult" 2)
                      (("2" (assert)
                        (("2" (hide -1)
                          (("2" (split -2)
                            (("1" (lift-if 2)
                              (("1"
                                (split 2)
                                (("1"
                                  (flatten)
                                  (("1" (assert) nil nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (lift-if 3)
                                      (("2"
                                        (split 3)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (split 1)
                                            (("1"
                                              (flatten)
                                              (("1" (assert) nil nil))
                                              nil)
                                             ("2"
                                              (flatten)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (expand
                                                   "init_polymult"
                                                   -2)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (flatten)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (lift-if 2)
                                              (("2"
                                                (split 2)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand
                                                       "init_polymult"
                                                       -2)
                                                      (("1"
                                                        (replace -2 1)
                                                        (("1"
                                                          (typepred
                                                           "init_polyplus(init_polyscale(car(g), f),
                         init_polymult(cdr(g), cons(0, f)))")
                                                          (("1"
                                                            (hide -1)
                                                            (("1"
                                                              (replace
                                                               -1)
                                                              (("1"
                                                                (expand
                                                                 "max"
                                                                 1
                                                                 1)
                                                                (("1"
                                                                  (lift-if
                                                                   1)
                                                                  (("1"
                                                                    (split
                                                                     1)
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (expand
                                                                           "max"
                                                                           -2)
                                                                          (("1"
                                                                            (typepred
                                                                             "(init_polymult(cdr(g), cons(0, f)))")
                                                                            (("1"
                                                                              (hide
                                                                               -1)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (expand
                                                                                   "length"
                                                                                   -4)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "length"
                                                                                     -4)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (lift-if
                                                                                         -4)
                                                                                        (("1"
                                                                                          (split
                                                                                           -4)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (replace
                                                                                               -2
                                                                                               2)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "length"
                                                                                                 2
                                                                                                 2)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "length"
                                                                                                   2
                                                                                                   2)
                                                                                                  (("1"
                                                                                                    (propax)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (flatten)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (expand
                                                                           "max"
                                                                           -1)
                                                                          (("2"
                                                                            (typepred
                                                                             "(init_polyscale(car(g), f))")
                                                                            (("2"
                                                                              (hide
                                                                               -1)
                                                                              (("2"
                                                                                (replace
                                                                                 -1)
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (typepred
                                                                                     "init_polymult(cdr(g), cons(0, f))")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (hide
                                                                                         -1)
                                                                                        (("2"
                                                                                          (split
                                                                                           -2)
                                                                                          (("1"
                                                                                            (replace
                                                                                             -1)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "length"
                                                                                               1
                                                                                               3)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "length"
                                                                                                   3
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (expand
                                                                                             "length"
                                                                                             3)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "length"
                                                                                               3)
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (flatten)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (hide -2)
                                                      (("2"
                                                        (typepred
                                                         "init_polyplus(init_polyscale(car(g), f),
                         init_polymult(cdr(g), cons(0, f)))")
                                                        (("2"
                                                          (hide -1)
                                                          (("2"
                                                            (expand
                                                             "max"
                                                             -1)
                                                            (("2"
                                                              (lift-if
                                                               -1)
                                                              (("2"
                                                                (split
                                                                 -1)
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (replace
                                                                     -2)
                                                                    (("1"
                                                                      (typepred
                                                                       "init_polyplus(init_polyscale(car(f), g),
                          init_polymult(cdr(f), cons(0, g)))")
                                                                      (("1"
                                                                        (hide
                                                                         -1)
                                                                        (("1"
                                                                          (expand
                                                                           "max"
                                                                           -1)
                                                                          (("1"
                                                                            (lift-if
                                                                             -1)
                                                                            (("1"
                                                                              (split
                                                                               -1)
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (replace
                                                                                     -2)
                                                                                    (("1"
                                                                                      (typepred
                                                                                       "init_polymult(cdr(g), cons(0, f))"
                                                                                       "init_polymult(cdr(f), cons(0, g))")
                                                                                      (("1"
                                                                                        (hide
                                                                                         -4)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (replace
                                                                                             -2)
                                                                                            (("1"
                                                                                              (replace
                                                                                               -3
                                                                                               4)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "length"
                                                                                                 4
                                                                                                 2)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "length"
                                                                                                   4
                                                                                                   4)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "length"
                                                                                                     4
                                                                                                     2)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "length"
                                                                                                       4
                                                                                                       2)
                                                                                                      (("1"
                                                                                                        (propax)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (flatten)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (replace
                                                                                       -1)
                                                                                      (("2"
                                                                                        (typepred
                                                                                         "init_polyscale(car(f), g)")
                                                                                        (("2"
                                                                                          (hide
                                                                                           -1)
                                                                                          (("2"
                                                                                            (replace
                                                                                             -1)
                                                                                            (("2"
                                                                                              (typepred
                                                                                               "init_polymult(cdr(f), cons(0, g))")
                                                                                              (("2"
                                                                                                (hide
                                                                                                 -1)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (split
                                                                                                     -2)
                                                                                                    (("1"
                                                                                                      (replace
                                                                                                       -1)
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "length"
                                                                                                         1
                                                                                                         3)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "length"
                                                                                                           2
                                                                                                           1)
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (expand
                                                                                                       "length"
                                                                                                       2
                                                                                                       1)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "length"
                                                                                                         2
                                                                                                         1)
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (replace
                                                                       -1)
                                                                      (("2"
                                                                        (typepred
                                                                         "init_polyscale(car(g), f)")
                                                                        (("2"
                                                                          (hide
                                                                           -1)
                                                                          (("2"
                                                                            (replace
                                                                             -1)
                                                                            (("2"
                                                                              (typepred
                                                                               "init_polymult(cdr(g), cons(0, f))")
                                                                              (("2"
                                                                                (hide
                                                                                 -1)
                                                                                (("2"
                                                                                  (split
                                                                                   -2)
                                                                                  (("1"
                                                                                    (replace
                                                                                     -1)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "length"
                                                                                       1
                                                                                       3)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "length"
                                                                                           2
                                                                                           1)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "length"
                                                                                               4
                                                                                               1)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "length"
                                                                                       4
                                                                                       1)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert) nil nil)
                             ("3" (flatten) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (hide 2)
          (("2" (decompose-equality 1)
            (("2" (inst-cp -1 "f" "g" "x!1")
              (("2" (assert)
                (("2" (inst -1 "g" "f" "x!1") (("2" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (listn_0 name-judgement "listn[real](0)" standard_form_poly nil)
    (init_polymult def-decl "{ff: Polynomial |
   (null?(f) OR null?(g) IMPLIES length(ff) = 0) AND
    ((NOT null?(f) AND NOT null?(g)) IMPLIES
      length(ff) = length(f) + length(g) - 1)}" arithmetic_poly nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (eval const-decl "[real -> real]" eval_poly nil)
    (Polynomial type-eq-decl nil standard_form_poly nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (g skolem-const-decl "Polynomial" arithmetic_poly nil)
    (f skolem-const-decl "Polynomial" arithmetic_poly nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (length_null formula-decl nil more_list_props "structures/")
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (init_polyscale def-decl
     "{ff: Polynomial | length(ff) = length(f)}" arithmetic_poly nil)
    (init_polyplus def-decl
     "{ff: Polynomial | length(ff) = max(length(f), length(g))}"
     arithmetic_poly nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (eval_eq formula-decl nil arithmetic_poly nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (eval_prod formula-decl nil arithmetic_poly nil))
   shostak))
 (even_exp 0
  (even_exp-1 nil 3779447161
   ("" (induct "n")
    (("1" (skeep)
      (("1" (expand "init_polyexp" 1)
        (("1" (assert)
          (("1" (skeep)
            (("1" (lift-if 1)
              (("1" (split 1)
                (("1" (flatten)
                  (("1" (expand "eval" 1)
                    (("1" (expand "init_eval" 1 1)
                      (("1" (assert) nil nil)) nil))
                    nil))
                  nil)
                 ("2" (flatten) (("2" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (case "f=null")
          (("1" (expand "init_polyexp" 1 1)
            (("1" (assert) (("1" (skeep) (("1" (grind) nil nil)) nil))
              nil))
            nil)
           ("2" (skeep)
            (("2" (expand "init_polyexp" 2 1)
              (("2" (assert)
                (("2" (expand "init_polyexp" 2 1)
                  (("2" (lemma "eval_prod")
                    (("2"
                      (inst-cp -1 "f"
                       "init_polymult(f,init_polyexp(f,2*j))" "x")
                      (("2" (replace -2)
                        (("2" (replace -2 2 rl)
                          (("2" (replace -2 2 lr)
                            (("2"
                              (inst -1 "f" "init_polyexp(f,2*j)" "x")
                              (("2"
                                (replace -1 2)
                                (("2"
                                  (inst -3 "f")
                                  (("2"
                                    (inst -3 "x")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (case
                                         "eval(f)(x) * (eval(f)(x) * eval(init_polyexp(f, 2 * j))(x)) = (eval(f)(x)*eval(f)(x)) * eval(init_polyexp(f, 2 * j))(x)")
                                        (("1"
                                          (replace -1 2)
                                          (("1"
                                            (case
                                             "eval(f)(x) * eval(f)(x)>=0")
                                            (("1"
                                              (lemma "pos_times_ge")
                                              (("1"
                                                (inst
                                                 -1
                                                 " (eval(f)(x) * eval(f)(x))"
                                                 "eval(init_polyexp(f, 2 * j))(x)")
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (lemma "pos_times_ge")
                                              (("2"
                                                (inst
                                                 -1
                                                 "eval(f)(x)"
                                                 "eval(f)(x)")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((null adt-constructor-decl "(null?)" list_adt nil)
    (init_polymult def-decl "{ff: Polynomial |
   (null?(f) OR null?(g) IMPLIES length(ff) = 0) AND
    ((NOT null?(f) AND NOT null?(g)) IMPLIES
      length(ff) = length(f) + length(g) - 1)}" arithmetic_poly nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (pos_times_ge formula-decl nil real_props nil)
    (eval_prod formula-decl nil arithmetic_poly nil)
    (listn_0 name-judgement "listn[real](0)" standard_form_poly nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (^ const-decl "real" exponentiation nil)
    (expt def-decl "real" exponentiation nil)
    (init_eval def-decl "real" eval_poly nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (init_polyexp def-decl "{ff: Polynomial |
   (null?(f) IMPLIES length(ff) = 0) AND
    ((cons?(f) AND k = 0) IMPLIES length(ff) = 1) AND
     ((cons?(f) AND k > 0) IMPLIES length(ff) = length(f) * k - (k - 1))}"
     arithmetic_poly nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (> const-decl "bool" reals nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (eval const-decl "[real -> real]" eval_poly nil)
    (Polynomial type-eq-decl nil standard_form_poly nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil))
   shostak)))

