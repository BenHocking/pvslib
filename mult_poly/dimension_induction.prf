(dimension_induction
 (IMP_sorted_list_ops_TCC1 0
  (IMP_sorted_list_ops_TCC1-1 nil 3813076353
   ("" (lemma "leq_total_preorder") (("" (propax) nil nil)) nil)
   ((leq_total_preorder formula-decl nil standard_form_mult_poly nil))
   nil
   (IMP_sorted_list_ops subtype "standard_form_mult_poly.leq"
    "(total_preorder[monomial].total_preorder?)")))
 (mv_UNS?_TCC1 0
  (mv_UNS?_TCC1-1 nil 3812708192 ("" (subtype-tcc) nil nil)
   ((Unif? const-decl "bool" standard_form_mult_poly nil)) nil
   (mv_UNS? subtype "dimension_induction.p"
    "(list_adt[monomial].cons?)")))
 (single_UNS 0
  (single_UNS-1 nil 3813407296
   ("" (skeep :preds? T)
    (("" (expand "mv_UNS?")
      (("" (expand "mon_UNS?")
        (("" (flatten)
          (("" (split 2)
            (("1" (expand "Unif?")
              (("1" (skeep :preds? T) (("1" (assert) nil nil)) nil))
              nil)
             ("2" (propax) nil nil)
             ("3" (expand "allnonzero?")
              (("3" (split 1)
                (("1" (skeep :preds? T)
                  (("1" (assert)
                    (("1" (case "not i=0")
                      (("1" (assert) nil nil)
                       ("2" (expand "nth") (("2" (propax) nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (propax) nil nil))
                nil))
              nil)
             ("4" (expand "simplified?") (("4" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((mv_UNS? const-decl "bool" dimension_induction nil)
    (simplified? const-decl "bool" standard_form_mult_poly nil)
    (allnonzero? const-decl "bool" standard_form_mult_poly nil)
    (below type-eq-decl nil naturalnumbers nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (length def-decl "nat" list_props nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (list type-decl nil list_adt nil) (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (nth def-decl "T" list_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (Unif? const-decl "bool" standard_form_mult_poly nil)
    (length_singleton formula-decl nil more_list_props structures)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (mon_UNS? const-decl "bool" dimension_induction nil))
   shostak))
 (car_mon_UNS 0
  (car_mon_UNS-1 nil 3813407440
   ("" (skeep :preds? T)
    (("" (expand "mon_UNS?")
      (("" (expand "mv_UNS?")
        (("" (assert)
          (("" (flatten)
            (("" (assert)
              (("" (expand "allnonzero?")
                (("" (split -4)
                  (("1" (propax) nil nil)
                   ("2" (inst 1 "0")
                    (("1" (assert)
                      (("1" (expand "nth") (("1" (assert) nil nil))
                        nil))
                      nil)
                     ("2" (expand "length") (("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((mon_UNS? const-decl "bool" dimension_induction nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (length def-decl "nat" list_props nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (n skolem-const-decl "nat" dimension_induction nil)
    (p skolem-const-decl "(mv_UNS?(n))" dimension_induction nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (allnonzero? const-decl "bool" standard_form_mult_poly nil)
    (mv_UNS? const-decl "bool" dimension_induction nil))
   shostak))
 (max_length_UNS 0
  (max_length_UNS-1 nil 3812721322
   ("" (skeep :preds? T)
    (("" (expand "mv_UNS?")
      (("" (assert)
        (("" (flatten)
          (("" (expand "Unif?")
            (("" (lemma "max_length_is_nth")
              (("" (inst?)
                (("" (skeep)
                  (("" (inst -3 "0" "j")
                    (("" (expand "nth" -3 1) (("" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((mv_UNS? const-decl "bool" dimension_induction nil)
    (max_length_is_nth formula-decl nil standard_form_mult_poly nil)
    (nth def-decl "T" list_props nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (list type-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (Unif? const-decl "bool" standard_form_mult_poly nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   shostak))
 (max_length_UNSge 0
  (max_length_UNSge-1 nil 3812721405
   ("" (skeep)
    (("" (lemma "max_length_UNS")
      (("" (inst?)
        (("" (assert)
          (("" (expand "max_length") (("" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((max_length_UNS formula-decl nil dimension_induction nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (max_length def-decl "nat" standard_form_mult_poly nil)
    (mv_UNS? const-decl "bool" dimension_induction nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (list type-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (standard_is_UNS 0
  (standard_is_UNS-1 nil 3812963367
   ("" (skeep :preds? T)
    (("" (expand "mv_standard_form?")
      (("" (expand "mv_UNS?")
        (("" (split -1)
          (("1" (assert) nil nil)
           ("2" (flatten)
            (("2" (assert)
              (("2" (split -1)
                (("1" (flatten)
                  (("1" (assert)
                    (("1" (lemma "minlength_unif")
                      (("1" (inst?)
                        (("1" (assert)
                          (("1" (expand "Unif?")
                            (("1" (lemma " max_length_is_nth")
                              (("1"
                                (inst?)
                                (("1"
                                  (skeep)
                                  (("1"
                                    (inst -2 "0" "j")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand "nth" -2 1)
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (propax) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((mv_standard_form? const-decl "bool" standard_form_mult_poly nil)
    (minlength_unif formula-decl nil standard_form_mult_poly nil)
    (max_length_is_nth formula-decl nil standard_form_mult_poly nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (nth def-decl "T" list_props nil) (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (Unif? const-decl "bool" standard_form_mult_poly nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (list type-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (mv_UNS? const-decl "bool" dimension_induction nil))
   shostak))
 (cdr_is_UNS 0
  (cdr_is_UNS-1 nil 3812963775
   ("" (skeep :preds? T)
    (("" (expand "mv_UNS?")
      (("" (assert)
        (("" (case "null?(cdr(p))")
          (("1" (assert) nil nil)
           ("2" (assert)
            (("2" (flatten)
              (("2" (expand "Unif?")
                (("2" (inst-cp -2 "0" "1")
                  (("1" (assert)
                    (("1" (expand "nth" -3)
                      (("1" (assert)
                        (("1" (expand "nth" -3)
                          (("1" (assert)
                            (("1" (split 2)
                              (("1"
                                (skeep)
                                (("1"
                                  (inst -2 "i+1" "j+1")
                                  (("1"
                                    (expand "nth" -2)
                                    (("1" (propax) nil nil))
                                    nil)
                                   ("2"
                                    (assert)
                                    (("2"
                                      (expand "length" 1)
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (expand "length" 1)
                                    (("3" (assert) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (assert)
                                (("2"
                                  (lemma "allnonzero_cdr")
                                  (("2"
                                    (inst?)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (lemma "simplify_cdr")
                                (("3" (inst?) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (expand "length" 1)
                    (("2" (assert)
                      (("2" (expand "length" 1)
                        (("2" (assert) nil nil)) nil))
                      nil))
                    nil)
                   ("3" (assert)
                    (("3" (expand "length" 1) (("3" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((mv_UNS? const-decl "bool" dimension_induction nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (list type-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (n skolem-const-decl "nat" dimension_induction nil)
    (p skolem-const-decl "(mv_UNS?(n))" dimension_induction nil)
    (below type-eq-decl nil naturalnumbers nil)
    (nth def-decl "T" list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (i skolem-const-decl "below(length(cdr(p)))" dimension_induction
       nil)
    (j skolem-const-decl "below(length(cdr(p)))" dimension_induction
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (allnonzero_cdr formula-decl nil standard_form_mult_poly nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (simplified? const-decl "bool" standard_form_mult_poly nil)
    (simplify_cdr formula-decl nil standard_form_mult_poly nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (Unif? const-decl "bool" standard_form_mult_poly nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   shostak))
 (pos_uns_every 0
  (pos_uns_every-1 nil 3812965185
   (""
    (case "FORALL (m: nat, n: posnat, p: (mv_UNS?(n))):
        m = length(p) IMPLIES every(LAMBDA (m: monomial): cons?(m`alpha))(p)")
    (("1" (skeep)
      (("1" (inst?) (("1" (inst -1 "length(p)") nil nil)) nil)) nil)
     ("2" (assert)
      (("2" (hide 2)
        (("2" (induct "m")
          (("1" (skeep)
            (("1" (expand "length")
              (("1" (lift-if -1)
                (("1" (split -1)
                  (("1" (assert)
                    (("1" (expand "every" 1) (("1" (propax) nil nil))
                      nil))
                    nil)
                   ("2" (assert)
                    (("2" (flatten) (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (skeep)
            (("2" (skeep :preds? T)
              (("2" (inst -3 "n" "cdr(p)")
                (("1" (expand "length" -4)
                  (("1" (assert)
                    (("1" (lift-if -4)
                      (("1" (split -4)
                        (("1" (flatten) (("1" (assert) nil nil)) nil)
                         ("2" (flatten)
                          (("2" (assert)
                            (("2" (expand "every" 2)
                              (("2"
                                (assert)
                                (("2"
                                  (expand "mv_UNS?" -3)
                                  (("2"
                                    (flatten)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (lemma "cdr_is_UNS")
                  (("2" (assert)
                    (("2" (inst?)
                      (("2" (assert)
                        (("2" (expand "length" -3)
                          (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (assert)
                  (("3" (expand " length" -3) (("3" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pred type-eq-decl nil defined_types nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (cdr_is_UNS formula-decl nil dimension_induction nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (p skolem-const-decl "(mv_UNS?(n))" dimension_induction nil)
    (n skolem-const-decl "posnat" dimension_induction nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (mv_UNS? const-decl "bool" dimension_induction nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil))
   shostak))
 (pos_uns_cons 0
  (pos_uns_cons-1 nil 3812709962
   ("" (skeep)
    (("" (typepred "p")
      (("" (expand "mv_UNS?")
        (("" (split -1)
          (("1" (typepred "i")
            (("1" (expand "length") (("1" (assert) nil nil)) nil)) nil)
           ("2" (flatten)
            (("2" (expand "Unif?")
              (("2" (split -1)
                (("1" (typepred "i")
                  (("1" (expand "length" -1) (("1" (assert) nil nil))
                    nil))
                  nil)
                 ("2" (inst -1 "0" "i")
                  (("2" (expand "nth" -1 1) (("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (mv_UNS? const-decl "bool" dimension_induction nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (list type-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (Unif? const-decl "bool" standard_form_mult_poly nil)
    (nth def-decl "T" list_props nil))
   shostak))
 (filter_simplified_TCC1 0
  (filter_simplified_TCC1-1 nil 3813319237
   ("" (skeep)
    (("" (lemma "pos_uns_every") (("" (inst -1 "n" "p") nil nil)) nil))
    nil)
   ((pos_uns_every formula-decl nil dimension_induction nil)
    (n skolem-const-decl "posnat" dimension_induction nil)
    (p skolem-const-decl "MultPoly" dimension_induction nil)
    (mv_UNS? const-decl "bool" dimension_induction nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (list type-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil
   (filter_simplified subtype "dimension_induction.p"
    "list[{m: monomial | cons?[nat](m`alpha)}]")))
 (filter_simplified 0
  (filter_simplified-1 nil 3813319237
   ("" (induct "p")
    (("1" (skeep)
      (("1" (expand "filter") (("1" (propax) nil nil)) nil)) nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (expand "filter" +)
          (("2" (split 1)
            (("1" (flatten)
              (("1" (inst -2 "n" "PR")
                (("1" (lemma "simplify_cdr")
                  (("1" (inst -1 "cons(cons1_var, cons2_var)")
                    (("1" (assert)
                      (("1" (lemma "cdr_is_UNS")
                        (("1"
                          (inst -1 "n" "cons(cons1_var, cons2_var)")
                          (("1" (assert)
                            (("1" (case "null?(filter(PR)(cons2_var))")
                              (("1"
                                (assert)
                                (("1"
                                  (expand "simplified?" +)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand " length" +)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand " length" +)
                                          (("1" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (assert)
                                (("2"
                                  (case "null?(cons2_var)")
                                  (("1"
                                    (expand "filter" 1)
                                    (("1" (assert) nil nil))
                                    nil)
                                   ("2"
                                    (expand "simplified?" 3)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (expand "length" 3)
                                        (("2"
                                          (expand "length" 3)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (split 3)
                                                (("1" (propax) nil nil)
                                                 ("2"
                                                  (skeep :preds? T)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (case
                                                       "NOT FORALL (L: list[ {m:monomial | cons?(m`alpha)}]): filter(PR)(L) = filter(L, PR)")
                                                      (("1"
                                                        (hide-all-but
                                                         1)
                                                        (("1"
                                                          (induct-and-simplify
                                                           "L")
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (case "i=0")
                                                        (("1"
                                                          (replace
                                                           -1
                                                           -5)
                                                          (("1"
                                                            (expand
                                                             "nth"
                                                             -5)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (lemma
                                                                 "filter_nth[{m:monomial | cons?(m`alpha)}]")
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "cons2_var"
                                                                   "PR")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (inst-cp
                                                                       -3
                                                                       "cons2_var")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (inst
                                                                           -1
                                                                           "j-1")
                                                                          (("1"
                                                                            (skeep)
                                                                            (("1"
                                                                              (replace
                                                                               -4
                                                                               :dir
                                                                               rl)
                                                                              (("1"
                                                                                (replace
                                                                                 -1)
                                                                                (("1"
                                                                                  (expand
                                                                                   "simplified?"
                                                                                   -13)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "length"
                                                                                       -13)
                                                                                      (("1"
                                                                                        (split
                                                                                         -13)
                                                                                        (("1"
                                                                                          (inst
                                                                                           -1
                                                                                           "0"
                                                                                           "j_1+1")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "nth"
                                                                                               1)
                                                                                              (("1"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (typepred
                                                                                               "j_1")
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "length"
                                                                                                 1)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("3"
                                                                                            (assert)
                                                                                            (("3"
                                                                                              (expand
                                                                                               "length"
                                                                                               1)
                                                                                              (("3"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (replace
                                                                               -3
                                                                               :dir
                                                                               rl)
                                                                              (("2"
                                                                                (expand
                                                                                 "length"
                                                                                 -5)
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (case "j=0")
                                                          (("1"
                                                            (lemma
                                                             "filter_nth[{m:monomial | cons?(m`alpha)}]")
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "cons2_var"
                                                               "PR")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (inst
                                                                   -3
                                                                   "cons2_var")
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (expand
                                                                       "nth"
                                                                       -6)
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         "i-1")
                                                                        (("1"
                                                                          (skeep)
                                                                          (("1"
                                                                            (replace
                                                                             -3
                                                                             :dir
                                                                             rl)
                                                                            (("1"
                                                                              (replace
                                                                               -1)
                                                                              (("1"
                                                                                (expand
                                                                                 "simplified?"
                                                                                 -12)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "length"
                                                                                     -12)
                                                                                    (("1"
                                                                                      (split
                                                                                       -12)
                                                                                      (("1"
                                                                                        (inst
                                                                                         -1
                                                                                         "0"
                                                                                         "j!1+1")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "nth"
                                                                                             1)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (expand
                                                                                           "length"
                                                                                           1)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil)
                                                                                         ("3"
                                                                                          (expand
                                                                                           "length"
                                                                                           1)
                                                                                          (("3"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (replace
                                                                           -2
                                                                           :dir
                                                                           rl)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (expand
                                                                               "length"
                                                                               -3)
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            (("2"
                                                              (expand
                                                               "length"
                                                               -2)
                                                              (("2"
                                                                (expand
                                                                 "length"
                                                                 -3)
                                                                (("2"
                                                                  (expand
                                                                   "simplified?"
                                                                   -8)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (split
                                                                       -8)
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         "i-1"
                                                                         "j-1")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (expand
                                                                               "nth"
                                                                               -5)
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (propax)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (flatten)
              (("2" (assert)
                (("2" (inst?)
                  (("2" (inst?)
                    (("2" (assert)
                      (("2" (lemma "cdr_is_UNS")
                        (("2"
                          (inst -1 "n" "cons(cons1_var, cons2_var)")
                          (("2" (assert)
                            (("2" (lemma "simplify_cdr")
                              (("2"
                                (inst -1 "cons(cons1_var, cons2_var)")
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (lemma "pos_uns_every")
      (("3" (assert)
        (("3" (skeep)
          (("3" (inst?)
            (("3" (assert) (("3" (inst -1 "p") nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((pos_uns_every formula-decl nil dimension_induction nil)
    (simplify_cdr formula-decl nil standard_form_mult_poly nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (length def-decl "nat" list_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (filter def-decl "list[T]" filters nil)
    (j!1 skolem-const-decl "below(length(cons2_var))"
     dimension_induction nil)
    (i skolem-const-decl
       "below(length(cons(cons1_var, filter(PR)(cons2_var))))"
       dimension_induction nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (PR skolem-const-decl
     "[{m: monomial | cons?[nat](m`alpha)} -> bool]"
     dimension_induction nil)
    (j skolem-const-decl
     "below(length(cons(cons1_var, filter(PR)(cons2_var))))"
     dimension_induction nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (j_1 skolem-const-decl "below(length(cons2_var))"
     dimension_induction nil)
    (filter_nth formula-decl nil more_list_props structures)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (cdr_is_UNS formula-decl nil dimension_induction nil)
    (cons2_var skolem-const-decl "list[monomial]" dimension_induction
     nil)
    (cons1_var skolem-const-decl "monomial" dimension_induction nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (filter def-decl "list[T]" filters nil)
    (pred type-eq-decl nil defined_types nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (mv_UNS? const-decl "bool" dimension_induction nil)
    (simplified? const-decl "bool" standard_form_mult_poly nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil))
   shostak))
 (filter_is_UNS_TCC1 0
  (filter_is_UNS_TCC1-1 nil 3812712049
   ("" (lemma "pos_uns_every") (("" (propax) nil nil)) nil)
   ((pos_uns_every formula-decl nil dimension_induction nil)) nil
   (filter_is_UNS subtype "dimension_induction.p"
    "list[{m: monomial | cons?[nat](m`alpha)}]")))
 (filter_is_UNS 0
  (filter_is_UNS-1 nil 3813071425
   ("" (skeep :preds? T)
    (("" (expand "mv_UNS?")
      (("" (case "null?(p)")
        (("1" (assert)
          (("1" (expand "filter" 1 1) (("1" (propax) nil nil)) nil))
          nil)
         ("2" (assert)
          (("2" (case "null?(filter(PR)(p))")
            (("1" (assert) nil nil)
             ("2" (flatten)
              (("2"
                (case "NOT forall (ll: list[{m:monomial | cons?(m`alpha)}]): filter(ll, PR) = filter(PR)(ll)")
                (("1" (hide-all-but 1)
                  (("1" (induct-and-simplify "ll") nil nil)) nil)
                 ("2" (label "filter_eq" -1)
                  (("2" (copy -1)
                    (("2" (hide -2)
                      (("2"
                        (lemma
                         "filter_nth[{m:monomial | cons?(m`alpha)}]")
                        (("2" (inst -1 "p" "PR")
                          (("2" (assert)
                            (("2" (inst -2 "p")
                              (("2"
                                (assert)
                                (("2"
                                  (inst -1 "0")
                                  (("1"
                                    (skeep)
                                    (("1"
                                      (replace -2 -1)
                                      (("1"
                                        (expand "nth" -1 1)
                                        (("1"
                                          (replace -1 4)
                                          (("1"
                                            (expand "Unif?" -4)
                                            (("1"
                                              (copy -4)
                                              (("1"
                                                (label "Unif" -1)
                                                (("1"
                                                  (hide "Unif")
                                                  (("1"
                                                    (inst -4 "0" "j")
                                                    (("1"
                                                      (expand
                                                       "nth"
                                                       -4
                                                       1)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (lemma
                                                           "filter_simplified")
                                                          (("1"
                                                            (inst?)
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "n")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (expand
                                                                   "allnonzero?"
                                                                   +)
                                                                  (("1"
                                                                    (split
                                                                     4)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (expand
                                                                         "Unif?"
                                                                         1)
                                                                        (("1"
                                                                          (skeep)
                                                                          (("1"
                                                                            (lemma
                                                                             "filter_nth[{m:monomial | cons?(m`alpha)}]")
                                                                            (("1"
                                                                              (inst
                                                                               -1
                                                                               "p"
                                                                               "PR")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (inst-cp
                                                                                   -1
                                                                                   "i")
                                                                                  (("1"
                                                                                    (inst-cp
                                                                                     -1
                                                                                     "j!1")
                                                                                    (("1"
                                                                                      (hide
                                                                                       -1)
                                                                                      (("1"
                                                                                        (replace
                                                                                         -5)
                                                                                        (("1"
                                                                                          (skeep
                                                                                           -1)
                                                                                          (("1"
                                                                                            (skeep
                                                                                             -2)
                                                                                            (("1"
                                                                                              (reveal
                                                                                               "Unif")
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -1
                                                                                                 "j!2"
                                                                                                 "j!3")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (skeep
                                                                       :preds?
                                                                       T)
                                                                      (("2"
                                                                        (lemma
                                                                         "filter_nth[{m:monomial | cons?(m`alpha)}]")
                                                                        (("2"
                                                                          (inst
                                                                           -1
                                                                           "p"
                                                                           "PR")
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (inst
                                                                               -1
                                                                               "i")
                                                                              (("2"
                                                                                (skeep)
                                                                                (("2"
                                                                                  (expand
                                                                                   "allnonzero?"
                                                                                   -10)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (split
                                                                                       -10)
                                                                                      (("1"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil)
                                                                                       ("2"
                                                                                        (inst
                                                                                         1
                                                                                         "j!1")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("3"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (replace -1)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (expand "length" 1)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((mv_UNS? const-decl "bool" dimension_induction nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (n skolem-const-decl "posnat" dimension_induction nil)
    (p skolem-const-decl "(mv_UNS?(n))" dimension_induction nil)
    (PR skolem-const-decl
     "[{m: monomial | cons?[nat](m`alpha)} -> bool]"
     dimension_induction nil)
    (below type-eq-decl nil naturalnumbers nil)
    (filter_simplified formula-decl nil dimension_induction nil)
    (allnonzero? const-decl "bool" standard_form_mult_poly nil)
    (Unif? const-decl "bool" standard_form_mult_poly nil)
    (nth def-decl "T" list_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (filter_nth formula-decl nil more_list_props structures)
    (list_induction formula-decl nil list_adt nil)
    (filter def-decl "list[T]" filters nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (pred type-eq-decl nil defined_types nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (filter def-decl "list[T]" filters nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil))
   shostak))
 (pop_car_TCC1 0
  (pop_car_TCC1-1 nil 3812708442 ("" (subtype-tcc) nil nil) nil nil
   (pop_car subtype "dimension_induction.m`alpha"
    "(list_adt[nat].cons?)")))
 (pop_car_is_UNS_TCC1 0
  (pop_car_is_UNS_TCC2-1 nil 3812708442 ("" (subtype-tcc) nil nil) nil
   nil
   (pop_car_is_UNS subtype
    "(number_fields.-)(dimension_induction.n, 1)" "nat")))
 (pop_car_is_UNS 0
  (pop_car_is_UNS-1 nil 3812983781
   ("" (skeep :preds? T)
    (("" (expand "pop_car")
      (("" (expand "mv_UNS?")
        (("" (case "null?(p)")
          (("1" (assert)
            (("1" (expand "map" 1 1) (("1" (propax) nil nil)) nil))
            nil)
           ("2" (assert)
            (("2" (expand "map" 2 1)
              (("2" (flatten)
                (("2" (expand "map" 2 2)
                  (("2" (expand "pop_car" 2 2)
                    (("2" (expand "length" -3)
                      (("2" (assert)
                        (("2" (lift-if -3)
                          (("2" (split -3)
                            (("1" (flatten) (("1" (assert) nil nil))
                              nil)
                             ("2" (flatten)
                              (("2"
                                (assert)
                                (("2"
                                  (lemma
                                   "map_length[{m:monomial | cons?(m`alpha)}, monomial]")
                                  (("2"
                                    (inst?)
                                    (("2"
                                      (expand "Unif?" 3)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (expand "map" 3 1)
                                          (("2"
                                            (split 3)
                                            (("1"
                                              (skeep)
                                              (("1"
                                                (rewrite
                                                 "map_nth_rw"
                                                 1)
                                                (("1"
                                                  (rewrite
                                                   "map_nth_rw"
                                                   1)
                                                  (("1"
                                                    (expand "Unif?")
                                                    (("1"
                                                      (inst -4 "i" "j")
                                                      (("1"
                                                        (expand
                                                         "pop_car"
                                                         1)
                                                        (("1"
                                                          (expand
                                                           "length"
                                                           -4)
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand "allnonzero?")
                                              (("2"
                                                (split -5)
                                                (("1" (propax) nil nil)
                                                 ("2"
                                                  (expand "map" 2 1)
                                                  (("2"
                                                    (split 2)
                                                    (("1"
                                                      (skeep)
                                                      (("1"
                                                        (rewrite
                                                         "map_nth_rw"
                                                         -1)
                                                        (("1"
                                                          (inst 1 "i")
                                                          (("1"
                                                            (expand
                                                             "pop_car")
                                                            (("1"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (expand "simplified?")
                                              (("3"
                                                (expand "map" 1 1)
                                                (("3"
                                                  (split -6)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (flatten)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (split -1)
                                                        (("1"
                                                          (split 2)
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (skeep)
                                                            (("2"
                                                              (rewrite
                                                               "map_nth_rw"
                                                               -1)
                                                              (("2"
                                                                (rewrite
                                                                 "map_nth_rw"
                                                                 -1)
                                                                (("2"
                                                                  (inst
                                                                   -2
                                                                   "i"
                                                                   "j")
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (expand
                                                                         "pop_car"
                                                                         -1)
                                                                        (("2"
                                                                          (lemma
                                                                           "every_nth[{m:monomial|cons?(m`alpha)}]")
                                                                          (("2"
                                                                            (inst
                                                                             -1
                                                                             "LAMBDA ((m: monomial | cons?(m`alpha))): car(m`alpha) = k"
                                                                             "p")
                                                                            (("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (hide
                                                                                 -2)
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (inst-cp
                                                                                     -1
                                                                                     "i")
                                                                                    (("2"
                                                                                      (inst
                                                                                       -1
                                                                                       "j")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (case
                                                                                           "NOT nth(p, i)`alpha = cons(car(nth(p, i)`alpha),   cdr(nth(p, i)`alpha))")
                                                                                          (("1"
                                                                                            (decompose-equality
                                                                                             1)
                                                                                            nil
                                                                                            nil)
                                                                                           ("2"
                                                                                            (case
                                                                                             "NOT nth(p, j)`alpha = cons(car(nth(p, j)`alpha),   cdr(nth(p, j)`alpha))")
                                                                                            (("1"
                                                                                              (decompose-equality
                                                                                               1)
                                                                                              nil
                                                                                              nil)
                                                                                             ("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pop_car const-decl "MultPoly" dimension_induction nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (list type-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (length def-decl "nat" list_props nil)
    (map_length formula-decl nil more_map_props nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (Unif? const-decl "bool" standard_form_mult_poly nil)
    (simplified? const-decl "bool" standard_form_mult_poly nil)
    (every_nth formula-decl nil list_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (list_cons_extensionality formula-decl nil list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (allnonzero? const-decl "bool" standard_form_mult_poly nil)
    (map_nth_rw formula-decl nil more_map_props nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (pop_car const-decl "monomial" dimension_induction nil)
    (mv_UNS? const-decl "bool" dimension_induction nil))
   shostak))
 (largest_car_alpha_TCC1 0
  (largest_car_alpha_TCC1-1 nil 3812708442 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (mv_UNS? const-decl "bool" dimension_induction nil)
    (Unif? const-decl "bool" standard_form_mult_poly nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (largest_car_alpha subtype "dimension_induction.p"
    "(list_adt[monomial].cons?)")))
 (largest_car_alpha_TCC2 0
  (largest_car_alpha_TCC2-1 nil 3812708442 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (mv_UNS? const-decl "bool" dimension_induction nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (Unif? const-decl "bool" standard_form_mult_poly nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (< const-decl "bool" reals nil)
    (n!1 skolem-const-decl "posnat" dimension_induction nil)
    (length def-decl "nat" list_props nil)
    (p!1 skolem-const-decl "(mv_UNS?(n!1))" dimension_induction nil)
    (below type-eq-decl nil naturalnumbers nil)
    (allnonzero? const-decl "bool" standard_form_mult_poly nil))
   nil
   (largest_car_alpha subtype
    "list_adt[monomial].car(dimension_induction.p)`alpha"
    "(list_adt[real].cons?)")))
 (largest_car_alpha_TCC3 0
  (largest_car_alpha_TCC3-1 nil 3812708442
   ("" (lemma "cdr_is_UNS")
    (("" (skeep) (("" (inst?) (("" (assert) nil nil)) nil)) nil)) nil)
   ((mv_UNS? const-decl "bool" dimension_induction nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (list type-decl nil list_adt nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (cdr_is_UNS formula-decl nil dimension_induction nil))
   nil
   (largest_car_alpha subtype
    "list_adt[monomial].cdr(dimension_induction.p)"
    "(dimension_induction.mv_UNS?(dimension_induction.n))")))
 (largest_car_alpha_TCC4 0
  (largest_car_alpha_TCC4-1 nil 3812708442
   ("" (termination-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (mv_UNS? const-decl "bool" dimension_induction nil)
    (Unif? const-decl "bool" standard_form_mult_poly nil)
    (allnonzero? const-decl "bool" standard_form_mult_poly nil)
    (/= const-decl "boolean" notequal nil)
    (simplified? const-decl "bool" standard_form_mult_poly nil)
    (<< adt-def-decl "(strict_well_founded?[list])" list_adt nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (largest_car_alpha termination
    "dimension_induction.largest_car_alpha(dimension_induction.n, list_adt[monomial].cdr(dimension_induction.p))"
    "nil")))
 (largest_car_alpha_TCC5 0
  (largest_car_alpha_TCC5-1 nil 3812708442
   ("" (skeep)
    (("" (assert)
      (("" (typepred "v(n, cdr[monomial](p))")
        (("1" (assert)
          (("1" (expand "max")
            (("1" (lift-if 2)
              (("1" (split 2)
                (("1" (flatten) (("1" (assert) nil nil)) nil)
                 ("2" (flatten)
                  (("2" (assert)
                    (("2" (typepred "car[monomial](p)`alpha")
                      (("2" (assert)
                        (("2" (expand "every")
                          (("2" (lift-if -1)
                            (("2" (split -1)
                              (("1"
                                (assert)
                                (("1"
                                  (typepred "p")
                                  (("1"
                                    (expand "mv_UNS?")
                                    (("1" (propax) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (assert)
                                  (("2"
                                    (split 3)
                                    (("1" (propax) nil nil)
                                     ("2" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (assert)
          (("2" (expand "<<") (("2" (propax) nil nil)) nil)) nil)
         ("3" (assert)
          (("3" (lemma "cdr_is_UNS")
            (("3" (inst?) (("3" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (cdr_is_UNS formula-decl nil dimension_induction nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (mv_UNS? const-decl "bool" dimension_induction nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (pred type-eq-decl nil defined_types nil)
    (strict_well_founded? const-decl "bool" orders nil)
    (<< adt-def-decl "(strict_well_founded?[list])" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil))
   nil
   (largest_car_alpha subtype
    "real_defs.max(list_adt[real].car(list_adt[monomial].car(dimension_induction.p)`alpha), dimension_induction.largest_car_alpha(dimension_induction.n, list_adt[monomial].cdr(dimension_induction.p)))"
    "nat")))
 (largest_car_is_nth_TCC1 0
  (largest_car_is_nth_TCC1-1 nil 3812708442
   ("" (lemma "pos_uns_cons")
    (("" (assert)
      (("" (skeep) (("" (skeep) (("" (inst?) nil nil)) nil)) nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (mv_UNS? const-decl "bool" dimension_induction nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (pos_uns_cons formula-decl nil dimension_induction nil))
   nil
   (largest_car_is_nth subtype
    "list_props[monomial].nth(dimension_induction.p, dimension_induction.j)`alpha"
    "(list_adt[real].cons?)")))
 (largest_car_is_nth 0
  (largest_car_is_nth-1 nil 3813325829
   (""
    (case "FORALL (m:nat, n: posnat, p: (mv_UNS?(n))):
        m=length(p) and cons?(p) IMPLIES
         EXISTS (j: below(length(p))):
           largest_car_alpha(n, p) = car(nth(p, j)`alpha)")
    (("1" (skeep)
      (("1" (inst -1 "length(p)" "n" "p") (("1" (assert) nil nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (induct "m")
        (("1" (skeep)
          (("1" (expand "length" -1) (("1" (assert) nil nil)) nil))
          nil)
         ("2" (skeep)
          (("2" (skeep)
            (("2" (expand "largest_car_alpha" 1)
              (("2" (assert)
                (("2" (case "null?(cdr(p))")
                  (("1" (expand "largest_car_alpha" 1)
                    (("1" (assert)
                      (("1" (expand "max" 1)
                        (("1" (assert)
                          (("1" (inst 1 "0")
                            (("1" (assert)
                              (("1"
                                (lift-if 1)
                                (("1"
                                  (split 1)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (typepred "car(p)`alpha")
                                        (("1"
                                          (expand "every" -1)
                                          (("1"
                                            (lift-if -1)
                                            (("1"
                                              (split -1)
                                              (("1"
                                                (lemma "pos_uns_cons")
                                                (("1"
                                                  (inst -1 "n" "p" "0")
                                                  (("1"
                                                    (expand "nth" -1)
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (case
                                                     "not (forall (r:real): r<0 and r>=0 IMPLIES FALSE)")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (skeep)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (inst
                                                       -1
                                                       "car(car(p)`alpha)")
                                                      (("2"
                                                        (replace -5)
                                                        (("2"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (flatten)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (expand "nth" 2)
                                        (("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (inst -1 "n" "cdr(p)")
                    (("1" (assert)
                      (("1" (expand "length" -2)
                        (("1" (assert)
                          (("1" (skeep :preds? T)
                            (("1" (expand "max" 2)
                              (("1"
                                (case
                                 "car(car(p)`alpha) < largest_car_alpha(n, cdr(p))")
                                (("1"
                                  (assert)
                                  (("1"
                                    (inst 2 "j+1")
                                    (("1"
                                      (expand "nth" 2)
                                      (("1" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (assert)
                                  (("2"
                                    (inst 3 "0")
                                    (("2"
                                      (expand "nth" 3)
                                      (("2" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (lemma "pos_uns_cons")
                                  (("3"
                                    (inst -1 "n" "p" "0")
                                    (("3"
                                      (expand "nth" -1)
                                      (("3" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (lemma "cdr_is_UNS")
                      (("2" (inst -1 "n" "p") (("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (skeep)
          (("3" (lemma "pos_uns_cons")
            (("3" (inst -1 "n" "p" "_") nil nil)) nil))
          nil))
        nil))
      nil)
     ("3" (hide 2)
      (("3" (skeep)
        (("3" (lemma "pos_uns_cons")
          (("3" (skeep) (("3" (inst?) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (pos_uns_cons formula-decl nil dimension_induction nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (FALSE const-decl "bool" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (cdr_is_UNS formula-decl nil dimension_induction nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (p skolem-const-decl "(mv_UNS?(n))" dimension_induction nil)
    (n skolem-const-decl "posnat" dimension_induction nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (mv_UNS? const-decl "bool" dimension_induction nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (largest_car_alpha def-decl "nat" dimension_induction nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil))
   shostak))
 (largest_car_is_largest_TCC1 0
  (largest_car_is_largest_TCC1-1 nil 3812708442
   ("" (lemma "pos_uns_cons") (("" (propax) nil nil)) nil)
   ((pos_uns_cons formula-decl nil dimension_induction nil)) nil
   (largest_car_is_largest subtype
    "list_props[monomial].nth(dimension_induction.p, dimension_induction.i)`alpha"
    "(list_adt[real].cons?)")))
 (largest_car_is_largest 0
  (largest_car_is_largest-1 nil 3813326911
   (""
    (case " FORALL (m:nat, n: posnat, p: (mv_UNS?(n))):
        length(p) = m IMPLIES FORALL (i: below(length(p))):
          largest_car_alpha(n, p) >= car(nth(p, i)`alpha)")
    (("1" (skeep) (("1" (inst -1 "length(p) " "n" "p") nil nil)) nil)
     ("2" (hide 2)
      (("2" (induct "m")
        (("1" (skeep)
          (("1" (skeep :preds? T) (("1" (assert) nil nil)) nil)) nil)
         ("2" (skeep)
          (("2" (skeep)
            (("2" (skeep :preds? T)
              (("2" (expand "largest_car_alpha" 1)
                (("2" (assert)
                  (("2" (expand "length" -3)
                    (("2" (lift-if -3)
                      (("2" (split -3)
                        (("1" (flatten) (("1" (assert) nil nil)) nil)
                         ("2" (flatten)
                          (("2" (assert)
                            (("2" (expand "max" 2)
                              (("2"
                                (lift-if 2)
                                (("2"
                                  (split 2)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (case "i=0")
                                      (("1"
                                        (replace -1)
                                        (("1"
                                          (expand "nth" 1)
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (inst -4 "n" "cdr(p)")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (inst -4 "i-1")
                                            (("2"
                                              (expand "nth" 2)
                                              (("2" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (flatten)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (flip-ineq 1)
                                        (("2"
                                          (inst -4 "n" "cdr(p)")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (case "i=0")
                                              (("1"
                                                (replace -1)
                                                (("1"
                                                  (expand " nth" 1)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (inst -4 "i-1")
                                                (("1"
                                                  (expand "nth" 2)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (hide 2)
          (("3" (lemma "pos_uns_cons")
            (("3" (skeep) (("3" (inst -1 "n" "p" "_") nil nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (skeep)
      (("3" (lemma "pos_uns_cons")
        (("3" (inst -1 "n" "p" " _") nil nil)) nil))
      nil))
    nil)
   ((pos_uns_cons formula-decl nil dimension_induction nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (i skolem-const-decl "below(length(p))" dimension_induction nil)
    (p skolem-const-decl "(mv_UNS?(n))" dimension_induction nil)
    (n skolem-const-decl "posnat" dimension_induction nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (mv_UNS? const-decl "bool" dimension_induction nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (largest_car_alpha def-decl "nat" dimension_induction nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil))
   shostak))
 (list_upto_TCC1 0
  (list_upto_TCC1-1 nil 3812708442 ("" (subtype-tcc) nil nil)
   ((listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (list_upto subtype "dimension_induction.i"
    "below[length[upto(n)](L)]")))
 (list_upto_TCC2 0
  (list_upto_TCC2-1 nil 3812708442 ("" (subtype-tcc) nil nil) nil nil
   (list_upto subtype "0"
    "naturalnumbers.upto(dimension_induction.n)")))
 (list_upto_TCC3 0
  (list_upto_TCC3-1 nil 3812708442 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (length_singleton formula-decl nil more_list_props structures))
   nil
   (list_upto subtype "(: 0 :)"
    "{L: list_adt[naturalnumbers.upto(dimension_induction.n)].list | booleans.AND(list_props[naturalnumbers.upto(dimension_induction.n)].length(L) = (number_fields.+)(1, dimension_induction.n), FORALL (i: naturalnumbers.upto(dimension_induction.n)): list_props[naturalnumbers.upto(dimension_induction.n)].nth(L, i) = i)}")))
 (list_upto_TCC4 0
  (list_upto_TCC4-1 nil 3812708442 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (list_upto subtype "(number_fields.-)(dimension_induction.n, 1)"
    "nat")))
 (list_upto_TCC5 0
  (list_upto_TCC5-1 nil 3812708442 ("" (termination-tcc) nil nil) nil
   nil
   (list_upto termination
    "dimension_induction.list_upto((number_fields.-)(dimension_induction.n, 1))"
    "nil")))
 (list_upto_TCC6 0
  (list_upto_TCC6-1 nil 3812708442
   ("" (skeep)
    (("" (typepred "v(n - 1)")
      (("1" (assert)
        (("1" (rewrite "every_nth")
          (("1" (rewrite "every_nth")
            (("1" (assert)
              (("1" (skeep)
                (("1" (inst?)
                  (("1" (flatten) (("1" (assert) nil nil)) nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (assert) nil nil))
      nil))
    nil)
   ((nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (<= const-decl "bool" reals nil) (>= const-decl "bool" reals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (every_nth formula-decl nil list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil))
   nil
   (list_upto subtype
    "dimension_induction.list_upto((number_fields.-)(dimension_induction.n, 1))"
    "list[upto(n)]")))
 (list_upto_TCC7 0
  (list_upto_TCC7-1 nil 3812708442
   ("" (skeep)
    (("" (expand "every")
      (("" (expand "every") (("" (propax) nil nil)) nil)) nil))
    nil)
   ((listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (every adt-def-decl "boolean" list_adt nil))
   nil
   (list_upto subtype "(: dimension_induction.n :)" "list[upto(n)]")))
 (list_upto_TCC8 0
  (list_upto_TCC8-1 nil 3812708442
   ("" (skeep)
    (("" (splash 2)
      (("1" (skeep)
        (("1" (rewrite "nth_append")
          (("1" (typepred "v(n - 1)")
            (("1" (lift-if 1)
              (("1" (split 1)
                (("1" (flatten)
                  (("1" (assert) (("1" (inst -4 "i") nil nil)) nil))
                  nil)
                 ("2" (flatten)
                  (("2" (typepred "i")
                    (("2" (case "NOT i=n")
                      (("1" (assert) nil nil)
                       ("2" (replace -1)
                        (("2" (replace -4)
                          (("2" (assert)
                            (("2" (expand "nth" 2)
                              (("2" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (assert) nil nil))
            nil))
          nil))
        nil)
       ("2" (assert)
        (("2" (lemma "length_append[upto(n)]")
          (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (append def-decl "list[T]" list_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nth_append formula-decl nil more_list_props structures)
    (length_singleton formula-decl nil more_list_props structures)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (length_append formula-decl nil list_props nil))
   nil
   (list_upto subtype
    "list_props[naturalnumbers.upto(dimension_induction.n)].append(dimension_induction.list_upto((number_fields.-)(dimension_induction.n, 1)), (: dimension_induction.n :))"
    "{L: list_adt[naturalnumbers.upto(dimension_induction.n)].list | booleans.AND(list_props[naturalnumbers.upto(dimension_induction.n)].length(L) = (number_fields.+)(1, dimension_induction.n), FORALL (i: naturalnumbers.upto(dimension_induction.n)): list_props[naturalnumbers.upto(dimension_induction.n)].nth(L, i) = i)}")))
 (poly_filter_xk_TCC1 0
  (poly_filter_xk_TCC1-1 nil 3812708442
   ("" (lemma "pos_uns_every")
    (("" (assert) (("" (skeep) (("" (inst -1 "n" "p") nil nil)) nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (mv_UNS? const-decl "bool" dimension_induction nil)
    (pos_uns_every formula-decl nil dimension_induction nil))
   nil
   (poly_filter_xk subtype "dimension_induction.p"
    "list[{m: monomial | cons?[nat](m`alpha)}]")))
 (poly_filter_xk_TCC2 0
  (poly_filter_xk_TCC2-1 nil 3812708442
   ("" (skeep)
    (("" (lemma "filter_is_UNS")
      ((""
        (inst -1 "n" "p" " LAMBDA ((m: monomial | cons?[nat](m`alpha))):
                     car[real](m`alpha) = k")
        (("" (assert)
          (("" (expand "extend") (("" (postpone) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((filter_is_UNS formula-decl nil dimension_induction nil)
    (largest_car_alpha def-decl "nat" dimension_induction nil)
    (<= const-decl "bool" reals nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (mv_UNS? const-decl "bool" dimension_induction nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (list type-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   nil
   (poly_filter_xk subtype
    "filters[{m: standard_form_mult_poly.monomial | list_adt[nat].cons?(m`alpha)}].filter(LAMBDA ((m: standard_form_mult_poly.monomial | list_adt[nat].cons?(m`alpha))): list_adt[real].car(m`alpha) = dimension_induction.k)(dimension_induction.p)"
    "(dimension_induction.mv_UNS?(dimension_induction.n))")))
 (poly_coeff_xk_TCC1 0
  (poly_coeff_xk_TCC1-1 nil 3812708442 ("" (subtype-tcc) nil nil) nil
   nil
   (poly_coeff_xk subtype "(number_fields.-)(dimension_induction.n, 1)"
    "nat")))
 (poly_coeff_xk_TCC2 0
  (poly_coeff_xk_TCC2-1 nil 3812708442
   ("" (skeep)
    (("" (expand "poly_filter_xk")
      (("" (typepred "p")
        (("" (lemma "every_filter[{m: monomial | cons?(m`alpha)}]")
          ((""
            (inst -1 "p" "LAMBDA ((m: monomial | cons?(m`alpha))):
                               car(m`alpha) = k")
            (("" (lemma "pop_car_is_UNS")
              (("" (assert)
                (("" (lemma "filter_is_UNS")
                  ((""
                    (inst -1 "n" "p"
                     "LAMBDA ((m: monomial | cons?(m`alpha))):
                               car(m`alpha) = k")
                    ((""
                      (inst -2 "n"
                       "filter(LAMBDA ((m: monomial | cons?(m`alpha))):
                       car(m`alpha) = k)
                    (p)" "k")
                      (("" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((poly_filter_xk const-decl "(mv_UNS?(n))" dimension_induction nil)
    (every_filter formula-decl nil list_lemmas nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (pop_car_is_UNS formula-decl nil dimension_induction nil)
    (filter_is_UNS formula-decl nil dimension_induction nil)
    (filter def-decl "list[T]" filters nil)
    (pred type-eq-decl nil defined_types nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (largest_car_alpha def-decl "nat" dimension_induction nil)
    (<= const-decl "bool" reals nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (mv_UNS? const-decl "bool" dimension_induction nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil))
   nil
   (poly_coeff_xk subtype
    "dimension_induction.pop_car(dimension_induction.n, dimension_induction.poly_filter_xk(dimension_induction.n, dimension_induction.p, dimension_induction.k))"
    "(dimension_induction.mv_UNS?((number_fields.-)(dimension_induction.n, 1)))")))
 (poly_in_polys_TCC1 0
  (poly_in_polys_TCC1-1 nil 3812708442 ("" (subtype-tcc) nil nil)
   ((listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (mv_UNS? const-decl "bool" dimension_induction nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil))
   nil
   (poly_in_polys subtype "dimension_induction.k"
    "{k: naturalnumbers.nat | reals.<=(k, dimension_induction.largest_car_alpha(dimension_induction.n, dimension_induction.p))}")))
 (poly_in_polys_single_TCC1 0
  (poly_in_polys_single_TCC1-1 nil 3813410033
   ("" (skeep) (("" (lemma "single_UNS") (("" (inst?) nil nil)) nil))
    nil)
   ((single_UNS formula-decl nil dimension_induction nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (mon_UNS? const-decl "bool" dimension_induction nil))
   nil
   (poly_in_polys_single subtype "(: dimension_induction.m :)"
    "{p: standard_form_mult_poly.MultPoly | dimension_induction.mv_UNS?(dimension_induction.n)(p)}")))
 (poly_in_polys_single_TCC2 0
  (poly_in_polys_single_TCC3-1 nil 3813410033
   ("" (skeep)
    (("" (expand "every")
      (("" (expand "mv_UNS?")
        (("" (expand "every") (("" (propax) nil nil)) nil)) nil))
      nil))
    nil)
   ((every adt-def-decl "boolean" list_adt nil)
    (mv_UNS? const-decl "bool" dimension_induction nil))
   nil
   (poly_in_polys_single subtype
    "(: list_adt[(dimension_induction.mon_UNS?((number_fields.-)(dimension_induction.n, 1)))].null :)"
    "list[(mv_UNS?(n - 1))]")))
 (poly_in_polys_single_TCC3 0
  (poly_in_polys_single_TCC2-1 nil 3813410033
   ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (mon_UNS? const-decl "bool" dimension_induction nil)
    (/= const-decl "boolean" notequal nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil))
   nil
   (poly_in_polys_single subtype "dimension_induction.m`alpha"
    "(list_adt[nat].cons?)")))
 (poly_in_polys_single 0
  (poly_in_polys_single-1 nil 3813413224
   ("" (skeep)
    (("" (expand "poly_in_polys")
      (("" (case "NOT largest_car_alpha(n,(: m :)) = car(m`alpha)")
        (("1" (expand "largest_car_alpha" 1)
          (("1" (expand "largest_car_alpha" 1)
            (("1" (assert)
              (("1" (expand "max")
                (("1" (assert)
                  (("1" (typepred "m`alpha")
                    (("1" (expand "every" -1)
                      (("1" (lift-if -1)
                        (("1" (split -1)
                          (("1" (typepred "m")
                            (("1" (expand "mon_UNS?")
                              (("1"
                                (expand "length")
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (assert)
                              (("2"
                                (lift-if 2)
                                (("2"
                                  (assert)
                                  (("2"
                                    (split 2)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (case
                                         "NOT forall (rr:real): (rr<0 AND rr>=0) IMPLIES FALSE")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (skeep)
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (inst -1 "car(m`alpha)")
                                          (("2"
                                            (replace -1)
                                            (("2" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (lemma "list_extensionality[(mv_UNS?(n-1))]")
          (("2" (inst?)
            (("2" (flatten)
              (("2" (hide -1)
                (("2" (assert)
                  (("2"
                    (case "length(map(LAMBDA (k: upto(largest_car_alpha(n, (: m :)))):
                   poly_coeff_xk(n, (: m :), k))
                (list_upto(largest_car_alpha(n, (: m :)))))
       =
       length(append[(mv_UNS?(n - 1))]
                  ((: null[(mon_UNS?(n - 1))] :) ^ car[nat](m`alpha),
                   (: (: pop_car(m) :) :)))")
                    (("1" (assert)
                      (("1" (hide 2)
                        (("1" (skeep :preds? T)
                          (("1" (rewrite "map_nth_rw")
                            (("1" (assert)
                              (("1"
                                (rewrite "map_length")
                                (("1"
                                  (expand "poly_coeff_xk")
                                  (("1"
                                    (expand "poly_filter_xk")
                                    (("1"
                                      (replace -3)
                                      (("1"
                                        (typepred
                                         "list_upto(car(m`alpha))")
                                        (("1"
                                          (inst -3 "n_1")
                                          (("1"
                                            (replace -3)
                                            (("1"
                                              (hide -1)
                                              (("1"
                                                (expand "filter")
                                                (("1"
                                                  (expand "filter")
                                                  (("1"
                                                    (rewrite
                                                     "nth_append")
                                                    (("1"
                                                      (rewrite
                                                       "length_appendn")
                                                      (("1"
                                                        (expand
                                                         "length"
                                                         1
                                                         1)
                                                        (("1"
                                                          (expand
                                                           "length"
                                                           1
                                                           1)
                                                          (("1"
                                                            (expand
                                                             "length"
                                                             1)
                                                            (("1"
                                                              (expand
                                                               "length"
                                                               1)
                                                              (("1"
                                                                (replace
                                                                 -1)
                                                                (("1"
                                                                  (lift-if
                                                                   1)
                                                                  (("1"
                                                                    (split
                                                                     1)
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (replace
                                                                         -1)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (expand
                                                                             "nth"
                                                                             1)
                                                                            (("1"
                                                                              (expand
                                                                               "pop_car"
                                                                               1
                                                                               1)
                                                                              (("1"
                                                                                (expand
                                                                                 "map"
                                                                                 1)
                                                                                (("1"
                                                                                  (expand
                                                                                   "map"
                                                                                   1)
                                                                                  (("1"
                                                                                    (propax)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (expand
                                                                         "pop_car"
                                                                         2
                                                                         1)
                                                                        (("2"
                                                                          (expand
                                                                           "map"
                                                                           2)
                                                                          (("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (lift-if
                                                                               2)
                                                                              (("2"
                                                                                (split
                                                                                 2)
                                                                                (("1"
                                                                                  (flatten)
                                                                                  (("1"
                                                                                    (rewrite
                                                                                     "nth_appendn")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "length"
                                                                                         1)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "length"
                                                                                           1)
                                                                                          (("1"
                                                                                            (typepred
                                                                                             "rem(1)(n_1)")
                                                                                            (("1"
                                                                                              (case
                                                                                               "not rem(1)(n_1) =0")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil)
                                                                                               ("2"
                                                                                                (replace
                                                                                                 -1)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "nth"
                                                                                                   1)
                                                                                                  (("2"
                                                                                                    (propax)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (flatten)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (case
                                                                                       "forall (N:nat): n_1<1+ N IMPLIES (n_1<N OR n_1=N) ")
                                                                                      (("1"
                                                                                        (inst
                                                                                         -1
                                                                                         "car(m`alpha)")
                                                                                        (("1"
                                                                                          (split
                                                                                           -1)
                                                                                          (("1"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil)
                                                                                           ("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil)
                                                                                           ("3"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (skeep)
                                                                                        (("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (replace -1)
                                                      (("2"
                                                        (rewrite
                                                         "length_appendn")
                                                        (("2"
                                                          (expand
                                                           " length"
                                                           1)
                                                          (("2"
                                                            (expand
                                                             " length"
                                                             1)
                                                            (("2"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (rewrite "map_length" -1) nil nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide 2)
                      (("2" (rewrite "map_length")
                        (("2" (hide 2)
                          (("2" (replace -1)
                            (("2" (typepred "list_upto(car(m`alpha))")
                              (("2"
                                (replaces -2)
                                (("2"
                                  (hide (-1 -2))
                                  (("2"
                                    (rewrite "length_append")
                                    (("2"
                                      (rewrite "length_appendn")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (expand "length" 1)
                                          (("2"
                                            (expand "length" 1)
                                            (("2" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((poly_in_polys const-decl "list[(mv_UNS?(n - 1))]"
     dimension_induction nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (list_extensionality formula-decl nil more_list_props structures)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (length_append formula-decl nil list_props nil)
    (TRUE const-decl "bool" booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (n skolem-const-decl "posnat" dimension_induction nil)
    (m skolem-const-decl "(mon_UNS?(n))" dimension_induction nil)
    (n_1 skolem-const-decl
     "below(length(map(LAMBDA (k: upto(largest_car_alpha(n, (: m :)))):
                   poly_coeff_xk(n, (: m :), k))
                (list_upto(largest_car_alpha(n, (: m :))))))"
     dimension_induction nil)
    (length_appendn formula-decl nil more_list_props structures)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (rem const-decl "{r: mod(b) | EXISTS q: x = b * q + r}"
         modulo_arithmetic nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (mod nonempty-type-eq-decl nil euclidean_division nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (nth_appendn formula-decl nil more_list_props structures)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (pop_car const-decl "MultPoly" dimension_induction nil)
    (length_singleton formula-decl nil more_list_props structures)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nth_append formula-decl nil more_list_props structures)
    (filter def-decl "list[T]" filters nil)
    (poly_filter_xk const-decl "(mv_UNS?(n))" dimension_induction nil)
    (map_length formula-decl nil more_map_props nil)
    (map_nth_rw formula-decl nil more_map_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (pop_car const-decl "monomial" dimension_induction nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (^ def-decl "list[T]" more_list_props structures)
    (append def-decl "list[T]" list_props nil)
    (list_upto def-decl "{L: list[upto(n)] |
   length(L) = n + 1 AND FORALL (i: upto(n)): nth(L, i) = i}"
     dimension_induction nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (poly_coeff_xk const-decl "(mv_UNS?(n - 1))" dimension_induction
     nil)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (length def-decl "nat" list_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (FALSE const-decl "bool" booleans nil)
    (< const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (mv_UNS? const-decl "bool" dimension_induction nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (largest_car_alpha def-decl "nat" dimension_induction nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (mon_UNS? const-decl "bool" dimension_induction nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil))
   shostak))
 (pip_length 0
  (pip_length-1 nil 3813327589
   ("" (skeep)
    (("" (expand "poly_in_polys")
      (("" (rewrite "map_length")
        (("" (typepred "list_upto(largest_car_alpha(n, p))")
          (("" (propax) nil nil)) nil))
        nil))
      nil))
    nil)
   ((poly_in_polys const-decl "list[(mv_UNS?(n - 1))]"
     dimension_induction nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (largest_car_alpha def-decl "nat" dimension_induction nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (mv_UNS? const-decl "bool" dimension_induction nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (list type-decl nil list_adt nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list_upto def-decl "{L: list[upto(n)] |
   length(L) = n + 1 AND FORALL (i: upto(n)): nth(L, i) = i}"
     dimension_induction nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (poly_coeff_xk const-decl "(mv_UNS?(n - 1))" dimension_induction
     nil)
    (map_length formula-decl nil more_map_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   shostak))
 (pip_cons_nth_TCC1 0
  (pip_cons_nth_TCC1-1 nil 3812802330
   ("" (skeep)
    (("" (assert)
      (("" (expand "poly_in_polys")
        (("" (rewrite "map_length")
          (("" (typepred "list_upto(largest_car_alpha(n, p))")
            (("" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (map_length formula-decl nil more_map_props nil)
    (poly_coeff_xk const-decl "(mv_UNS?(n - 1))" dimension_induction
     nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (list_upto def-decl "{L: list[upto(n)] |
   length(L) = n + 1 AND FORALL (i: upto(n)): nth(L, i) = i}"
     dimension_induction nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (mv_UNS? const-decl "bool" dimension_induction nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (largest_car_alpha def-decl "nat" dimension_induction nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (poly_in_polys const-decl "list[(mv_UNS?(n - 1))]"
     dimension_induction nil))
   nil
   (pip_cons_nth subtype
    "dimension_induction.largest_car_alpha(dimension_induction.n, dimension_induction.p)"
    "below[length[(mv_UNS?(n - 1))](poly_in_polys(n, p))]")))
 (pip_cons_nth 0
  (pip_cons_nth-1 nil 3813327750
   ("" (skeep)
    (("" (expand "poly_in_polys")
      (("" (rewrite "map_nth_rw")
        (("" (typepred "list_upto(largest_car_alpha(n, p))")
          (("" (hide -1)
            (("" (inst -2 " largest_car_alpha(n, p)")
              (("" (replace -2)
                (("" (expand "poly_coeff_xk")
                  (("" (expand "pop_car")
                    (("" (expand "map" 1)
                      (("" (assert)
                        (("" (lift-if 1)
                          (("" (split 1)
                            (("1" (flatten)
                              (("1"
                                (lemma
                                 "filter_exists_cons[{m:monomial|cons?(m`alpha)}]")
                                (("1"
                                  (expand "poly_filter_xk")
                                  (("1"
                                    (inst?)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (lemma "largest_car_is_nth")
                                        (("1"
                                          (inst -1 "n" "p")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (skeep)
                                              (("1"
                                                (inst 1 "j")
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((poly_in_polys const-decl "list[(mv_UNS?(n - 1))]"
     dimension_induction nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (poly_filter_xk const-decl "(mv_UNS?(n))" dimension_induction nil)
    (largest_car_is_nth formula-decl nil dimension_induction nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (filter_exists_cons formula-decl nil list_lemmas nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (pop_car const-decl "MultPoly" dimension_induction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (largest_car_alpha def-decl "nat" dimension_induction nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (mv_UNS? const-decl "bool" dimension_induction nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (list type-decl nil list_adt nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (<= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (list_upto def-decl "{L: list[upto(n)] |
   length(L) = n + 1 AND FORALL (i: upto(n)): nth(L, i) = i}"
     dimension_induction nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (poly_coeff_xk const-decl "(mv_UNS?(n - 1))" dimension_induction
     nil)
    (map_nth_rw formula-decl nil more_map_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   shostak))
 (partial_eval_pip_TCC1 0
  (partial_eval_pip_TCC1-1 nil 3812708442
   ("" (skeep)
    (("" (lemma "max_length_UNSge")
      (("" (inst?) (("" (assert) nil nil)) nil)) nil))
    nil)
   ((max_length_UNSge formula-decl nil dimension_induction nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (mv_UNS? const-decl "bool" dimension_induction nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (list type-decl nil list_adt nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil))
   nil
   (partial_eval_pip subtype "dimension_induction.vals"
    "{l: list_adt[real].list | reals.>=(list_props[real].length(l), standard_form_mult_poly.max_length(dimension_induction.pxk))}")))
 (partial_eval_pip_TCC2 0
  (partial_eval_pip_TCC2-1 nil 3812708442
   ("" (skeep :preds? T)
    (("" (rewrite "map_length")
      (("" (lemma "max_length_UNSge")
        (("" (assert)
          (("" (skeep) (("" (inst?) (("" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (map_length formula-decl nil more_map_props nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (length def-decl "nat" list_props nil)
    (max_length def-decl "nat" standard_form_mult_poly nil)
    (full_eval def-decl "real" eval_MultPoly nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (mv_UNS? const-decl "bool" dimension_induction nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (max_length_UNSge formula-decl nil dimension_induction nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil))
   nil
   (partial_eval_pip subtype
    "list_adt_map[(dimension_induction.mv_UNS?((number_fields.-)(dimension_induction.n, 1))), real].map(LAMBDA (pxk: (dimension_induction.mv_UNS?((number_fields.-)(dimension_induction.n, 1)))): eval_MultPoly.full_eval(pxk)(dimension_induction.vals))(dimension_induction.pip)"
    "{p: standard_form_poly.Polynomial | list_props[real].length(p) = list_props[(dimension_induction.mv_UNS?((number_fields.-)(dimension_induction.n, 1)))].length(dimension_induction.pip)}")))
 (poly_in_polys_partial_eval_TCC1 0
  (poly_in_polys_partial_eval_TCC1-1 nil 3812708442
   ("" (skeep)
    (("" (typepred " partial_eval_pip(n, poly_in_polys(n, p), vals)")
      (("" (replaces -2)
        (("" (hide -1)
          (("" (expand "poly_in_polys")
            (("" (rewrite "map_length")
              (("" (typepred " list_upto(largest_car_alpha(n, p))")
                (("" (postpone) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((poly_in_polys const-decl "list[(mv_UNS?(n - 1))]"
     dimension_induction nil)
    (partial_eval_pip const-decl
     "{p: Polynomial | length(p) = length(pip)}" dimension_induction
     nil)
    (Polynomial type-eq-decl nil standard_form_poly PolySafe)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (mv_UNS? const-decl "bool" dimension_induction nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (map_length formula-decl nil more_map_props nil)
    (poly_coeff_xk const-decl "(mv_UNS?(n - 1))" dimension_induction
     nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (list_upto def-decl "{L: list[upto(n)] |
   length(L) = n + 1 AND FORALL (i: upto(n)): nth(L, i) = i}"
     dimension_induction nil)
    (<= const-decl "bool" reals nil)
    (largest_car_alpha def-decl "nat" dimension_induction nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (TRUE const-decl "bool" booleans nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil))
   nil
   (poly_in_polys_partial_eval subtype
    "dimension_induction.partial_eval_pip(dimension_induction.n, dimension_induction.poly_in_polys(dimension_induction.n, dimension_induction.p), dimension_induction.vals)"
    "{pp: standard_form_poly.Polynomial | list_props[real].length(pp) = (number_fields.+)(1, dimension_induction.largest_car_alpha(dimension_induction.n, dimension_induction.p))}")))
 (pip_eval_single 0
  (pip_eval_single-1 nil 3813415324
   ("" (skeep)
    (("" (expand "poly_in_polys_partial_eval")
      (("" (rewrite "poly_in_polys_single")
        (("" (expand "partial_eval_pip")
          (("" (lemma "list_extensionality[real]")
            (("" (inst?)
              (("1" (flatten)
                (("1" (hide -1)
                  (("1" (assert)
                    (("1" (hide 2)
                      (("1"
                        (case "length(map(LAMBDA (pxk: (mv_UNS?(n - 1))): full_eval(pxk)(vals))
                (append[(mv_UNS?(n - 1))]
                     ((: null[(mon_UNS?(n - 1))] :) ^ car[nat](m`alpha),
                      (: (: pop_car(m) :) :))))
       =
       length(append[real]
                  ((: 0 :) ^ car[nat](m`alpha),
                   (: full_eval(pop_car(m))(vals) :)))")
                        (("1" (assert)
                          (("1" (skeep :preds? T)
                            (("1" (rewrite "map_length")
                              (("1"
                                (rewrite "map_nth_rw")
                                (("1"
                                  (rewrite "length_append")
                                  (("1"
                                    (rewrite "length_append")
                                    (("1"
                                      (rewrite "nth_append[real]")
                                      (("1"
                                        (rewrite "length_appendn")
                                        (("1"
                                          (lift-if 1)
                                          (("1"
                                            (split 1)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (rewrite
                                                   "nth_appendn")
                                                  (("1"
                                                    (typepred
                                                     "rem(1)(n!1)")
                                                    (("1"
                                                      (expand
                                                       "nth"
                                                       1
                                                       2)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (rewrite
                                                           "nth_append")
                                                          (("1"
                                                            (rewrite
                                                             "nth_appendn")
                                                            (("1"
                                                              (expand
                                                               "length"
                                                               1)
                                                              (("1"
                                                                (expand
                                                                 "length"
                                                                 1)
                                                                (("1"
                                                                  (expand
                                                                   "nth"
                                                                   1)
                                                                  (("1"
                                                                    (expand
                                                                     "full_eval")
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (expand "every")
                                                    (("2"
                                                      (expand "every")
                                                      (("2"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (flatten)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (rewrite
                                                   "nth_append"
                                                   2)
                                                  (("2"
                                                    (replace -2)
                                                    (("2"
                                                      (case
                                                       "n!1 - car[nat](m`alpha) = 0")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (move-terms
                                                             -1
                                                             l
                                                             2)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (replace
                                                                 -1)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (expand
                                                                     "nth")
                                                                    (("1"
                                                                      (lemma
                                                                       "full_eval_recurs")
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         "(: pop_car(m) :)"
                                                                         "vals")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (replace
                                                                             -1)
                                                                            (("1"
                                                                              (expand
                                                                               "full_eval"
                                                                               2
                                                                               2)
                                                                              (("1"
                                                                                (propax)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand "every")
                                          (("2"
                                            (expand "every")
                                            (("2" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide 2)
                          (("2" (rewrite "length_append")
                            (("2" (rewrite "length_appendn")
                              (("1"
                                (assert)
                                (("1"
                                  (rewrite "map_length")
                                  (("1"
                                    (rewrite "length_append")
                                    (("1"
                                      (rewrite "length_appendn")
                                      (("1"
                                        (expand "length")
                                        (("1"
                                          (expand "length")
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (expand "every")
                                (("2"
                                  (expand "every")
                                  (("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (skeep)
                          (("3" (lemma "max_length_UNSge")
                            (("3" (inst?) (("3" (assert) nil nil))
                              nil))
                            nil))
                          nil)
                         ("4" (typepred " m")
                          (("4" (expand "mon_UNS?")
                            (("4" (flatten)
                              (("4"
                                (expand "length")
                                (("4" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("5" (expand "every")
                          (("5" (expand "every")
                            (("5" (expand "mv_UNS?")
                              (("5" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (skeep)
                (("2" (assert)
                  (("2" (lemma "max_length_UNSge")
                    (("2" (assert)
                      (("2" (inst?) (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((poly_in_polys_partial_eval const-decl
     "{pp: Polynomial | length(pp) = largest_car_alpha(n, p) + 1}"
     dimension_induction nil)
    (partial_eval_pip const-decl
     "{p: Polynomial | length(p) = length(pip)}" dimension_induction
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (max_length def-decl "nat" standard_form_mult_poly nil)
    (vals skolem-const-decl "{vals: list[real] | length(vals) = n - 1}"
     dimension_induction nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (n skolem-const-decl "posnat" dimension_induction nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (mv_UNS? const-decl "bool" dimension_induction nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (full_eval def-decl "real" eval_MultPoly nil)
    (append def-decl "list[T]" list_props nil)
    (^ def-decl "list[T]" more_list_props structures)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (pop_car const-decl "monomial" dimension_induction nil)
    (full_eval const-decl "real" eval_MultPoly nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (max_length_UNSge formula-decl nil dimension_induction nil)
    (map_length formula-decl nil more_map_props nil)
    (length_append formula-decl nil list_props nil)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (length_singleton formula-decl nil more_list_props structures)
    (nth_append formula-decl nil more_list_props structures)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (full_eval_recurs formula-decl nil standard_form_extras nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nth_appendn formula-decl nil more_list_props structures)
    (int_times_int_is_int application-judgement "int" integers nil)
    (nth def-decl "T" list_props nil)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (rem const-decl "{r: mod(b) | EXISTS q: x = b * q + r}"
         modulo_arithmetic nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (mod nonempty-type-eq-decl nil euclidean_division nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (length_appendn formula-decl nil more_list_props structures)
    (map_nth_rw formula-decl nil more_map_props nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (list_extensionality formula-decl nil more_list_props structures)
    (mon_UNS? const-decl "bool" dimension_induction nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (list type-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (poly_in_polys_single formula-decl nil dimension_induction nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil))
   shostak))
 (eval_single_TCC1 0
  (eval_single_TCC1-1 nil 3813410322 ("" (subtype-tcc) nil nil)
   ((/= const-decl "boolean" notequal nil)) nil
   (eval_single subtype "dimension_induction.m"
    "{i: integers.int | booleans.OR(dimension_induction.r /= 0, reals.>=(i, 0))}")))
 (eval_single 0
  (eval_single-1 nil 3813421291
   ("" (skolem 1 ("_" "c" "r"))
    (("" (case "r=0")
      (("1" (skeep)
        (("1" (replace -1)
          (("1" (rewrite "eval_car")
            (("1" (case "m=0")
              (("1" (replace -1) (("1" (grind) nil nil)) nil)
               ("2" (expand "^" 2 1)
                (("2" (assert)
                  (("2" (rewrite "append_assoc")
                    (("2" (assert)
                      (("2" (expand "append" 2 1)
                        (("2" (rewrite "expt_0")
                          (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand "append" 1 1)
              (("2" (lift-if 1)
                (("2" (split 1)
                  (("1" (flatten) (("1" (assert) nil nil)) nil)
                   ("2" (flatten) (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (induct "m" 2)
        (("1" (grind) nil nil)
         ("2" (skeep)
          (("2" (expand "^" 1 1)
            (("2" (rewrite "append_assoc")
              (("2" (expand "eval" 1)
                (("2" (expand "init_eval" 1)
                  (("2" (expand "append" 1 1)
                    (("2" (assert)
                      (("2" (expand "append" 1 1)
                        (("2" (expand "append" 1 1)
                          (("2" (rewrite "length_append" 1)
                            (("2" (assert)
                              (("2"
                                (expand "append " 1 3)
                                (("2"
                                  (assert)
                                  (("2"
                                    (expand "^" 1 3)
                                    (("2"
                                      (expand "expt")
                                      (("2"
                                        (expand "eval")
                                        (("2"
                                          (mult-by -1 "r")
                                          (("2"
                                            (rewrite
                                             "eval_poly_times_x")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (replace -1)
                                                (("2"
                                                  (rewrite "expt_plus")
                                                  (("2"
                                                    (rewrite "expt_x1")
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (expt def-decl "real" exponentiation nil)
    (^ const-decl "real" exponentiation nil)
    (nat_expt application-judgement "nat" exponentiation nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (expt_0 formula-decl nil sqrt_exists reals)
    (append_assoc formula-decl nil list_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nat_exp application-judgement "nat" exponentiation nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (^ def-decl "list[T]" more_list_props structures)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (append def-decl "list[T]" list_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (eval_car formula-decl nil eval_poly PolySafe)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (both_sides_times1_imp formula-decl nil extra_real_props nil)
    (upfrom nonempty-type-eq-decl nil integers nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (expt_plus formula-decl nil exponentiation nil)
    (expt_x1 formula-decl nil exponentiation nil)
    (eval_poly_times_x formula-decl nil eval_poly PolySafe)
    (length_singleton formula-decl nil more_list_props structures)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (length_append formula-decl nil list_props nil)
    (length def-decl "nat" list_props nil)
    (init_eval def-decl "real" eval_poly PolySafe)
    (int_plus_int_is_int application-judgement "int" integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (eval const-decl "[real -> real]" eval_poly PolySafe)
    (Polynomial type-eq-decl nil standard_form_poly PolySafe)
    (pred type-eq-decl nil defined_types nil))
   shostak))
 (eval_pip_eval_single_TCC1 0
  (eval_pip_eval_single_TCC2-1 nil 3813407260
   ("" (skeep :preds? T)
    (("" (expand "length" 1 1)
      (("" (assert)
        (("" (expand "mon_UNS?") (("" (propax) nil nil)) nil)) nil))
      nil))
    nil)
   ((length def-decl "nat" list_props nil)
    (mon_UNS? const-decl "bool" dimension_induction nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil))
   nil
   (eval_pip_eval_single subtype
    "list_adt[real].cons(dimension_induction.r, dimension_induction.vals)"
    "{l: list_adt[real].list | reals.>=(list_props[real].length(l), list_props[nat].length(dimension_induction.m`alpha))}")))
 (eval_pip_eval_single 0
  (eval_pip_eval_single-1 nil 3813423133
   ("" (skeep)
    (("" (rewrite "pip_eval_single")
      (("" (rewrite "eval_single")
        (("" (expand "pop_car")
          (("" (lemma "eval_vals")
            (("" (inst -1 "n" "m" "cons(r, vals)")
              (("1" (replace -1)
                (("1" (assert)
                  (("1" (expand "hat")
                    (("1" (case "null?(cdr(m`alpha))")
                      (("1" (lemma "eval_vals_0")
                        (("1" (inst -1 "_" "vals")
                          (("1" (inst-cp -1 "m`C")
                            (("1" (inst-cp -1 "1")
                              (("1"
                                (assert)
                                (("1"
                                  (case "cdr(m`alpha) = null[nat]")
                                  (("1"
                                    (replace -1)
                                    (("1"
                                      (replace -3)
                                      (("1"
                                        (replace -4)
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (lemma "eval_vals")
                        (("2"
                          (inst -1 "n-1"
                           "(# C := m`C, alpha := cdr(m`alpha) #)"
                           "vals")
                          (("1" (replace -1)
                            (("1" (lemma "eval_vals")
                              (("1"
                                (inst
                                 -1
                                 "n-1"
                                 "(# C := 1, alpha := cdr(m`alpha) #)"
                                 "vals")
                                (("1"
                                  (assert)
                                  (("1"
                                    (replace -1)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "hat" 2)
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (typepred "m")
                                  (("2"
                                    (expand "mon_UNS?")
                                    (("2"
                                      (flatten)
                                      (("2"
                                        (expand "length" -1)
                                        (("2"
                                          (lift-if -1)
                                          (("2"
                                            (split -1)
                                            (("1"
                                              (flatten)
                                              (("1" (assert) nil nil))
                                              nil)
                                             ("2"
                                              (flatten)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (assert)
                                  (("3"
                                    (typepred "n")
                                    (("3"
                                      (typepred "m")
                                      (("3"
                                        (expand "mon_UNS?")
                                        (("3"
                                          (expand "length" -1)
                                          (("3"
                                            (assert)
                                            (("3"
                                              (lift-if -1)
                                              (("3"
                                                (split -1)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (flatten)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (expand
                                                       "length"
                                                       -1)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (typepred "m")
                            (("2" (expand "mon_UNS?")
                              (("2"
                                (flatten)
                                (("2"
                                  (expand "length" -1)
                                  (("2"
                                    (lift-if -1)
                                    (("2"
                                      (split -1)
                                      (("1"
                                        (flatten)
                                        (("1" (assert) nil nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (typepred "m")
                            (("3" (expand "mon_UNS?")
                              (("3"
                                (flatten)
                                (("3"
                                  (expand "length" -1)
                                  (("3"
                                    (lift-if -1)
                                    (("3"
                                      (split -1)
                                      (("1"
                                        (flatten)
                                        (("1" (assert) nil nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (expand "length" -1)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (assert)
                (("2" (typepred "m")
                  (("2" (expand "mon_UNS?") (("2" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((pip_eval_single formula-decl nil dimension_induction nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (mon_UNS? const-decl "bool" dimension_induction nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (n skolem-const-decl "posnat" dimension_induction nil)
    (m skolem-const-decl "(mon_UNS?(n))" dimension_induction nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (eval_vals_0 formula-decl nil standard_form_extras nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (hat const-decl
     "{mm: monomial | length(mm`alpha) = length(m`alpha) - 1}"
     standard_form_extras nil)
    (eval_vals formula-decl nil standard_form_extras nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (pop_car const-decl "monomial" dimension_induction nil)
    (full_eval const-decl "real" eval_MultPoly nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (eval_single formula-decl nil dimension_induction nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil))
   shostak))
 (eval_pip_eval_recurs_TCC1 0
  (eval_pip_eval_recurs_TCC1-1 nil 3813407260
   ("" (skeep :preds? T)
    (("" (lemma "car_mon_UNS")
      (("" (inst?)
        (("" (assert)
          (("" (lemma "single_UNS") (("" (inst?) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((car_mon_UNS formula-decl nil dimension_induction nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (mon_UNS? const-decl "bool" dimension_induction nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (single_UNS formula-decl nil dimension_induction nil)
    (mv_UNS? const-decl "bool" dimension_induction nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (list type-decl nil list_adt nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil))
   nil
   (eval_pip_eval_recurs subtype
    "(: list_adt[monomial].car(dimension_induction.p) :)"
    "(dimension_induction.mv_UNS?(dimension_induction.n))")))
 (eval_pip_eval_recurs_TCC2 0
  (eval_pip_eval_recurs_TCC2-1 nil 3813407260
   ("" (skeep)
    (("" (lemma "cdr_is_UNS")
      (("" (inst?) (("" (assert) nil nil)) nil)) nil))
    nil)
   ((cdr_is_UNS formula-decl nil dimension_induction nil)
    (mv_UNS? const-decl "bool" dimension_induction nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (list type-decl nil list_adt nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil))
   nil
   (eval_pip_eval_recurs subtype
    "list_adt[monomial].cdr(dimension_induction.p)"
    "(dimension_induction.mv_UNS?(dimension_induction.n))")))
 (eval_pip_eval_recurs 0
  (eval_pip_eval_recurs-1 nil 3813424872
   ("" (skeep)
    ((""
      (case "poly_in_polys_partial_eval(n, p, vals) = init_polyplus(poly_in_polys_partial_eval(n, (: car(p) :), vals), poly_in_polys_partial_eval(n, cdr(p), vals))")
      (("1" (replace -1)
        (("1" (lemma "eval_add")
          (("1" (inst?)
            (("1" (assert)
              (("1" (replace -1)
                (("1"
                  (expand "+
")
                  (("1" (propax) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide 2)
        (("2" (lemma "list_extensionality[real]")
          (("2" (inst?)
            (("2" (flatten)
              (("2" (hide -1)
                (("2" (assert)
                  (("2" (hide 2)
                    (("2"
                      (case "length(poly_in_polys_partial_eval(n, p, vals)) =
       length(init_polyplus(poly_in_polys_partial_eval(n,
                                                       (: car(p) :),
                                                       vals),
                            poly_in_polys_partial_eval(n, cdr(p), vals)))")
                      (("1" (assert)
                        (("1" (skeep :preds? T)
                          (("1"
                            (typepred
                             "init_polyplus(poly_in_polys_partial_eval(n,
                                                       (: car(p) :),
                                                       vals),
                            poly_in_polys_partial_eval(n, cdr(p), vals))")
                            (("1" (hide -1)
                              (("1"
                                (replace -3 -2)
                                (("1"
                                  (replace -1 -2)
                                  (("1"
                                    (hide -1)
                                    (("1"
                                      (lemma "init_polyplus_nth")
                                      (("1"
                                        (inst?)
                                        (("1"
                                          (replace -1)
                                          (("1"
                                            (typepred
                                             "poly_in_polys_partial_eval(n, (: car(p) :), vals)")
                                            (("1"
                                              (hide -1)
                                              (("1"
                                                (case
                                                 "NOT largest_car_alpha(n, (: car(p) :)) = car(car(p)`alpha)")
                                                (("1"
                                                  (expand
                                                   "largest_car_alpha"
                                                   1)
                                                  (("1"
                                                    (expand
                                                     "largest_car_alpha"
                                                     1)
                                                    (("1"
                                                      (expand "max" 1)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (lift-if 1)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (split 1)
                                                              (("1"
                                                                (typepred
                                                                 "car(p)`alpha")
                                                                (("1"
                                                                  (typepred
                                                                   "p")
                                                                  (("1"
                                                                    (expand
                                                                     "mv_UNS?")
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (expand
                                                                         "length"
                                                                         -2)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (lift-if
                                                                             -2)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (split
                                                                                 -2)
                                                                                (("1"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil)
                                                                                 ("2"
                                                                                  (flatten)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "every")
                                                                                      (("2"
                                                                                        (flatten)
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (case
                                                                                             "NOT FORALL (R:real): (R>=0 AND R<0) IMPLIES FALSE")
                                                                                            (("1"
                                                                                              (skeep)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (inst
                                                                                               -1
                                                                                               "car(car(p)`alpha)")
                                                                                              (("2"
                                                                                                (replace
                                                                                                 -9)
                                                                                                (("2"
                                                                                                  (propax)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (lemma "car_mon_UNS")
                                                  (("2"
                                                    (inst?)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (rewrite
                                                         "pip_eval_single")
                                                        (("2"
                                                          (expand
                                                           "poly_in_polys_partial_eval"
                                                           1
                                                           1)
                                                          (("2"
                                                            (expand
                                                             "poly_in_polys_partial_eval"
                                                             -6
                                                             1)
                                                            (("2"
                                                              (expand
                                                               "partial_eval_pip")
                                                              (("2"
                                                                (typepred
                                                                 "n_1")
                                                                (("2"
                                                                  (expand
                                                                   "poly_in_polys_partial_eval"
                                                                   -1
                                                                   1)
                                                                  (("2"
                                                                    (expand
                                                                     "partial_eval_pip")
                                                                    (("2"
                                                                      (rewrite
                                                                       "map_length")
                                                                      (("1"
                                                                        (rewrite
                                                                         "map_nth_rw")
                                                                        (("1"
                                                                          (expand
                                                                           "poly_in_polys")
                                                                          (("1"
                                                                            (rewrite
                                                                             "map_length")
                                                                            (("1"
                                                                              (rewrite
                                                                               "map_nth_rw")
                                                                              (("1"
                                                                                (typepred
                                                                                 "list_upto(largest_car_alpha(n, p))")
                                                                                (("1"
                                                                                  (hide
                                                                                   -1)
                                                                                  (("1"
                                                                                    (replace
                                                                                     -1)
                                                                                    (("1"
                                                                                      (inst
                                                                                       -2
                                                                                       "n_1")
                                                                                      (("1"
                                                                                        (replace
                                                                                         -2)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "poly_coeff_xk")
                                                                                          (("1"
                                                                                            (expand
                                                                                             "poly_filter_xk")
                                                                                            (("1"
                                                                                              (case
                                                                                               "NOT cons?(car(p)`alpha)")
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "mon_UNS?")
                                                                                                (("1"
                                                                                                  (flatten)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "length"
                                                                                                     -4)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (case
                                                                                                 "n_1 = car(car(p)`alpha)")
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "filter")
                                                                                                  (("1"
                                                                                                    (replace
                                                                                                     -1
                                                                                                     1
                                                                                                     :dir
                                                                                                     rl)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "pop_car"
                                                                                                       1
                                                                                                       1)
                                                                                                      (("1"
                                                                                                        (expand
                                                                                                         "map"
                                                                                                         1)
                                                                                                        (("1"
                                                                                                          (lemma
                                                                                                           "full_eval_recurs")
                                                                                                          (("1"
                                                                                                            (inst
                                                                                                             -1
                                                                                                             "cons(pop_car(car(p)),
                     map(pop_car)
                        (filter(LAMBDA ((m: monomial | cons?(m`alpha))):
                                  car(m`alpha) = n_1)
                               (cdr(p))))"
                                                                                                             "vals")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (replace
                                                                                                                 -1)
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "enth"
                                                                                                                   1
                                                                                                                   1)
                                                                                                                  (("1"
                                                                                                                    (replace
                                                                                                                     -2
                                                                                                                     -9
                                                                                                                     :dir
                                                                                                                     rl)
                                                                                                                    (("1"
                                                                                                                      (replace
                                                                                                                       -9
                                                                                                                       1)
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        (("1"
                                                                                                                          (rewrite
                                                                                                                           "nth_append[real]")
                                                                                                                          (("1"
                                                                                                                            (rewrite
                                                                                                                             "length_appendn[real]"
                                                                                                                             1)
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              (("1"
                                                                                                                                (expand
                                                                                                                                 "nth"
                                                                                                                                 1)
                                                                                                                                (("1"
                                                                                                                                  (expand
                                                                                                                                   "poly_in_polys_partial_eval")
                                                                                                                                  (("1"
                                                                                                                                    (expand
                                                                                                                                     "partial_eval_pip")
                                                                                                                                    (("1"
                                                                                                                                      (rewrite
                                                                                                                                       "map_length")
                                                                                                                                      (("1"
                                                                                                                                        (expand
                                                                                                                                         "enth"
                                                                                                                                         1)
                                                                                                                                        (("1"
                                                                                                                                          (assert)
                                                                                                                                          (("1"
                                                                                                                                            (rewrite
                                                                                                                                             "map_length"
                                                                                                                                             1)
                                                                                                                                            (("1"
                                                                                                                                              (lift-if
                                                                                                                                               1)
                                                                                                                                              (("1"
                                                                                                                                                (split
                                                                                                                                                 1)
                                                                                                                                                (("1"
                                                                                                                                                  (flatten)
                                                                                                                                                  (("1"
                                                                                                                                                    (rewrite
                                                                                                                                                     "map_nth_rw"
                                                                                                                                                     1)
                                                                                                                                                    (("1"
                                                                                                                                                      (expand
                                                                                                                                                       "poly_in_polys")
                                                                                                                                                      (("1"
                                                                                                                                                        (typepred
                                                                                                                                                         " list_upto(largest_car_alpha(n, cdr(p)))")
                                                                                                                                                        (("1"
                                                                                                                                                          (hide
                                                                                                                                                           -1)
                                                                                                                                                          (("1"
                                                                                                                                                            (rewrite
                                                                                                                                                             "map_length")
                                                                                                                                                            (("1"
                                                                                                                                                              (rewrite
                                                                                                                                                               "map_nth_rw"
                                                                                                                                                               1)
                                                                                                                                                              (("1"
                                                                                                                                                                (expand
                                                                                                                                                                 "poly_coeff_xk")
                                                                                                                                                                (("1"
                                                                                                                                                                  (inst
                                                                                                                                                                   -2
                                                                                                                                                                   "n_1")
                                                                                                                                                                  (("1"
                                                                                                                                                                    (replace
                                                                                                                                                                     -2)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (expand
                                                                                                                                                                       "poly_filter_xk")
                                                                                                                                                                      (("1"
                                                                                                                                                                        (expand
                                                                                                                                                                         "pop_car"
                                                                                                                                                                         1
                                                                                                                                                                         2)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (propax)
                                                                                                                                                                          nil
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil)
                                                                                                                                                                   ("2"
                                                                                                                                                                    (assert)
                                                                                                                                                                    nil
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil)
                                                                                                                                                     ("2"
                                                                                                                                                      (skeep)
                                                                                                                                                      (("2"
                                                                                                                                                        (lemma
                                                                                                                                                         "max_length_UNSge")
                                                                                                                                                        (("2"
                                                                                                                                                          (inst?)
                                                                                                                                                          (("2"
                                                                                                                                                            (assert)
                                                                                                                                                            nil
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil)
                                                                                                                                                 ("2"
                                                                                                                                                  (hide
                                                                                                                                                   (-1
                                                                                                                                                    -10))
                                                                                                                                                  (("2"
                                                                                                                                                    (flatten)
                                                                                                                                                    (("2"
                                                                                                                                                      (flip-ineq
                                                                                                                                                       1)
                                                                                                                                                      (("2"
                                                                                                                                                        (expand
                                                                                                                                                         "poly_in_polys")
                                                                                                                                                        (("2"
                                                                                                                                                          (rewrite
                                                                                                                                                           "map_length"
                                                                                                                                                           -1)
                                                                                                                                                          (("2"
                                                                                                                                                            (typepred
                                                                                                                                                             " list_upto(largest_car_alpha(n, cdr(p)))")
                                                                                                                                                            (("2"
                                                                                                                                                              (hide
                                                                                                                                                               -1)
                                                                                                                                                              (("2"
                                                                                                                                                                (replace
                                                                                                                                                                 -1)
                                                                                                                                                                (("2"
                                                                                                                                                                  (case
                                                                                                                                                                   "null?(filter(LAMBDA ((m: monomial | cons?(m`alpha))):
                             car(m`alpha) = n_1)
                          (cdr(p)))")
                                                                                                                                                                  (("1"
                                                                                                                                                                    (expand
                                                                                                                                                                     "map"
                                                                                                                                                                     1)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (assert)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (expand
                                                                                                                                                                         "full_eval")
                                                                                                                                                                        (("1"
                                                                                                                                                                          (propax)
                                                                                                                                                                          nil
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil)
                                                                                                                                                                   ("2"
                                                                                                                                                                    (lemma
                                                                                                                                                                     "cons_filter_exists[{m:monomial | cons?(m`alpha)}]")
                                                                                                                                                                    (("2"
                                                                                                                                                                      (inst
                                                                                                                                                                       -1
                                                                                                                                                                       "cdr(p)"
                                                                                                                                                                       " LAMBDA ((m: monomial | cons?(m`alpha))):
                             car(m`alpha) = n_1")
                                                                                                                                                                      (("2"
                                                                                                                                                                        (assert)
                                                                                                                                                                        (("2"
                                                                                                                                                                          (skeep)
                                                                                                                                                                          (("2"
                                                                                                                                                                            (lemma
                                                                                                                                                                             "largest_car_is_largest")
                                                                                                                                                                            (("2"
                                                                                                                                                                              (inst
                                                                                                                                                                               -1
                                                                                                                                                                               "n"
                                                                                                                                                                               "cdr(p)"
                                                                                                                                                                               "i")
                                                                                                                                                                              (("2"
                                                                                                                                                                                (assert)
                                                                                                                                                                                nil
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil)
                                                                                                                                                                   ("3"
                                                                                                                                                                    (lemma
                                                                                                                                                                     "pos_uns_every")
                                                                                                                                                                    (("3"
                                                                                                                                                                      (inst?)
                                                                                                                                                                      nil
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil)
                                                                                                                                             ("2"
                                                                                                                                              (skeep)
                                                                                                                                              (("2"
                                                                                                                                                (lemma
                                                                                                                                                 "max_length_UNSge")
                                                                                                                                                (("2"
                                                                                                                                                  (inst?)
                                                                                                                                                  (("2"
                                                                                                                                                    (assert)
                                                                                                                                                    nil
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil)
                                                                                                                                       ("2"
                                                                                                                                        (skeep)
                                                                                                                                        (("2"
                                                                                                                                          (lemma
                                                                                                                                           "max_length_UNSge")
                                                                                                                                          (("2"
                                                                                                                                            (inst?)
                                                                                                                                            (("2"
                                                                                                                                              (assert)
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (rewrite
                                                                                                                             "length_appendn")
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              nil
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (expand
                                                                                                                               "every")
                                                                                                                              (("2"
                                                                                                                                (expand
                                                                                                                                 "every")
                                                                                                                                (("2"
                                                                                                                                  (propax)
                                                                                                                                  nil
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (lemma
                                                                                                               "pos_uns_every")
                                                                                                              (("2"
                                                                                                                (inst?)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (case
                                                                                                   "NOT enth(append[real]
                ((: 0 :) ^ car[nat](car(p)`alpha),
                 (: full_eval(pop_car(car(p)))(vals) :)),
            n_1) = 0")
                                                                                                  (("1"
                                                                                                    (hide
                                                                                                     3)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "enth"
                                                                                                       1)
                                                                                                      (("1"
                                                                                                        (lift-if
                                                                                                         1)
                                                                                                        (("1"
                                                                                                          (split
                                                                                                           1)
                                                                                                          (("1"
                                                                                                            (flatten)
                                                                                                            (("1"
                                                                                                              (rewrite
                                                                                                               "length_append"
                                                                                                               -1)
                                                                                                              (("1"
                                                                                                                (rewrite
                                                                                                                 "nth_append[real]"
                                                                                                                 1)
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (rewrite
                                                                                                                     "length_appendn[real]")
                                                                                                                    (("1"
                                                                                                                      (rewrite
                                                                                                                       "nth_appendn[real]")
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           "nth"
                                                                                                                           1)
                                                                                                                          (("1"
                                                                                                                            (typepred
                                                                                                                             "rem(1)(n_1)")
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (propax)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (replaces
                                                                                                     -1)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "filter"
                                                                                                       2)
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "enth"
                                                                                                           2)
                                                                                                          (("2"
                                                                                                            (lift-if
                                                                                                             2)
                                                                                                            (("2"
                                                                                                              (split
                                                                                                               2)
                                                                                                              (("1"
                                                                                                                (flatten)
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "poly_in_polys_partial_eval")
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "partial_eval_pip")
                                                                                                                    (("1"
                                                                                                                      (rewrite
                                                                                                                       "map_length")
                                                                                                                      (("1"
                                                                                                                        (rewrite
                                                                                                                         "map_nth_rw"
                                                                                                                         1)
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           "poly_in_polys")
                                                                                                                          (("1"
                                                                                                                            (typepred
                                                                                                                             "list_upto(largest_car_alpha(n, cdr(p)))")
                                                                                                                            (("1"
                                                                                                                              (hide
                                                                                                                               -1)
                                                                                                                              (("1"
                                                                                                                                (rewrite
                                                                                                                                 "map_length")
                                                                                                                                (("1"
                                                                                                                                  (replace
                                                                                                                                   -1)
                                                                                                                                  (("1"
                                                                                                                                    (inst
                                                                                                                                     -2
                                                                                                                                     "n_1")
                                                                                                                                    (("1"
                                                                                                                                      (rewrite
                                                                                                                                       "map_nth_rw")
                                                                                                                                      (("1"
                                                                                                                                        (replace
                                                                                                                                         -2)
                                                                                                                                        (("1"
                                                                                                                                          (expand
                                                                                                                                           "poly_coeff_xk")
                                                                                                                                          (("1"
                                                                                                                                            (expand
                                                                                                                                             "poly_filter_xk")
                                                                                                                                            (("1"
                                                                                                                                              (propax)
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil)
                                                                                                                                     ("2"
                                                                                                                                      (assert)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (skeep)
                                                                                                                          (("2"
                                                                                                                            (lemma
                                                                                                                             "max_length_UNSge")
                                                                                                                            (("2"
                                                                                                                              (inst?)
                                                                                                                              (("2"
                                                                                                                                (assert)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (skeep)
                                                                                                                        (("2"
                                                                                                                          (lemma
                                                                                                                           "max_length_UNSge")
                                                                                                                          (("2"
                                                                                                                            (inst?)
                                                                                                                            (("2"
                                                                                                                              (assert)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (flatten)
                                                                                                                (("2"
                                                                                                                  (flip-ineq
                                                                                                                   1)
                                                                                                                  (("2"
                                                                                                                    (typepred
                                                                                                                     "poly_in_polys_partial_eval(n, cdr(p), vals)")
                                                                                                                    (("2"
                                                                                                                      (hide
                                                                                                                       -1)
                                                                                                                      (("2"
                                                                                                                        (replace
                                                                                                                         -1)
                                                                                                                        (("2"
                                                                                                                          (case
                                                                                                                           "null?(filter(LAMBDA ((m: monomial | cons?(m`alpha))):
                                 car(m`alpha) = n_1)
                              (cdr(p)))")
                                                                                                                          (("1"
                                                                                                                            (expand
                                                                                                                             "pop_car")
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               "map")
                                                                                                                              (("1"
                                                                                                                                (assert)
                                                                                                                                (("1"
                                                                                                                                  (expand
                                                                                                                                   "full_eval"
                                                                                                                                   1)
                                                                                                                                  (("1"
                                                                                                                                    (propax)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (lemma
                                                                                                                             "cons_filter_exists[{m:monomial | cons?(m`alpha)}]")
                                                                                                                            (("2"
                                                                                                                              (assert)
                                                                                                                              (("2"
                                                                                                                                (inst
                                                                                                                                 -1
                                                                                                                                 "cdr(p)"
                                                                                                                                 " LAMBDA ((m: monomial | cons?(m`alpha))):
                             car(m`alpha) = n_1")
                                                                                                                                (("2"
                                                                                                                                  (assert)
                                                                                                                                  (("2"
                                                                                                                                    (skeep)
                                                                                                                                    (("2"
                                                                                                                                      (lemma
                                                                                                                                       "largest_car_is_largest")
                                                                                                                                      (("2"
                                                                                                                                        (inst
                                                                                                                                         -1
                                                                                                                                         "n"
                                                                                                                                         "cdr(p)"
                                                                                                                                         "i")
                                                                                                                                        (("2"
                                                                                                                                          (assert)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("3"
                                                                                                                            (lemma
                                                                                                                             "pos_uns_every")
                                                                                                                            (("3"
                                                                                                                              (inst?)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (case
                                                                                           "NOT FORALL (N,M: nat): N<1+M IMPLIES N <=M")
                                                                                          (("1"
                                                                                            (skeep)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (inst
                                                                                             -1
                                                                                             "n_1"
                                                                                             "largest_car_alpha(n, p)")
                                                                                            (("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (skeep)
                                                                          (("2"
                                                                            (lemma
                                                                             "max_length_UNSge")
                                                                            (("2"
                                                                              (inst?)
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (skeep)
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (lemma
                                                                             "max_length_UNSge")
                                                                            (("2"
                                                                              (inst?)
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (typepred "p")
                                                  (("3"
                                                    (expand "mv_UNS?")
                                                    (("3"
                                                      (flatten)
                                                      (("3"
                                                        (expand
                                                         "length"
                                                         -2)
                                                        (("3"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide 2)
                        (("2"
                          (typepred
                           "poly_in_polys_partial_eval(n, p, vals)")
                          (("2" (hide -1)
                            (("2"
                              (typepred
                               "init_polyplus(poly_in_polys_partial_eval(n,
                                                       (: car(p) :),
                                                       vals),
                            poly_in_polys_partial_eval(n, cdr(p), vals))")
                              (("2"
                                (hide -1)
                                (("2"
                                  (expand "largest_car_alpha" -2)
                                  (("2"
                                    (replace -2)
                                    (("2"
                                      (hide -2)
                                      (("2"
                                        (typepred
                                         "poly_in_polys_partial_eval(n, (: car(p) :), vals)")
                                        (("2"
                                          (hide -1)
                                          (("2"
                                            (replaces -1)
                                            (("2"
                                              (expand
                                               "largest_car_alpha"
                                               -)
                                              (("2"
                                                (expand
                                                 "largest_car_alpha"
                                                 -)
                                                (("2"
                                                  (case
                                                   "NOT max(car(car(p)`alpha), 0) = car(car(p)`alpha)")
                                                  (("1"
                                                    (expand "max" 1)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (lift-if 1)
                                                        (("1"
                                                          (split 1)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (typepred
                                                                 "car(p)`alpha")
                                                                (("1"
                                                                  (typepred
                                                                   "p")
                                                                  (("1"
                                                                    (expand
                                                                     "mv_UNS?")
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (expand
                                                                         "length"
                                                                         -2)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (lift-if
                                                                             -2)
                                                                            (("1"
                                                                              (split
                                                                               -2)
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (flatten)
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (expand
                                                                                     " every"
                                                                                     -5)
                                                                                    (("2"
                                                                                      (flatten)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (case
                                                                                           "FORALL (R:real): (R<0 AND R>=0) IMPLIES FALSE")
                                                                                          (("1"
                                                                                            (inst
                                                                                             -1
                                                                                             "car(car(p)`alpha)")
                                                                                            (("1"
                                                                                              (replace
                                                                                               -9)
                                                                                              (("1"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (skeep)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (replace -1)
                                                    (("2"
                                                      (replace -2)
                                                      (("2"
                                                        (typepred
                                                         "poly_in_polys_partial_eval(n, cdr(p), vals)")
                                                        (("2"
                                                          (replace -2)
                                                          (("2"
                                                            (hide-all-but
                                                             1)
                                                            (("2"
                                                              (expand
                                                               "max")
                                                              (("2"
                                                                (lift-if
                                                                 1)
                                                                (("2"
                                                                  (split
                                                                   1)
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("3" (typepred "p")
                        (("3" (lemma "cdr_is_UNS")
                          (("3" (inst?) (("3" (assert) nil nil)) nil))
                          nil))
                        nil)
                       ("4" (lemma "car_mon_UNS")
                        (("4" (inst?)
                          (("4" (assert)
                            (("4" (lemma "single_UNS")
                              (("4" (inst?) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (single_UNS formula-decl nil dimension_induction nil)
    (cdr_is_UNS formula-decl nil dimension_induction nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nonneg_real_max application-judgement
     "{z: nonneg_real | z >= x AND z >= y}" real_defs nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (FALSE const-decl "bool" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (mon_UNS? const-decl "bool" dimension_induction nil)
    (pip_eval_single formula-decl nil dimension_induction nil)
    (map_nth_rw formula-decl nil more_map_props nil)
    (upto nonempty-type-eq-decl nil naturalnumbers nil)
    (<= const-decl "bool" reals nil)
    (list_upto def-decl "{L: list[upto(n)] |
   length(L) = n + 1 AND FORALL (i: upto(n)): nth(L, i) = i}"
     dimension_induction nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (poly_coeff_xk const-decl "(mv_UNS?(n - 1))" dimension_induction
     nil)
    (poly_filter_xk const-decl "(mv_UNS?(n))" dimension_induction nil)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (pred type-eq-decl nil defined_types nil)
    (pop_car const-decl "monomial" dimension_induction nil)
    (length_appendn formula-decl nil more_list_props structures)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (max_length_UNSge formula-decl nil dimension_induction nil)
    (pos_uns_every formula-decl nil dimension_induction nil)
    (cons_filter_exists formula-decl nil list_lemmas nil)
    (largest_car_is_largest formula-decl nil dimension_induction nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (length_singleton formula-decl nil more_list_props structures)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (nth_append formula-decl nil more_list_props structures)
    (^ def-decl "list[T]" more_list_props structures)
    (full_eval const-decl "real" eval_MultPoly nil)
    (enth const-decl "real" polyplus_props nil)
    (full_eval_recurs formula-decl nil standard_form_extras nil)
    (pop_car const-decl "MultPoly" dimension_induction nil)
    (filter def-decl "list[T]" filters nil)
    (TRUE const-decl "bool" booleans nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (mod nonempty-type-eq-decl nil euclidean_division nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (rem const-decl "{r: mod(b) | EXISTS q: x = b * q + r}"
         modulo_arithmetic nil)
    (int_times_int_is_int application-judgement "int" integers nil)
    (nth_appendn formula-decl nil more_list_props structures)
    (length_append formula-decl nil list_props nil)
    (append def-decl "list[T]" list_props nil)
    (n_1 skolem-const-decl
     "below(length(poly_in_polys_partial_eval(n, p, vals)))"
     dimension_induction nil)
    (vals skolem-const-decl "{vals: list[real] | length(vals) = n - 1}"
     dimension_induction nil)
    (p skolem-const-decl "(mv_UNS?(n))" dimension_induction nil)
    (n skolem-const-decl "posnat" dimension_induction nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (map_length formula-decl nil more_map_props nil)
    (max_length def-decl "nat" standard_form_mult_poly nil)
    (full_eval def-decl "real" eval_MultPoly nil)
    (poly_in_polys const-decl "list[(mv_UNS?(n - 1))]"
     dimension_induction nil)
    (partial_eval_pip const-decl
     "{p: Polynomial | length(p) = length(pip)}" dimension_induction
     nil)
    (car_mon_UNS formula-decl nil dimension_induction nil)
    (init_polyplus_nth formula-decl nil polyplus_props nil)
    (list_extensionality formula-decl nil more_list_props structures)
    (+ const-decl "[T -> real]" real_fun_ops reals)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (eval_add formula-decl nil arithmetic_poly PolySafe)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (mv_UNS? const-decl "bool" dimension_induction nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (length def-decl "nat" list_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Polynomial type-eq-decl nil standard_form_poly PolySafe)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (largest_car_alpha def-decl "nat" dimension_induction nil)
    (poly_in_polys_partial_eval const-decl
     "{pp: Polynomial | length(pp) = largest_car_alpha(n, p) + 1}"
     dimension_induction nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (init_polyplus def-decl
     "{ff: Polynomial | length(ff) = max(length(f), length(g))}"
     arithmetic_poly PolySafe)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil))
   shostak))
 (pip_to_full_eval_TCC1 0
  (pip_to_full_eval_TCC1-1 nil 3812708442
   ("" (skeep :preds? T)
    (("" (lemma "max_length_UNSge")
      (("" (inst?)
        (("" (expand "length" 1) (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((max_length_UNSge formula-decl nil dimension_induction nil)
    (length def-decl "nat" list_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (mv_UNS? const-decl "bool" dimension_induction nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (list type-decl nil list_adt nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil))
   nil
   (pip_to_full_eval subtype
    "list_adt[real].cons(dimension_induction.r, dimension_induction.vals)"
    "{l: list_adt[real].list | reals.>=(list_props[real].length(l), standard_form_mult_poly.max_length(dimension_induction.p))}")))
 (pip_to_full_eval 0
  (pip_to_full_eval-1 nil 3813335624
   (""
    (case "FORALL (m:nat, n: posnat, p: (mv_UNS?(n)), r: real,
                            (vals: list[real] | length(vals) = n - 1)):
                      LET P: {pp: Polynomial | length(pp) = 1 + largest_car_alpha(n, p)}
                            = poly_in_polys_partial_eval(n, p, vals)
                        IN length(p) = m IMPLIES full_eval(p)(cons(r, vals)) = eval(P)(r)")
    (("1" (skeep)
      (("1" (assert)
        (("1" (inst -1 "length(p)" "n" "p" "r" "vals") nil nil)) nil))
      nil)
     ("2" (hide 2)
      (("2" (induct "m")
        (("1" (skeep) (("1" (assert) (("1" (inst?) nil nil)) nil)) nil)
         ("2" (skeep)
          (("2" (expand "length" -1)
            (("2" (assert)
              (("2" (lift-if -1)
                (("2" (split -1)
                  (("1" (expand "poly_in_polys_partial_eval")
                    (("1" (expand "poly_in_polys")
                      (("1" (expand "largest_car_alpha")
                        (("1" (assert)
                          (("1" (expand "list_upto")
                            (("1" (assert)
                              (("1"
                                (expand "poly_coeff_xk")
                                (("1"
                                  (expand "poly_filter_xk")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "filter")
                                      (("1"
                                        (expand "pop_car")
                                        (("1"
                                          (expand "map")
                                          (("1"
                                            (expand "map")
                                            (("1"
                                              (expand
                                               "partial_eval_pip")
                                              (("1"
                                                (expand "map")
                                                (("1"
                                                  (expand "map")
                                                  (("1"
                                                    (expand
                                                     "full_eval")
                                                    (("1"
                                                      (expand "eval")
                                                      (("1"
                                                        (expand
                                                         "init_eval")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (expand
                                                             "init_eval")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten) (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (skeep)
          (("3" (skeep)
            (("3" (case "null?(p)")
              (("1" (expand "length" -3) (("1" (assert) nil nil)) nil)
               ("2" (lemma "full_eval_recurs")
                (("2" (inst -1 "p" "cons(r, vals)")
                  (("2" (assert)
                    (("2" (replace -1)
                      (("2" (inst -2 "n" "cdr(p)" "r" "vals")
                        (("1" (assert)
                          (("1" (expand "length" -3)
                            (("1" (assert)
                              (("1"
                                (replace -2)
                                (("1"
                                  (lemma "eval_pip_eval_recurs")
                                  (("1"
                                    (inst -1 "n" "p" "r" "vals")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (replace -1)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (lemma
                                             "eval_pip_eval_single")
                                            (("1"
                                              (inst?)
                                              (("1" (assert) nil nil)
                                               ("2"
                                                (lemma "car_mon_UNS")
                                                (("2"
                                                  (inst?)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (lemma "cdr_is_UNS")
                          (("2" (assert)
                            (("2" (inst?) (("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("4" (hide 2)
          (("4" (skeep)
            (("4" (lemma "max_length_UNSge")
              (("4" (inst?)
                (("4" (expand "length") (("4" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2)
      (("3" (skeep)
        (("3" (lemma "max_length_UNSge")
          (("3" (inst?)
            (("3" (expand "length" 1) (("3" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((max_length_UNSge formula-decl nil dimension_induction nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr_is_UNS formula-decl nil dimension_induction nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (eval_pip_eval_recurs formula-decl nil dimension_induction nil)
    (mon_UNS? const-decl "bool" dimension_induction nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (car_mon_UNS formula-decl nil dimension_induction nil)
    (eval_pip_eval_single formula-decl nil dimension_induction nil)
    (p skolem-const-decl "(mv_UNS?(n))" dimension_induction nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (n skolem-const-decl "posnat" dimension_induction nil)
    (full_eval_recurs formula-decl nil standard_form_extras nil)
    (poly_in_polys const-decl "list[(mv_UNS?(n - 1))]"
     dimension_induction nil)
    (poly_filter_xk const-decl "(mv_UNS?(n))" dimension_induction nil)
    (filter def-decl "list[T]" filters nil)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (partial_eval_pip const-decl
     "{p: Polynomial | length(p) = length(pip)}" dimension_induction
     nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (length_singleton formula-decl nil more_list_props structures)
    (init_eval def-decl "real" eval_poly PolySafe)
    (pop_car const-decl "MultPoly" dimension_induction nil)
    (poly_coeff_xk const-decl "(mv_UNS?(n - 1))" dimension_induction
     nil)
    (list_upto def-decl "{L: list[upto(n)] |
   length(L) = n + 1 AND FORALL (i: upto(n)): nth(L, i) = i}"
     dimension_induction nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (listn_0 name-judgement "listn[nat](0)" standard_form_mult_poly
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (list type-decl nil list_adt nil)
    (monomial type-eq-decl nil standard_form_mult_poly nil)
    (MultPoly type-eq-decl nil standard_form_mult_poly nil)
    (mv_UNS? const-decl "bool" dimension_induction nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Polynomial type-eq-decl nil standard_form_poly PolySafe)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (largest_car_alpha def-decl "nat" dimension_induction nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (max_length def-decl "nat" standard_form_mult_poly nil)
    (full_eval def-decl "real" eval_MultPoly nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (eval const-decl "[real -> real]" eval_poly PolySafe)
    (poly_in_polys_partial_eval const-decl
     "{pp: Polynomial | length(pp) = largest_car_alpha(n, p) + 1}"
     dimension_induction nil))
   shostak)))

