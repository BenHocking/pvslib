eval_poly  % Welcome
		: THEORY

% Last Update              Oct 2019
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%| This is defineing evaluations |%
%| of a Polynomial (list) with   |%
%| useful properties.            |%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Author:          J. Tanner Slagel

%-----     %
  BEGIN
%     -----%

%----------------------------------------------------------------------
%%Importing the definition of polynomial and standard form 
%----------------------------------------------------------------------

IMPORTING standard_form_poly

%----------------------------------------------------------------------
%%Define evaluation of polynomial
%----------------------------------------------------------------------

init_eval(f:Polynomial, deg:upfrom(length(f)-1), acc:real)(x:real):
 RECURSIVE real =
  IF null?(f)
    Then acc
  ELSE
    init_eval(cdr(f), deg, acc+car(f) * x^(deg-length(f)+1))(x)
  ENDIF
  MEASURE length(f)

eval(f:Polynomial): [real->real] = init_eval(f, length(f) - 1, 0)

%----------------------------------------------------------------------
%%Test init_eval
%----------------------------------------------------------------------

null_test: LEMMA
  init_eval(null, 0, 0)(5) = 0

test_init_eval: LEMMA
  init_eval( (:1, 2, 3:), 2, 0)(1) = 6

%----------------------------------------------------------------------
%%Properties of init_eval
%----------------------------------------------------------------------

init_eval_acc: LEMMA
 FORALL (f:{ff:Polynomial| cons?(ff)},
 deg:upfrom(length(f) - 1), acc:real):
   init_eval(f, deg, acc) =
   LAMBDA(x:real): acc + init_eval(f, deg, 0)(x)

eval_poly_times_x: LEMMA
 FORALL (f:Polynomial, deg:upfrom(length(f)), x, acc:real):
   init_eval(f, deg-1, acc)(x) * x =
   init_eval(f, deg, acc * x)(x)

%----------------------------------------------------------------------
%%Properties of eval
%----------------------------------------------------------------------

eval_cons: LEMMA
 FORALL (f:Polynomial, x:real):
   eval(f)(x) * x = eval(cons(0, f))(x)

eval_car: LEMMA
 FORALL (f:(cons?)):
   eval(f)(0) = car(f)

%----------------------------------------------------------------------
%%This relates list Polynomials to the array polynomials
% through the eval function
%----------------------------------------------------------------------

init_poly_Poly : LEMMA
 FORALL (f:Polynomial):
   init_eval(f, length(f) - 1, 0) =
   polynomial(list2array[real](0)(f), max(length(f) - 1, 0))

%----------------------------------------------------------------------
%%Define root
%----------------------------------------------------------------------
root?(f:Polynomial)(t:real): bool = eval(f)(t) = 0

root_i?(t0:real, (tf:real | tf >= t0), f:Polynomial)(t:real): bool =
 (eval(f)(t) = 0) AND (t >= t0 AND t <= tf)

root_lin: LEMMA
 FORALL(r:real):
   root?((: -r, 1 :))(r)

%----------------------------------------------------------------------
%%Continuity theorems for eval
%----------------------------------------------------------------------

% Positive at a point means positive on a epsilon ball
pos_ball: LEMMA
 FORALL (f:Polynomial, t:real):
   eval(f)(t) > 0 IMPLIES
     EXISTS(Eps:posreal):
     FORALL(eps:{e:real | abs(e)< Eps}): eval(f)(t + eps) > 0

% Negative at point means negative on a epsilon ball
neg_ball: LEMMA
 FORALL (f:Polynomial, t:real):
   eval(f)(t) < 0 IMPLIES
     EXISTS(Eps:posreal):
     FORALL(eps:{e:real | abs(e)< Eps}): eval(f)(t+eps) < 0

% Intermedian value theorem (part 1)
ivt: LEMMA
 FORALL (f:Polynomial,t1:real,t2:real):
   (t1<t2 AND (eval(f)(t1)<0 AND eval(f)(t2)>0))
   IMPLIES
     (EXISTS(r:{rr:real| t1<rr AND rr<t2} ): root?(f)(r))

  %___The End_%
  END eval_poly
