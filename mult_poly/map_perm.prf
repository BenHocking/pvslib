(map_perm
 (map_of_perm 0
  (map_of_perm-1 nil 3810487548
   ("" (induct "l1")
    (("1" (skeep)
      (("1" (expand "permutations")
        (("1" (lemma "same_occurrences_same_length[T]")
          (("1" (inst -1 "null" "l2")
            (("1" (assert)
              (("1" (split -1)
                (("1" (expand "length" -1)
                  (("1" (lift-if -1)
                    (("1" (assert)
                      (("1" (split -1)
                        (("1" (expand "map") (("1" (assert) nil nil))
                          nil)
                         ("2" (flatten) (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (propax) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (expand "map" 1 1)
          (("2" (lemma "remove_perm")
            (("2" (inst?)
              (("1" (assert)
                (("1" (skeep)
                  (("1" (lemma "cons_of_perm_is_permutation[T] ")
                    (("1"
                      (inst -1 "cons2_var" "remove(l2, i)" "cons1_var")
                      (("1" (assert)
                        (("1" (inst -4 "remove(l2, i)" "f")
                          (("1" (assert)
                            (("1" (lemma "list_splitting_nth")
                              (("1"
                                (inst -1 "l2" "i")
                                (("1"
                                  (replace -1 1)
                                  (("1"
                                    (rewrite "map_append" 1)
                                    (("1"
                                      (rewrite "map_append" 1)
                                      (("1"
                                        (hide -1)
                                        (("1"
                                          (expand "permutations" 1)
                                          (("1"
                                            (expand "remove" -4)
                                            (("1"
                                              (rewrite "map_append")
                                              (("1"
                                                (expand
                                                 "permutations"
                                                 -4)
                                                (("1"
                                                  (skeep)
                                                  (("1"
                                                    (inst -4 "x")
                                                    (("1"
                                                      (rewrite
                                                       "occurrences_of_app"
                                                       1)
                                                      (("1"
                                                        (rewrite
                                                         "occurrences_of_app"
                                                         1)
                                                        (("1"
                                                          (expand
                                                           "occurrences"
                                                           1
                                                           1)
                                                          (("1"
                                                            (lift-if 1)
                                                            (("1"
                                                              (rewrite
                                                               "occurrences_of_app"
                                                               -4)
                                                              (("1"
                                                                (split
                                                                 1)
                                                                (("1"
                                                                  (flatten)
                                                                  (("1"
                                                                    (replace
                                                                     -5)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (expand
                                                                         "map"
                                                                         1)
                                                                        (("1"
                                                                          (expand
                                                                           "map"
                                                                           1)
                                                                          (("1"
                                                                            (replace
                                                                             -3
                                                                             :dir
                                                                             rl)
                                                                            (("1"
                                                                              (expand
                                                                               "occurrences"
                                                                               1)
                                                                              (("1"
                                                                                (expand
                                                                                 "occurrences")
                                                                                (("1"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (flatten)
                                                                  (("2"
                                                                    (replace
                                                                     -4)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (expand
                                                                         "map"
                                                                         2)
                                                                        (("2"
                                                                          (expand
                                                                           "map"
                                                                           2)
                                                                          (("2"
                                                                            (expand
                                                                             "occurrences"
                                                                             2)
                                                                            (("2"
                                                                              (expand
                                                                               "occurrences"
                                                                               2)
                                                                              (("2"
                                                                                (propax)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (flatten)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (flatten)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (flatten)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (flatten)
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (lemma "same_occurrences_same_length[T]")
                (("2" (inst -1 "cons(cons1_var, cons2_var)" "l2")
                  (("2" (expand "permutations")
                    (("2" (assert)
                      (("2" (split -1)
                        (("1" (expand "length" -1)
                          (("1" (assert) nil nil)) nil)
                         ("2" (propax) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (S formal-type-decl nil map_perm nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (permutations const-decl "bool" sorting_aux sorting)
    (map adt-def-decl "list[T1]" list_adt_map nil)
    (T formal-type-decl nil map_perm nil)
    (list_induction formula-decl nil list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (length def-decl "nat" list_props nil)
    (length_null formula-decl nil more_list_props structures)
    (same_occurrences_same_length formula-decl nil sorting_aux sorting)
    (remove_perm formula-decl nil perm_props nil)
    (cons_of_perm_is_permutation formula-decl nil sorting_aux sorting)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (map_append formula-decl nil more_map_props nil)
    (append def-decl "list[T]" list_props nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (^ def-decl "list[T]" more_list_props structures)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (occurrences def-decl "nat" sorting_aux sorting)
    (nnint_plus_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (occurrences_of_app formula-decl nil sorting_aux sorting)
    (list_splitting_nth formula-decl nil perm_props nil)
    (remove const-decl "list[T]" perm_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (l2 skolem-const-decl "list[T]" map_perm nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil))
   shostak)))

