(standard_form_poly
 (last_TCC1 0
  (last_TCC1-1 nil 3777799350
   ("" (skeep)
    (("" (typepred "f")
      (("" (expand "length" 1 1) (("" (assert) nil nil)) nil)) nil))
    nil)
   ((cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (real nonempty-type-from-decl nil reals nil) nil
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (length def-decl "nat" list_props nil) nil)
   nil
   (last subtype "list_adt[real].cdr(standard_form_poly.f)"
         "{ff: standard_form_poly.Polynomial | list_adt[real].cons?(ff)}")))
 (last_TCC2 0
  (last_TCC2-1 nil 3777799350 ("" (termination-tcc) nil nil)
   ((length def-decl "nat" list_props nil)) nil
   (last termination
         "standard_form_poly.last(list_adt[real].cdr(standard_form_poly.f))"
         "nil")))
 (last_cdr_TCC1 0
  (last_cdr_TCC1-1 nil 3777799350 ("" (subtype-tcc) nil nil)
   (nil (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil) nil
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (last_cdr subtype "standard_form_poly.f"
    "{ff: standard_form_poly.Polynomial | list_adt[real].cons?(ff)}")))
 (last_cdr_TCC2 0
  (last_cdr_TCC2-1 nil 3777799350
   ("" (skeep)
    (("" (typepred "f")
      (("" (expand "length" -2) (("" (assert) nil nil)) nil)) nil))
    nil)
   ((length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil) nil
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    nil)
   nil
   (last_cdr subtype "list_adt[real].cdr(standard_form_poly.f)"
    "{ff: standard_form_poly.Polynomial | list_adt[real].cons?(ff)}")))
 (last_cdr 0
  (last_cdr-1 nil 3777799483
   ("" (induct "f")
    (("1" (assert) nil nil) ("2" (assert) (("2" (grind) nil nil)) nil)
     ("3" (skeep)
      (("3" (expand "length" -2 1)
        (("3" (assert)
          (("3" (case "null?(cons2_var)")
            (("1" (assert) nil nil)
             ("2" (case "length(cons2_var)=1")
              (("1" (assert)
                (("1" (expand "last" 2)
                  (("1" (lift-if 2)
                    (("1" (split 2)
                      (("1" (flatten)
                        (("1" (assert)
                          (("1" (expand "length" -1)
                            (("1" (assert) nil nil)) nil))
                          nil))
                        nil)
                       ("2" (assert)
                        (("2" (flatten)
                          (("2" (expand "last" 2)
                            (("2" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (assert)
                (("2" (expand "last" 3)
                  (("2" (assert)
                    (("2" (lift-if)
                      (("2" (assert)
                        (("2" (split)
                          (("1" (flatten)
                            (("1" (expand "length" -1)
                              (("1" (assert) nil nil)) nil))
                            nil)
                           ("2" (propax) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (assert)
      (("4" (skeep) (("4" (assert) (("4" (grind) nil nil)) nil)) nil))
      nil)
     ("5" (skeep) (("5" (grind) nil nil)) nil))
    nil)
   ((nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil) nil nil
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (list type-decl nil list_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil))
   shostak))
 (chop_TCC1 0
  (chop_TCC1-1 nil 3777799350 ("" (subtype-tcc) nil nil)
   (nil (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil) nil
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil (chop subtype "standard_form_poly.f" "(list_adt[real].cons?)")))
 (chop_TCC2 0
  (chop_TCC2-1 nil 3777799350 ("" (termination-tcc) nil nil)
   (nil (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil) nil
    (length def-decl "nat" list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (chop termination
         "standard_form_poly.chop(list_adt[real].cdr(standard_form_poly.f))"
         "nil")))
 (first_chop_TCC1 0
  (first_chop_TCC1-1 nil 3777799350
   ("" (skeep)
    (("" (typepred "f")
      (("" (expand "chop" 1) (("" (propax) nil nil)) nil)) nil))
    nil)
   ((length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (> const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil) nil
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil) nil nil)
   nil
   (first_chop subtype "standard_form_poly.chop(standard_form_poly.f)"
    "(list_adt[real].cons?)")))
 (first_chop 0
  (first_chop-1 nil 3777800579
   ("" (induct "f")
    (("1" (assert) nil nil)
     ("2" (assert)
      (("2" (expand "length" 1) (("2" (propax) nil nil)) nil)) nil)
     ("3" (skeep)
      (("3" (case "null?(cons2_var)")
        (("1" (expand "chop" 1) (("1" (assert) nil nil)) nil)
         ("2" (assert)
          (("2" (case "length(cons2_var)=1")
            (("1" (assert)
              (("1" (expand "chop" 2) (("1" (propax) nil nil)) nil))
              nil)
             ("2" (assert)
              (("2" (case "length(cons2_var)<=1")
                (("1" (assert) (("1" (grind) nil nil)) nil)
                 ("2" (assert)
                  (("2" (expand "chop" 4) (("2" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (skeep) (("4" (grind) nil nil)) nil)
     ("5" (skeep) (("5" (grind) nil nil)) nil))
    nil)
   (nil nil
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (> const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list_induction formula-decl nil list_adt nil) nil
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (<= const-decl "bool" reals nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil))
 (chop_cdr_TCC1 0
  (chop_cdr_TCC1-1 nil 3777799350
   ("" (skeep)
    (("" (typepred "f")
      (("" (expand "chop" 1 1)
        (("" (lift-if 1)
          (("" (split 1)
            (("1" (expand "length" 1)
              (("1" (assert)
                (("1" (expand "length" -1) (("1" (assert) nil nil))
                  nil))
                nil))
              nil)
             ("2" (flatten) (("2" (assert) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (real nonempty-type-from-decl nil reals nil) nil
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (length def-decl "nat" list_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    nil nil)
   nil
   (chop_cdr subtype "standard_form_poly.chop(standard_form_poly.f)"
    "(list_adt[real].cons?)")))
 (chop_cdr 0
  (chop_cdr-1 nil 3777800614
   (""
    (case "FORALL (n:nat, f: {ff: Polynomial | cons?(ff) AND cons?(cdr(ff))}):
                      length(f)=n IMPLIES cdr(chop(f)) = chop(cdr(f))")
    (("1" (skeep)
      (("1" (assert) (("1" (inst -1 "length(f)" "f") nil nil)) nil))
      nil)
     ("2" (assert)
      (("2" (hide 2)
        (("2" (induct "n")
          (("1" (skeep)
            (("1" (typepred "f")
              (("1" (assert)
                (("1" (expand "length") (("1" (assert) nil nil)) nil))
                nil))
              nil))
            nil)
           ("2" (skeep)
            (("2" (skeep)
              (("2" (expand "chop" 1 1)
                (("2" (assert)
                  (("2" (case "length(f)=1")
                    (("1" (assert)
                      (("1" (expand "length" -1)
                        (("1" (assert)
                          (("1" (expand "length" -1)
                            (("1" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (assert)
            (("3" (hide 2)
              (("3" (skeep)
                (("3" (typepred "f")
                  (("3" (expand "chop" 1)
                    (("3" (assert)
                      (("3" (case "length(f)=1")
                        (("1" (assert)
                          (("1" (expand "length" -1)
                            (("1" (expand "length" -1)
                              (("1" (assert) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (assert)
                          (("2" (case "length(f)=0")
                            (("1" (expand "length" -1)
                              (("1" (assert) nil nil)) nil)
                             ("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2)
      (("3" (skeep)
        (("3" (expand "chop" 1)
          (("3" (case "length(f)=1")
            (("1" (expand "length" -1)
              (("1" (typepred "f")
                (("1" (assert)
                  (("1" (expand "length" 1 1)
                    (("1" (assert)
                      (("1" (expand "length" -4)
                        (("1" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (assert)
              (("2" (lift-if 2)
                (("2" (assert)
                  (("2" (case "length(f)=0")
                    (("1" (typepred "f")
                      (("1" (expand "length" -4)
                        (("1" (assert) nil nil)) nil))
                      nil)
                     ("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   (nil (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil) nil
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil))
   nil))
 (chop_length 0
  (chop_length-1 nil 3777800639
   ("" (induct "f")
    (("1" (assert) nil nil) ("2" (assert) nil nil)
     ("3" (assert)
      (("3" (skeep)
        (("3" (assert)
          (("3" (split)
            (("1" (assert)
              (("1" (expand "chop" 1)
                (("1" (expand "length" 1) (("1" (assert) nil nil))
                  nil))
                nil))
              nil)
             ("2" (assert)
              (("2" (expand "length" 2 1)
                (("2" (assert)
                  (("2" (case "length(cons2_var) /= 0")
                    (("1" (expand "length" -1) (("1" (propax) nil nil))
                      nil)
                     ("2" (assert)
                      (("2" (expand "length" 3 1)
                        (("2" (expand "chop" 3) (("2" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((list type-decl nil list_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    nil nil (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list_induction formula-decl nil list_adt nil) nil
    (/= const-decl "boolean" notequal nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil))
   nil))
 (standard_form?_TCC1 0
  (standard_form?_TCC1-1 nil 3777799350 ("" (subtype-tcc) nil nil)
   (nil (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil) nil)
   nil
   (standard_form? subtype "standard_form_poly.f"
                   "{ff: standard_form_poly.Polynomial | list_adt[real].cons?(ff)}")))
 (standard_form_TCC1 0
  (standard_form_TCC1-1 nil 3777799350 ("" (subtype-tcc) nil nil)
   (nil (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil) nil)
   nil
   (standard_form subtype "standard_form_poly.f"
                  "{ff: (standard_form_poly.standard_form?) | reals.<=(list_props[real].length(ff), list_props[real].length(standard_form_poly.f))}")))
 (standard_form_TCC2 0
  (standard_form_TCC2-1 nil 3777799350
   ("" (skeep)
    (("" (lemma "chop_length")
      (("" (inst -1 "f")
        (("1" (assert) nil nil)
         ("2" (expand "standard_form?" 2) (("2" (assert) nil nil))
          nil))
        nil))
      nil))
    nil)
   (nil nil
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) nil
    nil nil)
   nil
   (standard_form termination
                  "standard_form_poly.standard_form(standard_form_poly.chop(standard_form_poly.f))"
                  "nil")))
 (standard_form_TCC3 0
  (standard_form_TCC3-1 nil 3777799350
   ("" (skeep)
    (("" (typepred "v(chop(f))")
      (("" (lemma "chop_length")
        (("" (inst -1 "f")
          (("1" (assert) nil nil)
           ("2" (expand "standard_form?" 2) (("2" (assert) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   (nil (<= const-decl "bool" reals nil) nil
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil) nil
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) nil
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    nil nil)
   nil
   (standard_form subtype
                  "standard_form_poly.standard_form(standard_form_poly.chop(standard_form_poly.f))"
                  "{ff: (standard_form_poly.standard_form?) | reals.<=(list_props[real].length(ff), list_props[real].length(standard_form_poly.f))}")))
 (standard_form_ex 0
  (standard_form_ex-1 nil 3787063584
   ("" (eval-expr 1) (("" (assert) nil nil)) nil)
   ((listn_0 name-judgement "listn[real](0)" standard_form_poly nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (Polynomial type-eq-decl nil standard_form_poly nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (standard_form? const-decl "bool" standard_form_poly nil)
    (real nonempty-type-from-decl nil reals nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (standard_form def-decl
                   "{ff: (standard_form?) | length(ff) <= length(f)}"
                   standard_form_poly nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil))
   shostak))
 (standard_form_cdr 0
  (standard_form_cdr-1 nil 3777800664
   ("" (skeep)
    (("" (assert)
      (("" (expand "standard_form?" -2)
        (("" (split -2)
          (("1" (propax) nil nil)
           ("2" (expand "standard_form?" 2)
            (("2" (split 2)
              (("1" (propax) nil nil)
               ("2" (flatten)
                (("2" (assert)
                  (("2" (split 2)
                    (("1" (lemma "last_cdr")
                      (("1" (inst -1 "f")
                        (("1" (assert) nil nil)
                         ("2" (assert)
                          (("2" (case "length(f)=1")
                            (("1" (expand "length" -1)
                              (("1"
                                (assert)
                                (("1"
                                  (expand "length" -1)
                                  (("1" (grind) nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert) (("2" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   (nil nil
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    nil nil (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil) (> const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    nil)
   nil))
 (standard_form_cdr1 0
  (standard_form_cdr1-1 nil 3777800695
   ("" (skeep)
    (("" (expand "standard_form?")
      (("" (lemma "last_cdr")
        (("" (inst -1 "f")
          (("1" (split) (("1" (propax) nil nil) ("2" (assert) nil nil))
            nil)
           ("2" (assert)
            (("2" (typepred "f")
              (("2" (expand "length" 1)
                (("2" (assert)
                  (("2" (expand "length" 1) (("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   (nil nil
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (> const-decl "bool" reals nil) (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil) nil
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil) nil
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    nil)
   nil))
 (standard_form_cdr2_TCC1 0
  (standard_form_cdr2_TCC1-1 nil 3777799350
   ("" (skeep)
    (("" (typepred "f")
      (("" (expand "standard_form" -2 1)
        (("" (assert)
          (("" (expand "standard_form?" -2) (("" (propax) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   (nil (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (<= const-decl "bool" reals nil) nil
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (real nonempty-type-from-decl nil reals nil) nil
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil) nil)
   nil
   (standard_form_cdr2 subtype "standard_form_poly.f"
    "(list_adt[real].cons?)")))
 (standard_form_cdr2 0
  (standard_form_cdr2-1 nil 3777800729
   (""
    (case " FORALL (n:nat, f: {ff: Polynomial | cons?(standard_form(ff))}):
              length(f)=n IMPLIES (standard_form(f) = cons(car(f), standard_form(cdr(f))))")
    (("1" (skeep) (("1" (inst -1 "length(f)" "f") nil nil)) nil)
     ("2" (hide 2)
      (("2" (induct "n")
        (("1" (skeep)
          (("1" (case "NOT f=null")
            (("1" (expand "length" -1) (("1" (assert) nil nil)) nil)
             ("2" (replace -1 1)
              (("2" (typepred "f")
                (("2" (replace -3 -2)
                  (("2" (expand "standard_form" -2)
                    (("2" (assert)
                      (("2" (expand "standard_form?" -2 1)
                        (("2" (propax) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (skeep)
          (("2" (skeep)
            (("2" (expand "standard_form" 1 1)
              (("2" (lift-if 1)
                (("2" (split 1)
                  (("1" (case "cdr(f)=null")
                    (("1" (replace -1 1)
                      (("1" (hide -)
                        (("1" (flatten)
                          (("1" (assert)
                            (("1" (grind)
                              (("1"
                                (decompose-equality 1)
                                (("1"
                                  (typepred "f")
                                  (("1"
                                    (expand "standard_form" -2)
                                    (("1" (propax) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (expand "last" 1)
                                (("2"
                                  (decompose-equality 2)
                                  (("2"
                                    (lift-if 2)
                                    (("2"
                                      (split 2)
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (expand "length" -1)
                                          (("1"
                                            (expand "length" -1)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (lift-if -1)
                                                (("1"
                                                  (split -1)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (flatten)
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (reveal -)
                                            (("2" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "standard_form?" 2 1)
                      (("2" (lift-if 2)
                        (("2" (split 2)
                          (("1" (flatten)
                            (("1" (typepred "f")
                              (("1"
                                (expand "standard_form" -2 1)
                                (("1"
                                  (expand "standard_form?" -2)
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (flatten)
                            (("2" (assert)
                              (("2"
                                (split 2)
                                (("1" (propax) nil nil)
                                 ("2"
                                  (flatten)
                                  (("2"
                                    (lemma "last_cdr")
                                    (("2"
                                      (inst -1 "f")
                                      (("1"
                                        (expand "standard_form" 2 1)
                                        (("1"
                                          (expand "standard_form?" 2 1)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (decompose-equality 2)
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand "length" 1 1)
                                        (("2"
                                          (expand "length" 1 1)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (assert)
                      (("2" (reveal -)
                        (("2" (typepred "f")
                          (("2" (hide -1)
                            (("2" (inst -3 "chop(f)")
                              (("1"
                                (lemma "chop_length")
                                (("1"
                                  (inst -1 "f")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (replace -4 2)
                                      (("1"
                                        (decompose-equality 2)
                                        (("1"
                                          (lemma "first_chop")
                                          (("1"
                                            (inst -1 "f")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (case
                                                 "NOT cdr(f)=null")
                                                (("1"
                                                  (expand "length" 2)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (expand
                                                       "length"
                                                       2)
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand
                                                   "standard_form"
                                                   -3)
                                                  (("2"
                                                    (lemma
                                                     "chop_length")
                                                    (("2"
                                                      (inst -1 "f")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (expand
                                                           "length"
                                                           -1)
                                                          (("2"
                                                            (lift-if)
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand "standard_form" 1 2)
                                          (("2"
                                            (lift-if 1)
                                            (("2"
                                              (split 1)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (lemma
                                                   "standard_form_cdr1")
                                                  (("1"
                                                    (inst -1 "f")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (expand
                                                       "length"
                                                       -2)
                                                      (("2"
                                                        (lift-if -2)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (split -2)
                                                            (("1"
                                                              (flatten)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (case
                                                                   "NOT cdr(f)=null")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (replace
                                                                     -1
                                                                     2)
                                                                    (("2"
                                                                      (case
                                                                       "NOT chop(f)=null")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil)
                                                                       ("2"
                                                                        (replace
                                                                         -1
                                                                         2)
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (expand
                                                                             "standard_form"
                                                                             -6)
                                                                            (("2"
                                                                              (replace
                                                                               -1
                                                                               -6)
                                                                              (("2"
                                                                                (expand
                                                                                 "standard_form"
                                                                                 -6)
                                                                                (("2"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (flatten)
                                                              (("2"
                                                                (case
                                                                 " NOT cdr(f)=null")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (expand
                                                                   "standard_form"
                                                                   -4)
                                                                  (("2"
                                                                    (case
                                                                     "NOT length(f)=1")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (expand
                                                                       "length"
                                                                       -1)
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (lemma "chop_cdr")
                                                  (("2"
                                                    (inst -1 "f")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (expand
                                                       "standard_form?"
                                                       2)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (expand "standard_form" -1)
                                (("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (hide 2)
          (("3" (skeep)
            (("3" (typepred "f")
              (("3" (case "NOT f=null")
                (("1" (assert) nil nil)
                 ("2" (replace -1 -4)
                  (("2" (replace -1 -3)
                    (("2" (assert)
                      (("2" (expand "standard_form" -3)
                        (("2" (expand "standard_form?" -3)
                          (("2" (propax) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2)
      (("3" (skeep)
        (("3" (case "f=null")
          (("1" (typepred "f")
            (("1" (expand "standard_form" -2)
              (("1" (assert)
                (("1" (expand "standard_form?" -2)
                  (("1" (propax) nil nil)) nil))
                nil))
              nil))
            nil)
           ("2" (assert) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil) nil
    (length def-decl "nat" list_props nil)
    (<= const-decl "bool" reals nil) nil
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil) nil
    (pred type-eq-decl nil defined_types nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    nil
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    nil nil nil nil nil
    (list_cons_extensionality formula-decl nil list_adt nil) nil
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    nil (> const-decl "bool" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (standard_form_cdr3 0
  (standard_form_cdr3-1 nil 3777800757
   (""
    (case "FORALL (n:nat, f:
                              {ff: Polynomial |
                                 cons?(ff) AND cons?(standard_form(cdr(ff)))}):
                      length(f)=n IMPLIES standard_form(f) = cons(car(f), standard_form(cdr(f)))")
    (("1" (skeep) (("1" (inst -1 "length(f)" "f") nil nil)) nil)
     ("2" (assert)
      (("2" (hide 2)
        (("2" (induct "n")
          (("1" (skeep)
            (("1" (typepred "f")
              (("1" (hide -1)
                (("1" (assert)
                  (("1" (expand "length" -3) (("1" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (skeep)
            (("2" (skeep)
              (("2" (typepred "f")
                (("2" (hide -1)
                  (("2" (case "j=0")
                    (("1" (expand "length" -5)
                      (("1" (assert)
                        (("1" (replace -1 -5)
                          (("1" (expand "standard_form" -3)
                            (("1" (expand "length" -5)
                              (("1"
                                (lift-if)
                                (("1"
                                  (split -5)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "standard_form?" -4)
                                      (("1" (propax) nil nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (flatten)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert)
                      (("2" (expand "standard_form" 2 1)
                        (("2" (case "standard_form?(f)")
                          (("1" (assert)
                            (("1" (lemma "standard_form_cdr")
                              (("1"
                                (inst -1 "f")
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "standard_form" 2)
                                    (("1"
                                      (decompose-equality 2)
                                      nil
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert)
                            (("2" (case "j=1")
                              (("1"
                                (assert)
                                (("1"
                                  (replace -1 -5)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (lemma "chop_length")
                                      (("1"
                                        (inst -1 "f")
                                        (("1"
                                          (replace -6 -1)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (lemma
                                               "standard_form_cdr1")
                                              (("1"
                                                (inst -1 "f")
                                                (("1"
                                                  (expand
                                                   "standard_form"
                                                   3
                                                   2)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand
                                                         "chop"
                                                         4
                                                         2)
                                                        (("1"
                                                          (expand
                                                           "length"
                                                           -6)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (expand
                                                               "standard_form"
                                                               4
                                                               2)
                                                              (("1"
                                                                (expand
                                                                 "standard_form?"
                                                                 4
                                                                 1)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (expand
                                                                     "standard_form"
                                                                     -4)
                                                                    (("1"
                                                                      (expand
                                                                       "length"
                                                                       -1)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (lemma
                                                                           "chop_cdr")
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             "f")
                                                                            (("1"
                                                                              (replace
                                                                               -1
                                                                               -2)
                                                                              (("1"
                                                                                (expand
                                                                                 "standard_form"
                                                                                 -5)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "standard_form?"
                                                                                     -5)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "length"
                                                                                       -2)
                                                                                      (("1"
                                                                                        (lift-if
                                                                                         -2)
                                                                                        (("1"
                                                                                          (split
                                                                                           -2)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil)
                                                                                           ("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (flatten)
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (assert)
                                                  (("2"
                                                    (expand
                                                     "length"
                                                     -6)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (expand
                                                         "length"
                                                         -6)
                                                        (("2"
                                                          (expand
                                                           "length"
                                                           -6)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (assert)
                                (("2"
                                  (inst -3 "chop(f)")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (lemma "chop_length")
                                      (("1"
                                        (inst -1 "f")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (lemma "first_chop")
                                            (("1"
                                              (inst -1 "f")
                                              (("1"
                                                (replace -1 -5)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (lemma "chop_cdr")
                                                    (("1"
                                                      (inst -1 "f")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (lemma
                                                           "standard_form_cdr1")
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "f")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (expand
                                                                 "standard_form"
                                                                 5
                                                                 2)
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (expand
                                                               "length"
                                                               -7)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (expand
                                                                   "length"
                                                                   -7)
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (expand
                                                         "length"
                                                         -6)
                                                        (("2"
                                                          (expand
                                                           "length"
                                                           -6)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (split)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (lemma "chop_length")
                                        (("1"
                                          (inst -1 "f")
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (assert)
                                      (("2"
                                        (case "standard_form?(cdr(f))")
                                        (("1"
                                          (lemma "standard_form_cdr1")
                                          (("1"
                                            (inst -1 "f")
                                            (("1" (assert) nil nil)
                                             ("2"
                                              (assert)
                                              (("2"
                                                (expand "length" -4)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (expand
                                                     "length"
                                                     -4)
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (assert)
                                          (("2"
                                            (expand
                                             "standard_form"
                                             6
                                             2)
                                            (("2"
                                              (expand
                                               "standard_form"
                                               -2)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (lemma "chop_cdr")
                                                  (("2"
                                                    (inst -1 "f")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      (("2"
                                                        (lemma
                                                         "chop_cdr")
                                                        (("2"
                                                          (case
                                                           "cdr(f)=null")
                                                          (("1"
                                                            (replace
                                                             -1
                                                             -4)
                                                            (("1"
                                                              (expand
                                                               "chop"
                                                               -4)
                                                              (("1"
                                                                (expand
                                                                 "standard_form")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (expand
                                                                     "standard_form?")
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil) nil
    (length def-decl "nat" list_props nil)
    (<= const-decl "bool" reals nil) nil
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil) nil
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil) nil
    (> const-decl "bool" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (odd_plus_odd_is_even application-judgement "even_int" integers
     nil)
    nil nil
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    nil nil nil
    (list_cons_extensionality formula-decl nil list_adt nil) nil
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil))
   nil))
 (standard_form_car 0
  (standard_form_car-1 nil 3777800806
   (""
    (case "FORALL (n:nat, f: {ff: Polynomial | cons?(ff) AND cons?(cdr(ff))}):
                             length(f)=n IMPLIES (standard_form(cdr(f)) = null IMPLIES
                              standard_form(f) = standard_form((: car(f) :)))")
    (("1" (skeep)
      (("1" (inst -1 "length(f)" "f") (("1" (assert) nil nil)) nil))
      nil)
     ("2" (hide 2)
      (("2" (induct "n")
        (("1" (skeep)
          (("1" (expand "length" -1)
            (("1" (typepred "f") (("1" (assert) nil nil)) nil)) nil))
          nil)
         ("2" (skeep)
          (("2" (skeep)
            (("2" (expand "standard_form" 1 1)
              (("2" (lift-if 1)
                (("2" (split)
                  (("1" (flatten)
                    (("1" (lemma "standard_form_cdr")
                      (("1" (inst -1 "f")
                        (("1" (assert)
                          (("1" (expand "standard_form" -5)
                            (("1" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert)
                    (("2" (flatten)
                      (("2" (expand "standard_form" -3)
                        (("2" (lift-if -3)
                          (("2" (split -3)
                            (("1" (flatten)
                              (("1"
                                (hide -3)
                                (("1" (grind) nil nil))
                                nil))
                              nil)
                             ("2" (flatten)
                              (("2"
                                (lemma "chop_cdr")
                                (("2"
                                  (inst -1 "f")
                                  (("2"
                                    (inst -3 "chop(f)")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (lemma "chop_length")
                                        (("1"
                                          (inst -1 "f")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (lemma "first_chop")
                                              (("1"
                                                (inst -1 "f")
                                                (("1"
                                                  (replace -1 3 rl)
                                                  (("1"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (assert)
                                                  (("2"
                                                    (typepred "f")
                                                    (("2"
                                                      (hide -1)
                                                      (("2"
                                                        (expand
                                                         "length"
                                                         1)
                                                        (("2"
                                                          (expand
                                                           "length"
                                                           1)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (split)
                                      (("1"
                                        (case "length(f)=1")
                                        (("1"
                                          (expand "length" -1)
                                          (("1"
                                            (expand "length" -1)
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (lemma "chop_length")
                                          (("2"
                                            (inst -1 "f")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand "standard_form" 4 1)
                                        (("2"
                                          (lift-if 4)
                                          (("2"
                                            (split 4)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (case
                                                 "NOT length(f)=2")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (lemma
                                                     "chop_length")
                                                    (("1"
                                                      (inst -1 "f")
                                                      (("1"
                                                        (expand
                                                         "length"
                                                         -1
                                                         2)
                                                        (("1"
                                                          (lift-if -1)
                                                          (("1"
                                                            (split -1)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (flatten)
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand "chop" -2 1)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (case
                                                       "cdr(chop(f))=null")
                                                      (("1"
                                                        (replace -1 -4)
                                                        (("1"
                                                          (replace
                                                           -4
                                                           -3
                                                           rl)
                                                          (("1"
                                                            (expand
                                                             "standard_form?"
                                                             -3)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (expand
                                                                 "last"
                                                                 -3)
                                                                (("1"
                                                                  (expand
                                                                   "length"
                                                                   -3
                                                                   1)
                                                                  (("1"
                                                                    (split
                                                                     -3)
                                                                    (("1"
                                                                      (propax)
                                                                      nil
                                                                      nil)
                                                                     ("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (expand
                                                                         "standard_form"
                                                                         2
                                                                         1)
                                                                        (("2"
                                                                          (expand
                                                                           "chop"
                                                                           2)
                                                                          (("2"
                                                                            (expand
                                                                             "chop"
                                                                             2)
                                                                            (("2"
                                                                              (expand
                                                                               "length"
                                                                               -2)
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (expand
                                                         "length"
                                                         -1)
                                                        (("2"
                                                          (expand
                                                           " chop"
                                                           -3
                                                           2)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (flatten)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (replace -1 3)
                                                  (("2"
                                                    (expand "chop" 3)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (lift-if 3)
                                                        (("2"
                                                          (split 3)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (expand
                                                               "chop"
                                                               3
                                                               2)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (lift-if
                                                                   3)
                                                                  (("1"
                                                                    (split
                                                                     3)
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (expand
                                                                         "length"
                                                                         -1)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (expand
                                                                             "standard_form?"
                                                                             4)
                                                                            (("1"
                                                                              (expand
                                                                               "last"
                                                                               4)
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (expand
                                                                                   "length"
                                                                                   -1)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (flatten)
                                                                      (("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (flatten)
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil) nil
    (<= const-decl "bool" reals nil) nil
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil) nil
    (pred type-eq-decl nil defined_types nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil) nil nil nil nil
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (> const-decl "bool" reals nil) nil
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    nil (int_minus_int_is_int application-judgement "int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    nil)
   nil))
 (standard_null_decomp 0
  (standard_null_decomp-1 nil 3777800835
   (""
    (case "FORALL (n:nat, f: {ff: Polynomial | cons?(ff)}):
                     length(f)=n IMPLIES ( null?(standard_form(f)) IFF
                       null?(standard_form((: car(f) :))) AND null?(standard_form(cdr(f))))")
    (("1" (skeep) (("1" (inst -1 "length(f)" f) nil nil)) nil)
     ("2" (hide 2)
      (("2" (induct "n" 1)
        (("1" (skeep)
          (("1" (expand "length" -1) (("1" (assert) nil nil)) nil))
          nil)
         ("2" (skeep)
          (("2" (skeep)
            (("2" (case "j=0")
              (("1" (case "NOT cdr(f)=null")
                (("1" (expand "length" -3)
                  (("1" (assert)
                    (("1" (replace -1 -3)
                      (("1" (expand "length" -3)
                        (("1" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert)
                  (("2" (replace -1 1)
                    (("2" (expand "standard_form" 1 3)
                      (("2" (expand "standard_form?" 1 1)
                        (("2" (case "NOT f=(:car(f):)")
                          (("1" (decompose-equality 1) nil nil)
                           ("2" (assert)
                            (("2" (replace -1 1 rl 1)
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (split 2)
                (("1" (flatten)
                  (("1" (case "standard_form?(cdr(f))")
                    (("1" (lemma "standard_form_cdr1")
                      (("1" (inst -1 "f")
                        (("1" (assert)
                          (("1" (expand "standard_form" -3)
                            (("1" (propax) nil nil)) nil))
                          nil)
                         ("2" (expand "length" -4)
                          (("2" (assert)
                            (("2" (expand "length" -4)
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (expand "standard_form" 2 2)
                      (("2" (assert)
                        (("2" (expand "standard_form" -1)
                          (("2" (case "standard_form?(f)")
                            (("1" (lemma "standard_form_cdr")
                              (("1"
                                (inst -1 "f")
                                (("1" (assert) nil nil))
                                nil))
                              nil)
                             ("2" (assert)
                              (("2"
                                (lemma "chop_cdr")
                                (("2"
                                  (lemma "first_chop")
                                  (("2"
                                    (inst -1 "f")
                                    (("2"
                                      (inst -2 "f")
                                      (("2"
                                        (replace -1 3 rl)
                                        (("2"
                                          (inst -4 "chop(f)")
                                          (("2"
                                            (lemma "chop_length")
                                            (("2"
                                              (inst -1 "f")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (replace -3 3 rl)
                                                  (("2"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten)
                  (("2" (typepred "f")
                    (("2" (hide -1)
                      (("2" (case "standard_form?(f)")
                        (("1" (expand "standard_form" 1 1)
                          (("1" (assert)
                            (("1" (lemma "standard_form_cdr")
                              (("1"
                                (inst -1 "f")
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "standard_form" -5)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand "length" -7)
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert)
                          (("2" (expand "standard_form" 2 1)
                            (("2" (case "standard_form?(cdr(f))")
                              (("1"
                                (lemma "standard_form_cdr1")
                                (("1"
                                  (inst -1 "f")
                                  (("1" (assert) nil nil)
                                   ("2"
                                    (expand "length" -6)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (expand "length" -6)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (expand "standard_form" -3)
                                (("2"
                                  (assert)
                                  (("2"
                                    (inst -4 "chop(f)")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (lemma "first_chop")
                                        (("1"
                                          (lemma "chop_cdr")
                                          (("1"
                                            (lemma "chop_length")
                                            (("1"
                                              (inst -1 "f")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (inst -2 "f")
                                                  (("1"
                                                    (inst -3 "f")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (lemma "chop_length")
                                      (("2"
                                        (inst -1 "f")
                                        (("2"
                                          (expand "length" -1 2)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    nil (<= const-decl "bool" reals nil) nil
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil) nil
    (pred type-eq-decl nil defined_types nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    nil nil nil nil
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (> const-decl "bool" reals nil) nil nil nil
    (NOT const-decl "[bool -> bool]" booleans nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (list_cons_extensionality formula-decl nil list_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   nil))
 (standard_form_cons 0
  (standard_form_cons-1 nil 3777800899
   (""
    (case "FORALL (n:nat, f: {ff: Polynomial | cons?(ff)}):
                             length(f)=n IMPLIES (car(f) /= 0 IMPLIES
                              standard_form(f) = cons(car(f), standard_form(cdr(f))))")
    (("1" (skeep)
      (("1" (inst -1 "length(f)" "f") (("1" (assert) nil nil)) nil))
      nil)
     ("2" (hide 2)
      (("2" (induct "n" 1)
        (("1" (skeep)
          (("1" (typepred "f")
            (("1" (expand "length" -3) (("1" (assert) nil nil)) nil))
            nil))
          nil)
         ("2" (skeep)
          (("2" (skeep)
            (("2" (assert)
              (("2" (expand "standard_form" 2)
                (("2" (case "standard_form?(f)")
                  (("1" (assert)
                    (("1" (case "standard_form?(cdr(f))")
                      (("1" (assert)
                        (("1" (assert)
                          (("1" (decompose-equality 2) nil nil)) nil))
                        nil)
                       ("2" (lemma "last_cdr")
                        (("2" (expand "standard_form?" -2)
                          (("2" (expand "standard_form?" 1)
                            (("2" (assert)
                              (("2"
                                (case "null?(cdr(f))")
                                (("1" (assert) nil nil)
                                 ("2"
                                  (assert)
                                  (("2"
                                    (inst -1 "f")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (split 2)
                                        (("1" (assert) nil nil)
                                         ("2" (propax) nil nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (assert)
                                      (("2"
                                        (typepred "j")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (expand "length" -4)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (expand "length" 1)
                                                (("2"
                                                  (case "j=0")
                                                  (("1"
                                                    (replace -1 -5)
                                                    (("1"
                                                      (expand
                                                       "length"
                                                       -5)
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert)
                    (("2" (lift-if 3)
                      (("2" (case "standard_form?(cdr(f))")
                        (("1" (lemma "standard_form_cdr1")
                          (("1" (inst -1 "f")
                            (("1" (assert) nil nil)
                             ("2" (assert)
                              (("2"
                                (case "j=0")
                                (("1"
                                  (replace -1 -4)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "standard_form?" 2)
                                      (("1"
                                        (expand "last" 2)
                                        (("1" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (assert)
                                  (("2"
                                    (expand "length" -3)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (expand "length" -3)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert)
                          (("2" (inst -1 "chop(f)")
                            (("1" (assert)
                              (("1"
                                (lemma "chop_length")
                                (("1"
                                  (inst -1 "f")
                                  (("1"
                                    (replace -3 -1)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (lemma "first_chop")
                                        (("1"
                                          (inst -1 "f")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (replace -3 4)
                                              (("1"
                                                (decompose-equality 4)
                                                (("1"
                                                  (lemma "chop_cdr")
                                                  (("1"
                                                    (inst -1 "f")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      (("2"
                                                        (expand
                                                         "standard_form?"
                                                         3)
                                                        (("2"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (assert)
                                            (("2"
                                              (case "length(f)=0")
                                              (("1"
                                                (typepred "f")
                                                (("1"
                                                  (hide -1)
                                                  (("1"
                                                    (expand
                                                     "length"
                                                     -2)
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (typepred "j")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (case
                                                     "length(f)=1")
                                                    (("1"
                                                      (case
                                                       "null?(cdr(f))")
                                                      (("1"
                                                        (expand
                                                         "chop"
                                                         6
                                                         2)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (expand
                                                             "length"
                                                             -2)
                                                            (("1"
                                                              (expand
                                                               "standard_form?"
                                                               3)
                                                              (("1"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        (("2"
                                                          (expand
                                                           "length"
                                                           -1)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (expand
                                                               "length"
                                                               -1)
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert)
                              (("2"
                                (typepred "f")
                                (("2"
                                  (case "null?(chop(f))")
                                  (("1"
                                    (expand "standard_form" 5 1)
                                    (("1"
                                      (expand "standard_form?" 5 1)
                                      (("1"
                                        (lemma "chop_length")
                                        (("1"
                                          (inst -1 "f")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "length" -1)
                                              (("1"
                                                (case
                                                 "NOT null?(cdr(f))")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand
                                                     "length"
                                                     -1)
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (assert)
                                                  (("2"
                                                    (expand
                                                     "standard_form?"
                                                     2)
                                                    (("2"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    nil (<= const-decl "bool" reals nil) nil
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (/= const-decl "boolean" notequal nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil) nil
    (AND const-decl "[bool, bool -> bool]" booleans nil) nil
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil) nil
    (pred type-eq-decl nil defined_types nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    nil nil nil nil nil
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    nil nil
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (> const-decl "bool" reals nil) nil
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (list_cons_extensionality formula-decl nil list_adt nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   nil))
 (standard_form 0
                (standard_form-1 nil 3777800967
                 ("" (induct "f")
                  (("1" (assert) nil nil) ("2" (assert) nil nil)
                   ("3" (assert) nil nil))
                  nil)
                 ((list type-decl nil list_adt nil)
                  (bool nonempty-type-eq-decl nil booleans nil)
                  (PRED type-eq-decl nil defined_types nil) nil
                  (AND const-decl "[bool, bool -> bool]" booleans nil)
                  (IMPLIES const-decl "[bool, bool -> bool]" booleans
                   nil)
                  (cons? adt-recognizer-decl "[list -> boolean]"
                   list_adt nil)
                  nil nil (<= const-decl "bool" reals nil)
                  (rational_pred const-decl "[real -> boolean]"
                                 rationals nil)
                  (rational nonempty-type-from-decl nil rationals nil)
                  (integer_pred const-decl "[rational -> boolean]"
                                integers nil)
                  (int nonempty-type-eq-decl nil integers nil)
                  (>= const-decl "bool" reals nil)
                  (nat nonempty-type-eq-decl nil naturalnumbers nil)
                  (length def-decl "nat" list_props nil) nil
                  (real nonempty-type-from-decl nil reals nil)
                  (real_pred const-decl "[number_field -> boolean]"
                             reals nil)
                  (number_field nonempty-type-from-decl nil
                   number_fields nil)
                  (number_field_pred const-decl "[number -> boolean]"
                   number_fields nil)
                  (boolean nonempty-type-decl nil booleans nil)
                  (number nonempty-type-decl nil numbers nil)
                  (list_induction formula-decl nil list_adt nil) nil)
                 nil)))

