standard_form_unique % Welcome
		: THEORY

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%|This file proves that the standard|%
%|form of a polynomial is unique for|%
%|all polynomials computing the same|%
%|function. that is, sf(p) = sf(q)  |%
%|<=> for all x, p(x) = q(x).       |%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Author:                      AD,JTS
% ***This contains the final part
%    of Section 2.1, namely Thoerem 2.2***


%-----     %
  BEGIN
%     -----%


  IMPORTING eval_MultPoly,
            standard_form_extras,
	    dimension_induction,
	    eval_properties

%% Prep work for the => direction.
%  Proofs that each of the steps in standard form preserve evaluation.

%% cutting zero exponents from the polynomial preserves evaluation.
%% first for a single monomial

  monom_cut_eval: LEMMA
  FORALL (n:nat, m: monomial, (vals: list[real] | length(vals)>= length(m`alpha))):
  n = length(m`alpha) IMPLIES
  full_eval(m)(vals) =
  full_eval( (# C := m`C, alpha:= cutting(m`alpha) #))(vals)

%% then for the entire polynomial

  mv_cut_eval: LEMMA
  FORALL (p : MultPoly, vals: {l :list[real] | length(l)>=max_length(p)}):
  full_eval(p)(vals) = full_eval(mv_cut(p))(vals)

%% lifting the polynomial max_length preserves evaluation.
%% first for a single monomial

  monom_lft_eval: LEMMA
  FORALL (n: nat, (m: monomial | n >= length(m`alpha)),
  (vals: list[real] | length(vals) >= n)):
  full_eval(m)(vals) =
  full_eval((# C := m`C, alpha := append(m`alpha,(: 0 :) ^ (n - length(m`alpha))) #))(vals)

%% then for the entire polynomial

  lft_eval: LEMMA
  FORALL (p : MultPoly, vals: {l :list[real] | length(l)>=max_length(p)}):
  full_eval(p)(vals) = full_eval(lft(p)(max_length(p)))(vals)

  lft_eval_gen: LEMMA
  FORALL (p : MultPoly,n:nat | n >= max_length(p), vals: {l :list[real] | length(l)>=n}):
  full_eval(p)(vals) = full_eval(lft(p)(n))(vals)

%% deleting terms with zero coefficients preserves evaluation.

  allnonzero_eval: LEMMA
  FORALL (p : MultPoly, vals: {l :list[real] | length(l)>=max_length(p)}):
  full_eval(p)(vals) = full_eval(allnonzero(p))(vals)

%% sorting (after a lift) preserves evaluation.

  sorting_eval: LEMMA
  FORALL (p : MultPoly, vals: {l :list[real] | length(l)>=max_length(p)}):
  full_eval(p)(vals) = full_eval(mv_sort(p))(vals)

%% combining like coefficients preserves evaluation.

  simplify_eval: LEMMA
  FORALL (p : MultPoly, vals: {l :list[real] | length(l)>=max_length(p)}):
  full_eval(p)(vals) = full_eval(simplify(p))(vals)

%% proof of full eval equivalence.

  standard_form_full_eval: LEMMA
  FORALL (p: MultPoly, vals: {l :list[real] | length(l)>=max_length(p)}):
  full_eval(mv_standard_form(p))(vals) = full_eval(p)(vals)

%% proof of the forward direction
%% sf(p) = sf(q) implies for all x, p(x) = q(x).
%% using the above lemmas.

 standard_impl_eval: LEMMA
  FORALL (p,q : MultPoly, vals: {l :list[real] | length(l)>=max_length(p) AND length(l)>=max_length(q)}):
  mv_standard_form(p) = mv_standard_form(q)
  IMPLIES 
  full_eval(p)(vals) = full_eval(q)(vals)

%% to show the reverse direction add_full_eval must be shown

  add_mono_eval: LEMMA
  FORALL(m1,m2:monomial,vals:list[real] | length(vals) >= max(length(m1`alpha),length(m2`alpha))):
  m1`alpha = m2`alpha IMPLIES
  full_eval(add_mono(m1,m2))(vals) = full_eval(m1)(vals) + full_eval(m2)(vals)

  sorted_sans_add_eval: LEMMA
   FORALL(n:nat, p:(mv_standard_sans_cut?(n)), q:(mv_standard_sans_cut?(n)),
   (vals: list[real] | length(vals) >= max_length(p) and length(vals) >= max_length(q))):
   full_eval(sorted_sans_add(n,p,q))(vals) = full_eval(p)(vals) + full_eval(q)(vals)

  % @QED add_full_eval proved by lmwhite3 on Wed, 18 May 2022 13:44:33 GMT
  add_full_eval: LEMMA
  FORALL (p,q: MultPoly, (vals: list[real] | length(vals) >= max_length(p) and length(vals) >= max_length(q))):
  full_eval(add(p,q))(vals) = full_eval(p)(vals) + full_eval(q)(vals)
 
  % @QED mp_mono_eval proved by lmwhite3 on Fri, 20 May 2022 16:21:33 GMT
  mp_mono_eval: LEMMA
  FORALL(m:monomial, q:MultPoly, vals:list[real]| length(vals)>=max(length(m`alpha),max_length(q))): 
  full_eval(mp_mono_mult(m , q))(vals) = full_eval(q)(vals) * full_eval(m)(vals)

  % @QED mult_full_eval proved by lmwhite3 on Fri, 20 May 2022 16:34:34 GMT
  mult_full_eval: LEMMA
  FORALL (p,q: MultPoly, (vals: list[real] | length(vals) >= max_length(p) and length(vals) >= max_length(q))):
  full_eval(mp_mult(p,q))(vals) = full_eval(p)(vals)*full_eval(q)(vals)
 



%% one lemms about add
   standard_form_adds_id: LEMMA
   FORALL (p,q: MultPoly, (vals: list[real] | length(vals) >= max_length(p) and length(vals) >= max_length(q))):
   full_eval(add(p,q))(vals) = full_eval(mv_standard_form(add(p,q)))(vals)

%the reverse direction. It's broken into 3 main lemmas.

%% Translate the problem from two polynomials to a property of a single polynomial.
%% If two polynomials evaluate the same, then their subtraction (in a way) evaluates to zero.

 equal_everywhere_add: LEMMA
  FORALL (p,q: MultPoly, vals: {l :list[real] | length(l)>=max_length(p) AND length(l)>=max_length(q)}):
  full_eval(p)(vals) = full_eval(q)(vals) IMPLIES
  full_eval(add(p, mult(-1,q)))(vals) = 0

%% The main lemma: "standard_form_nonzero," which uses some machinery from polysafe and an induction to prove that
%% a nonempty polynomial in standard form has a point in R^n that evaluates to something non-zero.

 standard_form_nonzero: LEMMA
  FORALL (p: (mv_standard_form?)):
  cons?(p) IMPLIES
  EXISTS ((vals: list[real] | length(vals)=max_length(p))):
  full_eval(p)(vals) /= 0

%% Moving back to two polynomials from a single one.
%% If two polynomials are in standard form, and they are null after subtracting, then they are identical as lists.  

 standard_form_add_null: LEMMA
  FORALL (p, q: (mv_standard_form?)):
  null?(add(p, mult(-1, q)))
  IMPLIES
  p = q

%% proof of the reverse direction.
%% p(x) = q(x) forall x implies sf(p) = sf(q).
%% using the above lemmas 

 eval_impl_standard: LEMMA 
  FORALL (p,q : MultPoly):
  (FORALL (vals: {l :list[real] | length(l)>=max_length(p) AND length(l)>=max_length(q)}):
  full_eval(p)(vals) = full_eval(q)(vals))
  IMPLIES 
  mv_standard_form(p) = mv_standard_form(q)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%							%
%     Uniqueness of multivariate standard form.		%
%     		    		 	  		%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%*** This is Theorem 2.2 in paper ***

              standard_form_is_unique:
                      THEOREM
              FORALL (p,q : MultPoly):
     mv_standard_form(p) = mv_standard_form(q)

                        IFF
			
        FORALL ((x:list[real] | length(x) >=
         max(max_length(p), max_length(q)))):
         full_eval(p)(x) = full_eval(q)(x)
  


   %~~~   The End     ~~~%
  END standard_form_unique
