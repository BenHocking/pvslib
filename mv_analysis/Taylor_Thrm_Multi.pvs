Taylor_Thrm_Multi   [ n: posnat ] %Welcome back
%% n - Taylors thrm for f: Rn -> R
		: THEORY
		
%	              Aug 2018 JTS
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%|  Taylors thrm for first term   |%
%|      (mean value theorem)      |%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%-----     %
  BEGIN
%     -----%

%--------------------------------------------
%% Importing continuous_derivative[n] to have
%  multi var differentiability and continuously
%  differentiable

%% Importing analysis@taylors to relate
%  multi-variate Taylors thrm to single variate
%  Taylors thrm
%-------------------------------------

IMPORTING continuous_derivatives[n]
IMPORTING analysis@taylors

%--------------------------------------------
%% relateing our differentiable function
%  to a single variable function in direciotn of p2-p1
%--------------------------------------------

g_thm: LEMMA FORALL(p1 , p2: VectorN(n),
     D:{DD: (deriv_domain_all_direction?)| DD(p1)},
     f:(differentiableD?(D))):
     derivable_n_times?[{t:(D_down(D,p1,p2-p1)) | t>0 AND t<1}](LAMBDA(t:{tt:(D_down(D,p1,p2-p1)) | tt>0 AND tt<1}): f(p1+t*(p2-p1)),1)

g_thm_connect: LEMMA FORALL(p1, p2: VectorN(n),
     D:({DD:(domain_connect?(p1,p2))| deriv_domain_all_direction?(DD)} ),
     f:(differentiableD?(D))):
     derivable_n_times?[(D_down(D,p1,p2-p1))](LAMBDA(t:(D_down(D,p1,p2-p1))): f(p1+t*(p2-p1)),1)

g_thm_connect_unit: LEMMA FORALL(p1, p2: VectorN(n),
     D:({DD:(domain_connect?(p1,p2))| deriv_domain_all_direction?(DD)} ),
     f:(differentiableD?(D))):
     derivable_n_times?[{tt: (D_down(D, p1, p2 - p1)) | tt >= 0 AND tt <= 1}](LAMBDA(t:{tt: (D_down(D, p1, p2 - p1)) | tt >= 0 AND tt <= 1}): f(p1+t*(p2-p1)),1)

%--------------------------------------------
%% Showing deriavtive of single variable function in
%  direction of p2-p1 is the directional derivativert
%  of f in direction p2-p1 up to a constantrt
%--------------------------------------------

g_thm_dif: LEMMA FORALL(p1 , p2: VectorN(n), D:{DD: (deriv_domain_all_direction?)| DD(p1)}, f:(differentiableD?(D))):
     nderiv[{t:	 (D_down(D,p1,p2-p1)) | t>0 AND t<1}]
     (1, (LAMBDA (t:{tt:(D_down(D,p1,p2-p1)) | tt>0 AND tt<1}):
     f(p1 + t * (p2-p1)))) =  (LAMBDA( t:{tt:(D_down(D,p1,p2-p1)) | tt>0 AND tt<1}): init_partial(p2-p1,D,f)(p1+t*(p2-p1)))     

g_thm_dif_connect: LEMMA FORALL(p1, p2: VectorN(n),
     D:({DD:(domain_connect?(p1,p2))| deriv_domain_all_direction?(DD)} ),
     f:(differentiableD?(D))):
     nderiv[(D_down(D,p1,p2-p1))]
     (1, (LAMBDA (t:(D_down(D,p1,p2-p1))):
     f(p1 + t * (p2-p1)))) =  (LAMBDA( t:(D_down(D,p1,p2-p1))):
     init_partial(p2-p1,D,f)(p1+t*(p2-p1)))

g_thm_dif_connect_unit: LEMMA FORALL(p1, p2: VectorN(n),
     D:({DD:(domain_connect?(p1,p2))| deriv_domain_all_direction?(DD)} ),
     f:(differentiableD?(D))):
     nderiv[{tt: (D_down[n](D, p1, p2 - p1)) |
                                tt >= 0 AND tt <= 1}]
     (1, (LAMBDA (t:{tt: (D_down[n](D, p1, p2 - p1)) |
                                tt >= 0 AND tt <= 1}):
     f(p1 + t * (p2-p1)))) =
     (LAMBDA( t:{tt: (D_down[n](D, p1, p2 - p1)) |
     tt >= 0 AND tt <= 1}):
    init_partial(p2-p1,D,f)(p1+t*(p2-p1)))

%--------------------------------------------
%% Showing deriavtive of single variable function in
%  direction of p2-p1 is gradient at a point dotrt
%  producted with p2-p1
%--------------------------------------------

g_thm_grad: LEMMA FORALL(p1 , p2: VectorN(n),
D:{DD: (deriv_domain_all_direction?)| DD(p1)}, f:(differentiableD?(D))):
     nderiv[{t:(D_down(D,p1,p2-p1)) | t>0 AND t<1}]
     (1, (LAMBDA (t:{tt:(D_down(D,p1,p2-p1)) | tt>0 AND tt<1}):
     f(p1 + t * (p2-p1)))) =
     (LAMBDA( t:{tt:(D_down(D,p1,p2-p1)) | tt>0 AND tt<1}): gradient(D, f)(p1+t*(p2-p1))*(p2-p1))

g_thm_grad_connect: LEMMA FORALL(p1, p2: VectorN(n),
     D:({DD:(domain_connect?(p1,p2))| deriv_domain_all_direction?(DD)} ),
     f:(differentiableD?(D))):
     nderiv[(D_down(D,p1,p2-p1))]
     (1, (LAMBDA (t:(D_down(D,p1,p2-p1))):
     f(p1 + t * (p2-p1)))) =
     (LAMBDA( t:(D_down(D,p1,p2-p1))): gradient(D, f)(p1+t*(p2-p1))*(p2-p1))

g_thm_grad_connect_unit: LEMMA FORALL(p1, p2: VectorN(n),
     D:({DD:(domain_connect?(p1,p2))| deriv_domain_all_direction?(DD)} ),
     f:(differentiableD?(D))):
     nderiv[{tt: (D_down[n](D, p1, p2 - p1)) |
                                tt >= 0 AND tt <= 1}]
     (1, (LAMBDA (t:{tt: (D_down[n](D, p1, p2 - p1)) |
                                tt >= 0 AND tt <= 1}):
     f(p1 + t * (p2-p1)))) =
     (LAMBDA( t:{tt: (D_down[n](D, p1, p2 - p1)) |
     tt >= 0 AND tt <= 1}): gradient(D, f)(p1+t*(p2-p1))*(p2-p1))

%--------------------------------------------
%% Three versions of Taylors thm - last one
%  is the best. The first two can be deleted
%  without effected the proof of the third
%--------------------------------------------

Taylors1: LEMMA FORALL(p1, p2: VectorN(n),
     D:({DD:(domain_connect?(p1,p2))| deriv_domain_all_direction?(DD)} ),
     f:(cont_diff?(D))):
     EXISTS(t: (D_down(D,p1,p2-p1))):
     f(p2) = f(p1) + gradient(D,f)(p1+t*(p2-p1))*(p2-p1)

Taylors_thm: LEMMA FORALL(p1, p2: VectorN(n),
     D:({DD:(domain_connect?(p1,p2))| deriv_domain_all_direction?(DD)} ),
     f:(cont_diff?(D))):
     EXISTS(t: {tt:(D_down(D,p1,p2-p1))| 0<=tt AND tt<=1}):
     f(p2) = f(p1) + gradient(D,f)(p1+t*(p2-p1))*(p2-p1)

Taylors_Thm: LEMMA FORALL(p1, p2: VectorN(n),
     D:({DD:(domain_connect?(p1,p2))| deriv_domain_all_direction?(DD)} ),
     f:(cont_diff?(D))):
     EXISTS(t: {tt:(D_down(D,p1,p2-p1))| 0<tt AND tt<1}):
     f(p2) = f(p1) + gradient(D,f)(p1+t*(p2-p1))*(p2-p1)

 %________________________________________________________
 %  "Far it is Practice alone,
 %     that makes a person perfect in any thing."
 %                                        - Brook Taylor
 
  %--   ~The End~  --%
  END Taylor_Thrm_Multi
