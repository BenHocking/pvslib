bounded_def [n: posnat ]   %Hi
%%n - optimizing f: D -> R where D is subset of Rn
		: THEORY
%                     June 2018 JTS
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%|      Defining unboundednesss  |%
%|      for real sequences       |%
%|               &               |%
%	Optimization Programs	 |%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%-----     %
  BEGIN
%     -----%

%--------------------------------------------
%% Importing the Fundamentals of Constrained
%  Optimization library to have global extrema
%  
%  Need mult_var_calc to use vecsec ( n )
%--------------------------------------------	

IMPORTING fundamentals_constrained_optimization[ n ]
IMPORTING gradient_def[ n ]

%--------------------------------------------
%% Define unbounded sequences  
%--------------------------------------------

unbounded?( xk: sequence[ real ] ): bool =
     FORALL ( M: nat ): EXISTS ( N: posnat ):
     abs( xk( N ) ) > M ;

unbounded_above?( xk: sequence[ real ] ): bool =
     FORALL ( M: nat ): EXISTS ( N:posnat ):
     xk( N ) > M ;

unbounded_below?( xk: sequence[ real ] ): bool =
     FORALL ( M: nat ): EXISTS ( N:posnat ):
     -xk( N ) > M ;

%--------------------------------------------
%% Some classic relations
%  unbounded above -> unbounded,
%  unbounded below -> unbounded,
%  unbounded  -> unbounded above or below
%--------------------------------------------

ua_u: LEMMA FORALL (xk: sequence[ real ] ):
     unbounded_above?( xk )
     IMPLIES unbounded?( xk ) ;

ub_u: LEMMA FORALL (xk: sequence[ real ] ):
     unbounded_below?( xk )
     IMPLIES unbounded?( xk ) ;

u_uaob: LEMMA FORALL (xk: sequence[ real ] ):
     unbounded?( xk )
     IMPLIES unbounded_below?( xk )
     OR unbounded_above?( xk ) ;
     
%--------------------------------------------
%% Define unbounded optimization programs
%--------------------------------------------

unbounded_op?(m1, m2: nat,
     f: vec2real_f, D: domain,
     eq_constraints: constraints( m1 ),
     ineq_constraints: constraints( m2 ) ):
     bool =
     EXISTS (zk: {z: vec_seq( n )
     | FORALL (i:nat):
     (D(z(i))) AND (feasible?(m1,m2,
     eq_constraints,ineq_constraints)(z(i)))}):
     unbounded?(LAMBDA(n:nat): f(zk(n)))

unbounded_op_above?(m1, m2: nat,
     f: vec2real_f, D: domain,
     eq_constraints: constraints( m1 ),
     ineq_constraints: constraints( m2 ) ):
     bool =
     EXISTS (zk: {z: vec_seq(n)
     | FORALL (i:nat):
     (D(z(i))) AND (feasible?(m1,m2,
     eq_constraints,ineq_constraints)(z(i)))}):
     unbounded_above?(LAMBDA(n:nat): f(zk(n)))

unbounded_op_below?(m1, m2: nat,
     f: vec2real_f, D: domain,
     eq_constraints: constraints( m1 ),
     ineq_constraints: constraints( m2 ) ):
     bool =
     EXISTS (zk: {z: vec_seq(n)
     | FORALL (i:nat):
     (D(z(i))) AND (feasible?(m1,m2,
     eq_constraints,ineq_constraints)(z(i)))}):
     unbounded_below?(LAMBDA(n:nat): f(zk(n)))

%--------------------------------------------
%% Some relations
%  (again, but for optimization programs)
%  unbounded above -> unbounded,
%  unbounded below -> unbounded,
%  unbounded  -> unbounded above or below
%--------------------------------------------

ua_u_op: LEMMA
FORALL (m1, m2: nat,
     f: vec2real_f, D: domain,
     eq_constraints: constraints( m1 ),
     ineq_constraints: constraints( m2 )):
     unbounded_op_above?(m1,m2,
     f,D,eq_constraints,ineq_constraints)
     IMPLIES 
     unbounded_op?(m1, m2,
     f, D,
     eq_constraints,
     ineq_constraints)

ub_u_op: LEMMA
FORALL (m1, m2: nat,
     f: vec2real_f, D: domain,
     eq_constraints: constraints( m1 ),
     ineq_constraints: constraints( m2 )):
     unbounded_op_above?(m1,m2,
     f,D,eq_constraints,ineq_constraints)
     IMPLIES 
     unbounded_op?(m1, m2,
     f, D,
     eq_constraints,
     ineq_constraints)

u_uaob_op: LEMMA
FORALL (m1, m2: nat,
     f: vec2real_f, D: domain,
     eq_constraints: constraints( m1 ),
     ineq_constraints: constraints( m2 )):
     unbounded_op?(m1,m2,
     f,D,eq_constraints,ineq_constraints)
     IMPLIES 
     unbounded_op_below?(m1, m2,
     f, D,
     eq_constraints,
     ineq_constraints)
     OR unbounded_op_above?(m1, m2,
     f, D,
     eq_constraints,
     ineq_constraints)

%--------------------------------------------
%% Unbounded Below Above
%  implies no global min/max 
%--------------------------------------------

unbounded_below_no_glob_minimizer: LEMMA
FORALL (m1, m2: nat,
     f: vec2real_f, D: domain,
     eq_constraints: constraints( m1 ),
     ineq_constraints: constraints( m2 )):
     unbounded_op_below?(m1,m2,
     f,D,eq_constraints,ineq_constraints)
     IMPLIES FORALL(v: VectorN( n )):
     NOT is_glob_minimizer?( m1, m2,
     f, D,
     eq_constraints,
     ineq_constraints)
     (v)

unbounded_above_no_glob_maximizer: LEMMA
FORALL (m1, m2: nat,
     f: vec2real_f, D: domain,
     eq_constraints: constraints( m1 ),
     ineq_constraints: constraints( m2 )):
     unbounded_op_above?(m1,m2,
     f,D,eq_constraints,ineq_constraints)
     IMPLIES FORALL(v: VectorN( n )):
     NOT is_glob_maximizer?( m1, m2,
     f, D,
     eq_constraints,
     ineq_constraints)
     (v)

unbounded_no_glob_minimizer_maximizer: LEMMA
FORALL (m1, m2: nat,
     f: vec2real_f, D: domain,
     eq_constraints: constraints( m1 ),
     ineq_constraints: constraints( m2 )):
     unbounded_op?(m1,m2,
     f,D,eq_constraints,ineq_constraints)
     IMPLIES (FORALL(v: VectorN( n )):
     NOT is_glob_minimizer?( m1, m2,
     f, D,
     eq_constraints,
     ineq_constraints)
     (v)) OR
     (FORALL(v: VectorN( n )):
     NOT is_glob_maximizer?( m1, m2,
     f, D,
     eq_constraints,
     ineq_constraints)
     (v))

   %- ~The End~ -% 
   END bounded_def
