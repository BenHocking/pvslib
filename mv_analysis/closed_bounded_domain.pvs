closed_bounded_domain   [n: posnat ] %HI!
%n - Domains in Rn
		: THEORY

%	              Aug 2018 JTS
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%|    define closed, bounded     |%
%|    and open_neigh domain.     |%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%		

%-----     %
  BEGIN
%     -----%

%--------------------------------------------
%% Importing vector_sequences[ n ] to have
%  convergence
%--------------------------------------------

IMPORTING vector_sequences [ n ]

%--------------------------------------------
%% Define closed domain
%--------------------------------------------

closed_domain?( D :domain ):
     bool =
     FORALL( V :{ VV :vec_seq( n )|
     FORALL( i: nat ): D( VV( i ) ) }, L :VectorN( n ) ):
     (convergence?(V, L )
     IMPLIES
     D( L )) ;

closed_domain?(nn:(norm?(n)))( D :domain ):
     bool =
     FORALL( V :{ VV :vec_seq( n )|
     FORALL( i: nat ): D( VV( i ) ) }, L :VectorN( n ) ):
     (convergence?(nn)(V, L )
     IMPLIES
     D( L )) ;

%--------------------------------------------
%% Being a closed domain is equivalent
%  across norms
%--------------------------------------------

closed_equiv: LEMMA FORALL( D:domain):
     (EXISTS(nn:(norm?(n))):
     closed_domain?(nn)(D))
     IFF
     closed_domain?(D)

closed_equiv1: LEMMA FORALL( D:domain):
     FORALL(nn: (norm?(n))):
     (closed_domain?(nn)(D)
     IFF
     closed_domain?(D))

%--------------------------------------------
%% Define bounded domain
%--------------------------------------------

bounded_domain?( D :domain ):
     bool =
     FORALL (nn:(norm?(n))):
     (EXISTS ( M :posreal ):
     FORALL( v :( D ) ):
     nn( v ) < M);

bounded_domain?(nn:(norm?(n)))( D :domain ):
     bool =
     (EXISTS ( M :posreal ):
     FORALL( v :( D ) ):
     nn( v ) < M) ;

%--------------------------------------------
%% Being a bounded domain is equivalent
%  across norms
%--------------------------------------------

bounded_equiv: LEMMA FORALL( D:domain):
     (EXISTS(nn:(norm?(n))):
     bounded_domain?(nn)(D))
     IFF
     bounded_domain?(D)

bounded_equiv1: LEMMA FORALL( D:domain):
     FORALL(nn:(norm?(n))):
     (bounded_domain?(nn)(D)
     IFF
     bounded_domain?(D))

%--------------------------------------------
%% Define open_neigh_domain, which is
%  the same as an open domain
%--------------------------------------------

open_neigh_domain?(D:domain): bool = 
     FORALL(p:(D)):
     FORALL(v:VectorN(n)):
     EXISTS(epsilon: posreal):
     FORALL(delta:{dd: posreal | abs(dd) < epsilon}):
     D(p+delta*v)

%________________________________________________________
 % "It is better to keep your mouth closed and let
 %     people think you are a fool than to open it
 %     and remove all doubt."
 %				              -Mark Twain
 
  %---    ~The End~    ---%
  END closed_bounded_domain
