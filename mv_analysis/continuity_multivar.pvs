continuity_multivar  [ n: posnat ] %Good Morning!
%n -  continuity for functions whose domain is in Rn
		: THEORY
		
%	              Aug 2018 JTS
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%|    define continuity for a    |%
%|      function from Rn->R      |%
%| and Rn -> Rm. As well as      |%
%| some other continuity facts   |%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%		

%-----     %
  BEGIN
%     -----%

%--------------------------------------------
%% Importing norm_equiv and norm_equiv_general
%  to get convergence invariant of norm

%% Importing domain_vec2real_def to have
%  domains and open_neigh_domain
%--------------------------------------------

     IMPORTING norms_equiv[ n ]
     IMPORTING norms_equiv_general
     IMPORTING closed_bounded_domain[n]
     IMPORTING analysis@fundamental_theorem

%----------------------------------------
%% Define continuity at a point for f:Rn->R
%----------------------------------------

contp?( f:vec2real_f, D:domain, p: (D) ):
     bool =
     FORALL(nn:(norm?(n))):
     FORALL(eps:posreal):
     EXISTS(delta:posreal):
     FORALL(x: (D)):
     nn(x-p) < delta IMPLIES abs(f(x)-f(p))< eps

contp?(D:domain, f:[(D) -> real], p: (D) ):
     bool =
     FORALL(nn:(norm?(n))):
     FORALL(eps:posreal):
     EXISTS(delta:posreal):
     FORALL(x: (D)):
     nn(x-p) < delta IMPLIES abs(f(x)-f(p))< eps
     
%----------------------------------------
%% Define continuity at a point for f:Rn->R
%  for specific norm
%----------------------------------------

contp?(nn:(norm?(n)))( f:vec2real_f, D:domain, p: (D) ):
     bool =
     FORALL(eps:posreal):
     EXISTS(delta:posreal):
     FORALL(x: (D)):
     nn(x-p) < delta IMPLIES abs(f(x)-f(p))< eps

contp?(nn:(norm?(n)),D:domain)(f:[(D) -> real], p: (D) ):
     bool =
     FORALL(eps:posreal):
     EXISTS(delta:posreal):
     FORALL(x: (D)):
     nn(x-p) < delta IMPLIES abs(f(x)-f(p))< eps

cont?(nn:(norm?(n)))(D:domain, f:[{r:real| 0 <= r AND r <= 1} -> (D)]):
     bool =
     FORALL(t:{r:real| 0 <= r AND r <= 1}):
     FORALL(eps:posreal):
     EXISTS(delta:posreal):
     FORALL(t2: {r:real| 0 <= r AND r <= 1}):
     abs(t-t2) < delta IMPLIES nn(f(t)-f(t2))< eps

%----------------------------------------
%% Define continuity on a domain for f:D->R
%----------------------------------------

contD?(D:domain)(f:vec2real_f):
     bool =
     FORALL (p:(D)):
     contp?(f,D,p)

contD?(f:vec2real_f,D:domain):
     bool =
     FORALL (p:(D)):
     contp?(f,D,p)

contD?(D:domain)(f:[(D) -> real]):
     bool =
     FORALL (p:(D)):
     contp?(D,f,p)

%----------------------------------------
%% Define continuity on a domain for f:D->R
%  for a specific norm
%----------------------------------------

contD?(n:(norm?(n)))( f:vec2real_f, D:domain):
     bool =
     FORALL (p:(D)):
     contp?(n)(f,D,p)

contD?(D:domain,n:(norm?(n)))(f:[(D) -> real]):
     bool =
     FORALL (p:(D)):
     contp?(n,D)(f,p) 

%----------------------------------------
%% a function that is positive (negative) at a point
%  in a open_neigh_domain will remain positive (negative)
%  for a short interval in each direction
%----------------------------------------

cont_pos_neigh: LEMMA FORALL(D:(open_neigh_domain?), f:[(D) -> real]):
     contD?(D)(f)
     IMPLIES 
     FORALL(p: (D)):
     f(p)>0
     IMPLIES
     FORALL(v: VectorN(n)):
     EXISTS(epsilon: posreal):
     FORALL(delta:{dd:posreal| abs(dd)<epsilon}):
     D(p+delta*v) AND f(p+delta*v) > 0 

cont_neg_neigh: LEMMA FORALL(D:(open_neigh_domain?), f:[(D) -> real]):
     contD?(D)(f)
     IMPLIES 
     FORALL(p: (D)):
     f(p)<0
     IMPLIES
     FORALL(v: VectorN(n)):
     EXISTS(epsilon: posreal):
     FORALL(delta:{dd:posreal| abs(dd)<epsilon}):
     D(p+delta*v) AND f(p+delta*v) < 0 

%----------------------------------------
%% Define continuity at a point for f:Rn->Rm
%----------------------------------------

contp?(D: domain, m:posnat)(f:[(D) -> VectorN(m)], p:(D)):
     bool =
     FORALL(n1:(norm?(n)),n2:(norm?(m))):
     FORALL(eps:posreal):
     EXISTS(delta:posreal):
     FORALL ( x: ( D ) ) :
     n1(x-p) < delta IMPLIES n2(f(x)-f(p)) < eps

contp?(D: domain)(f:[(D) -> VectorN(n)], p: (D)):
     bool =
     contp?(D, n)(f,p)


%----------------------------------------
%% Define continuity at a point for f:Rn->Rm
%  with specific norms
%----------------------------------------

contp?(D: domain, m:posnat, n1:(norm?(n)), n2:(norm?(m)))(f:[(D) -> VectorN(m)], p:(D)):
     bool =
     FORALL(eps:posreal):
     EXISTS(delta:posreal):
     FORALL ( x: ( D ) ) :
     n1(x-p) < delta IMPLIES n2(f(x)-f(p)) < eps


%----------------------------------------
%% Define continuity on a domain  for f:Rn->Rm
%  with specific norms
%----------------------------------------

contp?(D: domain, nn:(norm?(n)))(f:[(D) -> VectorN(n)], p:(D)):
     bool =
     contp?(D, n, nn,nn)(f, p)

contp?(D: domain, n1:(norm?(n)), n2:(norm?(n)))(f:[(D) -> VectorN(n)], p:(D)):
     bool =
     contp?(D,n,n1,n2)(f,p)

%----------------------------------------
%% Define continuity on domain for f:Rn->Rm
%----------------------------------------


contD?(D:domain,m:posnat)(f:[(D) -> VectorN(m)]):
     bool =
     FORALL (p:(D)):
     contp?(D,m)(f,p)

%----------------------------------------
%% Define continuity on a domain  for f:Rn->Rm
%  with specific norms
%----------------------------------------

contD?(D:domain, m:posnat, n1:(norm?(n)),n2:(norm?(m)))(f:[(D) -> VectorN(m)]):
     bool =
     FORALL (p:(D)):
     contp?(D,m,n1,n2)(f,p)


%----------------------------------------
%% Define continuity on domain for f:Rn->Rn
%----------------------------------------


contD?(D:domain)(f:[(D) -> VectorN(n)]):
     bool =
     contD?(D,n)(f)

contD?(D:domain, nn:(norm?(n)))(f:[(D) -> VectorN(n)]):
     bool =
     contD?(D, n, nn,nn)(f)

%----------------------------------------
%% inner product function is continuous
%----------------------------------------

cont_inner_prod: LEMMA FORALL(D: domain, f: [(D) -> VectorN(n)]):
     contD?(D)(f)
     IMPLIES
     FORALL (p:VectorN(n)):
     contD?(D)(LAMBDA(v:(D)): p*f(v))
     
%----------------------------------------
%% continuity doesn't matter on the norm
%  choosen
%----------------------------------------

contp_norm_v2r: LEMMA FORALL( f:vec2real_f, D:domain, p: (D)):

     (EXISTS(nn:(norm?(n))): contp?(nn)(f,D,p))
     IFF
     contp?(f,D,p)

contp_norms_v2v: LEMMA FORALL(D:domain, m:posnat, f:[(D) -> VectorN(m)], p: (D)):
     (EXISTS(n1:(norm?(n)), n2:(norm?(m))): contp?(D,m,n1,n2)(f,p))
     IFF
     contp?(D,m)(f,p)

contp_norm_v2v: LEMMA FORALL(D:domain,m:posnat, f:[(D) -> VectorN(n)], p: (D)):
     (EXISTS(nn:(norm?(n))): contp?(D,nn)(f,p))
     IFF
     contp?(D)(f,p)

contD_norm_v2r: LEMMA FORALL(D:domain, f:[(D)->real]):
     (EXISTS(nn:(norm?(n))): contD?(D,nn)(f))
     IFF
     contD?(D)(f)

contD_norms_v2v: LEMMA FORALL(D:domain, m:posnat, f:[(D) -> VectorN(m)]):
     (EXISTS(n1:(norm?(n)),n2:(norm?(m))): contD?(D,m,n1,n2)(f))
     IFF
     contD?(D,m)(f)

contD_norm_v2v: LEMMA FORALL(D:domain,m:posnat, f:[(D) -> VectorN(n)], p: (D)):
     (EXISTS(nn:(norm?(n))): contD?(D,nn)(f))
     IFF
     contD?(D)(f)


%----------------------------------------
%% All norms are continuous
%----------------------------------------

norm_cont_v2v: LEMMA
     FORALL(D:domain, nn:(norm?(n))):
     contD?(D)(LAMBDA(v:(D)): nn(v))


%----------------------------------------
%% Sum of continuous functions is
%  continuous
%----------------------------------------
cont_sum: LEMMA
     FORALL (D:domain, f,g: vec2real_f):
     contD?(D)(f) AND contD?(D)(g) IMPLIES contD?(D)(f + g)


%----------------------------------------
%% Constant multiple of continuous function
%  is continuous
%----------------------------------------

cont_const: LEMMA
     FORALL (D:domain, f: vec2real_f, C:real):
     contD?(D)(f) IMPLIES contD?(D)(C*f)

%----------------------------------------
%% A continuous function can be lifted to
%  a continuous function from R1 to R1
%  (with list input and output). 
%----------------------------------------

cont_lift: LEMMA
     FORALL(d:[real->bool],f:[(d)->real]):
     n=1 IMPLIES (
     continuous?[(d)](f) IFF
     contD?(LAMBDA(v:VectorN(1)): d(car(v)),1)
     (LAMBDA (v: {vv: VectorN(1)| d(car(vv))}):
     (: f(car(v)) :)))


%________________________________________________________
 % "Continuous effort - not strength or intelligence
 %     - is the key to unlocking our potential."
 %				        -Winston Churchill

  %--    ~The End~    --%
  END continuity_multivar
