(convergence_vec2vec
 (nth_TCC1 0
  (nth_TCC1-1 nil 3796115180 ("" (subtype-tcc) nil nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (n formal-const-decl "posnat" convergence_vec2vec nil)
    (VectorN type-eq-decl nil matrices matrices)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (nth subtype "convergence_vec2vec.i" "below[length[real](f(p))]")))
 (cdr_TCC1 0
  (cdr_TCC1-1 nil 3797241701 ("" (subtype-tcc) nil nil) nil nil
   (cdr subtype "(number_fields.-)(convergence_vec2vec.m, 1)" "nat")))
 (cdr_TCC2 0
  (cdr_TCC2-1 nil 3797241701 ("" (subtype-tcc) nil nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (n formal-const-decl "posnat" convergence_vec2vec nil)
    (VectorN type-eq-decl nil matrices matrices)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (cdr subtype "convergence_vec2vec.f(convergence_vec2vec.p)"
        "(list_adt[real].cons?)")))
 (cdr_TCC3 0
  (cdr_TCC3-1 nil 3797241701
   ("" (skeep)
    (("" (typepred "f(p)")
      (("" (expand "length" -2)
        (("" (typepred "m") (("" (grind) nil nil)) nil)) nil))
      nil))
    nil)
   ((vec2vec type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" convergence_vec2vec nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (cdr subtype
        "list_adt[real].cdr(convergence_vec2vec.f(convergence_vec2vec.p))"
        "matrices.VectorN((number_fields.-)(convergence_vec2vec.m, 1))")))
 (NQ_TCC1 0
  (NQ_TCC1-1 nil 3795950563
   ("" (skeep)
    (("" (typepred "p+h" "p" "h")
      (("" (assert) (("" (grind) nil nil)) nil)) nil))
    nil)
   ((n formal-const-decl "posnat" convergence_vec2vec nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (VectorN type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vector type-eq-decl nil matrices matrices)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (add def-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (NQ subtype
    "(matrices.+)(convergence_vec2vec.p, convergence_vec2vec.h)"
    "matrices.VectorN(convergence_vec2vec.n)")))
 (NQ_TCC2 0
  (NQ_TCC2-1 nil 3795950563
   ("" (skeep)
    (("" (lemma "MN_full")
      (("" (inst -1 "m" "n" "T") (("" (assert) nil nil)) nil)) nil))
    nil)
   ((MN_full judgement-tcc nil mat_vec_mult nil)
    (MatrixMN type-eq-decl nil matrices matrices)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Matrix type-eq-decl nil matrices matrices)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (n formal-const-decl "posnat" convergence_vec2vec nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil (NQ subtype "convergence_vec2vec.T" "FullMatrix")))
 (NQ_TCC3 0
  (NQ_TCC3-1 nil 3795950563
   ("" (skeep)
    (("" (lemma "MN_rc")
      (("" (typepred "T")
        (("" (inst -4 "m" "n" "T")
          (("" (assert)
            (("" (typepred "h")
              (("" (hide -1 -3)
                (("" (expand "rows" -4) (("" (propax) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((MN_rc formula-decl nil mat_vec_mult nil)
    (VectorN type-eq-decl nil matrices matrices)
    (rows const-decl "nat" matrices matrices)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (Matrix type-eq-decl nil matrices matrices)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (n formal-const-decl "posnat" convergence_vec2vec nil)
    (MatrixMN type-eq-decl nil matrices matrices)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (NQ subtype "convergence_vec2vec.h"
    "matrices.VectorN(matrices.columns(convergence_vec2vec.T))")))
 (NQ_TCC4 0
  (NQ_TCC4-1 nil 3797859744
   ("" (skeep)
    ((""
      (typepred "f(p + h) - f(p) - T * h" "f(p+h)" "f(p)" "T*h"
       "f(p + h) - f(p)")
      (("" (replace -4)
        (("" (replace -6)
          (("" (expand "rows")
            (("" (replace -8) (("" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((MatrixMN type-eq-decl nil matrices matrices)
    (* const-decl "VectorN(rows(A))" mat_vec_mult nil)
    (rows const-decl "nat" matrices matrices)
    (columns def-decl "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}" matrices
     matrices)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (<= const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (Matrix type-eq-decl nil matrices matrices)
    (FullMatrix type-eq-decl nil matrices matrices)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (vec2vec type-eq-decl nil domain_vec2real_def nil)
    (n formal-const-decl "posnat" convergence_vec2vec nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (VectorN type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vector type-eq-decl nil matrices matrices)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (posint_max application-judgement "{k: posint | i <= k AND j <= k}"
     real_defs nil)
    (posrat_max application-judgement "{s: posrat | s >= q AND s >= r}"
     real_defs nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (NQ subtype
    "(matrices.-)((matrices.-)(convergence_vec2vec.f((matrices.+)(convergence_vec2vec.p, convergence_vec2vec.h)), convergence_vec2vec.f(convergence_vec2vec.p)), mat_vec_mult.*(convergence_vec2vec.T, convergence_vec2vec.h))"
    "(list_adt[real].cons?)")))
 (NQ_TCC5 0
  (NQ_TCC5-1 nil 3797859744 ("" (subtype-tcc) nil nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (n formal-const-decl "posnat" convergence_vec2vec nil)
    (VectorN type-eq-decl nil matrices matrices)
    (Matrix type-eq-decl nil matrices matrices)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (MatrixMN type-eq-decl nil matrices matrices)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (/= const-decl "boolean" notequal nil))
   nil (NQ subtype "convergence_vec2vec.h" "(list_adt[real].cons?)")))
 (NQ_TCC6 0
  (NQ_TCC4-1 nil 3795950563
   ("" (skeep)
    (("" (typepred "norm_inf(n)")
      (("" (expand "norm?" -1)
        (("" (flatten)
          (("" (assert)
            (("" (inst -3 "h") (("" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((norm_inf const-decl "(norm?(m))" norms nil)
    (n formal-const-decl "posnat" convergence_vec2vec nil)
    (norm? const-decl "bool" norms nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (VectorN type-eq-decl nil matrices matrices)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (NQ subtype
    "norms.norm_inf(convergence_vec2vec.n)(convergence_vec2vec.h)"
    "nznum")))
 (diff_nth_cdr_TCC1 0
  (diff_nth_cdr_TCC1-1 nil 3797862047 ("" (subtype-tcc) nil nil)
   ((norm_inf const-decl "(norm?(m))" norms nil)
    (sub const-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (norm_inf const-decl "[(cons?) -> nonneg_real]" norms nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (nth const-decl "vec2real_f" convergence_vec2vec nil)
    (* const-decl "real" matrices matrices)
    (n formal-const-decl "posnat" convergence_vec2vec nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (NQ const-decl "real" differentiable_def nil)
    (convergence_zero? const-decl "bool" vector_sequences nil)
    (differentiable? const-decl "bool" differentiable_def nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil
   (diff_nth_cdr subtype "(number_fields.-)(convergence_vec2vec.m, 1)"
    "posnat")))
 (diff_nth_cdr 0
  (diff_nth_cdr-1 nil 3797862184
   ("" (skeep)
    (("" (skeep)
      (("" (inst -1 "i+1")
        (("" (case " nth(m, f, i + 1) =  nth(m - 1, cdr(m, f), i)")
          (("1" (assert) nil nil)
           ("2" (decompose-equality 1)
            (("2" (expand "nth" 1)
              (("2" (assert)
                (("2" (expand "cdr" 1)
                  (("2" (assert)
                    (("2" (expand "nth" 1 1) (("2" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((cdr const-decl "VectorN(m - 1)" convergence_vec2vec nil)
    (nth const-decl "vec2real_f" convergence_vec2vec nil)
    (vec2vec type-eq-decl nil domain_vec2real_def nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" convergence_vec2vec nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nth def-decl "T" list_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (below type-eq-decl nil naturalnumbers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   shostak))
 (every_mat 0
  (every_mat-1 nil 3797260967
   ("" (induct "m")
    (("1" (skeep) (("1" (assert) nil nil)) nil) ("2" (assert) nil nil)
     ("3" (skeep)
      (("3" (case "j=0")
        (("1" (replace -1)
          (("1" (assert)
            (("1" (skeep)
              (("1" (expand "every" 1)
                (("1" (lift-if 1)
                  (("1" (split 1)
                    (("1" (propax) nil nil)
                     ("2" (flatten)
                      (("2" (assert)
                        (("2" (lift-if 2)
                          (("2" (split 2)
                            (("1" (flatten)
                              (("1"
                                (typepred "n")
                                (("1"
                                  (assert)
                                  (("1"
                                    (typepred "T")
                                    (("1"
                                      (inst -3 "0")
                                      (("1"
                                        (expand "nth" -3)
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (flatten)
                              (("2"
                                (assert)
                                (("2"
                                  (typepred "T")
                                  (("2"
                                    (expand "every" -1)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (inst -6 "0")
                                            (("2"
                                              (expand "nth" -6)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (expand "every" 2)
                                                  (("2"
                                                    (lift-if 2)
                                                    (("2"
                                                      (split 2)
                                                      (("1"
                                                        (propax)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (flatten)
                                                        (("2"
                                                          (lift-if 2)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (hide 2)
                                                              (("2"
                                                                (replace
                                                                 -7
                                                                 -5)
                                                                (("2"
                                                                  (expand
                                                                   "length"
                                                                   -5)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (hide
                                                                       -4
                                                                       -8)
                                                                      (("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (skeep)
          (("2" (assert)
            (("2" (expand "every" 2 1)
              (("2" (lift-if 2)
                (("2" (split 2)
                  (("1" (propax) nil nil)
                   ("2" (flatten)
                    (("2" (assert)
                      (("2" (typepred "T")
                        (("2" (inst -3 "0")
                          (("2" (expand "nth" -3)
                            (("2" (typepred "n")
                              (("2"
                                (assert)
                                (("2"
                                  (expand "every" -2)
                                  (("2"
                                    (flatten)
                                    (("2"
                                      (split 2)
                                      (("1"
                                        (expand "every" 1 1)
                                        (("1" (assert) nil nil))
                                        nil)
                                       ("2"
                                        (inst -8 "cdr(T)")
                                        (("2"
                                          (hide 2)
                                          (("2"
                                            (split 1)
                                            (("1"
                                              (expand "length" -6)
                                              (("1" (propax) nil nil))
                                              nil)
                                             ("2"
                                              (assert)
                                              (("2"
                                                (skeep)
                                                (("2"
                                                  (typepred "T")
                                                  (("2"
                                                    (inst -3 "i+1")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand
                                                         "nth"
                                                         -3)
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      (("2"
                                                        (typepred "i")
                                                        (("2"
                                                          (expand
                                                           "length"
                                                           1)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((i skolem-const-decl "below(length(cdr(T)))" convergence_vec2vec
       nil)
    (T skolem-const-decl "MatrixMN(1 + j, n)" convergence_vec2vec nil)
    (j skolem-const-decl "nat" convergence_vec2vec nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (even_plus_odd_is_odd application-judgement "odd_int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (MatrixMN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" convergence_vec2vec nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Matrix type-eq-decl nil matrices matrices)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil) (> const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pred type-eq-decl nil defined_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (pre_der_TCC1 0
  (pre_der_TCC1-1 nil 3797241701 ("" (subtype-tcc) nil nil) nil nil
   (pre_der subtype "0"
    "{ii: naturalnumbers.nat | reals.<(ii, convergence_vec2vec.m)}")))
 (pre_der_TCC2 0
  (pre_der_TCC2-1 nil 3797241701 ("" (subtype-tcc) nil nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices matrices)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (vec2vec type-eq-decl nil domain_vec2real_def nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (Vector type-eq-decl nil matrices matrices)
    (scal def-decl "VectorN(length(v2))" matrices matrices)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (<= const-decl "bool" reals nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (add def-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (norm_inf const-decl "(norm?(m))" norms nil)
    (sub const-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (norm_inf const-decl "[(cons?) -> nonneg_real]" norms nil)
    (nth const-decl "vec2real_f" convergence_vec2vec nil)
    (* const-decl "real" matrices matrices)
    (n formal-const-decl "posnat" convergence_vec2vec nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (NQ const-decl "real" differentiable_def nil)
    (convergence_zero? const-decl "bool" vector_sequences nil)
    (differentiable? const-decl "bool" differentiable_def nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (norm? const-decl "bool" norms nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (* const-decl "VectorN(length(v2))" matrices matrices))
   nil
   (pre_der subtype
    "convergence_vec2vec.nth(convergence_vec2vec.m, convergence_vec2vec.f, 0)"
    "{ff: domain_vec2real_def[convergence_vec2vec.n].vec2real_f | differentiable_def[convergence_vec2vec.n].differentiable?(convergence_vec2vec.D, ff, convergence_vec2vec.p)}")))
 (pre_der_TCC3 0
  (pre_der_TCC10-1 nil 3797524662
   ("" (skeep)
    (("" (split 1)
      (("1" (expand "length" 1)
        (("1" (assert) (("1" (grind) nil nil)) nil)) nil)
       ("2" (skeep)
        (("2" (typepred "i")
          (("2" (expand "length" -1)
            (("2" (expand "length" -1)
              (("2" (expand "nth" 1 1) (("2" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (nth const-decl "vec2real_f" convergence_vec2vec nil)
    (vec2vec type-eq-decl nil domain_vec2real_def nil)
    (der_f const-decl
     "{gg: VectorN(n) | convergence_zero?(NQ(D, p), NQ(f, gg, p), zero_vec(n))}"
     differentiable_def nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (NQ const-decl "real" differentiable_def nil)
    (NQ const-decl "bool" differentiable_def nil)
    (convergence_zero? const-decl "bool" vector_sequences nil)
    (differentiable? const-decl "bool" differentiable_def nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" convergence_vec2vec nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nth def-decl "T" list_props nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (pre_der subtype
    "(: differentiable_def[convergence_vec2vec.n].der_f(convergence_vec2vec.D, convergence_vec2vec.p)(convergence_vec2vec.nth(convergence_vec2vec.m, convergence_vec2vec.f, 0)) :)"
    "matrices.MatrixMN(convergence_vec2vec.m, convergence_vec2vec.n)")))
 (pre_der_TCC4 0
  (pre_der_TCC4-1 nil 3797241701 ("" (subtype-tcc) nil nil) nil nil
   (pre_der subtype "0"
    "{ii: naturalnumbers.nat | reals.<(ii, convergence_vec2vec.m)}")))
 (pre_der_TCC5 0
  (pre_der_TCC5-1 nil 3797241701
   ("" (skeep) (("" (typepred "f") (("" (inst -1 "0") nil nil)) nil))
    nil)
   ((nth const-decl "vec2real_f" convergence_vec2vec nil)
    (vec2vec type-eq-decl nil domain_vec2real_def nil)
    (differentiable? const-decl "bool" differentiable_def nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" convergence_vec2vec nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (below type-eq-decl nil naturalnumbers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (pre_der subtype
    "convergence_vec2vec.nth(convergence_vec2vec.m, convergence_vec2vec.f, 0)"
    "{ff: domain_vec2real_def[convergence_vec2vec.n].vec2real_f | differentiable_def[convergence_vec2vec.n].differentiable?(convergence_vec2vec.D, ff, convergence_vec2vec.p)}")))
 (pre_der_TCC6 0
  (pre_der_TCC6-1 nil 3797241701 ("" (subtype-tcc) nil nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (n formal-const-decl "posnat" convergence_vec2vec nil)
    (VectorN type-eq-decl nil matrices matrices)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (differentiable? const-decl "bool" differentiable_def nil)
    (vec2vec type-eq-decl nil domain_vec2real_def nil)
    (nth const-decl "vec2real_f" convergence_vec2vec nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (pre_der subtype "(number_fields.-)(convergence_vec2vec.m, 1)"
    "posnat")))
 (pre_der_TCC7 0
  (pre_der_TCC7-1 nil 3797241701
   ("" (skeep)
    (("" (skeep*)
      (("" (assert)
        (("" (typepred "f")
          (("" (inst -1 "i+1")
            ((""
              (case "(nth(m, f, i + 1)) = (nth(m - 1, cdr(m, f), i))")
              (("1" (assert) nil nil)
               ("2" (decompose-equality 1)
                (("2" (expand "nth" 1 1)
                  (("2" (expand "cdr" 1)
                    (("2" (expand "nth") (("2" (propax) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((TRUE const-decl "bool" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (nth const-decl "vec2real_f" convergence_vec2vec nil)
    (vec2vec type-eq-decl nil domain_vec2real_def nil)
    (differentiable? const-decl "bool" differentiable_def nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" convergence_vec2vec nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (below type-eq-decl nil naturalnumbers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (cdr const-decl "VectorN(m - 1)" convergence_vec2vec nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nth def-decl "T" list_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (pre_der subtype
    "convergence_vec2vec.cdr(convergence_vec2vec.m, convergence_vec2vec.f)"
    "{ff: domain_vec2real_def[convergence_vec2vec.n].vec2vec((number_fields.-)(convergence_vec2vec.m, 1)) | FORALL (i: naturalnumbers.below((number_fields.-)(convergence_vec2vec.m, 1))): differentiable_def[convergence_vec2vec.n].differentiable?(convergence_vec2vec.D, convergence_vec2vec.nth((number_fields.-)(convergence_vec2vec.m, 1), ff, i), convergence_vec2vec.p)}")))
 (pre_der_TCC8 0
  (pre_der_TCC8-1 nil 3797524662 ("" (termination-tcc) nil nil) nil nil
   (pre_der termination
    "convergence_vec2vec.pre_der((number_fields.-)(convergence_vec2vec.m, 1), convergence_vec2vec.D, convergence_vec2vec.p, convergence_vec2vec.cdr(convergence_vec2vec.m, convergence_vec2vec.f))"
    "nil")))
 (pre_der_TCC9 0
  (pre_der_TCC9-1 nil 3797524662
   ("" (skeep)
    (("" (typepred "(v(m - 1, D, p, cdr(m, f)))")
      (("1" (lemma "every_mat")
        (("1" (inst -1 "m-1" "v(m - 1, D, p, cdr(m, f))")
          (("1" (typepred "f")
            (("1" (skeep)
              (("1" (inst -1 "i+1")
                (("1"
                  (case " nth(m, f, i + 1) =  nth(m - 1, cdr(m, f), i)")
                  (("1" (assert) nil nil)
                   ("2" (decompose-equality 1)
                    (("2" (expand "nth" 1 1)
                      (("2" (expand "nth" 1 2)
                        (("2" (assert)
                          (("2" (expand "cdr" 1 1)
                            (("2" (assert)
                              (("2"
                                (expand "nth" 1 1)
                                (("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (assert) nil nil))
          nil))
        nil)
       ("2" (typepred "f")
        (("2" (skeep)
          (("2" (inst -1 "i+1")
            (("2"
              (case " nth(m, f, i + 1) =  nth(m - 1, cdr(m, f), i)")
              (("1" (assert) nil nil)
               ("2" (decompose-equality 1)
                (("2" (expand "nth" 1)
                  (("2" (expand "cdr" 1)
                    (("2" (assert)
                      (("2" (expand "nth" 1 1) (("2" (propax) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("3" (assert) nil nil))
      nil))
    nil)
   ((cdr const-decl "VectorN(m - 1)" convergence_vec2vec nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (MatrixMN type-eq-decl nil matrices matrices)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (Matrix type-eq-decl nil matrices matrices)
    (nth const-decl "vec2real_f" convergence_vec2vec nil)
    (differentiable? const-decl "bool" differentiable_def nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (vec2vec type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" convergence_vec2vec nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (m skolem-const-decl "posnat" convergence_vec2vec nil)
    (D skolem-const-decl "(deriv_domain?[n])" convergence_vec2vec nil)
    (p skolem-const-decl "(D)" convergence_vec2vec nil)
    (f skolem-const-decl "{ff: vec2vec(m) |
   FORALL (i: below(m)): differentiable?(D, nth(m, ff, i), p)}"
     convergence_vec2vec nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (every_mat formula-decl nil convergence_vec2vec nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (pre_der subtype
    "convergence_vec2vec.pre_der((number_fields.-)(convergence_vec2vec.m, 1), convergence_vec2vec.D, convergence_vec2vec.p, convergence_vec2vec.cdr(convergence_vec2vec.m, convergence_vec2vec.f))"
    "list[VectorN(n)]")))
 (pre_der_TCC10 0
  (pre_der_TCC13-1 nil 3797524662
   ("" (skeep)
    (("" (expand "length" 2 1)
      (("" (assert)
        (("" (typepred "v(m - 1, D, p, cdr(m, f))")
          (("1" (assert)
            (("1" (skeep)
              (("1" (case "NOT i=0")
                (("1" (inst -3 "i-1")
                  (("1" (expand "nth" 3 1) (("1" (assert) nil nil))
                    nil)
                   ("2" (assert)
                    (("2" (typepred "i")
                      (("2" (expand "length" -1)
                        (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert)
                  (("2" (replace -1)
                    (("2" (expand "nth" 2) (("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (typepred "f")
            (("2" (lemma "diff_nth_cdr")
              (("2" (inst?)
                (("2" (assert)
                  (("2" (split -1)
                    (("1" (propax) nil nil) ("2" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((length def-decl "nat" list_props nil)
    (cdr const-decl "VectorN(m - 1)" convergence_vec2vec nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (MatrixMN type-eq-decl nil matrices matrices)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (Matrix type-eq-decl nil matrices matrices)
    (nth const-decl "vec2real_f" convergence_vec2vec nil)
    (differentiable? const-decl "bool" differentiable_def nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (vec2vec type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" convergence_vec2vec nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (D skolem-const-decl "(deriv_domain?[n])" convergence_vec2vec nil)
    (p skolem-const-decl "(D)" convergence_vec2vec nil)
    (m skolem-const-decl "posnat" convergence_vec2vec nil)
    (f skolem-const-decl "{ff: vec2vec(m) |
   FORALL (i: below(m)): differentiable?(D, nth(m, ff, i), p)}"
     convergence_vec2vec nil)
    (v skolem-const-decl "[d1:
   {z:
      [m: posnat, D: (deriv_domain?), p: (D),
       {ff: vec2vec(m) |
          FORALL (i: below(m)): differentiable?(D, nth(m, ff, i), p)}] |
      z`1 < m} ->
   MatrixMN(d1`1, n)]" convergence_vec2vec nil)
    (i skolem-const-decl "below(length(cons[VectorN(n)]
                 (der_f(D, p)(nth(m, f, 0)), v(m - 1, D, p, cdr(m, f)))))"
       convergence_vec2vec nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (convergence_zero? const-decl "bool" vector_sequences nil)
    (NQ const-decl "bool" differentiable_def nil)
    (NQ const-decl "real" differentiable_def nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (der_f const-decl
     "{gg: VectorN(n) | convergence_zero?(NQ(D, p), NQ(f, gg, p), zero_vec(n))}"
     differentiable_def nil)
    (diff_nth_cdr formula-decl nil convergence_vec2vec nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (pre_der subtype
    "list_adt[matrices.VectorN(convergence_vec2vec.n)].cons(differentiable_def[convergence_vec2vec.n].der_f(convergence_vec2vec.D, convergence_vec2vec.p)(convergence_vec2vec.nth(convergence_vec2vec.m, convergence_vec2vec.f, 0)), convergence_vec2vec.pre_der((number_fields.-)(convergence_vec2vec.m, 1), convergence_vec2vec.D, convergence_vec2vec.p, convergence_vec2vec.cdr(convergence_vec2vec.m, convergence_vec2vec.f)))"
    "matrices.MatrixMN(convergence_vec2vec.m, convergence_vec2vec.n)")))
 (pre_der_TCC11 0
  (pre_der_TCC11-1 nil 3797524662 ("" (subtype-tcc) nil nil) nil nil
   (pre_der subtype "0"
    "{ii: naturalnumbers.nat | reals.<(ii, convergence_vec2vec.m)}")))
 (pre_der_TCC12 0
  (pre_der_TCC12-1 nil 3797524662 ("" (subtype-tcc) nil nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices matrices)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (vec2vec type-eq-decl nil domain_vec2real_def nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (Vector type-eq-decl nil matrices matrices)
    (scal def-decl "VectorN(length(v2))" matrices matrices)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (<= const-decl "bool" reals nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (add def-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (norm_inf const-decl "(norm?(m))" norms nil)
    (sub const-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (norm_inf const-decl "[(cons?) -> nonneg_real]" norms nil)
    (nth const-decl "vec2real_f" convergence_vec2vec nil)
    (* const-decl "real" matrices matrices)
    (n formal-const-decl "posnat" convergence_vec2vec nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (NQ const-decl "real" differentiable_def nil)
    (convergence_zero? const-decl "bool" vector_sequences nil)
    (differentiable? const-decl "bool" differentiable_def nil)
    (differentiableD? const-decl "bool" differentiable_def nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (norm? const-decl "bool" norms nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (* const-decl "VectorN(length(v2))" matrices matrices))
   nil
   (pre_der subtype
    "convergence_vec2vec.nth(convergence_vec2vec.m, convergence_vec2vec.f, 0)"
    "(differentiable_def[convergence_vec2vec.n].differentiableD?(convergence_vec2vec.D))")))
 (pre_der_TCC13 0
  (pre_der_TCC3-1 nil 3797241701
   ("" (skeep)
    (("" (skeep)
      (("" (split 1)
        (("1" (expand "length" 1 1)
          (("1" (expand "length" 1) (("1" (assert) nil nil)) nil)) nil)
         ("2" (skeep)
          (("2" (typepred "i")
            (("2" (expand "length" -1)
              (("2" (expand "length" -1)
                (("2" (assert)
                  (("2" (expand "nth" 1 1) (("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nth def-decl "T" list_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n formal-const-decl "posnat" convergence_vec2vec nil)
    (VectorN type-eq-decl nil matrices matrices)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (differentiableD? const-decl "bool" differentiable_def nil)
    (convergence_zero? const-decl "bool" vector_sequences nil)
    (NQ const-decl "bool" differentiable_def nil)
    (NQ const-decl "real" differentiable_def nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (der_f const-decl "{gg: [(D) -> VectorN(n)] |
   FORALL (p: (D)):
     convergence_zero?(NQ(D, p), NQ(f, gg(p), p), zero_vec(n))}"
     differentiable_def nil)
    (vec2vec type-eq-decl nil domain_vec2real_def nil)
    (nth const-decl "vec2real_f" convergence_vec2vec nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil))
   nil
   (pre_der subtype
    "(: differentiable_def[convergence_vec2vec.n].der_f(convergence_vec2vec.D)(convergence_vec2vec.nth(convergence_vec2vec.m, convergence_vec2vec.f, 0))(convergence_vec2vec.p) :)"
    "matrices.MatrixMN(convergence_vec2vec.m, convergence_vec2vec.n)")))
 (pre_der_TCC14 0
  (pre_der_TCC14-1 nil 3797524662 ("" (subtype-tcc) nil nil) nil nil
   (pre_der subtype "0"
    "{ii: naturalnumbers.nat | reals.<(ii, convergence_vec2vec.m)}")))
 (pre_der_TCC15 0
  (pre_der_TCC15-1 nil 3797524662 ("" (subtype-tcc) nil nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices matrices)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (vec2vec type-eq-decl nil domain_vec2real_def nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (add def-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (<= const-decl "bool" reals nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (scal def-decl "VectorN(length(v2))" matrices matrices)
    (Vector type-eq-decl nil matrices matrices)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (norm_inf const-decl "(norm?(m))" norms nil)
    (sub const-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (norm_inf const-decl "[(cons?) -> nonneg_real]" norms nil)
    (nth const-decl "vec2real_f" convergence_vec2vec nil)
    (* const-decl "real" matrices matrices)
    (n formal-const-decl "posnat" convergence_vec2vec nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (NQ const-decl "real" differentiable_def nil)
    (convergence_zero? const-decl "bool" vector_sequences nil)
    (differentiable? const-decl "bool" differentiable_def nil)
    (differentiableD? const-decl "bool" differentiable_def nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (norm? const-decl "bool" norms nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (* const-decl "VectorN(length(v2))" matrices matrices))
   nil
   (pre_der subtype
    "convergence_vec2vec.nth(convergence_vec2vec.m, convergence_vec2vec.f, 0)"
    "(differentiable_def[convergence_vec2vec.n].differentiableD?(convergence_vec2vec.D))")))
 (pre_der_TCC16 0
  (pre_der_TCC16-1 nil 3797524662 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (n formal-const-decl "posnat" convergence_vec2vec nil)
    (VectorN type-eq-decl nil matrices matrices)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (differentiableD? const-decl "bool" differentiable_def nil)
    (vec2vec type-eq-decl nil domain_vec2real_def nil)
    (nth const-decl "vec2real_f" convergence_vec2vec nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (pre_der subtype "(number_fields.-)(convergence_vec2vec.m, 1)"
    "posnat")))
 (pre_der_TCC17 0
  (pre_der_TCC17-1 nil 3797524662
   ("" (skeep*)
    (("" (expand "differentiableD?")
      (("" (typepred "p")
        (("" (typepred "f")
          (("" (inst -1 "i+1")
            (("" (expand "differentiableD?")
              (("" (skeep)
                (("" (inst -1 "p!1")
                  ((""
                    (case " nth(m, f, i + 1) =  nth(m - 1, cdr(m, f), i)")
                    (("1" (assert) nil nil)
                     ("2" (expand "nth" 1)
                      (("2" (assert)
                        (("2" (decompose-equality 1)
                          (("1" (expand "nth" 1 1)
                            (("1" (expand "cdr" 1 2)
                              (("1" (propax) nil nil)) nil))
                            nil)
                           ("2" (skeep)
                            (("2" (typepred "i")
                              (("2" (assert) nil nil)) nil))
                            nil)
                           ("3" (skeep) (("3" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((differentiableD? const-decl "bool" differentiable_def nil)
    (nth const-decl "vec2real_f" convergence_vec2vec nil)
    (vec2vec type-eq-decl nil domain_vec2real_def nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (m skolem-const-decl "posnat" convergence_vec2vec nil)
    (i skolem-const-decl "below(m - 1)" convergence_vec2vec nil)
    (D skolem-const-decl "(deriv_domain?[n])" convergence_vec2vec nil)
    (f skolem-const-decl
     "{ff: vec2vec(m) | FORALL (i: below(m)): differentiableD?(D)(nth(m, ff, i))}"
     convergence_vec2vec nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (cdr const-decl "VectorN(m - 1)" convergence_vec2vec nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n formal-const-decl "posnat" convergence_vec2vec nil)
    (VectorN type-eq-decl nil matrices matrices)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (pre_der subtype
    "convergence_vec2vec.cdr(convergence_vec2vec.m, convergence_vec2vec.f)"
    "{ff: domain_vec2real_def[convergence_vec2vec.n].vec2vec((number_fields.-)(convergence_vec2vec.m, 1)) | FORALL (i: naturalnumbers.below((number_fields.-)(convergence_vec2vec.m, 1))): differentiable_def[convergence_vec2vec.n].differentiableD?(convergence_vec2vec.D)(convergence_vec2vec.nth((number_fields.-)(convergence_vec2vec.m, 1), ff, i))}")))
 (pre_der_TCC18 0
  (pre_der_TCC8-1 nil 3797241701 ("" (termination-tcc) nil nil) nil nil
   (pre_der termination
    "convergence_vec2vec.pre_der((number_fields.-)(convergence_vec2vec.m, 1), convergence_vec2vec.D, convergence_vec2vec.cdr(convergence_vec2vec.m, convergence_vec2vec.f))"
    "nil")))
 (pre_der_TCC19 0
  (pre_der_TCC9-1 nil 3797241701
   ("" (skeep*)
    (("" (lemma "every_mat")
      (("" (typepred "m")
        (("" (inst -2 "m-1" "(v(m - 1, D, cdr(m, f))(p))")
          (("1" (hide 3)
            (("1" (skeep)
              (("1" (typepred "f")
                (("1" (inst -1 "i+1")
                  (("1"
                    (case "nth(m, f, i + 1) = nth(m - 1, cdr(m, f), i)")
                    (("1" (assert) nil nil)
                     ("2" (decompose-equality 1)
                      (("2" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (assert) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((every_mat formula-decl nil convergence_vec2vec nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Matrix type-eq-decl nil matrices matrices)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (n formal-const-decl "posnat" convergence_vec2vec nil)
    (MatrixMN type-eq-decl nil matrices matrices)
    (VectorN type-eq-decl nil matrices matrices)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (vec2vec type-eq-decl nil domain_vec2real_def nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (differentiableD? const-decl "bool" differentiable_def nil)
    (nth const-decl "vec2real_f" convergence_vec2vec nil)
    (cdr const-decl "VectorN(m - 1)" convergence_vec2vec nil)
    (m skolem-const-decl "posnat" convergence_vec2vec nil)
    (f skolem-const-decl
     "{ff: vec2vec(m) | FORALL (i: below(m)): differentiableD?(D)(nth(m, ff, i))}"
     convergence_vec2vec nil)
    (D skolem-const-decl "(deriv_domain?[n])" convergence_vec2vec nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (pre_der subtype
    "convergence_vec2vec.pre_der((number_fields.-)(convergence_vec2vec.m, 1), convergence_vec2vec.D, convergence_vec2vec.cdr(convergence_vec2vec.m, convergence_vec2vec.f))(convergence_vec2vec.p)"
    "list[VectorN(n)]")))
 (pre_der_TCC20 0
  (pre_der_TCC10-1 nil 3797241701
   ("" (skeep)
    (("" (skeep)
      (("" (split 2)
        (("1" (expand "length" 1) (("1" (assert) nil nil)) nil)
         ("2" (skeep)
          (("2" (assert)
            (("2" (case "i=0")
              (("1" (expand "nth" 1) (("1" (assert) nil nil)) nil)
               ("2" (expand "nth" 2)
                (("2" (assert)
                  (("2" (typepred "v(m - 1, D, cdr(m, f))(p)")
                    (("1" (inst -3 "i-1") nil nil)
                     ("2" (skeep)
                      (("2" (typepred "f")
                        (("2" (inst -1 "i!1+1")
                          (("2"
                            (case "nth(m, f, i!1 + 1) = nth(m - 1, cdr(m, f), i!1)")
                            (("1" (assert) nil nil)
                             ("2" (decompose-equality 1)
                              (("2"
                                (expand "nth" 1)
                                (("2"
                                  (expand "cdr" 1)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (expand "nth" 1 1)
                                      (("2" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (cdr const-decl "VectorN(m - 1)" convergence_vec2vec nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (MatrixMN type-eq-decl nil matrices matrices)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (Matrix type-eq-decl nil matrices matrices)
    (below type-eq-decl nil naturalnumbers nil)
    (nth const-decl "vec2real_f" convergence_vec2vec nil)
    (vec2vec type-eq-decl nil domain_vec2real_def nil)
    (der_f const-decl "{gg: [(D) -> VectorN(n)] |
   FORALL (p: (D)):
     convergence_zero?(NQ(D, p), NQ(f, gg(p), p), zero_vec(n))}"
     differentiable_def nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (NQ const-decl "real" differentiable_def nil)
    (NQ const-decl "bool" differentiable_def nil)
    (convergence_zero? const-decl "bool" vector_sequences nil)
    (differentiableD? const-decl "bool" differentiable_def nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" convergence_vec2vec nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil) (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (length def-decl "nat" list_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil))
   nil
   (pre_der subtype
    "list_adt[matrices.VectorN(convergence_vec2vec.n)].cons(differentiable_def[convergence_vec2vec.n].der_f(convergence_vec2vec.D)(convergence_vec2vec.nth(convergence_vec2vec.m, convergence_vec2vec.f, 0))(convergence_vec2vec.p), convergence_vec2vec.pre_der((number_fields.-)(convergence_vec2vec.m, 1), convergence_vec2vec.D, convergence_vec2vec.cdr(convergence_vec2vec.m, convergence_vec2vec.f))(convergence_vec2vec.p))"
    "matrices.MatrixMN(convergence_vec2vec.m, convergence_vec2vec.n)")))
 (pre_der_nth_TCC1 0
  (pre_der_nth_TCC1-1 nil 3797261904 ("" (subtype-tcc) nil nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (n formal-const-decl "posnat" convergence_vec2vec nil)
    (VectorN type-eq-decl nil matrices matrices)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (differentiableD? const-decl "bool" differentiable_def nil)
    (vec2vec type-eq-decl nil domain_vec2real_def nil)
    (nth const-decl "vec2real_f" convergence_vec2vec nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (pre_der_nth subtype "convergence_vec2vec.i"
    "below[length[list[real]](pre_der(m, D, f)(p))]")))
 (pre_der_nth_TCC2 0
  (pre_der_nth_TCC2-1 nil 3797261904 ("" (subtype-tcc) nil nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices matrices)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (vec2vec type-eq-decl nil domain_vec2real_def nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (Vector type-eq-decl nil matrices matrices)
    (scal def-decl "VectorN(length(v2))" matrices matrices)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (<= const-decl "bool" reals nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (add def-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (norm_inf const-decl "(norm?(m))" norms nil)
    (sub const-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (norm_inf const-decl "[(cons?) -> nonneg_real]" norms nil)
    (nth const-decl "vec2real_f" convergence_vec2vec nil)
    (* const-decl "real" matrices matrices)
    (n formal-const-decl "posnat" convergence_vec2vec nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (NQ const-decl "real" differentiable_def nil)
    (convergence_zero? const-decl "bool" vector_sequences nil)
    (differentiable? const-decl "bool" differentiable_def nil)
    (differentiableD? const-decl "bool" differentiable_def nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (norm? const-decl "bool" norms nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (* const-decl "VectorN(length(v2))" matrices matrices))
   nil
   (pre_der_nth subtype
    "convergence_vec2vec.nth(convergence_vec2vec.m, convergence_vec2vec.f, convergence_vec2vec.i)"
    "(differentiable_def[convergence_vec2vec.n].differentiableD?(convergence_vec2vec.D))")))
 (pre_der_nth 0
  (pre_der_nth-1 nil 3797261966
   ("" (induct "m")
    (("1" (skeep) (("1" (assert) nil nil)) nil) ("2" (assert) nil nil)
     ("3" (skeep)
      (("3" (assert)
        (("3" (case "j=0")
          (("1" (skeep)
            (("1" (typepred "i")
              (("1" (assert)
                (("1" (case "NOT i=0")
                  (("1" (assert) nil nil)
                   ("2" (replace -1)
                    (("2" (decompose-equality 1)
                      (("1" (expand "nth" 1)
                        (("1" (expand "nth" 1)
                          (("1" (expand "pre_der" 1 1)
                            (("1" (expand "nth" 1)
                              (("1"
                                (assert)
                                (("1" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (skeep)
                        (("2" (typepred "f")
                          (("2" (inst -1 "0") nil nil)) nil))
                        nil)
                       ("3" (skeep) (("3" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (skeep)
            (("2" (assert)
              (("2" (decompose-equality 2)
                (("1" (inst -1 "D" "_" "_")
                  (("1" (assert)
                    (("1" (case "i=0")
                      (("1" (expand "nth" 1)
                        (("1" (assert)
                          (("1" (expand "pre_der" 1)
                            (("1" (assert)
                              (("1"
                                (expand "nth" 1)
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "nth" 1)
                                    (("1" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (typepred "f")
                        (("2" (inst -2 "cdr(1+j,f)" "i-1")
                          (("1" (decompose-equality -2)
                            (("1" (inst -1 "x!1")
                              (("1"
                                (assert)
                                (("1"
                                  (expand "pre_der" 2 1)
                                  (("1"
                                    (expand "nth" 2 1)
                                    (("1"
                                      (case
                                       "(nth(j, cdr(1 + j, f), i - 1)) = (nth(1 + j, f, i))")
                                      (("1" (assert) nil nil)
                                       ("2"
                                        (decompose-equality 1)
                                        (("2"
                                          (hide -1 4)
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (inst -5 "i")
                              (("2"
                                (case
                                 "(nth(1 + j, f, i)) = (nth(j, cdr(1 + j, f), i - 1))")
                                (("1" (assert) nil nil)
                                 ("2"
                                  (decompose-equality 1)
                                  (("2"
                                    (hide -6)
                                    (("2"
                                      (hide 4)
                                      (("2" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (typepred "i!1")
                              (("3"
                                (inst -7 "i!1+1")
                                (("3"
                                  (case
                                   "(nth(1 + j, f, i!1 + 1)) = (nth(j, cdr(1 + j, f), i!1))")
                                  (("1" (assert) nil nil)
                                   ("2"
                                    (decompose-equality 1)
                                    (("2"
                                      (hide -7 -8)
                                      (("2"
                                        (hide 2 3 4 5)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert) nil nil)
                           ("3" (skeep)
                            (("3" (inst -1 "i!1+1")
                              (("3"
                                (case
                                 "(nth(1 + j, f, i!1 + 1)) =  ((nth(j, cdr(1 + j, f), i!1)))")
                                (("1" (assert) nil nil)
                                 ("2"
                                  (decompose-equality 1)
                                  (("2" (grind) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (skeep)
                  (("2" (typepred "f")
                    (("2" (hide -2) (("2" (inst -1 "i") nil nil)) nil))
                    nil))
                  nil)
                 ("3" (skeep) (("3" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (skeep)
      (("4" (assert)
        (("4" (hide 2)
          (("4" (skeep)
            (("4" (typepred "f") (("4" (inst -1 "i") nil nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("5" (hide 2) (("5" (skeep*) (("5" (assert) nil nil)) nil)) nil))
    nil)
   ((TRUE const-decl "bool" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (D skolem-const-decl "(deriv_domain?)" convergence_vec2vec nil)
    (j skolem-const-decl "nat" convergence_vec2vec nil)
    (f skolem-const-decl "{ff: vec2vec(1 + j) |
   FORALL (i: below(1 + j)): differentiableD?(D)(nth(1 + j, ff, i))}"
     convergence_vec2vec nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (cdr const-decl "VectorN(m - 1)" convergence_vec2vec nil)
    (f skolem-const-decl "{ff: vec2vec(1 + j) |
   FORALL (i: below(1 + j)): differentiableD?(D)(nth(1 + j, ff, i))}"
     convergence_vec2vec nil)
    (i skolem-const-decl "below(1 + j)" convergence_vec2vec nil)
    (D skolem-const-decl "(deriv_domain?)" convergence_vec2vec nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (der_f const-decl "{gg: [(D) -> VectorN(n)] |
   FORALL (p: (D)):
     convergence_zero?(NQ(D, p), NQ(f, gg(p), p), zero_vec(n))}"
     differentiable_def nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (NQ const-decl "real" differentiable_def nil)
    (NQ const-decl "bool" differentiable_def nil)
    (convergence_zero? const-decl "bool" vector_sequences nil)
    (pred type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil) (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n formal-const-decl "posnat" convergence_vec2vec nil)
    (VectorN type-eq-decl nil matrices matrices)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (vec2vec type-eq-decl nil domain_vec2real_def nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (differentiableD? const-decl "bool" differentiable_def nil)
    (nth const-decl "vec2real_f" convergence_vec2vec nil)
    (Matrix type-eq-decl nil matrices matrices)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (MatrixMN type-eq-decl nil matrices matrices)
    (pre_der def-decl "[(D) -> MatrixMN(m, n)]" convergence_vec2vec
     nil))
   shostak))
 (pre_der_nth_grad_TCC1 0
  (pre_der_nth_grad_TCC1-1 nil 3852995066
   ("" (skeep)
    (("" (lemma "dd_all_partial_implies_dd")
      (("" (inst -1 "D") (("" (assert) nil nil)) nil)) nil))
    nil)
   ((n formal-const-decl "posnat" convergence_vec2vec nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (dd_all_partial_implies_dd formula-decl nil derivative_domain_multi
     nil)
    (deriv_domain_all_partial? const-decl "bool"
     derivative_domain_multi nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil))
   nil
   (pre_der_nth_grad subtype "convergence_vec2vec.D"
    "(derivative_domain_multi[convergence_vec2vec.n].deriv_domain?)")))
 (pre_der_nth_grad_TCC2 0
  (pre_der_nth_grad_TCC2-1 nil 3852995066
   ("" (skeep)
    (("" (lemma "dd_all_partial_implies_dd")
      (("" (inst?) (("" (assert) nil nil)) nil)) nil))
    nil)
   ((n formal-const-decl "posnat" convergence_vec2vec nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (dd_all_partial_implies_dd formula-decl nil derivative_domain_multi
     nil)
    (deriv_domain_all_partial? const-decl "bool"
     derivative_domain_multi nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (pre_der_nth_grad subtype "convergence_vec2vec.D"
    "(derivative_domain_multi[convergence_vec2vec.n].deriv_domain?)")))
 (pre_der_nth_grad_TCC3 0
  (pre_der_nth_grad_TCC3-1 nil 3852995066 ("" (subtype-tcc) nil nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (n formal-const-decl "posnat" convergence_vec2vec nil)
    (VectorN type-eq-decl nil matrices matrices)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain_all_partial? const-decl "bool"
     derivative_domain_multi nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (differentiableD? const-decl "bool" differentiable_def nil)
    (vec2vec type-eq-decl nil domain_vec2real_def nil)
    (nth const-decl "vec2real_f" convergence_vec2vec nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (deriv_domain_partial? const-decl "bool" derivative_domain_multi
     nil))
   nil
   (pre_der_nth_grad subtype "convergence_vec2vec.i"
    "below[length[list[real]](pre_der(m, D, f)(p))]")))
 (pre_der_nth_grad_TCC4 0
  (pre_der_nth_grad_TCC4-1 nil 3852995066 ("" (subtype-tcc) nil nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices matrices)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain_all_partial? const-decl "bool"
     derivative_domain_multi nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (vec2vec type-eq-decl nil domain_vec2real_def nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (* const-decl "VectorN(length(v2))" matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (Vector type-eq-decl nil matrices matrices)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (deriv_domain_partial? const-decl "bool" derivative_domain_multi
     nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (norm_inf const-decl "(norm?(m))" norms nil)
    (sub const-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (norm_inf const-decl "[(cons?) -> nonneg_real]" norms nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (nth const-decl "vec2real_f" convergence_vec2vec nil)
    (* const-decl "real" matrices matrices)
    (n formal-const-decl "posnat" convergence_vec2vec nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (NQ const-decl "real" differentiable_def nil)
    (convergence_zero? const-decl "bool" vector_sequences nil)
    (differentiable? const-decl "bool" differentiable_def nil)
    (differentiableD? const-decl "bool" differentiable_def nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil))
   nil
   (pre_der_nth_grad subtype
    "convergence_vec2vec.nth(convergence_vec2vec.m, convergence_vec2vec.f, convergence_vec2vec.i)"
    "(differentiable_def[convergence_vec2vec.n].differentiableD?(convergence_vec2vec.D))")))
 (pre_der_nth_grad_TCC5 0
  (pre_der_nth_grad_TCC5-1 nil 3852995066 ("" (subtype-tcc) nil nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices matrices)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain_all_partial? const-decl "bool"
     derivative_domain_multi nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (differentiableD? const-decl "bool" differentiable_def nil)
    (vec2vec type-eq-decl nil domain_vec2real_def nil)
    (nth const-decl "vec2real_f" convergence_vec2vec nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (e def-decl "VectorN(m)" vector_arithmetic nil)
    (differentiable? const-decl "bool" differentiable_def nil)
    (convergence_zero? const-decl "bool" vector_sequences nil)
    (NQ const-decl "real" differentiable_def nil)
    (* const-decl "real" matrices matrices)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (norm_inf const-decl "[(cons?) -> nonneg_real]" norms nil)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (sub const-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (norm_inf const-decl "(norm?(m))" norms nil)
    (deriv_domain_partial? const-decl "bool" derivative_domain_multi
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (n formal-const-decl "posnat" convergence_vec2vec nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (deriv_domain_partial? const-decl "bool" derivative_domain_multi
     nil)
    (deriv_domain_e_partial? const-decl "bool" derivative_domain_multi
     nil))
   nil
   (pre_der_nth_grad subtype "convergence_vec2vec.D"
    "(derivative_domain_multi[convergence_vec2vec.n].deriv_domain_e_partial?)")))
 (pre_der_nth_grad 0
  (pre_der_nth_grad-1 nil 3852995290
   ("" (skeep)
    (("" (lemma "pre_der_nth")
      (("" (inst?)
        (("1" (replace -1 1)
          (("1" (lemma "der_f_is_grad")
            (("1" (inst?)
              (("1" (decompose-equality -1)
                (("1" (inst -1 "nth(m,f,i)")
                  (("1" (replace -1)
                    (("1" (assert)
                      (("1" (decompose-equality 1) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (lemma "dd_all_partial_implies_dd")
          (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((pre_der_nth formula-decl nil convergence_vec2vec nil)
    (dd_all_partial_implies_dd formula-decl nil derivative_domain_multi
     nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (gradient const-decl "VectorN(n)" gradient_def nil)
    (deriv_domain_e_partial? const-decl "bool" derivative_domain_multi
     nil)
    (der_f const-decl "{gg: [(D) -> VectorN(n)] |
   FORALL (p: (D)):
     convergence_zero?(NQ(D, p), NQ(f, gg(p), p), zero_vec(n))}"
     differentiable_def nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (NQ const-decl "real" differentiable_def nil)
    (NQ const-decl "bool" differentiable_def nil)
    (convergence_zero? const-decl "bool" vector_sequences nil)
    (der_f_is_grad formula-decl nil gradient_def nil)
    (nth const-decl "vec2real_f" convergence_vec2vec nil)
    (differentiableD? const-decl "bool" differentiable_def nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (vec2vec type-eq-decl nil domain_vec2real_def nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n formal-const-decl "posnat" convergence_vec2vec nil)
    (VectorN type-eq-decl nil matrices matrices)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (deriv_domain_all_partial? const-decl "bool"
     derivative_domain_multi nil)
    (D skolem-const-decl "(deriv_domain_all_partial?)"
     convergence_vec2vec nil))
   shostak))
 (pre_der_nth_p_TCC1 0
  (pre_der_nth_p_TCC1-1 nil 3798125011 ("" (subtype-tcc) nil nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (n formal-const-decl "posnat" convergence_vec2vec nil)
    (VectorN type-eq-decl nil matrices matrices)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (differentiable? const-decl "bool" differentiable_def nil)
    (vec2vec type-eq-decl nil domain_vec2real_def nil)
    (nth const-decl "vec2real_f" convergence_vec2vec nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (pre_der_nth_p subtype "convergence_vec2vec.i"
    "below[length[list[real]](pre_der(m, D, p, f))]")))
 (pre_der_nth_p_TCC2 0
  (pre_der_nth_p_TCC2-1 nil 3798125011 ("" (subtype-tcc) nil nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices matrices)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (vec2vec type-eq-decl nil domain_vec2real_def nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (Vector type-eq-decl nil matrices matrices)
    (scal def-decl "VectorN(length(v2))" matrices matrices)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (<= const-decl "bool" reals nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (add def-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (/= const-decl "boolean" notequal nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (norm_inf const-decl "(norm?(m))" norms nil)
    (sub const-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (norm_inf const-decl "[(cons?) -> nonneg_real]" norms nil)
    (nth const-decl "vec2real_f" convergence_vec2vec nil)
    (* const-decl "real" matrices matrices)
    (n formal-const-decl "posnat" convergence_vec2vec nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (NQ const-decl "real" differentiable_def nil)
    (convergence_zero? const-decl "bool" vector_sequences nil)
    (differentiable? const-decl "bool" differentiable_def nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (norm? const-decl "bool" norms nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (* const-decl "VectorN(length(v2))" matrices matrices))
   nil
   (pre_der_nth_p subtype
    "convergence_vec2vec.nth(convergence_vec2vec.m, convergence_vec2vec.f, convergence_vec2vec.i)"
    "{ff: domain_vec2real_def[convergence_vec2vec.n].vec2real_f | differentiable_def[convergence_vec2vec.n].differentiable?(convergence_vec2vec.D, ff, convergence_vec2vec.p)}")))
 (pre_der_nth_p 0
  (pre_der_nth_p-1 nil 3798125271
   ("" (induct "m")
    (("1" (skeep) (("1" (assert) nil nil)) nil) ("2" (assert) nil nil)
     ("3" (skeep)
      (("3" (assert)
        (("3" (case "j=0")
          (("1" (skeep)
            (("1" (typepred "i")
              (("1" (assert)
                (("1" (case "NOT i=0")
                  (("1" (assert) nil nil)
                   ("2" (replace -1)
                    (("2" (expand "nth" 1)
                      (("2" (expand "nth" 1)
                        (("2" (expand "pre_der" 1 1)
                          (("2" (expand "nth" 1)
                            (("2" (assert) (("2" (grind) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (skeep)
            (("2" (typepred "f")
              (("2" (inst -1 "0")
                (("2" (assert)
                  (("2" (case "i=0")
                    (("1" (expand "nth" 2)
                      (("1" (assert)
                        (("1" (expand "nth")
                          (("1" (assert)
                            (("1" (expand "pre_der" 2)
                              (("1"
                                (assert)
                                (("1"
                                  (expand "nth" 2 1)
                                  (("1"
                                    (expand "nth" 2 1)
                                    (("1" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (typepred "f")
                      (("2" (inst -3 "D" "p" "cdr(1+j,f)" "i-1")
                        (("1" (assert)
                          (("1" (expand "pre_der" 3 1)
                            (("1" (expand "nth" 3 1)
                              (("1"
                                (assert)
                                (("1"
                                  (replace -3)
                                  (("1"
                                    (expand "nth" 3 1)
                                    (("1"
                                      (expand "nth" 3 2)
                                      (("1"
                                        (expand "nth" 3 2)
                                        (("1"
                                          (expand "cdr" 3 1)
                                          (("1" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil)
                         ("3" (skeep)
                          (("3" (inst -1 "i!1+1")
                            (("3" (assert)
                              (("3"
                                (expand "nth" 1)
                                (("3"
                                  (expand "nth" -1)
                                  (("3"
                                    (expand "cdr" 1 1)
                                    (("3"
                                      (expand "nth" -1 1)
                                      (("3" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (hide 2)
      (("4" (skeep*)
        (("4" (typepred "f") (("4" (inst -1 "i") nil nil)) nil)) nil))
      nil)
     ("5" (hide 2)
      (("5" (skeep)
        (("5" (skeep)
          (("5" (typepred "i") (("5" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((TRUE const-decl "bool" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (i skolem-const-decl "below(1 + j)" convergence_vec2vec nil)
    (f skolem-const-decl "{ff: vec2vec(1 + j) |
   FORALL (i: below(1 + j)): differentiable?(D, nth(1 + j, ff, i), p)}"
     convergence_vec2vec nil)
    (p skolem-const-decl "(D)" convergence_vec2vec nil)
    (cdr const-decl "VectorN(m - 1)" convergence_vec2vec nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (D skolem-const-decl "(deriv_domain?)" convergence_vec2vec nil)
    (j skolem-const-decl "nat" convergence_vec2vec nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (der_f const-decl
     "{gg: VectorN(n) | convergence_zero?(NQ(D, p), NQ(f, gg, p), zero_vec(n))}"
     differentiable_def nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (NQ const-decl "real" differentiable_def nil)
    (NQ const-decl "bool" differentiable_def nil)
    (convergence_zero? const-decl "bool" vector_sequences nil)
    (pred type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil) (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n formal-const-decl "posnat" convergence_vec2vec nil)
    (VectorN type-eq-decl nil matrices matrices)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (vec2vec type-eq-decl nil domain_vec2real_def nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (differentiable? const-decl "bool" differentiable_def nil)
    (nth const-decl "vec2real_f" convergence_vec2vec nil)
    (Matrix type-eq-decl nil matrices matrices)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (MatrixMN type-eq-decl nil matrices matrices)
    (pre_der def-decl "MatrixMN(m, n)" convergence_vec2vec nil))
   shostak))
 (del_ch_TCC1 0
  (del_ch_TCC1-1 nil 3797328146
   ("" (skeep)
    (("" (typepred "x-zero_vec(n)" "x" "zero_vec(n)")
      (("" (assert) nil nil)) nil))
    nil)
   ((zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (/= const-decl "boolean" notequal nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (NQ const-decl "bool" differentiable_def nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (n formal-const-decl "posnat" convergence_vec2vec nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (VectorN type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vector type-eq-decl nil matrices matrices)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (del_ch subtype
    "(matrices.-)(convergence_vec2vec.x, vector_arithmetic.zero_vec(convergence_vec2vec.n))"
    "(list_adt[real].cons?)")))
 (del_ch_TCC2 0
  (del_ch_TCC2-1 nil 3797328146
   ("" (skeep)
    (("" (expand "nonempty?" 1)
      (("" (expand "empty?" -1)
        (("" (typepred "der_f[n](D)(f)")
          (("" (inst -1 "p")
            (("" (expand "convergence_zero?" -1)
              (("" (inst -1 "eps")
                (("" (skeep)
                  (("" (inst -2 "delta")
                    (("" (expand "member" 1) (("" (postpone) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nonempty? const-decl "bool" sets nil)
    (der_f const-decl "{gg: [(D) -> VectorN(n)] |
   FORALL (p: (D)):
     convergence_zero?(NQ(D, p), NQ(f, gg(p), p), zero_vec(n))}"
     differentiable_def nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (differentiableD? const-decl "bool" differentiable_def nil)
    (NQ const-decl "real" differentiable_def nil)
    (NQ const-decl "bool" differentiable_def nil)
    (convergence_zero? const-decl "bool" vector_sequences nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" convergence_vec2vec nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (member const-decl "bool" sets nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (empty? const-decl "bool" sets nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (del_ch subtype
    "{delta: real_types.posreal | FORALL (x: {xx: (differentiable_def[convergence_vec2vec.n].NQ(convergence_vec2vec.D, convergence_vec2vec.p)) | xx /= vector_arithmetic.zero_vec(convergence_vec2vec.n)}): booleans.IMPLIES(reals.<(norms.norm_inf(convergence_vec2vec.n)((matrices.-)(x, vector_arithmetic.zero_vec(convergence_vec2vec.n))), delta), reals.<(real_defs.abs(differentiable_def[convergence_vec2vec.n].NQ(convergence_vec2vec.f, differentiable_def[convergence_vec2vec.n].der_f(convergence_vec2vec.D)(convergence_vec2vec.f)(convergence_vec2vec.p), convergence_vec2vec.p)(x)), convergence_vec2vec.eps))}"
    "(sets[posreal].nonempty?)")))
 (del_ch_p_TCC1 0
  (del_ch_p_TCC1-1 nil 3798127380
   ("" (skeep)
    (("" (typepred "x-zero_vec(n)" "x" "zero_vec(n)")
      (("" (assert) nil nil)) nil))
    nil)
   ((zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (/= const-decl "boolean" notequal nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (NQ const-decl "bool" differentiable_def nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (n formal-const-decl "posnat" convergence_vec2vec nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (VectorN type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vector type-eq-decl nil matrices matrices)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (del_ch_p subtype
    "(matrices.-)(convergence_vec2vec.x, vector_arithmetic.zero_vec(convergence_vec2vec.n))"
    "(list_adt[real].cons?)")))
 (del_ch_p_TCC2 0
  (del_ch_p_TCC2-1 nil 3798127380
   ("" (skeep)
    (("" (expand "nonempty?" 1)
      (("" (expand "empty?" -1)
        (("" (typepred "der_f[n](D,p)(f)")
          (("" (expand "convergence_zero?" -3)
            (("" (inst -3 "eps")
              (("" (skeep)
                (("" (inst -4 "delta")
                  (("" (expand "member" 1) (("" (propax) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((nonempty? const-decl "bool" sets nil)
    (der_f const-decl
     "{gg: VectorN(n) | convergence_zero?(NQ(D, p), NQ(f, gg, p), zero_vec(n))}"
     differentiable_def nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (NQ const-decl "real" differentiable_def nil)
    (NQ const-decl "bool" differentiable_def nil)
    (convergence_zero? const-decl "bool" vector_sequences nil)
    (differentiable? const-decl "bool" differentiable_def nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" convergence_vec2vec nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (member const-decl "bool" sets nil)
    (empty? const-decl "bool" sets nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (del_ch_p subtype
    "{delta: real_types.posreal | FORALL (x: {xx: (differentiable_def[convergence_vec2vec.n].NQ(convergence_vec2vec.D, convergence_vec2vec.p)) | xx /= vector_arithmetic.zero_vec(convergence_vec2vec.n)}): booleans.IMPLIES(reals.<(norms.norm_inf(convergence_vec2vec.n)((matrices.-)(x, vector_arithmetic.zero_vec(convergence_vec2vec.n))), delta), reals.<(real_defs.abs(differentiable_def[convergence_vec2vec.n].NQ(convergence_vec2vec.f, differentiable_def[convergence_vec2vec.n].der_f(convergence_vec2vec.D, convergence_vec2vec.p)(convergence_vec2vec.f), convergence_vec2vec.p)(x)), convergence_vec2vec.eps))}"
    "(sets[posreal].nonempty?)")))
 (del_nth_TCC1 0
  (del_nth_TCC1-1 nil 3797329197
   ("" (skeep)
    (("" (typepred "x-zero_vec(n)" "x" "zero_vec(n)")
      (("" (grind) nil nil)) nil))
    nil)
   ((zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (/= const-decl "boolean" notequal nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (NQ const-decl "bool" differentiable_def nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (n formal-const-decl "posnat" convergence_vec2vec nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (VectorN type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vector type-eq-decl nil matrices matrices)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (add def-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (scal def-decl "VectorN(length(v2))" matrices matrices)
    (sub const-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (del_nth subtype
    "(matrices.-)(convergence_vec2vec.x, vector_arithmetic.zero_vec(convergence_vec2vec.n))"
    "(list_adt[real].cons?)")))
 (del_nth 0
  (del_nth-1 nil 3797329279
   ("" (induct "m")
    (("1" (assert) nil nil) ("2" (assert) nil nil)
     ("3" (skeep)
      (("3" (skeep)
        (("3" (assert)
          (("3" (case "j=0")
            (("1" (hide -2)
              (("1" (skeep)
                (("1" (replace -1)
                  (("1" (assert)
                    (("1" (expand "del_all" -3)
                      (("1" (expand "del_ch" -3)
                        (("1"
                          (name "ch" " choose({delta: posreal |
                 FORALL (x: {xx: (NQ(D, p)) | xx /= zero_vec(n)}):
                   norm_inf(n)(x - zero_vec(n)) < delta IMPLIES
                    abs(NQ(nth(1, f, 0), der_f(D)(nth(1, f, 0))(p), p)(x))
                     < eps})")
                          (("1" (typepred "ch")
                            (("1" (inst -3 "x")
                              (("1" (assert) nil nil)) nil))
                            nil)
                           ("2" (lemma "del_ch_TCC2")
                            (("2" (inst?)
                              (("2"
                                (assert)
                                (("2"
                                  (typepred "f")
                                  (("2"
                                    (inst -1 "0")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (assert)
                            (("3" (skeep 1)
                              (("3"
                                (typepred "f")
                                (("3"
                                  (inst -1 "0")
                                  (("3" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("4" (skeep)
                            (("4"
                              (typepred "x!1-zero_vec(n)" "x!1"
                               "zero_vec(n)")
                              (("4" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (assert)
              (("2" (skeep)
                (("2" (case "i=0")
                  (("1"
                    (case "NOT  del_all(1 + j, D, f)(p, eps) <= del_ch(1 + j, D, nth(1 + j, f, 0))(p, eps)")
                    (("1" (hide -2)
                      (("1" (hide 3)
                        (("1" (expand "del_all" 1)
                          (("1" (assert) nil nil)) nil))
                        nil))
                      nil)
                     ("2" (expand "del_ch" -1)
                      (("2"
                        (name "ch" "choose({delta: posreal |
                 FORALL (x: {xx: (NQ(D, p)) | xx /= zero_vec(n)}):
                   norm_inf(n)(x - zero_vec(n)) < delta IMPLIES
                    abs(NQ(nth(1 + j, f, 0), der_f(D)(nth(1 + j, f, 0))(p),
                           p)
                          (x))
                     < eps})")
                        (("1" (typepred "ch")
                          (("1" (inst -3 "x") (("1" (assert) nil nil))
                            nil))
                          nil)
                         ("2" (lemma "del_ch_TCC2")
                          (("2" (inst?)
                            (("2" (assert)
                              (("2"
                                (typepred "f")
                                (("2" (inst -1 "0") nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (assert)
                          (("3" (skeep)
                            (("3" (typepred "f")
                              (("3" (inst -1 "0") nil nil)) nil))
                            nil))
                          nil)
                         ("4" (assert)
                          (("4" (skeep)
                            (("4"
                              (typepred "x!1-zero_vec(n)" "x!1"
                               "zero_vec(n)")
                              (("4" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (typepred "f") (("3" (inst -1 "0") nil nil))
                      nil))
                    nil)
                   ("2" (assert)
                    (("2" (inst -1 "D" "cdr(1+j,f)" "p" "eps" "i-1")
                      (("1" (assert)
                        (("1" (inst -1 "x")
                          (("1" (assert)
                            (("1" (expand "del_all" -3)
                              (("1"
                                (assert)
                                (("1"
                                  (hide -3)
                                  (("1"
                                    (case
                                     "NQ(nth(j, cdr(1 + j, f), i - 1),
             der_f(D)(nth(j, cdr(1 + j, f), i - 1))(p), p) = NQ(nth(1 + j, f, i), der_f(D)(nth(1 + j, f, i))(p), p)")
                                    (("1" (assert) nil nil)
                                     ("2"
                                      (case
                                       "nth(j, cdr(1 + j, f), i - 1) = nth(1 + j, f, i)")
                                      (("1" (assert) nil nil)
                                       ("2"
                                        (hide 2)
                                        (("2"
                                          (decompose-equality 1)
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (skeep)
                        (("2" (typepred "f")
                          (("2" (inst -1 "i!1+1")
                            (("2"
                              (case "(nth(1 + j, f, i!1 + 1)) = nth(j, cdr(1 + j, f), i!1)")
                              (("1" (assert) nil nil)
                               ("2"
                                (decompose-equality 1)
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (hide 2)
      (("4" (skeep)
        (("4" (skeep)
          (("4" (typepred "f") (("4" (inst -1 "i") nil nil)) nil))
          nil))
        nil))
      nil)
     ("5" (hide 2)
      (("5" (skeep)
        (("5" (skeep)
          (("5" (typepred "x-zero_vec(n)" "x" "zero_vec(n)")
            (("5" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posreal_min application-judgement
     "{z: posreal | z <= x AND z <= y}" real_defs nil)
    (<= const-decl "bool" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (cdr const-decl "VectorN(m - 1)" convergence_vec2vec nil)
    (nth def-decl "T" list_props nil) (set type-eq-decl nil sets nil)
    (nonempty? const-decl "bool" sets nil)
    (choose const-decl "(p)" sets nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (D skolem-const-decl "(deriv_domain?)" convergence_vec2vec nil)
    (j skolem-const-decl "nat" convergence_vec2vec nil)
    (f skolem-const-decl "{ff: vec2vec(1 + j) |
   FORALL (i: below(1 + j)): differentiableD?(D)(nth(1 + j, ff, i))}"
     convergence_vec2vec nil)
    (del_ch_TCC2 subtype-tcc nil convergence_vec2vec nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (del_ch const-decl "posreal" convergence_vec2vec nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (der_f const-decl "{gg: [(D) -> VectorN(n)] |
   FORALL (p: (D)):
     convergence_zero?(NQ(D, p), NQ(f, gg(p), p), zero_vec(n))}"
     differentiable_def nil)
    (convergence_zero? const-decl "bool" vector_sequences nil)
    (NQ const-decl "real" differentiable_def nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (pred type-eq-decl nil defined_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (norm? const-decl "bool" norms nil)
    (norm_inf const-decl "(norm?(m))" norms nil)
    (del_all def-decl "posreal" convergence_vec2vec nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil) (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n formal-const-decl "posnat" convergence_vec2vec nil)
    (VectorN type-eq-decl nil matrices matrices)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (vec2vec type-eq-decl nil domain_vec2real_def nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (differentiableD? const-decl "bool" differentiable_def nil)
    (nth const-decl "vec2real_f" convergence_vec2vec nil)
    (NQ const-decl "bool" differentiable_def nil)
    (/= const-decl "boolean" notequal nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (Vector type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices))
   shostak))
 (del_nth_p_TCC1 0
  (del_nth_p_TCC1-1 nil 3798127735
   ("" (skeep)
    (("" (typepred "x-zero_vec(n)" "x" "zero_vec(n)")
      (("" (assert) nil nil)) nil))
    nil)
   ((zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (/= const-decl "boolean" notequal nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (NQ const-decl "bool" differentiable_def nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (n formal-const-decl "posnat" convergence_vec2vec nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (VectorN type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vector type-eq-decl nil matrices matrices)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (del_nth_p subtype
    "(matrices.-)(convergence_vec2vec.x, vector_arithmetic.zero_vec(convergence_vec2vec.n))"
    "(list_adt[real].cons?)")))
 (del_nth_p 0
  (del_nth_p-1 nil 3798127894
   ("" (induct "m")
    (("1" (assert) nil nil) ("2" (assert) nil nil)
     ("3" (skeep)
      (("3" (skeep)
        (("3" (assert)
          (("3" (case "j=0")
            (("1" (hide -2)
              (("1" (skeep)
                (("1" (replace -1)
                  (("1" (assert)
                    (("1" (expand "del_all_p" -3)
                      (("1" (expand "del_ch_p" -3)
                        (("1"
                          (name "ch" " choose({delta: posreal |
                            FORALL (x: {xx: (NQ(D, p)) | xx /= zero_vec(n)}):
                              norm_inf(n)(x - zero_vec(n)) < delta IMPLIES
                               abs(NQ(nth(1, f, 0), der_f(D,p)(nth(1, f, 0)), p)(x))
                                < eps})")
                          (("1" (typepred "ch")
                            (("1" (inst -3 "x")
                              (("1" (assert) nil nil)) nil))
                            nil)
                           ("2" (lemma "del_ch_p_TCC2")
                            (("2" (inst?)
                              (("2"
                                (assert)
                                (("2"
                                  (typepred "f")
                                  (("2"
                                    (inst -1 "0")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (assert)
                            (("3" (skeep 1)
                              (("3"
                                (typepred "f")
                                (("3"
                                  (inst -1 "0")
                                  (("3" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("4" (skeep)
                            (("4"
                              (typepred "x!1-zero_vec(n)" "x!1"
                               "zero_vec(n)")
                              (("4" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (assert)
              (("2" (skeep)
                (("2" (case "i=0")
                  (("1"
                    (case "NOT  del_all_p(1 + j, D,p, f)( eps) <= del_ch_p(1 + j, D,p, nth(1 + j, f, 0))(eps)")
                    (("1" (hide -2)
                      (("1" (hide 3)
                        (("1" (expand "del_all_p" 1)
                          (("1" (assert) nil nil)) nil))
                        nil))
                      nil)
                     ("2" (expand "del_ch_p" -1)
                      (("2"
                        (name "ch" "choose({delta: posreal |
                                FORALL (x: {xx: (NQ(D, p)) | xx /= zero_vec(n)}):
                                  norm_inf(n)(x - zero_vec(n)) < delta IMPLIES
                                   abs(NQ(nth(1 + j, f, 0), der_f(D,p)(nth(1 + j, f, 0)),
                                          p)
                                         (x))
                                    < eps})")
                        (("1" (typepred "ch")
                          (("1" (inst -3 "x") (("1" (assert) nil nil))
                            nil))
                          nil)
                         ("2" (lemma "del_ch_p_TCC2")
                          (("2" (inst?)
                            (("2" (assert)
                              (("2"
                                (typepred "f")
                                (("2" (inst -1 "0") nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (assert)
                          (("3" (skeep)
                            (("3" (typepred "f")
                              (("3" (inst -1 "0") nil nil)) nil))
                            nil))
                          nil)
                         ("4" (assert)
                          (("4" (skeep)
                            (("4"
                              (typepred "x!1-zero_vec(n)" "x!1"
                               "zero_vec(n)")
                              (("4" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (typepred "f") (("3" (inst -1 "0") nil nil))
                      nil))
                    nil)
                   ("2" (assert)
                    (("2" (inst -1 "D" "p" "cdr(1+j,f)" "eps" "i-1")
                      (("1" (assert)
                        (("1" (inst -1 "x")
                          (("1" (assert)
                            (("1" (expand "del_all_p" -3)
                              (("1"
                                (assert)
                                (("1"
                                  (hide -3)
                                  (("1"
                                    (case
                                     "NQ(nth(j, cdr(1 + j, f), i - 1),
                            der_f(D,p)(nth(j, cdr(1 + j, f), i - 1)), p) = NQ(nth(1 + j, f, i), der_f(D,p)(nth(1 + j, f, i)), p)")
                                    (("1" (assert) nil nil)
                                     ("2"
                                      (case
                                       "nth(j, cdr(1 + j, f), i - 1) = nth(1 + j, f, i)")
                                      (("1" (assert) nil nil)
                                       ("2"
                                        (hide 2)
                                        (("2"
                                          (decompose-equality 1)
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (skeep)
                        (("2" (typepred "f")
                          (("2" (inst -1 "i!1+1")
                            (("2"
                              (case "(nth(1 + j, f, i!1 + 1)) = nth(j, cdr(1 + j, f), i!1)")
                              (("1" (assert) nil nil)
                               ("2"
                                (decompose-equality 1)
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (hide 2)
      (("4" (skeep)
        (("4" (skeep)
          (("4" (typepred "f") (("4" (inst -1 "i") nil nil)) nil))
          nil))
        nil))
      nil)
     ("5" (hide 2)
      (("5" (skeep)
        (("5" (skeep)
          (("5" (typepred "x-zero_vec(n)" "x" "zero_vec(n)")
            (("5" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posreal_min application-judgement
     "{z: posreal | z <= x AND z <= y}" real_defs nil)
    (<= const-decl "bool" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (cdr const-decl "VectorN(m - 1)" convergence_vec2vec nil)
    (nth def-decl "T" list_props nil) (set type-eq-decl nil sets nil)
    (nonempty? const-decl "bool" sets nil)
    (choose const-decl "(p)" sets nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (D skolem-const-decl "(deriv_domain?)" convergence_vec2vec nil)
    (j skolem-const-decl "nat" convergence_vec2vec nil)
    (p skolem-const-decl "(D)" convergence_vec2vec nil)
    (f skolem-const-decl "{ff: vec2vec(1 + j) |
   FORALL (i: below(1 + j)): differentiable?(D, nth(1 + j, ff, i), p)}"
     convergence_vec2vec nil)
    (del_ch_p_TCC2 subtype-tcc nil convergence_vec2vec nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (del_ch_p const-decl "posreal" convergence_vec2vec nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (der_f const-decl
     "{gg: VectorN(n) | convergence_zero?(NQ(D, p), NQ(f, gg, p), zero_vec(n))}"
     differentiable_def nil)
    (convergence_zero? const-decl "bool" vector_sequences nil)
    (NQ const-decl "real" differentiable_def nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (pred type-eq-decl nil defined_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (norm? const-decl "bool" norms nil)
    (norm_inf const-decl "(norm?(m))" norms nil)
    (del_all_p def-decl "posreal" convergence_vec2vec nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (> const-decl "bool" reals nil) (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n formal-const-decl "posnat" convergence_vec2vec nil)
    (VectorN type-eq-decl nil matrices matrices)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (vec2vec type-eq-decl nil domain_vec2real_def nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (differentiable? const-decl "bool" differentiable_def nil)
    (nth const-decl "vec2real_f" convergence_vec2vec nil)
    (NQ const-decl "bool" differentiable_def nil)
    (/= const-decl "boolean" notequal nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (Vector type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices))
   shostak))
 (derivable_nth_mat 0
  (derivable_nth_mat-1 nil 3796115252
   ("" (skeep)
    (("" (split 1)
      (("1" (flatten)
        (("1" (skeep)
          (("1" (expand "differentiableD?")
            (("1" (skeep)
              (("1" (inst -1 "p")
                (("1" (expand "differentiable?")
                  (("1" (skeep)
                    (("1" (inst 1 "nth(T,i)")
                      (("1" (expand "convergence_zero?")
                        (("1" (skeep)
                          (("1" (inst -1 "epsilon")
                            (("1" (skeep)
                              (("1"
                                (inst 1 "delta")
                                (("1"
                                  (skeep)
                                  (("1"
                                    (inst -1 "x")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand "NQ")
                                        (("1"
                                          (case
                                           " abs(norm_inf(m)(f(p + x) - f(p) - T * x) / norm_inf(n)(x)) =  norm_inf(m)(f(p + x) - f(p) - T * x) / norm_inf(n)(x)")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (replace -1 -2)
                                              (("1"
                                                (hide -1)
                                                (("1"
                                                  (lemma
                                                   "norm_inf_nth_ineq")
                                                  (("1"
                                                    (inst
                                                     -1
                                                     "f(p + x) - f(p) - T*x"
                                                     "i")
                                                    (("1"
                                                      (expand
                                                       "norm_inf"
                                                       -2
                                                       1)
                                                      (("1"
                                                        (mult-by
                                                         -2
                                                         "norm_inf(n)(x)")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (mult-by
                                                             1
                                                             "norm_inf(n)(x)")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (case
                                                                 "NOT  abs((nth(m, f, i)(p + x) - nth(m, f, i)(p) - nth(T, i) * x) /
                                             norm_inf(n)(x))
                                         * norm_inf(n)(x) =  abs((nth(m, f, i)(p + x) - nth(m, f, i)(p) - nth(T, i) * x)) ")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (expand
                                                                     "*"
                                                                     1)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (case
                                                                         "abs((nth(m, f, i)(p + x) - nth(m, f, i)(p) - dot(nth(T, i), x)) /
                                                 norm_inf(n)(x)) = abs((nth(m, f, i)(p + x) - nth(m, f, i)(p) - dot(nth(T, i), x))) /
                                                 norm_inf(n)(x)")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (hide
                                                                           2)
                                                                          (("2"
                                                                            (case
                                                                             "NOT norm_inf(n)(x)=0")
                                                                            (("1"
                                                                              (lemma
                                                                               "abs_div")
                                                                              (("1"
                                                                                (inst
                                                                                 -1
                                                                                 "norm_inf(n)(x)"
                                                                                 "((nth(m, f, i)(p + x) - nth(m, f, i)(p) - dot(nth(T, i), x)))")
                                                                                (("1"
                                                                                  (replace
                                                                                   -1
                                                                                   2)
                                                                                  (("1"
                                                                                    (typepred
                                                                                     "norm_inf(n)")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "norm?"
                                                                                       -1)
                                                                                      (("1"
                                                                                        (flatten)
                                                                                        (("1"
                                                                                          (inst
                                                                                           -1
                                                                                           "x")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "abs"
                                                                                               2
                                                                                               2)
                                                                                              (("1"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (replace
                                                                     -1
                                                                     1)
                                                                    (("2"
                                                                      (hide
                                                                       -1)
                                                                      (("2"
                                                                        (case
                                                                         "nth(f(p + x) - f(p) - T*x, i) = (nth(m, f, i)(p + x) - nth(m, f, i)(p) - nth(T, i) * x)")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (hide
                                                                           2)
                                                                          (("2"
                                                                            (lemma
                                                                             "nth_subtract")
                                                                            (("2"
                                                                              (expand
                                                                               "-"
                                                                               1)
                                                                              (("2"
                                                                                (inst-cp
                                                                                 -1
                                                                                 "f(p + x)"
                                                                                 "f(p)")
                                                                                (("2"
                                                                                  (inst
                                                                                   -1
                                                                                   "sub(f(p + x), f(p))"
                                                                                   "T*x")
                                                                                  (("1"
                                                                                    (split
                                                                                     -1)
                                                                                    (("1"
                                                                                      (split
                                                                                       -2)
                                                                                      (("1"
                                                                                        (inst
                                                                                         -1
                                                                                         "i")
                                                                                        (("1"
                                                                                          (inst
                                                                                           -2
                                                                                           "i")
                                                                                          (("1"
                                                                                            (expand
                                                                                             "-"
                                                                                             -)
                                                                                            (("1"
                                                                                              (replace
                                                                                               -2
                                                                                               1)
                                                                                              (("1"
                                                                                                (replace
                                                                                                 -1
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (expand
                                                                                                   "nth"
                                                                                                   1
                                                                                                   4)
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "nth"
                                                                                                     1
                                                                                                     3)
                                                                                                    (("1"
                                                                                                      (lemma
                                                                                                       "matv_nth")
                                                                                                      (("1"
                                                                                                        (inst
                                                                                                         -1
                                                                                                         "T"
                                                                                                         "x"
                                                                                                         "i")
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "row"
                                                                                                           -1)
                                                                                                          (("1"
                                                                                                            (replace
                                                                                                             -1
                                                                                                             1)
                                                                                                            (("1"
                                                                                                              (propax)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (hide
                                                                                                           2)
                                                                                                          (("2"
                                                                                                            (hide
                                                                                                             -)
                                                                                                            (("2"
                                                                                                              (typepred
                                                                                                               "i")
                                                                                                              (("2"
                                                                                                                (typepred
                                                                                                                 "m")
                                                                                                                (("2"
                                                                                                                  (typepred
                                                                                                                   "T")
                                                                                                                  (("2"
                                                                                                                    (expand
                                                                                                                     "rows")
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (typepred
                                                                                             "f(p)")
                                                                                            (("2"
                                                                                              (typepred
                                                                                               "(sub(f(p + x), f(p)))")
                                                                                              (("2"
                                                                                                (hide
                                                                                                 -1
                                                                                                 -3)
                                                                                                (("2"
                                                                                                  (typepred
                                                                                                   "f(p+x)")
                                                                                                  (("2"
                                                                                                    (replace
                                                                                                     -2)
                                                                                                    (("2"
                                                                                                      (replace
                                                                                                       -4)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "max"
                                                                                                         -3)
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (typepred
                                                                                       "T*x")
                                                                                      (("2"
                                                                                        (typepred
                                                                                         "sub(f(p + x), f(p))"
                                                                                         "f(p+x)"
                                                                                         "f(p)")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (replace
                                                                                             -4)
                                                                                            (("2"
                                                                                              (replace
                                                                                               -6)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "max")
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "rows")
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (typepred
                                                                                     "T*x")
                                                                                    (("2"
                                                                                      (hide
                                                                                       -1)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "rows"
                                                                                         -1)
                                                                                        (("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("3"
                                                                                    (typepred
                                                                                     "sub(f(p + x), f(p))"
                                                                                     "f(p+x)"
                                                                                     "f(p)")
                                                                                    (("3"
                                                                                      (replace
                                                                                       -4)
                                                                                      (("3"
                                                                                        (replace
                                                                                         -6)
                                                                                        (("3"
                                                                                          (expand
                                                                                           "max")
                                                                                          (("3"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (typepred
                                                           "x")
                                                          (("2"
                                                            (typepred
                                                             "norm_inf(n)")
                                                            (("2"
                                                              (expand
                                                               "norm?"
                                                               -1)
                                                              (("2"
                                                                (flatten)
                                                                (("2"
                                                                  (inst
                                                                   -3
                                                                   "x")
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (typepred
                                                       "f(p + x) - f(p)"
                                                       "f(p+x)"
                                                       "f(p)"
                                                       "T*x")
                                                      (("2"
                                                        (replace -4)
                                                        (("2"
                                                          (replace -6)
                                                          (("2"
                                                            (expand
                                                             "max"
                                                             -2)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (hide
                                                                 -1
                                                                 -3
                                                                 -5
                                                                 -7)
                                                                (("2"
                                                                  (typepred
                                                                   "i")
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (typepred
                                                                       "f(p + x) - f(p) - T * x")
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (expand "abs" 1 1)
                                            (("2"
                                              (lift-if 1)
                                              (("2"
                                                (split 1)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (mult-by
                                                     -1
                                                     " norm_inf(n)(x)")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (typepred "x")
                                                      (("2"
                                                        (typepred
                                                         "norm_inf(n)")
                                                        (("2"
                                                          (expand
                                                           "norm?"
                                                           -1)
                                                          (("2"
                                                            (flatten)
                                                            (("2"
                                                              (inst
                                                               -3
                                                               "x")
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (assert)
                        (("2" (typepred "T")
                          (("2" (inst -3 "i") nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (flatten)
        (("2" (expand "differentiableD?" 1)
          (("2" (expand "differentiableD?" -1)
            (("2" (skeep)
              (("2" (expand "differentiable?" 1)
                (("2" (inst 1 "pre_der(m,D,f)(p)")
                  (("1" (expand "convergence_zero?" 1)
                    (("1" (skeep)
                      (("1" (inst 1 "del_all(m,D,f)(p,epsilon)")
                        (("1" (skeep)
                          (("1" (lemma "del_nth")
                            (("1" (inst?)
                              (("1"
                                (expand "NQ" 1)
                                (("1"
                                  (case
                                   "abs(norm_inf(m)(f(p + x) - f(p) - pre_der(m, D, f)(p)*x)
                                     / norm_inf(n)(x)) = norm_inf(m)(f(p + x) - f(p) - pre_der(m, D, f)(p)*x)
                                     / norm_inf(n)(x)")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (replace -1 1)
                                      (("1"
                                        (lemma "norm_inf_nth")
                                        (("1"
                                          (inst
                                           -1
                                           "f(p + x) - f(p) - pre_der(m, D, f)(p)*x")
                                          (("1"
                                            (skeep)
                                            (("1"
                                              (expand "norm_inf" 1 1)
                                              (("1"
                                                (replace -1 1)
                                                (("1"
                                                  (lemma
                                                   "nth_subtract")
                                                  (("1"
                                                    (inst
                                                     -1
                                                     "f(p + x) - f(p)"
                                                     "pre_der(m, D, f)(p)*x")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (split -1)
                                                        (("1"
                                                          (inst -1 "i")
                                                          (("1"
                                                            (replace
                                                             -1
                                                             1)
                                                            (("1"
                                                              (lemma
                                                               "matv_nth")
                                                              (("1"
                                                                (inst
                                                                 -1
                                                                 " pre_der(m, D, f)(p)"
                                                                 "x"
                                                                 "i")
                                                                (("1"
                                                                  (replace
                                                                   -1
                                                                   1)
                                                                  (("1"
                                                                    (lemma
                                                                     "pre_der_nth")
                                                                    (("1"
                                                                      (inst
                                                                       -1
                                                                       "m"
                                                                       "D"
                                                                       "f"
                                                                       "i")
                                                                      (("1"
                                                                        (expand
                                                                         "row"
                                                                         1
                                                                         1)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (typepred
                                                                             "i")
                                                                            (("1"
                                                                              (lift-if
                                                                               1)
                                                                              (("1"
                                                                                (split
                                                                                 1)
                                                                                (("1"
                                                                                  (flatten)
                                                                                  (("1"
                                                                                    (hide
                                                                                     1)
                                                                                    (("1"
                                                                                      (typepred
                                                                                       "i"
                                                                                       "pre_der(m, D, f)(p)")
                                                                                      (("1"
                                                                                        (typepred
                                                                                         "f(p + x) - f(p) - pre_der(m, D, f)(p)*x"
                                                                                         "f(p + x) - f(p)"
                                                                                         "pre_der(m, D, f)(p)*x"
                                                                                         "f(p+x)"
                                                                                         "f(p)")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (replace
                                                                                             -8)
                                                                                            (("1"
                                                                                              (replace
                                                                                               -10)
                                                                                              (("1"
                                                                                                (hide
                                                                                                 -7)
                                                                                                (("1"
                                                                                                  (hide
                                                                                                   -8)
                                                                                                  (("1"
                                                                                                    (hide
                                                                                                     -5)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "max"
                                                                                                       -4)
                                                                                                      (("1"
                                                                                                        (replace
                                                                                                         -4)
                                                                                                        (("1"
                                                                                                          (hide
                                                                                                           -1
                                                                                                           -3)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "rows"
                                                                                                             -3)
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (flatten)
                                                                                  (("2"
                                                                                    (decompose-equality
                                                                                     -2
                                                                                     "p")
                                                                                    (("1"
                                                                                      (inst
                                                                                       -1
                                                                                       "p")
                                                                                      (("1"
                                                                                        (replace
                                                                                         -1
                                                                                         2)
                                                                                        (("1"
                                                                                          (inst
                                                                                           -7
                                                                                           "i")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "NQ"
                                                                                               -7)
                                                                                              (("1"
                                                                                                (hide
                                                                                                 -8)
                                                                                                (("1"
                                                                                                  (case
                                                                                                   "(nth(m, f, i)(p + x) - nth(m, f, i)(p) -
                                                                      der_f(D)(nth(m, f, i))(p) * x) = nth(f(p + x) - f(p), i) - der_f(D)(nth(m, f, i))(p) * x")
                                                                                                  (("1"
                                                                                                    (replace
                                                                                                     -1
                                                                                                     2
                                                                                                     rl)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (hide
                                                                                                         1)
                                                                                                        (("1"
                                                                                                          (hide
                                                                                                           -9)
                                                                                                          (("1"
                                                                                                            (hide
                                                                                                             -7)
                                                                                                            (("1"
                                                                                                              (lemma
                                                                                                               "abs_div")
                                                                                                              (("1"
                                                                                                                (inst
                                                                                                                 -1
                                                                                                                 " norm_inf(n)(x)"
                                                                                                                 "(nth(m, f, i)(p + x) - nth(m, f, i)(p) -
                                                                der_f(D)(nth(m, f, i))(p) * x)")
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (replace
                                                                                                                     -1
                                                                                                                     -8)
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "abs"
                                                                                                                       -8
                                                                                                                       2)
                                                                                                                      (("1"
                                                                                                                        (propax)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (hide
                                                                                                       2
                                                                                                       3)
                                                                                                      (("2"
                                                                                                        (hide
                                                                                                         -6
                                                                                                         -7)
                                                                                                        (("2"
                                                                                                          (expand
                                                                                                           "nth"
                                                                                                           1
                                                                                                           1)
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "nth"
                                                                                                             1
                                                                                                             2)
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              (("2"
                                                                                                                (lemma
                                                                                                                 "nth_subtract")
                                                                                                                (("2"
                                                                                                                  (inst
                                                                                                                   -1
                                                                                                                   "f(p + x)"
                                                                                                                   "(f(p))")
                                                                                                                  (("2"
                                                                                                                    (assert)
                                                                                                                    (("2"
                                                                                                                      (inst
                                                                                                                       -1
                                                                                                                       "i")
                                                                                                                      (("2"
                                                                                                                        (replace
                                                                                                                         -1
                                                                                                                         1)
                                                                                                                        (("2"
                                                                                                                          (propax)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (hide
                                                                                       -)
                                                                                      (("2"
                                                                                        (reveal
                                                                                         -)
                                                                                        (("2"
                                                                                          (hide
                                                                                           -11)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "differentiableD?"
                                                                                             1)
                                                                                            (("2"
                                                                                              (skeep)
                                                                                              (("2"
                                                                                                (inst
                                                                                                 -11
                                                                                                 "i")
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   -11
                                                                                                   "p!2")
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (typepred
                                                                           "i")
                                                                          (("2"
                                                                            (typepred
                                                                             "f(p + x) - f(p) - pre_der(m, D, f)(p)*x"
                                                                             "f(p + x) - f(p)"
                                                                             "pre_der(m, D, f)(p)*x"
                                                                             "f(p+x)"
                                                                             "f(p)")
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (replace
                                                                                 -8)
                                                                                (("2"
                                                                                  (replace
                                                                                   -10)
                                                                                  (("2"
                                                                                    (replace
                                                                                     -6)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "max"
                                                                                       -4)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "rows")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (typepred
                                                                     "i")
                                                                    (("2"
                                                                      (typepred
                                                                       "f(p + x) - f(p) - pre_der(m, D, f)(p)*x"
                                                                       "f(p + x) - f(p)"
                                                                       "pre_der(m, D, f)(p)*x"
                                                                       "f(p+x)"
                                                                       "f(p)")
                                                                      (("2"
                                                                        (hide
                                                                         -3
                                                                         -5
                                                                         -7)
                                                                        (("2"
                                                                          (replace
                                                                           -5)
                                                                          (("2"
                                                                            (replace
                                                                             -4)
                                                                            (("2"
                                                                              (replace
                                                                               -7)
                                                                              (("2"
                                                                                (hide
                                                                                 -1)
                                                                                (("2"
                                                                                  (hide
                                                                                   -5)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "rows")
                                                                                    (("2"
                                                                                      (expand
                                                                                       "max")
                                                                                      (("2"
                                                                                        (replace
                                                                                         -1)
                                                                                        (("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (typepred
                                                             "f(p+x)-f(p)"
                                                             "f(p+x)"
                                                             "f(p)")
                                                            (("2"
                                                              (replace
                                                               -4)
                                                              (("2"
                                                                (replace
                                                                 -6)
                                                                (("2"
                                                                  (expand
                                                                   "max"
                                                                   -2)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (typepred
                                                                       "i")
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (typepred
                                                                           "pre_der(m, D, f)(p) * x")
                                                                          (("2"
                                                                            (hide
                                                                             -1)
                                                                            (("2"
                                                                              (expand
                                                                               "rows"
                                                                               -1)
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (typepred
                                                           "f(p+x)-f(p)"
                                                           "f(p+x)"
                                                           "f(p)")
                                                          (("2"
                                                            (typepred
                                                             "pre_der(m, D, f)(p) * x")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (expand
                                                                 "rows")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (replace
                                                                     -6)
                                                                    (("2"
                                                                      (replace
                                                                       -8)
                                                                      (("2"
                                                                        (expand
                                                                         "max"
                                                                         -4)
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide -1)
                                                      (("2"
                                                        (typepred
                                                         "pre_der(m, D, f)(p)")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (typepred
                                                             "f(p+x)-f(p)"
                                                             "f(p+x)"
                                                             "f(p)")
                                                            (("2"
                                                              (replace
                                                               -4)
                                                              (("2"
                                                                (replace
                                                                 -6)
                                                                (("2"
                                                                  (expand
                                                                   "max"
                                                                   -2)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (typepred
                                                                       "(pre_der(m, D, f)(p) * x)")
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (expand
                                                                           "rows")
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (typepred
                                                       "f(p+x)-f(p)"
                                                       "f(p+x)"
                                                       "f(p)")
                                                      (("3"
                                                        (replace -4)
                                                        (("3"
                                                          (replace -6)
                                                          (("3"
                                                            (expand
                                                             "max")
                                                            (("3"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (expand "abs" 1 1)
                                    (("2"
                                      (lift-if 1)
                                      (("2"
                                        (split 1)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (mult-by
                                             -1
                                             " norm_inf(n)(x)")
                                            (("1" (assert) nil nil)
                                             ("2"
                                              (typepred "x")
                                              (("2"
                                                (typepred
                                                 "norm_inf(n)")
                                                (("2"
                                                  (expand "norm?" -1)
                                                  (("2"
                                                    (flatten)
                                                    (("2"
                                                      (inst -3 "x")
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (skeep)
                          (("2" (inst -1 "i")
                            (("2" (expand "differentiableD?" 1)
                              (("2" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (skeep)
                    (("2" (inst -1 "i")
                      (("2" (expand "differentiableD?" 1)
                        (("2" (propax) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (differentiable? const-decl "bool" differentiable_def nil)
    (differentiable? const-decl "bool" convergence_vec2vec nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (i skolem-const-decl "below(m)" convergence_vec2vec nil)
    (T skolem-const-decl "MatrixMN(m, n)" convergence_vec2vec nil)
    (MatrixMN type-eq-decl nil matrices matrices)
    (below type-eq-decl nil naturalnumbers nil)
    (m skolem-const-decl "posnat" convergence_vec2vec nil)
    (Matrix type-eq-decl nil matrices matrices)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (< const-decl "bool" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (* const-decl "VectorN(rows(A))" mat_vec_mult nil)
    (rows const-decl "nat" matrices matrices)
    (columns def-decl "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}" matrices
     matrices)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (FullMatrix type-eq-decl nil matrices matrices)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (vec2vec type-eq-decl nil domain_vec2real_def nil)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (Vector type-eq-decl nil matrices matrices)
    (norm_inf const-decl "(norm?(m))" norms nil)
    (norm? const-decl "bool" norms nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (norm_inf_nth_ineq formula-decl nil norms nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (sub const-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (matv_nth formula-decl nil mat_vec_mult nil)
    (row const-decl "Vector" matrices matrices)
    (nth_subtract formula-decl nil vector_arithmetic nil)
    (abs_div formula-decl nil real_props nil)
    (dot def-decl "real" matrices matrices)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "real" matrices matrices)
    (nth const-decl "vec2real_f" convergence_vec2vec nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (both_sides_times_pos_ge1_imp formula-decl nil extra_real_props
     nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (div_cancel2 formula-decl nil real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (norm_inf const-decl "[(cons?) -> nonneg_real]" norms nil)
    (both_sides_times_pos_lt1 formula-decl nil real_props nil)
    (x skolem-const-decl "{xx: (NQ(D, p)) | xx /= zero_vec(n)}"
     convergence_vec2vec nil)
    (p skolem-const-decl "(D)" convergence_vec2vec nil)
    (D skolem-const-decl "(deriv_domain?)" convergence_vec2vec nil)
    (f skolem-const-decl "vec2vec[n](m)" convergence_vec2vec nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (NQ const-decl "real" convergence_vec2vec nil)
    (NQ const-decl "real" differentiable_def nil)
    (NQ const-decl "bool" differentiable_def nil)
    (/= const-decl "boolean" notequal nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (convergence_zero? const-decl "bool" vector_sequences nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" convergence_vec2vec nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (differentiableD? const-decl "bool" convergence_vec2vec nil)
    (differentiableD? const-decl "bool" differentiable_def nil)
    (pre_der def-decl "[(D) -> MatrixMN(m, n)]" convergence_vec2vec
     nil)
    (i skolem-const-decl
       "below(length(f(p + x) - f(p) - pre_der(m, D, f)(p) * x))"
       convergence_vec2vec nil)
    (der_f const-decl "{gg: [(D) -> VectorN(n)] |
   FORALL (p: (D)):
     convergence_zero?(NQ(D, p), NQ(f, gg(p), p), zero_vec(n))}"
     differentiable_def nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (pre_der_nth formula-decl nil convergence_vec2vec nil)
    (x skolem-const-decl "{xx: (NQ(D, p)) | xx /= zero_vec(n)}"
     convergence_vec2vec nil)
    (p skolem-const-decl "(D)" convergence_vec2vec nil)
    (norm_inf_nth formula-decl nil norms nil)
    (del_nth formula-decl nil convergence_vec2vec nil)
    (del_all def-decl "posreal" convergence_vec2vec nil))
   shostak))
 (derivable_nth_mat_point 0
  (derivable_nth_mat_point-1 nil 3798124624
   ("" (skeep)
    (("" (split 1)
      (("1" (flatten)
        (("1" (skeep)
          (("1" (expand "differentiable?")
            (("1" (skeep)
              (("1" (inst 1 "nth(T,i)")
                (("1" (expand "convergence_zero?")
                  (("1" (skeep)
                    (("1" (inst -1 "epsilon")
                      (("1" (skeep)
                        (("1" (inst 1 "delta")
                          (("1" (skeep)
                            (("1" (inst -1 "x")
                              (("1"
                                (assert)
                                (("1"
                                  (expand "NQ")
                                  (("1"
                                    (case
                                     " abs(norm_inf(m)(f(p + x) - f(p) - T * x) / norm_inf(n)(x)) =  norm_inf(m)(f(p + x) - f(p) - T * x) / norm_inf(n)(x)")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (replace -1 -2)
                                        (("1"
                                          (hide -1)
                                          (("1"
                                            (lemma "norm_inf_nth_ineq")
                                            (("1"
                                              (inst
                                               -1
                                               "f(p + x) - f(p) - T*x"
                                               "i")
                                              (("1"
                                                (expand
                                                 "norm_inf"
                                                 -2
                                                 1)
                                                (("1"
                                                  (mult-by
                                                   -2
                                                   "norm_inf(n)(x)")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (mult-by
                                                       1
                                                       "norm_inf(n)(x)")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (case
                                                           "NOT  abs((nth(m, f, i)(p + x) - nth(m, f, i)(p) - nth(T, i) * x) /
                                                              norm_inf(n)(x))
                                                          * norm_inf(n)(x) =  abs((nth(m, f, i)(p + x) - nth(m, f, i)(p) - nth(T, i) * x)) ")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (expand
                                                               "*"
                                                               1)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (case
                                                                   "abs((nth(m, f, i)(p + x) - nth(m, f, i)(p) - dot(nth(T, i), x)) /
                                                                    norm_inf(n)(x)) = abs((nth(m, f, i)(p + x) - nth(m, f, i)(p) - dot(nth(T, i), x))) /
                                                                    norm_inf(n)(x)")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (hide
                                                                     2)
                                                                    (("2"
                                                                      (case
                                                                       "NOT norm_inf(n)(x)=0")
                                                                      (("1"
                                                                        (lemma
                                                                         "abs_div")
                                                                        (("1"
                                                                          (inst
                                                                           -1
                                                                           "norm_inf(n)(x)"
                                                                           "((nth(m, f, i)(p + x) - nth(m, f, i)(p) - dot(nth(T, i), x)))")
                                                                          (("1"
                                                                            (replace
                                                                             -1
                                                                             2)
                                                                            (("1"
                                                                              (typepred
                                                                               "norm_inf(n)")
                                                                              (("1"
                                                                                (expand
                                                                                 "norm?"
                                                                                 -1)
                                                                                (("1"
                                                                                  (flatten)
                                                                                  (("1"
                                                                                    (inst
                                                                                     -1
                                                                                     "x")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "abs"
                                                                                         2
                                                                                         2)
                                                                                        (("1"
                                                                                          (propax)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            (("2"
                                                              (replace
                                                               -1
                                                               1)
                                                              (("2"
                                                                (hide
                                                                 -1)
                                                                (("2"
                                                                  (case
                                                                   "nth(f(p + x) - f(p) - T*x, i) = (nth(m, f, i)(p + x) - nth(m, f, i)(p) - nth(T, i) * x)")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil)
                                                                   ("2"
                                                                    (hide
                                                                     2)
                                                                    (("2"
                                                                      (lemma
                                                                       "nth_subtract")
                                                                      (("2"
                                                                        (expand
                                                                         "-"
                                                                         1)
                                                                        (("2"
                                                                          (inst-cp
                                                                           -1
                                                                           "f(p + x)"
                                                                           "f(p)")
                                                                          (("2"
                                                                            (inst
                                                                             -1
                                                                             "sub(f(p + x), f(p))"
                                                                             "T*x")
                                                                            (("1"
                                                                              (split
                                                                               -1)
                                                                              (("1"
                                                                                (split
                                                                                 -2)
                                                                                (("1"
                                                                                  (inst
                                                                                   -1
                                                                                   "i")
                                                                                  (("1"
                                                                                    (inst
                                                                                     -2
                                                                                     "i")
                                                                                    (("1"
                                                                                      (expand
                                                                                       "-"
                                                                                       -)
                                                                                      (("1"
                                                                                        (replace
                                                                                         -2
                                                                                         1)
                                                                                        (("1"
                                                                                          (replace
                                                                                           -1
                                                                                           1)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "nth"
                                                                                             1
                                                                                             4)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "nth"
                                                                                               1
                                                                                               3)
                                                                                              (("1"
                                                                                                (lemma
                                                                                                 "matv_nth")
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -1
                                                                                                   "T"
                                                                                                   "x"
                                                                                                   "i")
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "row"
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (replace
                                                                                                       -1
                                                                                                       1)
                                                                                                      (("1"
                                                                                                        (propax)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (hide
                                                                                                     2)
                                                                                                    (("2"
                                                                                                      (hide
                                                                                                       -)
                                                                                                      (("2"
                                                                                                        (typepred
                                                                                                         "i")
                                                                                                        (("2"
                                                                                                          (typepred
                                                                                                           "m")
                                                                                                          (("2"
                                                                                                            (typepred
                                                                                                             "T")
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "rows")
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (typepred
                                                                                       "f(p)")
                                                                                      (("2"
                                                                                        (typepred
                                                                                         "(sub(f(p + x), f(p)))")
                                                                                        (("2"
                                                                                          (hide
                                                                                           -1
                                                                                           -3)
                                                                                          (("2"
                                                                                            (typepred
                                                                                             "f(p+x)")
                                                                                            (("2"
                                                                                              (replace
                                                                                               -2)
                                                                                              (("2"
                                                                                                (replace
                                                                                                 -4)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "max"
                                                                                                   -3)
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (typepred
                                                                                 "T*x")
                                                                                (("2"
                                                                                  (typepred
                                                                                   "sub(f(p + x), f(p))"
                                                                                   "f(p+x)"
                                                                                   "f(p)")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (replace
                                                                                       -4)
                                                                                      (("2"
                                                                                        (replace
                                                                                         -6)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "max")
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "rows")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (typepred
                                                                               "T*x")
                                                                              (("2"
                                                                                (hide
                                                                                 -1)
                                                                                (("2"
                                                                                  (expand
                                                                                   "rows"
                                                                                   -1)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("3"
                                                                              (typepred
                                                                               "sub(f(p + x), f(p))"
                                                                               "f(p+x)"
                                                                               "f(p)")
                                                                              (("3"
                                                                                (replace
                                                                                 -4)
                                                                                (("3"
                                                                                  (replace
                                                                                   -6)
                                                                                  (("3"
                                                                                    (expand
                                                                                     "max")
                                                                                    (("3"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (typepred "x")
                                                    (("2"
                                                      (typepred
                                                       "norm_inf(n)")
                                                      (("2"
                                                        (expand
                                                         "norm?"
                                                         -1)
                                                        (("2"
                                                          (flatten)
                                                          (("2"
                                                            (inst
                                                             -3
                                                             "x")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (typepred
                                                 "f(p + x) - f(p)"
                                                 "f(p+x)"
                                                 "f(p)"
                                                 "T*x")
                                                (("2"
                                                  (replace -4)
                                                  (("2"
                                                    (replace -6)
                                                    (("2"
                                                      (expand "max" -2)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (hide
                                                           -1
                                                           -3
                                                           -5
                                                           -7)
                                                          (("2"
                                                            (typepred
                                                             "i")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (typepred
                                                                 "f(p + x) - f(p) - T * x")
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (expand "abs" 1 1)
                                      (("2"
                                        (lift-if 1)
                                        (("2"
                                          (split 1)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (mult-by
                                               -1
                                               " norm_inf(n)(x)")
                                              (("1" (assert) nil nil)
                                               ("2"
                                                (typepred "x")
                                                (("2"
                                                  (typepred
                                                   "norm_inf(n)")
                                                  (("2"
                                                    (expand "norm?" -1)
                                                    (("2"
                                                      (flatten)
                                                      (("2"
                                                        (inst -3 "x")
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert)
                  (("2" (typepred "T") (("2" (inst -3 "i") nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (flatten)
        (("2" (expand "differentiable?" 1)
          (("2" (inst 1 "pre_der(m,D,p,f)")
            (("2" (expand "convergence_zero?" 1)
              (("2" (skeep)
                (("2" (inst 1 "del_all_p(m,D,p,f)(epsilon)")
                  (("2" (skeep)
                    (("2" (lemma "del_nth")
                      (("2" (lemma "del_nth")
                        (("2" (lemma "del_nth_p")
                          (("2" (hide -2)
                            (("2" (inst?)
                              (("2"
                                (expand "NQ" 1)
                                (("2"
                                  (case
                                   "abs(norm_inf(m)(f(p + x) - f(p) - pre_der(m, D, p, f)*x)
                                                  / norm_inf(n)(x)) = norm_inf(m)(f(p + x) - f(p) - pre_der(m, D,p, f)*x)
                                                  / norm_inf(n)(x)")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (replace -1 1)
                                      (("1"
                                        (lemma "norm_inf_nth")
                                        (("1"
                                          (inst
                                           -1
                                           "f(p + x) - f(p) - pre_der(m, D,p, f)*x")
                                          (("1"
                                            (skeep)
                                            (("1"
                                              (expand "norm_inf" 1 1)
                                              (("1"
                                                (replace -1 1)
                                                (("1"
                                                  (lemma
                                                   "nth_subtract")
                                                  (("1"
                                                    (inst
                                                     -1
                                                     "f(p + x) - f(p)"
                                                     "pre_der(m, D,p, f)*x")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (split -1)
                                                        (("1"
                                                          (inst -1 "i")
                                                          (("1"
                                                            (replace
                                                             -1
                                                             1)
                                                            (("1"
                                                              (lemma
                                                               "matv_nth")
                                                              (("1"
                                                                (inst
                                                                 -1
                                                                 " pre_der(m, D,p, f)"
                                                                 "x"
                                                                 "i")
                                                                (("1"
                                                                  (replace
                                                                   -1
                                                                   1)
                                                                  (("1"
                                                                    (lemma
                                                                     "pre_der_nth_p")
                                                                    (("1"
                                                                      (inst
                                                                       -1
                                                                       "m"
                                                                       "D"
                                                                       "p"
                                                                       "f"
                                                                       "i")
                                                                      (("1"
                                                                        (expand
                                                                         "row"
                                                                         1
                                                                         1)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (typepred
                                                                             "i")
                                                                            (("1"
                                                                              (lift-if
                                                                               1)
                                                                              (("1"
                                                                                (split
                                                                                 1)
                                                                                (("1"
                                                                                  (flatten)
                                                                                  (("1"
                                                                                    (hide
                                                                                     1)
                                                                                    (("1"
                                                                                      (typepred
                                                                                       "i"
                                                                                       "pre_der(m, D, p,f)")
                                                                                      (("1"
                                                                                        (typepred
                                                                                         "f(p + x) - f(p) - pre_der(m, D,p, f)*x"
                                                                                         "f(p + x) - f(p)"
                                                                                         "pre_der(m, D,p, f)*x"
                                                                                         "f(p+x)"
                                                                                         "f(p)")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (replace
                                                                                             -8)
                                                                                            (("1"
                                                                                              (replace
                                                                                               -10)
                                                                                              (("1"
                                                                                                (hide
                                                                                                 -7)
                                                                                                (("1"
                                                                                                  (hide
                                                                                                   -8)
                                                                                                  (("1"
                                                                                                    (hide
                                                                                                     -5)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "max"
                                                                                                       -4)
                                                                                                      (("1"
                                                                                                        (replace
                                                                                                         -4)
                                                                                                        (("1"
                                                                                                          (hide
                                                                                                           -1
                                                                                                           -3)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "rows"
                                                                                                             -3)
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (flatten)
                                                                                  (("2"
                                                                                    (replace
                                                                                     -2
                                                                                     2)
                                                                                    (("2"
                                                                                      (inst
                                                                                       -7
                                                                                       "i")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "NQ"
                                                                                           -7)
                                                                                          (("2"
                                                                                            (hide
                                                                                             -8)
                                                                                            (("2"
                                                                                              (case
                                                                                               "(nth(m, f, i)(p + x) - nth(m, f, i)(p) -
                                                                                                   der_f(D,p)(nth(m, f, i)) * x) = nth(f(p + x) - f(p), i) - der_f(D,p)(nth(m, f, i)) * x")
                                                                                              (("1"
                                                                                                (replace
                                                                                                 -1
                                                                                                 2
                                                                                                 rl)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (hide
                                                                                                     1)
                                                                                                    (("1"
                                                                                                      (hide
                                                                                                       -9)
                                                                                                      (("1"
                                                                                                        (hide
                                                                                                         -7)
                                                                                                        (("1"
                                                                                                          (lemma
                                                                                                           "abs_div")
                                                                                                          (("1"
                                                                                                            (inst
                                                                                                             -1
                                                                                                             " norm_inf(n)(x)"
                                                                                                             "(nth(m, f, i)(p + x) - nth(m, f, i)(p) -
                                                                                          der_f(D,p)(nth(m, f, i)) * x)")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (replace
                                                                                                                 -1
                                                                                                                 -8)
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "abs"
                                                                                                                   -8
                                                                                                                   2)
                                                                                                                  (("1"
                                                                                                                    (propax)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil)
                                                                                               ("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (hide
                                                                                                   2
                                                                                                   3)
                                                                                                  (("2"
                                                                                                    (hide
                                                                                                     -6
                                                                                                     -7)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "nth"
                                                                                                       1
                                                                                                       1)
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "nth"
                                                                                                         1
                                                                                                         2)
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          (("2"
                                                                                                            (lemma
                                                                                                             "nth_subtract")
                                                                                                            (("2"
                                                                                                              (inst
                                                                                                               -1
                                                                                                               "f(p + x)"
                                                                                                               "(f(p))")
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                (("2"
                                                                                                                  (inst
                                                                                                                   -1
                                                                                                                   "i")
                                                                                                                  (("2"
                                                                                                                    (replace
                                                                                                                     -1
                                                                                                                     1)
                                                                                                                    (("2"
                                                                                                                      (propax)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide
                                                                         -)
                                                                        (("2"
                                                                          (reveal
                                                                           -)
                                                                          (("2"
                                                                            (hide
                                                                             -11)
                                                                            (("2"
                                                                              (hide
                                                                               -)
                                                                              (("2"
                                                                                (typepred
                                                                                 "i")
                                                                                (("2"
                                                                                  (typepred
                                                                                   "f(p + x) - f(p) - pre_der(m, D,p, f)*x"
                                                                                   "f(p + x) - f(p)"
                                                                                   "pre_der(m, D, p ,f)*x"
                                                                                   "f(p+x)"
                                                                                   "f(p)")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (replace
                                                                                       -8)
                                                                                      (("2"
                                                                                        (replace
                                                                                         -10)
                                                                                        (("2"
                                                                                          (replace
                                                                                           -6)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "max"
                                                                                             -4)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "rows")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (typepred
                                                                     "i")
                                                                    (("2"
                                                                      (typepred
                                                                       "f(p + x) - f(p) - pre_der(m, D,p, f)*x"
                                                                       "f(p + x) - f(p)"
                                                                       "pre_der(m, D, p, f)*x"
                                                                       "f(p+x)"
                                                                       "f(p)")
                                                                      (("2"
                                                                        (hide
                                                                         -3
                                                                         -5
                                                                         -7)
                                                                        (("2"
                                                                          (replace
                                                                           -5)
                                                                          (("2"
                                                                            (replace
                                                                             -4)
                                                                            (("2"
                                                                              (replace
                                                                               -7)
                                                                              (("2"
                                                                                (hide
                                                                                 -1)
                                                                                (("2"
                                                                                  (hide
                                                                                   -5)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "rows")
                                                                                    (("2"
                                                                                      (expand
                                                                                       "max")
                                                                                      (("2"
                                                                                        (replace
                                                                                         -1)
                                                                                        (("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (typepred
                                                             "f(p+x)-f(p)"
                                                             "f(p+x)"
                                                             "f(p)")
                                                            (("2"
                                                              (replace
                                                               -4)
                                                              (("2"
                                                                (replace
                                                                 -6)
                                                                (("2"
                                                                  (expand
                                                                   "max"
                                                                   -2)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (typepred
                                                                       "i")
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (typepred
                                                                           "pre_der(m, D,p, f) * x")
                                                                          (("2"
                                                                            (hide
                                                                             -1)
                                                                            (("2"
                                                                              (expand
                                                                               "rows"
                                                                               -1)
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (typepred
                                                           "f(p+x)-f(p)"
                                                           "f(p+x)"
                                                           "f(p)")
                                                          (("2"
                                                            (typepred
                                                             "pre_der(m, D,p, f) * x")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (expand
                                                                 "rows")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (replace
                                                                     -6)
                                                                    (("2"
                                                                      (replace
                                                                       -8)
                                                                      (("2"
                                                                        (expand
                                                                         "max"
                                                                         -4)
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide -1)
                                                      (("2"
                                                        (typepred
                                                         "pre_der(m, D,p, f)")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (typepred
                                                             "f(p+x)-f(p)"
                                                             "f(p+x)"
                                                             "f(p)")
                                                            (("2"
                                                              (replace
                                                               -4)
                                                              (("2"
                                                                (replace
                                                                 -6)
                                                                (("2"
                                                                  (expand
                                                                   "max"
                                                                   -2)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (typepred
                                                                       "(pre_der(m, D,p, f) * x)")
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (expand
                                                                           "rows")
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("3"
                                                      (typepred
                                                       "f(p+x)-f(p)"
                                                       "f(p+x)"
                                                       "f(p)")
                                                      (("3"
                                                        (replace -4)
                                                        (("3"
                                                          (replace -6)
                                                          (("3"
                                                            (expand
                                                             "max")
                                                            (("3"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (expand "abs" 1 1)
                                    (("2"
                                      (lift-if 1)
                                      (("2"
                                        (split 1)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (mult-by
                                             -1
                                             " norm_inf(n)(x)")
                                            (("1" (assert) nil nil)
                                             ("2"
                                              (typepred "x")
                                              (("2"
                                                (typepred
                                                 "norm_inf(n)")
                                                (("2"
                                                  (expand "norm?" -1)
                                                  (("2"
                                                    (flatten)
                                                    (("2"
                                                      (inst -3 "x")
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((convergence_zero? const-decl "bool" vector_sequences nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (/= const-decl "boolean" notequal nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (NQ const-decl "bool" differentiable_def nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (NQ const-decl "real" differentiable_def nil)
    (NQ const-decl "real" convergence_vec2vec nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (f skolem-const-decl "vec2vec[n](m)" convergence_vec2vec nil)
    (D skolem-const-decl "(deriv_domain?)" convergence_vec2vec nil)
    (p skolem-const-decl "(D)" convergence_vec2vec nil)
    (x skolem-const-decl "{xx: (NQ(D, p)) | xx /= zero_vec(n)}"
     convergence_vec2vec nil)
    (both_sides_times_pos_lt1 formula-decl nil real_props nil)
    (norm_inf const-decl "[(cons?) -> nonneg_real]" norms nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (div_cancel2 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (both_sides_times_pos_ge1_imp formula-decl nil extra_real_props
     nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (nth const-decl "vec2real_f" convergence_vec2vec nil)
    (* const-decl "real" matrices matrices)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (dot def-decl "real" matrices matrices)
    (abs_div formula-decl nil real_props nil)
    (nth_subtract formula-decl nil vector_arithmetic nil)
    (row const-decl "Vector" matrices matrices)
    (matv_nth formula-decl nil mat_vec_mult nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (sub const-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (norm_inf_nth_ineq formula-decl nil norms nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (norm? const-decl "bool" norms nil)
    (norm_inf const-decl "(norm?(m))" norms nil)
    (Vector type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (vec2vec type-eq-decl nil domain_vec2real_def nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (FullMatrix type-eq-decl nil matrices matrices)
    (<= const-decl "bool" reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (columns def-decl "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}" matrices
     matrices)
    (rows const-decl "nat" matrices matrices)
    (* const-decl "VectorN(rows(A))" mat_vec_mult nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (VectorN type-eq-decl nil matrices matrices)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (list type-decl nil list_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (Matrix type-eq-decl nil matrices matrices)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (m skolem-const-decl "posnat" convergence_vec2vec nil)
    (below type-eq-decl nil naturalnumbers nil)
    (n formal-const-decl "posnat" convergence_vec2vec nil)
    (MatrixMN type-eq-decl nil matrices matrices)
    (T skolem-const-decl "MatrixMN(m, n)" convergence_vec2vec nil)
    (i skolem-const-decl "below(m)" convergence_vec2vec nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (differentiable? const-decl "bool" convergence_vec2vec nil)
    (differentiable? const-decl "bool" differentiable_def nil)
    (del_all_p def-decl "posreal" convergence_vec2vec nil)
    (del_nth formula-decl nil convergence_vec2vec nil)
    (del_nth_p formula-decl nil convergence_vec2vec nil)
    (i skolem-const-decl
       "below(length(f(p + x) - f(p) - pre_der(m, D, p, f) * x))"
       convergence_vec2vec nil)
    (der_f const-decl
     "{gg: VectorN(n) | convergence_zero?(NQ(D, p), NQ(f, gg, p), zero_vec(n))}"
     differentiable_def nil)
    (pre_der_nth_p formula-decl nil convergence_vec2vec nil)
    (x skolem-const-decl "{xx: (NQ(D, p)) | xx /= zero_vec(n)}"
     convergence_vec2vec nil)
    (norm_inf_nth formula-decl nil norms nil)
    (pre_der def-decl "MatrixMN(m, n)" convergence_vec2vec nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   shostak))
 (der_f_TCC1 0
  (der_f_TCC1-1 nil 3795951537
   ("" (skeep*)
    (("" (lemma "derivable_nth_mat")
      (("" (inst?)
        (("" (inst -1 "m" "f")
          (("" (assert) (("" (inst -1 "i") nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((derivable_nth_mat formula-decl nil convergence_vec2vec nil)
    (vec2vec type-eq-decl nil domain_vec2real_def nil)
    (differentiableD? const-decl "bool" convergence_vec2vec nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" convergence_vec2vec nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   nil
   (der_f subtype "convergence_vec2vec.f"
    "{ff: domain_vec2real_def[convergence_vec2vec.n].vec2vec(convergence_vec2vec.m) | FORALL (i: naturalnumbers.below(convergence_vec2vec.m)): differentiable_def[convergence_vec2vec.n].differentiableD?(convergence_vec2vec.D)(convergence_vec2vec.nth(convergence_vec2vec.m, ff, i))}")))
 (der_f_TCC2 0
  (der_f_TCC2-1 nil 3797350406
   ("" (skeep*)
    (("" (expand "convergence_zero?" 1)
      (("" (skeep)
        (("" (inst 1 "del_all(m,D,f)(p,epsilon)")
          (("1" (skeep)
            (("1" (lemma "del_nth")
              (("1" (inst?)
                (("1" (expand "NQ" 1)
                  (("1"
                    (case "abs(norm_inf(m)(f(p + x) - f(p) - pre_der(m, D, f)(p)*x)
                                          / norm_inf(n)(x)) = norm_inf(m)(f(p + x) - f(p) - pre_der(m, D, f)(p)*x)
                                          / norm_inf(n)(x)")
                    (("1" (assert)
                      (("1" (replace -1 1)
                        (("1" (lemma "norm_inf_nth")
                          (("1"
                            (inst -1
                             "f(p + x) - f(p) - pre_der(m, D, f)(p)*x")
                            (("1" (skeep)
                              (("1"
                                (expand "norm_inf" 1 1)
                                (("1"
                                  (replace -1 1)
                                  (("1"
                                    (lemma "nth_subtract")
                                    (("1"
                                      (inst
                                       -1
                                       "f(p + x) - f(p)"
                                       "pre_der(m, D, f)(p)*x")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (split -1)
                                          (("1"
                                            (inst -1 "i")
                                            (("1"
                                              (replace -1 1)
                                              (("1"
                                                (lemma "matv_nth")
                                                (("1"
                                                  (inst
                                                   -1
                                                   " pre_der(m, D, f)(p)"
                                                   "x"
                                                   "i")
                                                  (("1"
                                                    (replace -1 1)
                                                    (("1"
                                                      (lemma
                                                       "pre_der_nth")
                                                      (("1"
                                                        (inst
                                                         -1
                                                         "m"
                                                         "D"
                                                         "f"
                                                         "i")
                                                        (("1"
                                                          (expand
                                                           "row"
                                                           1
                                                           1)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (typepred
                                                               "i")
                                                              (("1"
                                                                (lift-if
                                                                 1)
                                                                (("1"
                                                                  (split
                                                                   1)
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (hide
                                                                       1)
                                                                      (("1"
                                                                        (typepred
                                                                         "i"
                                                                         "pre_der(m, D, f)(p)")
                                                                        (("1"
                                                                          (typepred
                                                                           "f(p + x) - f(p) - pre_der(m, D, f)(p)*x"
                                                                           "f(p + x) - f(p)"
                                                                           "pre_der(m, D, f)(p)*x"
                                                                           "f(p+x)"
                                                                           "f(p)")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (replace
                                                                               -8)
                                                                              (("1"
                                                                                (replace
                                                                                 -10)
                                                                                (("1"
                                                                                  (hide
                                                                                   -7)
                                                                                  (("1"
                                                                                    (hide
                                                                                     -8)
                                                                                    (("1"
                                                                                      (hide
                                                                                       -5)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "max"
                                                                                         -4)
                                                                                        (("1"
                                                                                          (replace
                                                                                           -4)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "rows")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (decompose-equality
                                                                       -2
                                                                       "p")
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         "p")
                                                                        (("1"
                                                                          (replace
                                                                           -1
                                                                           2)
                                                                          (("1"
                                                                            (inst
                                                                             -7
                                                                             "i")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (expand
                                                                                 "NQ"
                                                                                 -7)
                                                                                (("1"
                                                                                  (hide
                                                                                   -8)
                                                                                  (("1"
                                                                                    (case
                                                                                     "(nth(m, f, i)(p + x) - nth(m, f, i)(p) -
                                                                                           der_f(D)(nth(m, f, i))(p) * x) = nth(f(p + x) - f(p), i) - der_f(D)(nth(m, f, i))(p) * x")
                                                                                    (("1"
                                                                                      (replace
                                                                                       -1
                                                                                       2
                                                                                       rl)
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (hide
                                                                                           1)
                                                                                          (("1"
                                                                                            (hide
                                                                                             -7)
                                                                                            (("1"
                                                                                              (lemma
                                                                                               "abs_div")
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -1
                                                                                                 " norm_inf(n)(x)"
                                                                                                 "(nth(m, f, i)(p + x) - nth(m, f, i)(p) -
                                                                                  der_f(D)(nth(m, f, i))(p) * x)")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (replace
                                                                                                     -1
                                                                                                     -8)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "abs"
                                                                                                       -8
                                                                                                       2)
                                                                                                      (("1"
                                                                                                        (propax)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (hide
                                                                                         2
                                                                                         3)
                                                                                        (("2"
                                                                                          (hide
                                                                                           -6
                                                                                           -7)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "nth"
                                                                                             1
                                                                                             1)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "nth"
                                                                                               1
                                                                                               2)
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (lemma
                                                                                                   "nth_subtract")
                                                                                                  (("2"
                                                                                                    (inst
                                                                                                     -1
                                                                                                     "f(p + x)"
                                                                                                     "(f(p))")
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (inst
                                                                                                         -1
                                                                                                         "i")
                                                                                                        (("2"
                                                                                                          (replace
                                                                                                           -1
                                                                                                           1)
                                                                                                          (("2"
                                                                                                            (propax)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (hide
                                                                         -)
                                                                        (("2"
                                                                          (reveal
                                                                           -)
                                                                          (("2"
                                                                            (hide
                                                                             -11)
                                                                            (("2"
                                                                              (expand
                                                                               "differentiableD?"
                                                                               1)
                                                                              (("2"
                                                                                (skeep)
                                                                                (("2"
                                                                                  (hide
                                                                                   -17)
                                                                                  (("2"
                                                                                    (hide
                                                                                     -16
                                                                                     -15
                                                                                     -14
                                                                                     -13
                                                                                     -12
                                                                                     -11
                                                                                     -10
                                                                                     -9
                                                                                     -8
                                                                                     -7
                                                                                     -6
                                                                                     -5
                                                                                     -4
                                                                                     -3)
                                                                                    (("2"
                                                                                      (typepred
                                                                                       "f")
                                                                                      (("2"
                                                                                        (lemma
                                                                                         "derivable_nth_mat")
                                                                                        (("2"
                                                                                          (inst
                                                                                           -1
                                                                                           "m"
                                                                                           "D"
                                                                                           "f")
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (inst
                                                                                               -1
                                                                                               "i")
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "differentiableD?"
                                                                                                 -1)
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   -1
                                                                                                   "p!2")
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          (("2"
                                                            (typepred
                                                             "i")
                                                            (("2"
                                                              (typepred
                                                               "f(p + x) - f(p) - pre_der(m, D, f)(p)*x"
                                                               "f(p + x) - f(p)"
                                                               "pre_der(m, D, f)(p)*x"
                                                               "f(p+x)"
                                                               "f(p)")
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (replace
                                                                   -8)
                                                                  (("2"
                                                                    (replace
                                                                     -10)
                                                                    (("2"
                                                                      (replace
                                                                       -6)
                                                                      (("2"
                                                                        (expand
                                                                         "max"
                                                                         -4)
                                                                        (("2"
                                                                          (replace
                                                                           -4)
                                                                          (("2"
                                                                            (expand
                                                                             "max"
                                                                             -2)
                                                                            (("2"
                                                                              (replace
                                                                               -2)
                                                                              (("2"
                                                                                (expand
                                                                                 "rows")
                                                                                (("2"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    (("2"
                                                      (typepred "i")
                                                      (("2"
                                                        (typepred
                                                         "f(p + x) - f(p) - pre_der(m, D, f)(p)*x"
                                                         "f(p + x) - f(p)"
                                                         "pre_der(m, D, f)(p)*x"
                                                         "f(p+x)"
                                                         "f(p)")
                                                        (("2"
                                                          (hide
                                                           -3
                                                           -5
                                                           -7)
                                                          (("2"
                                                            (replace
                                                             -5)
                                                            (("2"
                                                              (replace
                                                               -4)
                                                              (("2"
                                                                (replace
                                                                 -7)
                                                                (("2"
                                                                  (hide
                                                                   -1)
                                                                  (("2"
                                                                    (hide
                                                                     -5)
                                                                    (("2"
                                                                      (expand
                                                                       "max"
                                                                       -2)
                                                                      (("2"
                                                                        (replace
                                                                         -2)
                                                                        (("2"
                                                                          (expand
                                                                           "max"
                                                                           -1)
                                                                          (("2"
                                                                            (replace
                                                                             -1)
                                                                            (("2"
                                                                              (expand
                                                                               "rows")
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (typepred
                                               "f(p+x)-f(p)"
                                               "f(p+x)"
                                               "f(p)")
                                              (("2"
                                                (replace -4)
                                                (("2"
                                                  (replace -6)
                                                  (("2"
                                                    (expand "max" -2)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (typepred "i")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (typepred
                                                             "f(p + x) - f(p)"
                                                             "f(p+x)"
                                                             "f(p)"
                                                             "pre_der(m, D, f)(p)*x")
                                                            (("2"
                                                              (replace
                                                               -4)
                                                              (("2"
                                                                (replace
                                                                 -6)
                                                                (("2"
                                                                  (expand
                                                                   "max"
                                                                   -2)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (hide
                                                                       -1
                                                                       -3
                                                                       -5
                                                                       -7
                                                                       -10)
                                                                      (("2"
                                                                        (typepred
                                                                         "f(p + x) - f(p) - pre_der(m, D, f)(p) * x")
                                                                        (("2"
                                                                          (hide
                                                                           -1)
                                                                          (("2"
                                                                            (replace
                                                                             -2)
                                                                            (("2"
                                                                              (typepred
                                                                               "(pre_der(m, D, f)(p) * x)")
                                                                              (("2"
                                                                                (hide
                                                                                 -1)
                                                                                (("2"
                                                                                  (expand
                                                                                   "rows"
                                                                                   -1)
                                                                                  (("2"
                                                                                    (replace
                                                                                     -1)
                                                                                    (("2"
                                                                                      (typepred
                                                                                       "pre_der(m, D, f)(p)")
                                                                                      (("2"
                                                                                        (replace
                                                                                         -2)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "max")
                                                                                          (("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (typepred
                                             "f(p + x) - f(p)"
                                             "f(p+x)"
                                             "f(p)"
                                             "pre_der(m, D, f)(p)*x")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (replace -4)
                                                (("2"
                                                  (replace -6)
                                                  (("2"
                                                    (expand "max" -2)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (expand "rows")
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (typepred
                                         "pre_der(m, D, f)(p) * x")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (hide -1)
                                            (("2"
                                              (expand "rows")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (typepred
                                         "f(p + x) - f(p)"
                                         "f(p+x)"
                                         "f(p)")
                                        (("3"
                                          (replace -4)
                                          (("3"
                                            (replace -6)
                                            (("3"
                                              (expand "max" -2)
                                              (("3" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert)
                      (("2" (expand "abs" 1 1)
                        (("2" (lift-if 1)
                          (("2" (split 1)
                            (("1" (flatten)
                              (("1"
                                (mult-by -1 " norm_inf(n)(x)")
                                (("1" (assert) nil nil)
                                 ("2"
                                  (typepred "x")
                                  (("2"
                                    (typepred "norm_inf(n)")
                                    (("2"
                                      (expand "norm?" -1)
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (inst -3 "x")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (propax) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (skeep)
            (("2" (expand "differentiableD?" 1)
              (("2" (typepred "f")
                (("2" (lemma "derivable_nth_mat")
                  (("2" (inst -1 "m" "D" "f")
                    (("2" (assert)
                      (("2" (skeep)
                        (("2" (inst -1 "i")
                          (("2" (expand "differentiableD?" -1)
                            (("2" (inst -1 "p!1") nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((convergence_zero? const-decl "bool" vector_sequences nil)
    (f skolem-const-decl "(differentiableD?(m, D))" convergence_vec2vec
     nil)
    (differentiableD? const-decl "bool" convergence_vec2vec nil)
    (nth const-decl "vec2real_f" convergence_vec2vec nil)
    (vec2vec type-eq-decl nil domain_vec2real_def nil)
    (D skolem-const-decl "(deriv_domain?[n])" convergence_vec2vec nil)
    (differentiableD? const-decl "bool" differentiable_def nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" convergence_vec2vec nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (below type-eq-decl nil naturalnumbers nil)
    (m skolem-const-decl "posnat" convergence_vec2vec nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (del_all def-decl "posreal" convergence_vec2vec nil)
    (del_nth formula-decl nil convergence_vec2vec nil)
    (NQ const-decl "real" convergence_vec2vec nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (div_cancel2 formula-decl nil real_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (both_sides_times_pos_lt1 formula-decl nil real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (norm_inf_nth formula-decl nil norms nil)
    (p skolem-const-decl "(D)" convergence_vec2vec nil)
    (x skolem-const-decl "{xx: (NQ[n](D, p)) | xx /= zero_vec(n)}"
     convergence_vec2vec nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (pre_der_nth formula-decl nil convergence_vec2vec nil)
    (row const-decl "Vector" matrices matrices)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (der_f const-decl "{gg: [(D) -> VectorN(n)] |
   FORALL (p: (D)):
     convergence_zero?(NQ(D, p), NQ(f, gg(p), p), zero_vec(n))}"
     differentiable_def nil)
    (NQ const-decl "real" differentiable_def nil)
    (abs_div formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (* const-decl "real" matrices matrices)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (derivable_nth_mat formula-decl nil convergence_vec2vec nil)
    (matv_nth formula-decl nil mat_vec_mult nil)
    (i skolem-const-decl
       "below(length(f(p + x) - f(p) - pre_der(m, D, f)(p) * x))"
       convergence_vec2vec nil)
    (nth_subtract formula-decl nil vector_arithmetic nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (norm? const-decl "bool" norms nil)
    (norm_inf const-decl "(norm?(m))" norms nil)
    (Vector type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (FullMatrix type-eq-decl nil matrices matrices)
    (Matrix type-eq-decl nil matrices matrices)
    (<= const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (columns def-decl "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}" matrices
     matrices)
    (rows const-decl "nat" matrices matrices)
    (* const-decl "VectorN(rows(A))" mat_vec_mult nil)
    (MatrixMN type-eq-decl nil matrices matrices)
    (pre_der def-decl "[(D) -> MatrixMN(m, n)]" convergence_vec2vec
     nil)
    (NQ const-decl "bool" differentiable_def nil)
    (/= const-decl "boolean" notequal nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (der_f subtype
    "convergence_vec2vec.pre_der(convergence_vec2vec.m, convergence_vec2vec.D, convergence_vec2vec.f)"
    "{TT: [(convergence_vec2vec.D) -> matrices.MatrixMN(convergence_vec2vec.m, convergence_vec2vec.n)] | FORALL (p: (convergence_vec2vec.D)): vector_sequences[convergence_vec2vec.n].convergence_zero?(differentiable_def[convergence_vec2vec.n].NQ(convergence_vec2vec.D, p), convergence_vec2vec.NQ(convergence_vec2vec.m, convergence_vec2vec.f, p, TT(p)), vector_arithmetic.zero_vec(convergence_vec2vec.n))}")))
 (der_f_TCC3 0
  (der_f_TCC3-1 nil 3797524662
   ("" (skeep*)
    (("" (lemma "derivable_nth_mat_point")
      (("" (inst?)
        (("" (inst -1 "D" "f" "p")
          (("" (assert) (("" (inst -1 "i") nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((derivable_nth_mat_point formula-decl nil convergence_vec2vec nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (n formal-const-decl "posnat" convergence_vec2vec nil)
    (VectorN type-eq-decl nil matrices matrices)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (vec2vec type-eq-decl nil domain_vec2real_def nil)
    (differentiable? const-decl "bool" convergence_vec2vec nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (der_f subtype "convergence_vec2vec.f"
    "{ff: domain_vec2real_def[convergence_vec2vec.n].vec2vec(convergence_vec2vec.m) | FORALL (i: naturalnumbers.below(convergence_vec2vec.m)): differentiable_def[convergence_vec2vec.n].differentiable?(convergence_vec2vec.D, convergence_vec2vec.nth(convergence_vec2vec.m, ff, i), convergence_vec2vec.p)}")))
 (der_f_TCC4 0
  (der_f_TCC4-1 nil 3797524662
   ("" (skeep*)
    (("" (expand "convergence_zero?" 1)
      (("" (skeep)
        (("" (inst 1 "del_all_p(m,D,p,f)(epsilon)")
          (("1" (skeep)
            (("1" (lemma "del_nth_p")
              (("1" (inst?)
                (("1" (expand "NQ" 1)
                  (("1"
                    (case "abs(norm_inf(m)(f(p + x) - f(p) - pre_der(m, D,p, f)*x)
                                                   / norm_inf(n)(x)) = norm_inf(m)(f(p + x) - f(p) - pre_der(m, D,p, f)*x)
                                                   / norm_inf(n)(x)")
                    (("1" (assert)
                      (("1" (replace -1 1)
                        (("1" (lemma "norm_inf_nth")
                          (("1"
                            (inst -1
                             "f(p + x) - f(p) - pre_der(m, D,p, f)*x")
                            (("1" (skeep)
                              (("1"
                                (expand "norm_inf" 1 1)
                                (("1"
                                  (replace -1 1)
                                  (("1"
                                    (lemma "nth_subtract")
                                    (("1"
                                      (inst
                                       -1
                                       "f(p + x) - f(p)"
                                       "pre_der(m, D,p, f)*x")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (split -1)
                                          (("1"
                                            (inst -1 "i")
                                            (("1"
                                              (replace -1 1)
                                              (("1"
                                                (lemma "matv_nth")
                                                (("1"
                                                  (inst
                                                   -1
                                                   " pre_der(m, D,p, f)"
                                                   "x"
                                                   "i")
                                                  (("1"
                                                    (replace -1 1)
                                                    (("1"
                                                      (lemma
                                                       "pre_der_nth_p")
                                                      (("1"
                                                        (inst
                                                         -1
                                                         "m"
                                                         "D"
                                                         "p"
                                                         "f"
                                                         "i")
                                                        (("1"
                                                          (expand
                                                           "row"
                                                           1
                                                           1)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (typepred
                                                               "i")
                                                              (("1"
                                                                (lift-if
                                                                 1)
                                                                (("1"
                                                                  (split
                                                                   1)
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (hide
                                                                       1)
                                                                      (("1"
                                                                        (typepred
                                                                         "i"
                                                                         "pre_der(m, D,p, f)")
                                                                        (("1"
                                                                          (typepred
                                                                           "f(p + x) - f(p) - pre_der(m, D,p, f)*x"
                                                                           "f(p + x) - f(p)"
                                                                           "pre_der(m, D,p, f)*x"
                                                                           "f(p+x)"
                                                                           "f(p)")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (replace
                                                                               -8)
                                                                              (("1"
                                                                                (replace
                                                                                 -10)
                                                                                (("1"
                                                                                  (hide
                                                                                   -7)
                                                                                  (("1"
                                                                                    (hide
                                                                                     -8)
                                                                                    (("1"
                                                                                      (hide
                                                                                       -5)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "max"
                                                                                         -4)
                                                                                        (("1"
                                                                                          (replace
                                                                                           -4)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "rows")
                                                                                            (("1"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (decompose-equality
                                                                       -2
                                                                       "p")
                                                                      (("2"
                                                                        (inst
                                                                         -7
                                                                         "i")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (expand
                                                                             "NQ"
                                                                             -7)
                                                                            (("1"
                                                                              (hide
                                                                               -8)
                                                                              (("1"
                                                                                (case
                                                                                 "(nth(m, f, i)(p + x) - nth(m, f, i)(p) -
                                                                                                                    der_f(D,p)(nth(m, f, i)) * x) = nth(f(p + x) - f(p), i) - der_f(D,p)(nth(m, f, i)) * x")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (hide
                                                                                     1)
                                                                                    (("1"
                                                                                      (hide
                                                                                       -7)
                                                                                      (("1"
                                                                                        (lemma
                                                                                         "abs_div")
                                                                                        (("1"
                                                                                          (inst
                                                                                           -1
                                                                                           " norm_inf(n)(x)"
                                                                                           "(nth(m, f, i)(p + x) - nth(m, f, i)(p) -
                                                                                                        der_f(D,p)(nth(m, f, i)) * x)")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (replace
                                                                                               -1
                                                                                               -8)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "abs"
                                                                                                 -8
                                                                                                 2)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (hide
                                                                                   2
                                                                                   3)
                                                                                  (("2"
                                                                                    (hide
                                                                                     -6
                                                                                     -7)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "nth"
                                                                                       1
                                                                                       1)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "nth"
                                                                                         1
                                                                                         2)
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (lemma
                                                                                             "nth_subtract")
                                                                                            (("2"
                                                                                              (inst
                                                                                               -1
                                                                                               "f(p + x)"
                                                                                               "(f(p))")
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   -1
                                                                                                   "i")
                                                                                                  (("2"
                                                                                                    (replace
                                                                                                     -1
                                                                                                     1)
                                                                                                    (("2"
                                                                                                      (propax)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (hide
                                                                           -)
                                                                          (("2"
                                                                            (reveal
                                                                             -)
                                                                            (("2"
                                                                              (hide
                                                                               -11)
                                                                              (("2"
                                                                                (hide
                                                                                 -)
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (typepred
                                                           "i")
                                                          (("2"
                                                            (typepred
                                                             "f(p + x) - f(p) - pre_der(m, D,p, f)*x"
                                                             "f(p + x) - f(p)"
                                                             "pre_der(m, D,p, f)*x"
                                                             "f(p+x)"
                                                             "f(p)")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (replace
                                                                 -8)
                                                                (("2"
                                                                  (replace
                                                                   -10)
                                                                  (("2"
                                                                    (replace
                                                                     -6)
                                                                    (("2"
                                                                      (expand
                                                                       "max"
                                                                       -4)
                                                                      (("2"
                                                                        (replace
                                                                         -4)
                                                                        (("2"
                                                                          (expand
                                                                           "max"
                                                                           -2)
                                                                          (("2"
                                                                            (replace
                                                                             -2)
                                                                            (("2"
                                                                              (expand
                                                                               "rows")
                                                                              (("2"
                                                                                (propax)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    (("2"
                                                      (typepred "i")
                                                      (("2"
                                                        (typepred
                                                         "f(p + x) - f(p) - pre_der(m, D,p, f)*x"
                                                         "f(p + x) - f(p)"
                                                         "pre_der(m, D,p, f)*x"
                                                         "f(p+x)"
                                                         "f(p)")
                                                        (("2"
                                                          (hide
                                                           -3
                                                           -5
                                                           -7)
                                                          (("2"
                                                            (replace
                                                             -5)
                                                            (("2"
                                                              (replace
                                                               -4)
                                                              (("2"
                                                                (replace
                                                                 -7)
                                                                (("2"
                                                                  (hide
                                                                   -1)
                                                                  (("2"
                                                                    (hide
                                                                     -5)
                                                                    (("2"
                                                                      (expand
                                                                       "max"
                                                                       -2)
                                                                      (("2"
                                                                        (replace
                                                                         -2)
                                                                        (("2"
                                                                          (expand
                                                                           "max"
                                                                           -1)
                                                                          (("2"
                                                                            (replace
                                                                             -1)
                                                                            (("2"
                                                                              (expand
                                                                               "rows")
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (typepred
                                               "f(p+x)-f(p)"
                                               "f(p+x)"
                                               "f(p)")
                                              (("2"
                                                (replace -4)
                                                (("2"
                                                  (replace -6)
                                                  (("2"
                                                    (expand "max" -2)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (typepred "i")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (typepred
                                                             "f(p + x) - f(p)"
                                                             "f(p+x)"
                                                             "f(p)"
                                                             "pre_der(m, D,p, f)*x")
                                                            (("2"
                                                              (replace
                                                               -4)
                                                              (("2"
                                                                (replace
                                                                 -6)
                                                                (("2"
                                                                  (expand
                                                                   "max"
                                                                   -2)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (hide
                                                                       -1
                                                                       -3
                                                                       -5
                                                                       -7
                                                                       -10)
                                                                      (("2"
                                                                        (typepred
                                                                         "f(p + x) - f(p) - pre_der(m, D,p, f) * x")
                                                                        (("2"
                                                                          (hide
                                                                           -1)
                                                                          (("2"
                                                                            (replace
                                                                             -2)
                                                                            (("2"
                                                                              (typepred
                                                                               "(pre_der(m, D,p, f) * x)")
                                                                              (("2"
                                                                                (hide
                                                                                 -1)
                                                                                (("2"
                                                                                  (expand
                                                                                   "rows"
                                                                                   -1)
                                                                                  (("2"
                                                                                    (replace
                                                                                     -1)
                                                                                    (("2"
                                                                                      (typepred
                                                                                       "pre_der(m, D,p, f)")
                                                                                      (("2"
                                                                                        (replace
                                                                                         -2)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "max")
                                                                                          (("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (typepred
                                             "f(p + x) - f(p)"
                                             "f(p+x)"
                                             "f(p)"
                                             "pre_der(m, D,p, f)*x")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (replace -4)
                                                (("2"
                                                  (replace -6)
                                                  (("2"
                                                    (expand "max" -2)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (expand "rows")
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (typepred
                                         "pre_der(m, D,p, f) * x")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (hide -1)
                                            (("2"
                                              (expand "rows")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (typepred
                                         "f(p + x) - f(p)"
                                         "f(p+x)"
                                         "f(p)")
                                        (("3"
                                          (replace -4)
                                          (("3"
                                            (replace -6)
                                            (("3"
                                              (expand "max" -2)
                                              (("3" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert)
                      (("2" (expand "abs" 1 1)
                        (("2" (lift-if 1)
                          (("2" (split 1)
                            (("1" (flatten)
                              (("1"
                                (mult-by -1 " norm_inf(n)(x)")
                                (("1" (assert) nil nil)
                                 ("2"
                                  (typepred "x")
                                  (("2"
                                    (typepred "norm_inf(n)")
                                    (("2"
                                      (expand "norm?" -1)
                                      (("2"
                                        (flatten)
                                        (("2"
                                          (inst -3 "x")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (propax) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (skeep)
            (("2" (expand "differentiable?" 1)
              (("2" (typepred "f")
                (("2" (lemma "derivable_nth_mat_point")
                  (("2" (inst -1 "m" "D" "f" "p")
                    (("2" (assert)
                      (("2" (inst -1 "i")
                        (("2" (expand "differentiable?" -1)
                          (("2" (propax) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((convergence_zero? const-decl "bool" vector_sequences nil)
    (f skolem-const-decl
     "{ff: vec2vec(m) | differentiable?(m, D, ff, p)}"
     convergence_vec2vec nil)
    (p skolem-const-decl "(D)" convergence_vec2vec nil)
    (differentiable? const-decl "bool" convergence_vec2vec nil)
    (nth const-decl "vec2real_f" convergence_vec2vec nil)
    (vec2vec type-eq-decl nil domain_vec2real_def nil)
    (D skolem-const-decl "(deriv_domain?[n])" convergence_vec2vec nil)
    (differentiable? const-decl "bool" differentiable_def nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" convergence_vec2vec nil)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (below type-eq-decl nil naturalnumbers nil)
    (m skolem-const-decl "posnat" convergence_vec2vec nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (del_all_p def-decl "posreal" convergence_vec2vec nil)
    (del_nth_p formula-decl nil convergence_vec2vec nil)
    (NQ const-decl "real" convergence_vec2vec nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (div_cancel2 formula-decl nil real_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (both_sides_times_pos_lt1 formula-decl nil real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (norm_inf_nth formula-decl nil norms nil)
    (x skolem-const-decl "{xx: (NQ[n](D, p)) | xx /= zero_vec(n)}"
     convergence_vec2vec nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (pre_der_nth_p formula-decl nil convergence_vec2vec nil)
    (row const-decl "Vector" matrices matrices)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (der_f const-decl
     "{gg: VectorN(n) | convergence_zero?(NQ(D, p), NQ(f, gg, p), zero_vec(n))}"
     differentiable_def nil)
    (NQ const-decl "real" differentiable_def nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (abs_div formula-decl nil real_props nil)
    (* const-decl "real" matrices matrices)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (matv_nth formula-decl nil mat_vec_mult nil)
    (i skolem-const-decl
       "below(length(f(p + x) - f(p) - pre_der(m, D, p, f) * x))"
       convergence_vec2vec nil)
    (nth_subtract formula-decl nil vector_arithmetic nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (norm? const-decl "bool" norms nil)
    (norm_inf const-decl "(norm?(m))" norms nil)
    (Vector type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (FullMatrix type-eq-decl nil matrices matrices)
    (Matrix type-eq-decl nil matrices matrices)
    (<= const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (columns def-decl "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}" matrices
     matrices)
    (rows const-decl "nat" matrices matrices)
    (* const-decl "VectorN(rows(A))" mat_vec_mult nil)
    (MatrixMN type-eq-decl nil matrices matrices)
    (pre_der def-decl "MatrixMN(m, n)" convergence_vec2vec nil)
    (NQ const-decl "bool" differentiable_def nil)
    (/= const-decl "boolean" notequal nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (derivable_nth_mat_point formula-decl nil convergence_vec2vec nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (der_f subtype
    "convergence_vec2vec.pre_der(convergence_vec2vec.m, convergence_vec2vec.D, convergence_vec2vec.p, convergence_vec2vec.f)"
    "{T: matrices.MatrixMN(convergence_vec2vec.m, convergence_vec2vec.n) | vector_sequences[convergence_vec2vec.n].convergence_zero?(differentiable_def[convergence_vec2vec.n].NQ(convergence_vec2vec.D, convergence_vec2vec.p), convergence_vec2vec.NQ(convergence_vec2vec.m, convergence_vec2vec.f, convergence_vec2vec.p, T), vector_arithmetic.zero_vec(convergence_vec2vec.n))}")))
 (conv_zero_nth_TCC1 0
  (conv_zero_nth_TCC1-1 nil 3801750110 ("" (subtype-tcc) nil nil) nil
   nil
   (conv_zero_nth subtype "convergence_vec2vec.i"
    "below[length[list[real]](T)]")))
 (conv_zero_nth_TCC2 0
  (conv_zero_nth_TCC2-1 nil 3801750110 ("" (subtype-tcc) nil nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (n formal-const-decl "posnat" convergence_vec2vec nil)
    (VectorN type-eq-decl nil matrices matrices)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (Matrix type-eq-decl nil matrices matrices)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (MatrixMN type-eq-decl nil matrices matrices)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (convergence_zero? const-decl "bool" vector_sequences nil)
    (NQ const-decl "bool" differentiable_def nil)
    (vec2vec type-eq-decl nil domain_vec2real_def nil)
    (NQ const-decl "real" convergence_vec2vec nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (Vector type-eq-decl nil matrices matrices)
    (scal def-decl "VectorN(length(v2))" matrices matrices)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (<= const-decl "bool" reals nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (add def-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (* const-decl "VectorN(rows(A))" mat_vec_mult nil)
    (rows const-decl "nat" matrices matrices)
    (norm_inf const-decl "[(cons?) -> nonneg_real]" norms nil)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (sub const-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (norm_inf const-decl "(norm?(m))" norms nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (norm? const-decl "bool" norms nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (* const-decl "VectorN(length(v2))" matrices matrices))
   nil
   (conv_zero_nth subtype
    "list_props[list[real]].nth(convergence_vec2vec.T, convergence_vec2vec.i)"
    "matrices.VectorN(convergence_vec2vec.n)")))
 (conv_zero_nth 0
  (conv_zero_nth-1 nil 3801750582
   ("" (skeep)
    (("" (typepred "T")
      (("" (skeep)
        (("" (expand "convergence_zero?")
          (("" (skeep)
            (("" (hide -1 -2 -3)
              (("" (inst -1 "epsilon")
                (("" (skeep)
                  (("" (inst 1 "delta")
                    (("" (skeep)
                      (("" (inst -1 "x")
                        (("" (assert)
                          (("" (expand "NQ")
                            ((""
                              (case " abs(norm_inf(m)(f(p + x) - f(p) - T * x) / norm_inf(n)(x)) =  norm_inf(m)(f(p + x) - f(p) - T * x) / norm_inf(n)(x)")
                              (("1"
                                (assert)
                                (("1"
                                  (replace -1 -2)
                                  (("1"
                                    (hide -1)
                                    (("1"
                                      (lemma "norm_inf_nth_ineq")
                                      (("1"
                                        (inst
                                         -1
                                         "f(p + x) - f(p) - T*x"
                                         "i")
                                        (("1"
                                          (expand "norm_inf" -2 1)
                                          (("1"
                                            (mult-by
                                             -2
                                             "norm_inf(n)(x)")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (mult-by
                                                 1
                                                 "norm_inf(n)(x)")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (case
                                                     "NOT  abs((nth(m, f, i)(p + x) - nth(m, f, i)(p) - nth(T, i) * x) /
                                                                               norm_inf(n)(x))
                                                                           * norm_inf(n)(x) =  abs((nth(m, f, i)(p + x) - nth(m, f, i)(p) - nth(T, i) * x)) ")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand "*" 1)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (case
                                                             "abs((nth(m, f, i)(p + x) - nth(m, f, i)(p) - dot(nth(T, i), x)) /
                                                                                       norm_inf(n)(x)) = abs((nth(m, f, i)(p + x) - nth(m, f, i)(p) - dot(nth(T, i), x))) /
                                                                                       norm_inf(n)(x)")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (hide 2)
                                                              (("2"
                                                                (case
                                                                 "NOT norm_inf(n)(x)=0")
                                                                (("1"
                                                                  (lemma
                                                                   "abs_div")
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     "norm_inf(n)(x)"
                                                                     "((nth(m, f, i)(p + x) - nth(m, f, i)(p) - dot(nth(T, i), x)))")
                                                                    (("1"
                                                                      (replace
                                                                       -1
                                                                       2)
                                                                      (("1"
                                                                        (typepred
                                                                         "norm_inf(n)")
                                                                        (("1"
                                                                          (expand
                                                                           "norm?"
                                                                           -1)
                                                                          (("1"
                                                                            (flatten)
                                                                            (("1"
                                                                              (inst
                                                                               -1
                                                                               "x")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (expand
                                                                                   "abs"
                                                                                   2
                                                                                   2)
                                                                                  (("1"
                                                                                    (propax)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      (("2"
                                                        (replace -1 1)
                                                        (("2"
                                                          (hide -1)
                                                          (("2"
                                                            (case
                                                             "nth(f(p + x) - f(p) - T*x, i) = (nth(m, f, i)(p + x) - nth(m, f, i)(p) - nth(T, i) * x)")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (hide 2)
                                                              (("2"
                                                                (lemma
                                                                 "nth_subtract")
                                                                (("2"
                                                                  (expand
                                                                   "-"
                                                                   1)
                                                                  (("2"
                                                                    (inst-cp
                                                                     -1
                                                                     "f(p + x)"
                                                                     "f(p)")
                                                                    (("2"
                                                                      (inst
                                                                       -1
                                                                       "sub(f(p + x), f(p))"
                                                                       "T*x")
                                                                      (("1"
                                                                        (split
                                                                         -1)
                                                                        (("1"
                                                                          (split
                                                                           -2)
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             "i")
                                                                            (("1"
                                                                              (inst
                                                                               -2
                                                                               "i")
                                                                              (("1"
                                                                                (expand
                                                                                 "-"
                                                                                 -)
                                                                                (("1"
                                                                                  (replace
                                                                                   -2
                                                                                   1)
                                                                                  (("1"
                                                                                    (replace
                                                                                     -1
                                                                                     1)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "nth"
                                                                                       1
                                                                                       4)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "nth"
                                                                                         1
                                                                                         3)
                                                                                        (("1"
                                                                                          (lemma
                                                                                           "matv_nth")
                                                                                          (("1"
                                                                                            (inst
                                                                                             -1
                                                                                             "T"
                                                                                             "x"
                                                                                             "i")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "row"
                                                                                               -1)
                                                                                              (("1"
                                                                                                (replace
                                                                                                 -1
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (propax)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (hide
                                                                                               2)
                                                                                              (("2"
                                                                                                (hide
                                                                                                 -)
                                                                                                (("2"
                                                                                                  (typepred
                                                                                                   "i")
                                                                                                  (("2"
                                                                                                    (typepred
                                                                                                     "m")
                                                                                                    (("2"
                                                                                                      (typepred
                                                                                                       "T")
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "rows")
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (typepred
                                                                                 "f(p)")
                                                                                (("2"
                                                                                  (typepred
                                                                                   "(sub(f(p + x), f(p)))")
                                                                                  (("2"
                                                                                    (hide
                                                                                     -1
                                                                                     -3)
                                                                                    (("2"
                                                                                      (typepred
                                                                                       "f(p+x)")
                                                                                      (("2"
                                                                                        (replace
                                                                                         -2)
                                                                                        (("2"
                                                                                          (replace
                                                                                           -4)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "max"
                                                                                             -3)
                                                                                            (("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (typepred
                                                                           "T*x")
                                                                          (("2"
                                                                            (typepred
                                                                             "sub(f(p + x), f(p))"
                                                                             "f(p+x)"
                                                                             "f(p)")
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (replace
                                                                                 -4)
                                                                                (("2"
                                                                                  (replace
                                                                                   -6)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "max")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "rows")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (typepred
                                                                         "T*x")
                                                                        (("2"
                                                                          (hide
                                                                           -1)
                                                                          (("2"
                                                                            (expand
                                                                             "rows"
                                                                             -1)
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("3"
                                                                        (typepred
                                                                         "sub(f(p + x), f(p))"
                                                                         "f(p+x)"
                                                                         "f(p)")
                                                                        (("3"
                                                                          (replace
                                                                           -4)
                                                                          (("3"
                                                                            (replace
                                                                             -6)
                                                                            (("3"
                                                                              (expand
                                                                               "max")
                                                                              (("3"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (typepred "x")
                                              (("2"
                                                (typepred
                                                 "norm_inf(n)")
                                                (("2"
                                                  (expand "norm?" -1)
                                                  (("2"
                                                    (flatten)
                                                    (("2"
                                                      (inst -3 "x")
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (typepred
                                           "f(p + x) - f(p)"
                                           "f(p+x)"
                                           "f(p)"
                                           "T*x")
                                          (("2"
                                            (replace -4)
                                            (("2"
                                              (replace -6)
                                              (("2"
                                                (expand "max" -2)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (hide -1 -3 -5 -7)
                                                    (("2"
                                                      (typepred "i")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (typepred
                                                           "f(p + x) - f(p) - T * x")
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (expand "abs" 1 1)
                                (("2"
                                  (lift-if 1)
                                  (("2"
                                    (split 1)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (mult-by -1 " norm_inf(n)(x)")
                                        (("1" (assert) nil nil)
                                         ("2"
                                          (typepred "x")
                                          (("2"
                                            (typepred "norm_inf(n)")
                                            (("2"
                                              (expand "norm?" -1)
                                              (("2"
                                                (flatten)
                                                (("2"
                                                  (inst -3 "x")
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (NQ const-decl "real" convergence_vec2vec nil)
    (vec2vec type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (NQ const-decl "bool" differentiable_def nil)
    (convergence_zero? const-decl "bool" vector_sequences nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (MatrixMN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" convergence_vec2vec nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Matrix type-eq-decl nil matrices matrices)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (* const-decl "VectorN(rows(A))" mat_vec_mult nil)
    (rows const-decl "nat" matrices matrices)
    (columns def-decl "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}" matrices
     matrices)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (FullMatrix type-eq-decl nil matrices matrices)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (Vector type-eq-decl nil matrices matrices)
    (norm_inf const-decl "(norm?(m))" norms nil)
    (norm? const-decl "bool" norms nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (norm_inf_nth_ineq formula-decl nil norms nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (sub const-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (matv_nth formula-decl nil mat_vec_mult nil)
    (row const-decl "Vector" matrices matrices)
    (nth_subtract formula-decl nil vector_arithmetic nil)
    (abs_div formula-decl nil real_props nil)
    (dot def-decl "real" matrices matrices)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "real" matrices matrices)
    (nth const-decl "vec2real_f" convergence_vec2vec nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (both_sides_times_pos_ge1_imp formula-decl nil extra_real_props
     nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (div_cancel2 formula-decl nil real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (norm_inf const-decl "[(cons?) -> nonneg_real]" norms nil)
    (both_sides_times_pos_lt1 formula-decl nil real_props nil)
    (T skolem-const-decl "{TT: MatrixMN(m, n) |
   convergence_zero?(NQ(D, p), NQ(m, f, p, TT), zero_vec(n))}"
     convergence_vec2vec nil)
    (x skolem-const-decl "{xx: (NQ(D, p)) | xx /= zero_vec(n)}"
     convergence_vec2vec nil)
    (p skolem-const-decl "(D)" convergence_vec2vec nil)
    (D skolem-const-decl "(deriv_domain?)" convergence_vec2vec nil)
    (f skolem-const-decl "vec2vec[n](m)" convergence_vec2vec nil)
    (i skolem-const-decl "below(m)" convergence_vec2vec nil)
    (m skolem-const-decl "posnat" convergence_vec2vec nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (NQ const-decl "real" differentiable_def nil)
    (/= const-decl "boolean" notequal nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   shostak))
 (der_f_unique_TCC1 0
  (der_f_unique_TCC1-1 nil 3852729732
   ("" (skeep)
    (("" (lemma "dd_e_partial_implies_dd")
      (("" (inst?) (("" (assert) nil nil)) nil)) nil))
    nil)
   ((n formal-const-decl "posnat" convergence_vec2vec nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (dd_e_partial_implies_dd formula-decl nil derivative_domain_multi
     nil)
    (deriv_domain_e_partial? const-decl "bool" derivative_domain_multi
     nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (der_f_unique subtype "convergence_vec2vec.D"
    "(derivative_domain_multi[convergence_vec2vec.n].deriv_domain?)")))
 (der_f_unique_TCC2 0
  (der_f_unique_TCC1-1 nil 3801750750
   ("" (skeep)
    (("" (lemma "derivable_nth_mat_point")
      (("" (inst?)
        (("1" (assert)
          (("1" (flatten)
            (("1" (split -1)
              (("1" (propax) nil nil)
               ("2" (expand "differentiable?" 1)
                (("2" (typepred "T") (("2" (inst 1 "T") nil nil)) nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (lemma "dd_e_partial_implies_dd")
          (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((derivable_nth_mat_point formula-decl nil convergence_vec2vec nil)
    (dd_e_partial_implies_dd formula-decl nil derivative_domain_multi
     nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (NQ const-decl "real" convergence_vec2vec nil)
    (NQ const-decl "bool" differentiable_def nil)
    (convergence_zero? const-decl "bool" vector_sequences nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (MatrixMN type-eq-decl nil matrices matrices)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (Matrix type-eq-decl nil matrices matrices)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (differentiable? const-decl "bool" convergence_vec2vec nil)
    (vec2vec type-eq-decl nil domain_vec2real_def nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n formal-const-decl "posnat" convergence_vec2vec nil)
    (VectorN type-eq-decl nil matrices matrices)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (deriv_domain_e_partial? const-decl "bool" derivative_domain_multi
     nil)
    (D skolem-const-decl "(deriv_domain_e_partial?[n])"
     convergence_vec2vec nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (der_f_unique subtype "convergence_vec2vec.f"
    "{ff: domain_vec2real_def[convergence_vec2vec.n].vec2vec(convergence_vec2vec.m) | FORALL (i: naturalnumbers.below(convergence_vec2vec.m)): differentiable_def[convergence_vec2vec.n].differentiable?(convergence_vec2vec.D, convergence_vec2vec.nth(convergence_vec2vec.m, ff, i), convergence_vec2vec.p)}")))
 (der_f_unique 0
  (der_f_unique-1 nil 3801751225
   ("" (skeep)
    (("" (lemma "list_extensionality[list[real]]")
      (("" (inst -1 "T" "pre_der(m,D,p,f)")
        (("" (assert)
          (("" (skeep)
            (("" (lemma "pre_der_nth_p")
              (("" (inst -1 "m" "D" "p" "f" "n!1")
                (("" (replace -1 1)
                  (("" (lemma "der_f_unique")
                    (("" (inst -1 "D" "p" "nth(m,f,n!1)" "nth(T,n!1)")
                      (("1" (assert)
                        (("1" (lemma "conv_zero_nth")
                          (("1" (inst -1 "m" "D" "f" "p" "T" "n!1") nil
                            nil))
                          nil))
                        nil)
                       ("2" (assert)
                        (("2" (typepred "T")
                          (("2" (inst -3 "n!1") nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (list_extensionality formula-decl nil more_list_props structures)
    (pre_der_nth_p formula-decl nil convergence_vec2vec nil)
    (m skolem-const-decl "posnat" convergence_vec2vec nil)
    (D skolem-const-decl "(deriv_domain_e_partial?)"
     convergence_vec2vec nil)
    (p skolem-const-decl "(D)" convergence_vec2vec nil)
    (f skolem-const-decl "vec2vec[n](m)" convergence_vec2vec nil)
    (T skolem-const-decl "{TT: MatrixMN(m, n) |
   convergence_zero?(NQ(D, p), NQ(m, f, p, TT), zero_vec(n))}"
     convergence_vec2vec nil)
    (n!1 skolem-const-decl "below(length(T))" convergence_vec2vec nil)
    (conv_zero_nth formula-decl nil convergence_vec2vec nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (der_f_unique formula-decl nil init_partial_def nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (pre_der def-decl "MatrixMN(m, n)" convergence_vec2vec nil)
    (nth const-decl "vec2real_f" convergence_vec2vec nil)
    (differentiable? const-decl "bool" differentiable_def nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (NQ const-decl "real" convergence_vec2vec nil)
    (vec2vec type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain_e_partial? const-decl "bool" derivative_domain_multi
     nil)
    (NQ const-decl "bool" differentiable_def nil)
    (convergence_zero? const-decl "bool" vector_sequences nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (MatrixMN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" convergence_vec2vec nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Matrix type-eq-decl nil matrices matrices)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   shostak))
 (pre_diff_cont_TCC1 0
  (pre_diff_cont_TCC1-1 nil 3797413953 ("" (subtype-tcc) nil nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (n formal-const-decl "posnat" convergence_vec2vec nil)
    (VectorN type-eq-decl nil matrices matrices)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (vec2vec type-eq-decl nil domain_vec2real_def nil)
    (differentiable? const-decl "bool" convergence_vec2vec nil)
    (NQ const-decl "bool" differentiable_def nil)
    (norm_inf const-decl "(norm?(m))" norms nil)
    (sub const-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (norm_inf const-decl "[(cons?) -> nonneg_real]" norms nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (rows const-decl "nat" matrices matrices)
    (* const-decl "VectorN(rows(A))" mat_vec_mult nil)
    (NQ const-decl "real" convergence_vec2vec nil)
    (convergence_zero? const-decl "bool" vector_sequences nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (/= const-decl "boolean" notequal nil))
   nil
   (pre_diff_cont subtype "convergence_vec2vec.hh"
    "(list_adt[real].cons?)")))
 (pre_diff_cont_TCC2 0
  (pre_diff_cont_TCC2-1 nil 3797413953
   ("" (skeep)
    (("" (typepred "p+h" "p" "h") (("" (grind) nil nil)) nil)) nil)
   ((posreal nonempty-type-eq-decl nil real_types nil)
    (norm_inf const-decl "(norm?(m))" norms nil)
    (norm? const-decl "bool" norms nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (< const-decl "bool" reals nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (/= const-decl "boolean" notequal nil)
    (NQ const-decl "bool" differentiable_def nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (n formal-const-decl "posnat" convergence_vec2vec nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (VectorN type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vector type-eq-decl nil matrices matrices)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (norm_inf const-decl "[(cons?) -> nonneg_real]" norms nil)
    (add def-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (pre_diff_cont subtype
    "(matrices.+)(convergence_vec2vec.p, convergence_vec2vec.h)"
    "matrices.VectorN(convergence_vec2vec.n)")))
 (pre_diff_cont_TCC3 0
  (pre_diff_cont_TCC3-1 nil 3797413953
   ("" (skeep)
    (("" (typepred "f(p + h) - f(p)" "f(p + h)" "f(p)")
      (("" (grind) nil nil)) nil))
    nil)
   ((posreal nonempty-type-eq-decl nil real_types nil)
    (norm_inf const-decl "(norm?(m))" norms nil)
    (norm? const-decl "bool" norms nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (< const-decl "bool" reals nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (/= const-decl "boolean" notequal nil)
    (NQ const-decl "bool" differentiable_def nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (differentiable? const-decl "bool" convergence_vec2vec nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (vec2vec type-eq-decl nil domain_vec2real_def nil)
    (n formal-const-decl "posnat" convergence_vec2vec nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (VectorN type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vector type-eq-decl nil matrices matrices)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (add def-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (scal def-decl "VectorN(length(v2))" matrices matrices)
    (sub const-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (pre_diff_cont subtype
    "(matrices.-)(convergence_vec2vec.f((matrices.+)(convergence_vec2vec.p, convergence_vec2vec.h)), convergence_vec2vec.f(convergence_vec2vec.p))"
    "(list_adt[real].cons?)")))
 (pre_diff_cont_TCC4 0
  (pre_diff_cont_TCC4-1 nil 3797413953 ("" (subtype-tcc) nil nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (> const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (n formal-const-decl "posnat" convergence_vec2vec nil)
    (VectorN type-eq-decl nil matrices matrices)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (vec2vec type-eq-decl nil domain_vec2real_def nil)
    (differentiable? const-decl "bool" convergence_vec2vec nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (NQ const-decl "bool" differentiable_def nil)
    (/= const-decl "boolean" notequal nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (< const-decl "bool" reals nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (norm? const-decl "bool" norms nil)
    (norm_inf const-decl "(norm?(m))" norms nil)
    (sub const-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (norm_inf const-decl "[(cons?) -> nonneg_real]" norms nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (rows const-decl "nat" matrices matrices)
    (* const-decl "VectorN(rows(A))" mat_vec_mult nil)
    (NQ const-decl "real" convergence_vec2vec nil)
    (convergence_zero? const-decl "bool" vector_sequences nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (pre_diff_cont subtype "convergence_vec2vec.h"
    "(list_adt[real].cons?)")))
 (pre_diff_cont 0
  (pre_diff_cont-1 nil 3797414029
   ("" (skeep)
    (("" (typepred "f")
      (("" (expand "differentiable?" -1)
        (("" (skeep)
          (("" (expand "convergence_zero?" -1)
            (("" (lemma "matv_norm_inf")
              (("" (expand "NQ" -2)
                (("" (inst -1 "T" "_")
                  (("1" (inst -2 "1")
                    (("1" (skeep)
                      (("1" (name "M" "1+n*max_a(T)")
                        (("1" (inst 1 "M" "_")
                          (("1" (inst 1 "delta")
                            (("1" (skeep)
                              (("1"
                                (typepred "h")
                                (("1"
                                  (inst -8 "h")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (split -8)
                                      (("1"
                                        (case
                                         "norm_inf(m)(f(p + h) - f(p) - T*h) / norm_inf(n)(h) = abs(norm_inf(m)(f(p + h) - f(p) - T*h) / norm_inf(n)(h))")
                                        (("1"
                                          (replace -1 -2 rl)
                                          (("1"
                                            (hide -1)
                                            (("1"
                                              (mult-by
                                               -1
                                               "norm_inf(n)(h)")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (case
                                                   " norm_inf(m)(f(p + h) - f(p)) =  norm_inf(m)(f(p + h) - f(p) - T*h + T*h )")
                                                  (("1"
                                                    (replace -1 1)
                                                    (("1"
                                                      (case
                                                       " norm_inf(m)(f(p + h) - f(p) - T*h + T*h) <=  norm_inf(m)(f(p + h) - f(p) - T*h) + norm_inf(m)(T*h)")
                                                      (("1"
                                                        (hide -4)
                                                        (("1"
                                                          (inst -9 "h")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (expand
                                                               "rows")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (typepred
                                                                   "T")
                                                                  (("1"
                                                                    (replace
                                                                     -2)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (hide
                                                                         -1)
                                                                        (("1"
                                                                          (lemma
                                                                           "MN_rc")
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             "m"
                                                                             "n"
                                                                             "T")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (expand
                                                                                     "rows"
                                                                                     -1)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide 2)
                                                        (("2"
                                                          (hide -)
                                                          (("2"
                                                            (typepred
                                                             "norm_inf(m)")
                                                            (("2"
                                                              (expand
                                                               "norm?"
                                                               -1)
                                                              (("2"
                                                                (flatten)
                                                                (("2"
                                                                  (inst
                                                                   -4
                                                                   "f(p + h) - f(p) - T*h"
                                                                   "T*h")
                                                                  (("1"
                                                                    (hide
                                                                     2)
                                                                    (("1"
                                                                      (typepred
                                                                       "f(p + h) - f(p) - T*h"
                                                                       "f(p + h) - f(p)"
                                                                       "T*h"
                                                                       "f(p + h)"
                                                                       "f(p)")
                                                                      (("1"
                                                                        (hide
                                                                         -1
                                                                         -3
                                                                         -5
                                                                         -7
                                                                         -9)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (replace
                                                                             -4)
                                                                            (("1"
                                                                              (replace
                                                                               -5)
                                                                              (("1"
                                                                                (expand
                                                                                 "max"
                                                                                 -2)
                                                                                (("1"
                                                                                  (expand
                                                                                   "rows")
                                                                                  (("1"
                                                                                    (replace
                                                                                     -2)
                                                                                    (("1"
                                                                                      (replace
                                                                                       -3)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "max"
                                                                                         -1)
                                                                                        (("1"
                                                                                          (typepred
                                                                                           "T")
                                                                                          (("1"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (typepred
                                                                         "p"
                                                                         "h"
                                                                         "p+h")
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (replace
                                                                             -2)
                                                                            (("2"
                                                                              (replace
                                                                               -5)
                                                                              (("2"
                                                                                (expand
                                                                                 "max")
                                                                                (("2"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (typepred
                                                                       "f(p + h) - f(p) - T*h"
                                                                       "f(p + h) - f(p)"
                                                                       "T*h"
                                                                       "f(p + h)"
                                                                       "f(p)")
                                                                      (("2"
                                                                        (hide
                                                                         -1
                                                                         -3
                                                                         -5
                                                                         -7
                                                                         -9)
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (replace
                                                                             -4)
                                                                            (("2"
                                                                              (replace
                                                                               -5)
                                                                              (("2"
                                                                                (expand
                                                                                 "max"
                                                                                 -2)
                                                                                (("2"
                                                                                  (replace
                                                                                   -2)
                                                                                  (("2"
                                                                                    (replace
                                                                                     -3)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "max"
                                                                                       -1)
                                                                                      (("2"
                                                                                        (typepred
                                                                                         "T")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "rows")
                                                                                          (("2"
                                                                                            (propax)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (assert)
                                                        (("3"
                                                          (expand
                                                           "rows")
                                                          (("3"
                                                            (assert)
                                                            (("3"
                                                              (typepred
                                                               "T*h"
                                                               "T")
                                                              (("3"
                                                                (expand
                                                                 "rows")
                                                                (("3"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide 2)
                                                    (("2"
                                                      (hide -)
                                                      (("2"
                                                        (lemma
                                                         "quad_cancel_tail")
                                                        (("2"
                                                          (inst?)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (typepred
                                                               "f(p)"
                                                               "T * h"
                                                               "T")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (expand
                                                                   "rows")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (typepred
                                                             "T*h"
                                                             "T")
                                                            (("2"
                                                              (expand
                                                               "rows")
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (hide -7)
                                                    (("3"
                                                      (typepred
                                                       "(f(p + h) - f(p) - T*h + T*h)"
                                                       "f(p + h)"
                                                       "f(p)"
                                                       "T*h"
                                                       "T*h")
                                                      (("3"
                                                        (hide
                                                         -1
                                                         -3
                                                         -5
                                                         -7
                                                         -9)
                                                        (("3"
                                                          (assert)
                                                          (("3"
                                                            (expand
                                                             "rows")
                                                            (("3"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (typepred
                                                 "norm_inf(n)")
                                                (("2"
                                                  (expand "norm?" -1)
                                                  (("2"
                                                    (flatten)
                                                    (("2"
                                                      (inst -3 "h")
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand "abs" 1 1)
                                          (("2"
                                            (lift-if 1)
                                            (("2"
                                              (split 1)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (mult-by
                                                     -1
                                                     " norm_inf(n)(h) ")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (typepred
                                                       "norm_inf(n)")
                                                      (("2"
                                                        (expand
                                                         "norm?"
                                                         -1)
                                                        (("2"
                                                          (flatten)
                                                          (("2"
                                                            (inst
                                                             -3
                                                             "h")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (lemma "zero_id")
                                        (("2"
                                          (inst -1 "h")
                                          (("2"
                                            (assert)
                                            (("2"
                                              (replace -3 -1)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (expand "-" 1)
                                                  (("2"
                                                    (lemma "scal_zero")
                                                    (("2"
                                                      (inst
                                                       -1
                                                       "-1"
                                                       "n")
                                                      (("2"
                                                        (expand
                                                         "sub"
                                                         1)
                                                        (("2"
                                                          (expand
                                                           "*"
                                                           -1)
                                                          (("2"
                                                            (replace
                                                             -1)
                                                            (("2"
                                                              (expand
                                                               "+"
                                                               -2)
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide 2)
                          (("2" (hide -)
                            (("2" (lemma "MN_full")
                              (("2" (inst -1 "m" "n" "T") nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (lemma "MN_full")
                    (("2" (inst -1 "m" "n" "T")
                      (("2" (assert)
                        (("2" (split 1)
                          (("1" (propax) nil nil)
                           ("2" (typepred "T")
                            (("2" (typepred "T")
                              (("2"
                                (lemma "full_matrix_columns")
                                (("2"
                                  (inst -1 "T")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (inst -4 "0")
                                      (("2"
                                        (expand "nth" -4)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (lemma
                                             "full_matrix_columns")
                                            (("2"
                                              (inst -1 "T")
                                              (("2"
                                                (inst -8 "0")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (typepred "T")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (expand
                                                         "length"
                                                         -2)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((differentiable? const-decl "bool" convergence_vec2vec nil)
    (vec2vec type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" convergence_vec2vec nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (matv_norm_inf formula-decl nil mat_vec_mult nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (columns def-decl "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}" matrices
     matrices)
    (<= const-decl "bool" reals nil)
    (T skolem-const-decl "MatrixMN(m, n)" convergence_vec2vec nil)
    (MatrixMN type-eq-decl nil matrices matrices)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (m skolem-const-decl "posnat" convergence_vec2vec nil)
    (Matrix type-eq-decl nil matrices matrices)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (FullMatrix type-eq-decl nil matrices matrices)
    (MN_full judgement-tcc nil mat_vec_mult nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (both_sides_times_pos_lt1 formula-decl nil real_props nil)
    (h skolem-const-decl
     "{hh: (NQ(D, p)) | hh /= zero_vec(n) AND norm_inf(n)(hh) < delta}"
     convergence_vec2vec nil)
    (delta skolem-const-decl "posreal" convergence_vec2vec nil)
    (p skolem-const-decl "(D)" convergence_vec2vec nil)
    (D skolem-const-decl "(deriv_domain?)" convergence_vec2vec nil)
    (div_cancel2 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (MN_rc formula-decl nil mat_vec_mult nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (f skolem-const-decl
     "{ff: vec2vec(m) | differentiable?(m, D, ff, p)}"
     convergence_vec2vec nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (quad_cancel_tail formula-decl nil vector_arithmetic nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (* const-decl "VectorN(rows(A))" mat_vec_mult nil)
    (rows const-decl "nat" matrices matrices)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (Vector type-eq-decl nil matrices matrices)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (* const-decl "VectorN(length(v2))" matrices matrices)
    (sub const-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (scal_zero formula-decl nil vector_arithmetic nil)
    (zero_id formula-decl nil vector_arithmetic nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (norm_inf const-decl "(norm?(m))" norms nil)
    (norm? const-decl "bool" norms nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (/= const-decl "boolean" notequal nil)
    (NQ const-decl "bool" differentiable_def nil)
    (max_a def-decl "nnreal" mat_vec_mult nil)
    (nnreal type-eq-decl nil real_types nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (full_matrix_columns formula-decl nil matrices matrices)
    (NQ const-decl "real" convergence_vec2vec nil)
    (convergence_zero? const-decl "bool" vector_sequences nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   shostak))
 (diff_cont 0
  (diff_cont-1 nil 3797418137
   ("" (skeep*)
    (("" (lemma "contp_norms_v2v")
      (("" (inst -1 "D" "m" "f" "p")
        (("" (assert)
          (("" (hide 2)
            (("" (lemma "pre_diff_cont")
              (("" (inst -1 "m" "D" "p" "f")
                (("" (skeep)
                  (("" (inst 1 "norm_inf(n)" "norm_inf(m)")
                    (("" (expand "contp?" 1)
                      (("" (skeep)
                        (("" (inst 1 "min(del,eps/M)")
                          (("" (typepred "M")
                            (("" (skeep)
                              ((""
                                (case "p + (x - p) = x")
                                (("1"
                                  (case "x-p = zero_vec(n)")
                                  (("1"
                                    (lemma "diff_zero")
                                    (("1"
                                      (inst -1 "n" "x" "p")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "restrict" 1)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (lemma "sub_self")
                                              (("1"
                                                (inst -1 "f(x)")
                                                (("1"
                                                  (case
                                                   "NOT f(x) - f(p) = zero_vec(length(f(x)))")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (replace -1)
                                                    (("2"
                                                      (typepred
                                                       "norm_inf(m)")
                                                      (("2"
                                                        (expand
                                                         "norm?"
                                                         -1)
                                                        (("2"
                                                          (flatten)
                                                          (("2"
                                                            (inst
                                                             -3
                                                             "zero_vec(length(f(x)))")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (typepred
                                                               "f(x)")
                                                              (("2"
                                                                (replace
                                                                 -2)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide 2)
                                        (("2"
                                          (typepred "p")
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (typepred "x")
                                        (("3" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (inst -4 "x-p")
                                    (("1"
                                      (replace -1 -4)
                                      (("1"
                                        (expand "restrict" 2)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (mult-by -5 "M")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (case
                                                 "min(del, eps / M) * M <= eps")
                                                (("1" (assert) nil nil)
                                                 ("2"
                                                  (expand "min" 1)
                                                  (("2"
                                                    (lift-if 1)
                                                    (("2"
                                                      (split 1)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (flatten)
                                                        (("2"
                                                          (mult-by
                                                           1
                                                           "M")
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (typepred "x-p")
                                      (("2"
                                        (hide 3)
                                        (("2"
                                          (typepred "x" "p")
                                          (("2"
                                            (replace -2)
                                            (("2"
                                              (replace -5)
                                              (("2"
                                                (expand "max" -8)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (expand "NQ" 1)
                                                    (("2"
                                                      (reveal 3)
                                                      (("2"
                                                        (reveal +)
                                                        (("2"
                                                          (hide
                                                           1
                                                           2
                                                           3
                                                           4
                                                           5)
                                                          (("2"
                                                            (hide 2)
                                                            (("2"
                                                              (lemma
                                                               "sub_equal_id")
                                                              (("2"
                                                                (lemma
                                                                 "asso_sub_commute")
                                                                (("2"
                                                                  (inst
                                                                   -1
                                                                   "p"
                                                                   "x"
                                                                   "p")
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (lemma "asso_sub_commute")
                                  (("2"
                                    (inst -1 "p" "x" "p")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (replace -1 1 rl)
                                        (("1"
                                          (lemma "sub_equal_id")
                                          (("1"
                                            (inst -1 "x" "p")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (lemma "sub_self")
                                                (("1"
                                                  (inst -1 "p")
                                                  (("1"
                                                    (replace -1 1)
                                                    (("1"
                                                      (lemma
                                                       "add_commute")
                                                      (("1"
                                                        (inst
                                                         -1
                                                         "zero_vec(length(p))"
                                                         "x")
                                                        (("1"
                                                          (lemma
                                                           "zero_id")
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "x")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (typepred
                                                           "p"
                                                           "x")
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (typepred "x")
                                      (("2" (assert) nil nil))
                                      nil)
                                     ("3"
                                      (typepred "p")
                                      (("3" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((n formal-const-decl "posnat" convergence_vec2vec nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (contp_norms_v2v formula-decl nil continuity_multivar nil)
    (pre_diff_cont formula-decl nil convergence_vec2vec nil)
    (contp? const-decl "bool" continuity_multivar nil)
    (posreal_min application-judgement
     "{z: posreal | z <= x AND z <= y}" real_defs nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (<= const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (add_commute formula-decl nil vector_arithmetic nil)
    (zero_id formula-decl nil vector_arithmetic nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (D skolem-const-decl "(deriv_domain?)" convergence_vec2vec nil)
    (x skolem-const-decl "(D)" convergence_vec2vec nil)
    (p skolem-const-decl "(D)" convergence_vec2vec nil)
    (sub_self formula-decl nil vector_arithmetic nil)
    (f skolem-const-decl
     "{ff: vec2vec(m) | differentiable?(m, D, ff, p)}"
     convergence_vec2vec nil)
    (m skolem-const-decl "posnat" convergence_vec2vec nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (diff_zero formula-decl nil vector_arithmetic nil)
    (sub_equal_id formula-decl nil vector_arithmetic nil)
    (asso_sub_commute formula-decl nil vector_arithmetic nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (both_sides_times_pos_le1_imp formula-decl nil extra_real_props
     nil)
    (div_cancel2 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (both_sides_times_pos_lt1 formula-decl nil real_props nil)
    (del skolem-const-decl "posreal" convergence_vec2vec nil)
    (< const-decl "bool" reals nil)
    (NQ const-decl "bool" differentiable_def nil)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (Vector type-eq-decl nil matrices matrices)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (norm? const-decl "bool" norms nil)
    (norm_inf const-decl "(norm?(m))" norms nil)
    (differentiable? const-decl "bool" convergence_vec2vec nil)
    (vec2vec type-eq-decl nil domain_vec2real_def nil)
    (restrict const-decl "R" restrict nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   shostak))
 (der?_TCC1 0
  (der?_TCC1-1 nil 3798407130 ("" (subtype-tcc) nil nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices matrices)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (vec2vec type-eq-decl nil domain_vec2real_def nil)
    (differentiableD? const-decl "bool" convergence_vec2vec nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (max def-decl "real" norms nil)
    (Vector type-eq-decl nil matrices matrices)
    (scal def-decl "VectorN(length(v2))" matrices matrices)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (<= const-decl "bool" reals nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (add def-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (D!1 skolem-const-decl "(deriv_domain?[n])" convergence_vec2vec
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (/= const-decl "boolean" notequal nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (norm_inf const-decl "(norm?(m))" norms nil)
    (sub const-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (norm_inf const-decl "[(cons?) -> nonneg_real]" norms nil)
    (rows const-decl "nat" matrices matrices)
    (* const-decl "VectorN(rows(A))" mat_vec_mult nil)
    (NQ const-decl "real" convergence_vec2vec nil)
    (n formal-const-decl "posnat" convergence_vec2vec nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (convergence_zero? const-decl "bool" vector_sequences nil)
    (differentiable? const-decl "bool" convergence_vec2vec nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (norm? const-decl "bool" norms nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (* const-decl "VectorN(length(v2))" matrices matrices))
   nil
   (der? subtype "convergence_vec2vec.f"
    "{ff: domain_vec2real_def[convergence_vec2vec.n].vec2vec(convergence_vec2vec.m) | convergence_vec2vec.differentiable?(convergence_vec2vec.m, convergence_vec2vec.D, ff, convergence_vec2vec.p)}")))
 (pre_der_der_p_TCC1 0
  (pre_der_der_p_TCC1-1 nil 3801744023
   ("" (lemma "derivable_nth_mat")
    (("" (lemma "derivable_nth_mat_point")
      (("" (assert)
        (("" (hide -2)
          (("" (skeep) (("" (inst?) (("" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((derivable_nth_mat_point formula-decl nil convergence_vec2vec nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (n formal-const-decl "posnat" convergence_vec2vec nil)
    (VectorN type-eq-decl nil matrices matrices)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (vec2vec type-eq-decl nil domain_vec2real_def nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (derivable_nth_mat formula-decl nil convergence_vec2vec nil))
   nil
   (pre_der_der_p subtype "convergence_vec2vec.f"
    "{ff: domain_vec2real_def[convergence_vec2vec.n].vec2vec(convergence_vec2vec.m) | FORALL (i: naturalnumbers.below(convergence_vec2vec.m)): differentiable_def[convergence_vec2vec.n].differentiable?(convergence_vec2vec.D, convergence_vec2vec.nth(convergence_vec2vec.m, ff, i), convergence_vec2vec.p)}")))
 (pre_der_der_p 0
  (pre_der_der_p-1 nil 3801744243
   ("" (skeep)
    (("" (expand "der_p?")
      (("" (expand "convergence_zero?" 1)
        (("" (skeep)
          (("" (inst 1 "del_all_p(m,D,p,f)(epsilon)")
            (("1" (skeep)
              (("1" (lemma "del_nth")
                (("1" (lemma "del_nth")
                  (("1" (lemma "del_nth_p")
                    (("1" (hide -2)
                      (("1" (inst?)
                        (("1" (expand "NQ" 1)
                          (("1"
                            (case "abs(norm_inf(m)(f(p + x) - f(p) - pre_der(m, D, p, f)*x)
                                                           / norm_inf(n)(x)) = norm_inf(m)(f(p + x) - f(p) - pre_der(m, D,p, f)*x)
                                                           / norm_inf(n)(x)")
                            (("1" (assert)
                              (("1"
                                (replace -1 1)
                                (("1"
                                  (lemma "norm_inf_nth")
                                  (("1"
                                    (inst
                                     -1
                                     "f(p + x) - f(p) - pre_der(m, D,p, f)*x")
                                    (("1"
                                      (skeep)
                                      (("1"
                                        (expand "norm_inf" 1 1)
                                        (("1"
                                          (replace -1 1)
                                          (("1"
                                            (lemma "nth_subtract")
                                            (("1"
                                              (inst
                                               -1
                                               "f(p + x) - f(p)"
                                               "pre_der(m, D,p, f)*x")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (split -1)
                                                  (("1"
                                                    (inst -1 "i")
                                                    (("1"
                                                      (replace -1 1)
                                                      (("1"
                                                        (lemma
                                                         "matv_nth")
                                                        (("1"
                                                          (inst
                                                           -1
                                                           " pre_der(m, D,p, f)"
                                                           "x"
                                                           "i")
                                                          (("1"
                                                            (replace
                                                             -1
                                                             1)
                                                            (("1"
                                                              (lemma
                                                               "pre_der_nth_p")
                                                              (("1"
                                                                (inst
                                                                 -1
                                                                 "m"
                                                                 "D"
                                                                 "p"
                                                                 "f"
                                                                 "i")
                                                                (("1"
                                                                  (expand
                                                                   "row"
                                                                   1
                                                                   1)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (typepred
                                                                       "i")
                                                                      (("1"
                                                                        (lift-if
                                                                         1)
                                                                        (("1"
                                                                          (split
                                                                           1)
                                                                          (("1"
                                                                            (flatten)
                                                                            (("1"
                                                                              (hide
                                                                               1)
                                                                              (("1"
                                                                                (typepred
                                                                                 "i"
                                                                                 "pre_der(m, D, p,f)")
                                                                                (("1"
                                                                                  (typepred
                                                                                   "f(p + x) - f(p) - pre_der(m, D,p, f)*x"
                                                                                   "f(p + x) - f(p)"
                                                                                   "pre_der(m, D,p, f)*x"
                                                                                   "f(p+x)"
                                                                                   "f(p)")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (replace
                                                                                       -8)
                                                                                      (("1"
                                                                                        (replace
                                                                                         -10)
                                                                                        (("1"
                                                                                          (hide
                                                                                           -7)
                                                                                          (("1"
                                                                                            (hide
                                                                                             -8)
                                                                                            (("1"
                                                                                              (hide
                                                                                               -5)
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "max"
                                                                                                 -4)
                                                                                                (("1"
                                                                                                  (replace
                                                                                                   -4)
                                                                                                  (("1"
                                                                                                    (hide
                                                                                                     -1
                                                                                                     -3)
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "rows"
                                                                                                       -3)
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (replace
                                                                               -2
                                                                               2)
                                                                              (("2"
                                                                                (inst
                                                                                 -7
                                                                                 "i")
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (expand
                                                                                     "NQ"
                                                                                     -7)
                                                                                    (("2"
                                                                                      (hide
                                                                                       -8)
                                                                                      (("2"
                                                                                        (case
                                                                                         "(nth(m, f, i)(p + x) - nth(m, f, i)(p) -
                                                                                                                          der_f(D,p)(nth(m, f, i)) * x) = nth(f(p + x) - f(p), i) - der_f(D,p)(nth(m, f, i)) * x")
                                                                                        (("1"
                                                                                          (replace
                                                                                           -1
                                                                                           2
                                                                                           rl)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (hide
                                                                                               1)
                                                                                              (("1"
                                                                                                (hide
                                                                                                 -9)
                                                                                                (("1"
                                                                                                  (hide
                                                                                                   -7)
                                                                                                  (("1"
                                                                                                    (lemma
                                                                                                     "abs_div")
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       -1
                                                                                                       " norm_inf(n)(x)"
                                                                                                       "(nth(m, f, i)(p + x) - nth(m, f, i)(p) -
                                                                                                              der_f(D,p)(nth(m, f, i)) * x)")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (replace
                                                                                                           -1
                                                                                                           -8)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "abs"
                                                                                                             -8
                                                                                                             2)
                                                                                                            (("1"
                                                                                                              (propax)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (hide
                                                                                             2
                                                                                             3)
                                                                                            (("2"
                                                                                              (hide
                                                                                               -6
                                                                                               -7)
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "nth"
                                                                                                 1
                                                                                                 1)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "nth"
                                                                                                   1
                                                                                                   2)
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (lemma
                                                                                                       "nth_subtract")
                                                                                                      (("2"
                                                                                                        (inst
                                                                                                         -1
                                                                                                         "f(p + x)"
                                                                                                         "(f(p))")
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          (("2"
                                                                                                            (inst
                                                                                                             -1
                                                                                                             "i")
                                                                                                            (("2"
                                                                                                              (replace
                                                                                                               -1
                                                                                                               1)
                                                                                                              (("2"
                                                                                                                (propax)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide
                                                                   -)
                                                                  (("2"
                                                                    (reveal
                                                                     -)
                                                                    (("2"
                                                                      (hide
                                                                       -11)
                                                                      (("2"
                                                                        (hide
                                                                         -)
                                                                        (("2"
                                                                          (typepred
                                                                           "i")
                                                                          (("2"
                                                                            (typepred
                                                                             "f(p + x) - f(p) - pre_der(m, D,p, f)*x"
                                                                             "f(p + x) - f(p)"
                                                                             "pre_der(m, D, p ,f)*x"
                                                                             "f(p+x)"
                                                                             "f(p)")
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (replace
                                                                                 -8)
                                                                                (("2"
                                                                                  (replace
                                                                                   -10)
                                                                                  (("2"
                                                                                    (replace
                                                                                     -6)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "max"
                                                                                       -4)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "rows")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (assert)
                                                            (("2"
                                                              (typepred
                                                               "i")
                                                              (("2"
                                                                (typepred
                                                                 "f(p + x) - f(p) - pre_der(m, D,p, f)*x"
                                                                 "f(p + x) - f(p)"
                                                                 "pre_der(m, D, p, f)*x"
                                                                 "f(p+x)"
                                                                 "f(p)")
                                                                (("2"
                                                                  (hide
                                                                   -3
                                                                   -5
                                                                   -7)
                                                                  (("2"
                                                                    (replace
                                                                     -5)
                                                                    (("2"
                                                                      (replace
                                                                       -4)
                                                                      (("2"
                                                                        (replace
                                                                         -7)
                                                                        (("2"
                                                                          (hide
                                                                           -1)
                                                                          (("2"
                                                                            (hide
                                                                             -5)
                                                                            (("2"
                                                                              (expand
                                                                               "rows")
                                                                              (("2"
                                                                                (expand
                                                                                 "max")
                                                                                (("2"
                                                                                  (replace
                                                                                   -1)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (typepred
                                                       "f(p+x)-f(p)"
                                                       "f(p+x)"
                                                       "f(p)")
                                                      (("2"
                                                        (replace -4)
                                                        (("2"
                                                          (replace -6)
                                                          (("2"
                                                            (expand
                                                             "max"
                                                             -2)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (typepred
                                                                 "i")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (typepred
                                                                     "pre_der(m, D,p, f) * x")
                                                                    (("2"
                                                                      (hide
                                                                       -1)
                                                                      (("2"
                                                                        (expand
                                                                         "rows"
                                                                         -1)
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (typepred
                                                     "f(p+x)-f(p)"
                                                     "f(p+x)"
                                                     "f(p)")
                                                    (("2"
                                                      (typepred
                                                       "pre_der(m, D,p, f) * x")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (expand
                                                           "rows")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (replace
                                                               -6)
                                                              (("2"
                                                                (replace
                                                                 -8)
                                                                (("2"
                                                                  (expand
                                                                   "max"
                                                                   -4)
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide -1)
                                                (("2"
                                                  (typepred
                                                   "pre_der(m, D,p, f)")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (typepred
                                                       "f(p+x)-f(p)"
                                                       "f(p+x)"
                                                       "f(p)")
                                                      (("2"
                                                        (replace -4)
                                                        (("2"
                                                          (replace -6)
                                                          (("2"
                                                            (expand
                                                             "max"
                                                             -2)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (typepred
                                                                 "(pre_der(m, D,p, f) * x)")
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (expand
                                                                     "rows")
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (typepred
                                                 "f(p+x)-f(p)"
                                                 "f(p+x)"
                                                 "f(p)")
                                                (("3"
                                                  (replace -4)
                                                  (("3"
                                                    (replace -6)
                                                    (("3"
                                                      (expand "max")
                                                      (("3"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand "abs" 1 1)
                              (("2"
                                (lift-if 1)
                                (("2"
                                  (split 1)
                                  (("1"
                                    (flatten)
                                    (("1"
                                      (mult-by -1 " norm_inf(n)(x)")
                                      (("1" (assert) nil nil)
                                       ("2"
                                        (typepred "x")
                                        (("2"
                                          (typepred "norm_inf(n)")
                                          (("2"
                                            (expand "norm?" -1)
                                            (("2"
                                              (flatten)
                                              (("2"
                                                (inst -3 "x")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (lemma "derivable_nth_mat_point")
              (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((der_p? const-decl "bool" convergence_vec2vec nil)
    (derivable_nth_mat_point formula-decl nil convergence_vec2vec nil)
    (NQ const-decl "real" convergence_vec2vec nil)
    (both_sides_times_pos_lt1 formula-decl nil real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (div_cancel2 formula-decl nil real_props nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (norm_inf_nth formula-decl nil norms nil)
    (x skolem-const-decl "{xx: (NQ(D, p)) | xx /= zero_vec(n)}"
     convergence_vec2vec nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (pre_der_nth_p formula-decl nil convergence_vec2vec nil)
    (row const-decl "Vector" matrices matrices)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (abs_div formula-decl nil real_props nil)
    (der_f const-decl
     "{gg: VectorN(n) | convergence_zero?(NQ(D, p), NQ(f, gg, p), zero_vec(n))}"
     differentiable_def nil)
    (* const-decl "real" matrices matrices)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (NQ const-decl "real" differentiable_def nil)
    (matv_nth formula-decl nil mat_vec_mult nil)
    (i skolem-const-decl
       "below(length(f(p + x) - f(p) - pre_der(m, D, p, f) * x))"
       convergence_vec2vec nil)
    (nth_subtract formula-decl nil vector_arithmetic nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (norm? const-decl "bool" norms nil)
    (norm_inf const-decl "(norm?(m))" norms nil)
    (Vector type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (FullMatrix type-eq-decl nil matrices matrices)
    (Matrix type-eq-decl nil matrices matrices)
    (<= const-decl "bool" reals nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (columns def-decl "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}" matrices
     matrices)
    (rows const-decl "nat" matrices matrices)
    (* const-decl "VectorN(rows(A))" mat_vec_mult nil)
    (MatrixMN type-eq-decl nil matrices matrices)
    (pre_der def-decl "MatrixMN(m, n)" convergence_vec2vec nil)
    (NQ const-decl "bool" differentiable_def nil)
    (/= const-decl "boolean" notequal nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (del_nth_p formula-decl nil convergence_vec2vec nil)
    (del_nth formula-decl nil convergence_vec2vec nil)
    (del_all_p def-decl "posreal" convergence_vec2vec nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (m skolem-const-decl "posnat" convergence_vec2vec nil)
    (below type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (n formal-const-decl "posnat" convergence_vec2vec nil)
    (VectorN type-eq-decl nil matrices matrices)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (differentiable? const-decl "bool" differentiable_def nil)
    (D skolem-const-decl "(deriv_domain?)" convergence_vec2vec nil)
    (vec2vec type-eq-decl nil domain_vec2real_def nil)
    (nth const-decl "vec2real_f" convergence_vec2vec nil)
    (f skolem-const-decl "vec2vec[n](m)" convergence_vec2vec nil)
    (p skolem-const-decl "(D)" convergence_vec2vec nil)
    (convergence_zero? const-decl "bool" vector_sequences nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   shostak))
 (der_nth_mat_point_TCC1 0
  (der_nth_mat_point_TCC1-1 nil 3853429765
   ("" (lemma "dd_e_partial_implies_dd")
    (("" (skeep) (("" (inst?) (("" (assert) nil nil)) nil)) nil)) nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (deriv_domain_e_partial? const-decl "bool" derivative_domain_multi
     nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (dd_e_partial_implies_dd formula-decl nil derivative_domain_multi
     nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n formal-const-decl "posnat" convergence_vec2vec nil))
   nil
   (der_nth_mat_point subtype "convergence_vec2vec.D"
    "(derivative_domain_multi[convergence_vec2vec.n].deriv_domain?)")))
 (der_nth_mat_point_TCC2 0
  (der_nth_mat_point_TCC2-1 nil 3853435537 ("" (subtype-tcc) nil nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (deriv_domain_e_partial? const-decl "bool" derivative_domain_multi
     nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (deriv_domain_partial? const-decl "bool" derivative_domain_multi
     nil)
    (Matrix type-eq-decl nil matrices matrices)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (MatrixMN type-eq-decl nil matrices matrices)
    (norm_inf const-decl "(norm?(m))" norms nil)
    (sub const-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (norm_inf const-decl "[(cons?) -> nonneg_real]" norms nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (rows const-decl "nat" matrices matrices)
    (* const-decl "VectorN(rows(A))" mat_vec_mult nil)
    (NQ const-decl "real" convergence_vec2vec nil)
    (n formal-const-decl "posnat" convergence_vec2vec nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (convergence_zero? const-decl "bool" vector_sequences nil)
    (differentiable? const-decl "bool" convergence_vec2vec nil)
    (der_f const-decl "{T: MatrixMN(m, n) |
   convergence_zero?(NQ(D, p), NQ(m, f, p, T), zero_vec(n))}"
     convergence_vec2vec nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil))
   nil
   (der_nth_mat_point subtype "convergence_vec2vec.i"
    "below[length[list[real]](der_f(m, D, p)(f))]")))
 (der_nth_mat_point_TCC3 0
  (der_nth_mat_point_TCC3-1 nil 3853435537
   ("" (skeep)
    (("" (lemma "derivable_nth_mat_point")
      (("" (inst?) (("" (assert) nil nil)) nil)) nil))
    nil)
   ((derivable_nth_mat_point formula-decl nil convergence_vec2vec nil)
    (vec2vec type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain_e_partial? const-decl "bool" derivative_domain_multi
     nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" convergence_vec2vec nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (der_nth_mat_point subtype
    "convergence_vec2vec.nth(convergence_vec2vec.m, convergence_vec2vec.f, convergence_vec2vec.i)"
    "{ff: domain_vec2real_def[convergence_vec2vec.n].vec2real_f | differentiable_def[convergence_vec2vec.n].differentiable?(convergence_vec2vec.D, ff, convergence_vec2vec.p)}")))
 (der_nth_mat_point 0
  (der_nth_mat_point-1 nil 3853841575
   ("" (skeep)
    (("" (skeep)
      (("" (lemma "conv_zero_nth")
        (("" (inst?)
          (("" (lemma "init_partial_def.der_f_unique")
            (("" (inst?) (("" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (n formal-const-decl "posnat" convergence_vec2vec nil)
    (VectorN type-eq-decl nil matrices matrices)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (deriv_domain_e_partial? const-decl "bool" derivative_domain_multi
     nil)
    (vec2vec type-eq-decl nil domain_vec2real_def nil)
    (Matrix type-eq-decl nil matrices matrices)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (MatrixMN type-eq-decl nil matrices matrices)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (convergence_zero? const-decl "bool" vector_sequences nil)
    (NQ const-decl "bool" differentiable_def nil)
    (NQ const-decl "real" convergence_vec2vec nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (differentiable? const-decl "bool" convergence_vec2vec nil)
    (der_f const-decl "{T: MatrixMN(m, n) |
   convergence_zero?(NQ(D, p), NQ(m, f, p, T), zero_vec(n))}"
     convergence_vec2vec nil)
    (nth const-decl "vec2real_f" convergence_vec2vec nil)
    (differentiable? const-decl "bool" differentiable_def nil)
    (der_f_unique formula-decl nil init_partial_def nil)
    (conv_zero_nth formula-decl nil convergence_vec2vec nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   shostak))
 (derivable_subtype_TCC1 0
  (derivable_subtype_TCC1-1 nil 3853962293
   ("" (skeep)
    (("" (typepred "D")
      (("" (expand "deriv_domain_sub?")
        (("" (flatten) (("" (inst -2 "p") nil nil)) nil)) nil))
      nil))
    nil)
   ((deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (deriv_domain_sub? const-decl "bool" derivative_domain_multi nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" convergence_vec2vec nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (derivable_subtype subtype "convergence_vec2vec.p"
    "(convergence_vec2vec.U)")))
 (derivable_subtype_TCC2 0
  (derivable_subtype_TCC2-1 nil 3853962293 ("" (subtype-tcc) nil nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (deriv_domain_sub? const-decl "bool" derivative_domain_multi nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nzint_abs_is_pos application-judgement "{j: posint | j >= i}"
     real_defs nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (D!1 skolem-const-decl "(deriv_domain_sub?[n](U!1))"
     convergence_vec2vec nil)
    (p!2 skolem-const-decl "(D!1)" convergence_vec2vec nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (e!1 skolem-const-decl "posreal" convergence_vec2vec nil)
    (m!1 skolem-const-decl "posnat" convergence_vec2vec nil)
    (T!1 skolem-const-decl "MatrixMN(m!1, n)" convergence_vec2vec nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (<= const-decl "bool" reals nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (add def-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (U!1 skolem-const-decl "(deriv_domain?[n])" convergence_vec2vec
     nil)
    (/= const-decl "boolean" notequal nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (Vector type-eq-decl nil matrices matrices)
    (scal def-decl "VectorN(length(v2))" matrices matrices)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (Matrix type-eq-decl nil matrices matrices)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (MatrixMN type-eq-decl nil matrices matrices)
    (norm_inf const-decl "(norm?(m))" norms nil)
    (sub const-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (norm_inf const-decl "[(cons?) -> nonneg_real]" norms nil)
    (rows const-decl "nat" matrices matrices)
    (* const-decl "VectorN(rows(A))" mat_vec_mult nil)
    (NQ const-decl "real" convergence_vec2vec nil)
    (n formal-const-decl "posnat" convergence_vec2vec nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (convergence_zero? const-decl "bool" vector_sequences nil)
    (differentiable? const-decl "bool" convergence_vec2vec nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (norm? const-decl "bool" norms nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (* const-decl "VectorN(length(v2))" matrices matrices))
   nil
   (derivable_subtype subtype "convergence_vec2vec.D"
    "(derivative_domain_multi[convergence_vec2vec.n].deriv_domain?)")))
 (derivable_subtype 0
  (derivable_subtype-1 nil 3853962462
   ("" (skeep)
    (("" (expand "differentiable?")
      (("" (skeep)
        (("" (inst 1 "T")
          (("" (expand "convergence_zero?")
            (("" (skeep)
              (("" (inst -1 "epsilon")
                (("" (skeep)
                  (("" (inst 1 "delta")
                    (("" (skeep)
                      (("" (inst -1 "x")
                        (("1" (assert) nil nil)
                         ("2" (typepred "x")
                          (("2" (typepred "D")
                            (("2" (expand "deriv_domain_sub?" -1)
                              (("2"
                                (flatten)
                                (("2"
                                  (expand "NQ")
                                  (("2" (inst -2 "p+x") nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((differentiable? const-decl "bool" convergence_vec2vec nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (Matrix type-eq-decl nil matrices matrices)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (n formal-const-decl "posnat" convergence_vec2vec nil)
    (MatrixMN type-eq-decl nil matrices matrices)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (NQ const-decl "real" convergence_vec2vec nil)
    (Vector type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (NQ const-decl "bool" differentiable_def nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (U skolem-const-decl "(deriv_domain?)" convergence_vec2vec nil)
    (deriv_domain_sub? const-decl "bool" derivative_domain_multi nil)
    (D skolem-const-decl "(deriv_domain_sub?(U))" convergence_vec2vec
     nil)
    (p skolem-const-decl "(D)" convergence_vec2vec nil)
    (/= const-decl "boolean" notequal nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (x skolem-const-decl "{xx: (NQ(D, p)) | xx /= zero_vec(n)}"
     convergence_vec2vec nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (convergence_zero? const-decl "bool" vector_sequences nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   shostak))
 (der_subtype_TCC1 0
  (der_subtype_TCC1-1 nil 3853963057
   ("" (skeep)
    (("" (lemma "derivable_subtype")
      (("" (inst?) (("" (assert) nil nil)) nil)) nil))
    nil)
   ((derivable_subtype formula-decl nil convergence_vec2vec nil)
    (vec2vec type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain_e_partial? const-decl "bool" derivative_domain_multi
     nil)
    (deriv_domain_sub? const-decl "bool" derivative_domain_multi nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" convergence_vec2vec nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (der_subtype subtype "convergence_vec2vec.f"
    "{ff: domain_vec2real_def[convergence_vec2vec.n].vec2vec(convergence_vec2vec.m) | convergence_vec2vec.differentiable?(convergence_vec2vec.m, convergence_vec2vec.D, ff, convergence_vec2vec.p)}")))
 (der_subtype 0
  (der_subtype-1 nil 3853963226
   ("" (skeep)
    (("" (lemma "der_f_unique")
      (("" (inst -1 "m" "D" "f" "p" "der_f(m,U,p)(f)")
        (("1" (assert)
          (("1" (expand "der_f") (("1" (assert) nil nil)) nil)) nil)
         ("2" (typepred "der_f(m,U,p)(f)")
          (("2" (hide -1)
            (("2" (hide -2)
              (("2" (expand "convergence_zero?")
                (("2" (skeep)
                  (("2" (inst -2 "epsilon")
                    (("2" (skeep)
                      (("2" (inst 1 "delta")
                        (("2" (skeep)
                          (("2" (inst -2 "x")
                            (("1" (assert) nil nil)
                             ("2" (typepred "x" "D")
                              (("2"
                                (expand "NQ")
                                (("2"
                                  (expand "deriv_domain_sub?")
                                  (("2"
                                    (flatten)
                                    (("2" (inst -5 "p+x") nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (typepred "D")
          (("3" (assert) (("3" (postpone) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   nil shostak)))