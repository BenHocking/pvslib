(derivative_domain_multi
 (deriv_domain?_TCC1 0
  (deriv_domain?_TCC1-1 nil 3740926980
   ("" (skeep)
    (("" (typepred "vv+p" "p")
      (("" (assert)
        (("" (typepred "vv")
          (("" (expand "max" -4) (("" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((domain type-eq-decl nil domain_vec2real_def nil)
    (n formal-const-decl "posnat" derivative_domain_multi nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (VectorN type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vector type-eq-decl nil matrices matrices)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (deriv_domain? subtype
    "(matrices.+)(derivative_domain_multi.p, derivative_domain_multi.vv)"
    "matrices.VectorN(derivative_domain_multi.n)")))
 (deriv_domain?_TCC2 0
  (deriv_domain?_TCC2-1 nil 3740926980 ("" (subtype-tcc) nil nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (norm? const-decl "bool" norms nil)
    (n formal-const-decl "posnat" derivative_domain_multi nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices matrices)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (/= const-decl "boolean" notequal nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (Vector type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (* const-decl "VectorN(length(v2))" matrices matrices))
   nil
   (deriv_domain? subtype "derivative_domain_multi.v"
    "(list_adt[real].cons?)")))
 (deriv_domain_direction?_TCC1 0
  (deriv_domain_direction?_TCC1-1 nil 3741000833
   ("" (skeep)
    (("" (typepred "p+delta*v")
      (("" (typepred "p" "delta*v")
        (("" (assert)
          (("" (expand "max" -7) (("" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (* const-decl "VectorN(length(v2))" matrices matrices)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (n formal-const-decl "posnat" derivative_domain_multi nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (VectorN type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vector type-eq-decl nil matrices matrices)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (deriv_domain_direction? subtype
    "(matrices.+)(derivative_domain_multi.p, matrices.*(derivative_domain_multi.delta, derivative_domain_multi.v))"
    "matrices.VectorN(derivative_domain_multi.n)")))
 (deriv_domain_partial?_TCC1 0
  (deriv_domain_partial?_TCC1-1 nil 3850894799
   ("" (skeep)
    (("" (typepred "p+delta*v" "p" "delta*v" "v")
      (("" (hide -1 -3 -6 -8)
        (("" (expand "max" -) (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((nzreal nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (* const-decl "VectorN(length(v2))" matrices matrices)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (n formal-const-decl "posnat" derivative_domain_multi nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (VectorN type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vector type-eq-decl nil matrices matrices)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (deriv_domain_partial? subtype
    "(matrices.+)(derivative_domain_multi.p, matrices.*(derivative_domain_multi.delta, derivative_domain_multi.v))"
    "matrices.VectorN(derivative_domain_multi.n)")))
 (dd_direction_partial 0
  (dd_direction_partial-1 nil 3850897040
   ("" (skeep)
    (("" (typepred "D")
      (("" (expand "deriv_domain_direction?")
        (("" (expand "deriv_domain_partial?")
          (("" (skeep)
            (("" (inst -1 "e" "p")
              (("" (skeep) (("" (inst?) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((deriv_domain_direction? const-decl "bool" derivative_domain_multi
     nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" derivative_domain_multi nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (deriv_domain_partial? const-decl "bool" derivative_domain_multi
     nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (* const-decl "VectorN(length(v2))" matrices matrices)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (Vector type-eq-decl nil matrices matrices)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   shostak))
 (dd_direction_partial_neg_TCC1 0
  (dd_direction_partial_neg_TCC1-1 nil 3850896550
   ("" (subtype-tcc) nil nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n formal-const-decl "posnat" derivative_domain_multi nil)
    (VectorN type-eq-decl nil matrices matrices)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (* const-decl "VectorN(length(v2))" matrices matrices)
    (- const-decl "VectorN(length(v))" vector_arithmetic nil))
   nil
   (dd_direction_partial_neg subtype
    "(vector_arithmetic.-)(derivative_domain_multi.v)"
    "matrices.VectorN(derivative_domain_multi.n)")))
 (dd_direction_partial_neg 0
  (dd_direction_partial_neg-1 nil 3850897075
   ("" (skeep)
    (("" (typepred "D")
      (("" (expand "deriv_domain_direction?")
        (("" (expand "deriv_domain_partial?")
          (("" (skeep)
            (("" (inst -1 "e" "p")
              (("" (skeep)
                (("" (inst 1 "-delta")
                  (("1" (assert) (("1" (grind) nil nil)) nil)
                   ("2" (typepred "delta")
                    (("2" (case "delta * -v = -delta * v")
                      (("1" (assert) nil nil)
                       ("2" (lemma "asso_v")
                        (("2" (inst -1 "delta" "-1" "v")
                          (("1" (expand "-" 1 1)
                            (("1" (assert) nil nil)) nil)
                           ("2" (typepred "v") (("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((- const-decl "VectorN(length(v))" vector_arithmetic nil)
    (Vector type-eq-decl nil matrices matrices)
    (deriv_domain_direction? const-decl "bool" derivative_domain_multi
     nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" derivative_domain_multi nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (deriv_domain_partial? const-decl "bool" derivative_domain_multi
     nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (delta skolem-const-decl "{delta: posreal | D(p + delta * -v)}"
     derivative_domain_multi nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "VectorN(length(v2))" matrices matrices)
    (p skolem-const-decl "(D)" derivative_domain_multi nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (D skolem-const-decl "(deriv_domain_direction?(-v))"
     derivative_domain_multi nil)
    (v skolem-const-decl "VectorN(n)" derivative_domain_multi nil)
    (/= const-decl "boolean" notequal nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (asso_v formula-decl nil vector_arithmetic nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   shostak))
 (e_direction_e_partial 0
  (e_direction_e_partial-1 nil 3852309962
   ("" (skeep)
    (("" (expand "deriv_domain_e_partial?")
      (("" (expand "deriv_domain_e_direction?")
        (("" (skeep)
          (("" (inst?)
            (("" (expand "deriv_domain_partial?")
              (("" (expand "deriv_domain_direction?")
                (("" (skeep)
                  (("" (inst?)
                    (("" (inst -1 "p")
                      (("" (skeep) (("" (inst 1 "delta") nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((deriv_domain_e_partial? const-decl "bool" derivative_domain_multi
     nil)
    (deriv_domain_partial? const-decl "bool" derivative_domain_multi
     nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (/= const-decl "boolean" notequal nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (Vector type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (* const-decl "VectorN(length(v2))" matrices matrices)
    (e def-decl "VectorN(m)" vector_arithmetic nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (deriv_domain_direction? const-decl "bool" derivative_domain_multi
     nil)
    (below type-eq-decl nil naturalnumbers nil)
    (n formal-const-decl "posnat" derivative_domain_multi nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (deriv_domain_e_direction? const-decl "bool"
     derivative_domain_multi nil))
   shostak))
 (deriv_domain_both_direction?_TCC1 0
  (deriv_domain_both_direction?_TCC1-1 nil 3741507935
   ("" (subtype-tcc) nil nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n formal-const-decl "posnat" derivative_domain_multi nil)
    (VectorN type-eq-decl nil matrices matrices)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (deriv_domain_direction? const-decl "bool" derivative_domain_multi
     nil)
    (* const-decl "VectorN(length(v2))" matrices matrices))
   nil
   (deriv_domain_both_direction? subtype
    "matrices.*((number_fields.-)(1), derivative_domain_multi.v)"
    "matrices.VectorN(derivative_domain_multi.n)")))
 (domain_connect?_TCC1 0
  (domain_connect?_TCC1-1 nil 3741690348
   ("" (skeep)
    ((""
      (typepred "p1 + t * (p2 - p1)" "p1" "t * (p2 - p1)" "p2-p1" "p2")
      (("" (expand "max" -) (("" (assert) nil nil)) nil)) nil))
    nil)
   ((- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (<= const-decl "bool" reals nil)
    (* const-decl "VectorN(length(v2))" matrices matrices)
    (n formal-const-decl "posnat" derivative_domain_multi nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (VectorN type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vector type-eq-decl nil matrices matrices)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (domain_connect? subtype
    "(matrices.+)(derivative_domain_multi.p1, matrices.*(derivative_domain_multi.t, ((matrices.-)(derivative_domain_multi.p2, derivative_domain_multi.p1))))"
    "matrices.VectorN(derivative_domain_multi.n)")))
 (open_implies_e_direction 0
  (open_implies_e_direction-1 nil 3741961482
   ("" (skeep)
    (("" (expand "open_neigh_domain?")
      (("" (expand "deriv_domain_e_direction?")
        (("" (skeep)
          (("" (expand "deriv_domain_direction?")
            (("" (skeep)
              (("" (inst -1 "p")
                (("" (inst -1 "e(n,i)")
                  (("" (skeep)
                    (("" (inst 1 "min(e_1,epsilon)/2")
                      (("1" (assert)
                        (("1" (expand "abs" 1)
                          (("1" (expand "min" 1)
                            (("1" (assert)
                              (("1"
                                (lift-if)
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (inst -1 "min(e_1, epsilon) / 2")
                        (("2" (assert)
                          (("2" (hide 2) (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((open_neigh_domain? const-decl "bool" closed_bounded_domain nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (below type-eq-decl nil naturalnumbers nil)
    (e def-decl "VectorN(m)" vector_arithmetic nil)
    (< const-decl "bool" reals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posreal_min application-judgement
     "{z: posreal | z <= x AND z <= y}" real_defs nil)
    (i skolem-const-decl "below(n)" derivative_domain_multi nil)
    (epsilon skolem-const-decl "posreal" derivative_domain_multi nil)
    (e_1 skolem-const-decl "posreal" derivative_domain_multi nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (<= const-decl "bool" reals nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "VectorN(length(v2))" matrices matrices)
    (p skolem-const-decl "(D)" derivative_domain_multi nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (Vector type-eq-decl nil matrices matrices)
    (D skolem-const-decl "domain[n]" derivative_domain_multi nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" derivative_domain_multi nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (deriv_domain_direction? const-decl "bool" derivative_domain_multi
     nil)
    (deriv_domain_e_direction? const-decl "bool"
     derivative_domain_multi nil))
   shostak))
 (open_implies_e_partial 0
  (open_implies_e_partial-1 nil 3852310144
   ("" (lemma "open_implies_e_direction")
    (("" (lemma "e_direction_e_partial")
      (("" (skeep)
        (("" (inst?) (("" (inst?) (("" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((e_direction_e_partial formula-decl nil derivative_domain_multi
     nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n formal-const-decl "posnat" derivative_domain_multi nil)
    (VectorN type-eq-decl nil matrices matrices)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (open_implies_e_direction formula-decl nil derivative_domain_multi
     nil))
   shostak))
 (d_con_ends 0
  (d_con_ends-1 nil 3741708975
   ("" (skeep)
    (("" (typepred "D")
      (("" (expand "domain_connect?")
        (("" (inst-cp -1 "0")
          (("" (inst -1 "1")
            (("" (case "p1 + 1 * (p2 - p1) = p2")
              (("1" (assert)
                (("1" (case "p1 + 0 * (p2 - p1) = p1")
                  (("1" (assert) nil nil)
                   ("2" (lemma "zero_id")
                    (("2" (inst -1 "p1")
                      (("2" (lemma "mult_zero")
                        (("2" (inst -1 "p2-p1")
                          (("1" (typepred "length" -1)
                            (("1" (typepred "p2-p1")
                              (("1"
                                (expand "max" -)
                                (("1"
                                  (replace -2 -4)
                                  (("1"
                                    (typepred "p1" "p2")
                                    (("1"
                                      (replace -2 -9)
                                      (("1"
                                        (replace -4 -8)
                                        (("1"
                                          (replace -8 1)
                                          (("1" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (typepred "p2-p1" "p2" "p1")
                            (("2" (expand "max")
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (lemma "dist_1")
                (("2" (inst -1 "1" "p2" "p1")
                  (("1" (replace -1 1)
                    (("1" (lemma "one_idx")
                      (("1" (inst-cp -1 "p2")
                        (("1" (inst -1 "p1")
                          (("1" (replace -1 1)
                            (("1" (replace -2 1)
                              (("1"
                                (assert)
                                (("1"
                                  (lemma "asso_sub_commute")
                                  (("1"
                                    (inst -1 "p1" "p2" "p1")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (replace -1 1 rl)
                                        (("1"
                                          (lemma "sub_self")
                                          (("1"
                                            (inst -1 "p1")
                                            (("1"
                                              (typepred "p1")
                                              (("1"
                                                (replace -2 -3)
                                                (("1"
                                                  (replace -3 1)
                                                  (("1"
                                                    (lemma
                                                     "add_commute")
                                                    (("1"
                                                      (inst
                                                       -1
                                                       "zero_vec(n)"
                                                       "p2")
                                                      (("1"
                                                        (replace -1 1)
                                                        (("1"
                                                          (lemma
                                                           "zero_id")
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "p2")
                                                            (("1"
                                                              (typepred
                                                               "p2")
                                                              (("1"
                                                                (replace
                                                                 -2
                                                                 -3)
                                                                (("1"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (typepred "p2")
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (expand
                                                         "zero_vec"
                                                         1)
                                                        (("3"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (typepred "p1")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (typepred "p2")
                                      (("2" (assert) nil nil))
                                      nil)
                                     ("3"
                                      (typepred "p1")
                                      (("3" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (typepred "p1")
                            (("2" (assert) nil nil)) nil))
                          nil)
                         ("2" (typepred "p2") (("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (typepred "p1") (("2" (assert) nil nil)) nil)
                   ("3" (typepred "p2") (("3" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((domain_connect? const-decl "bool" derivative_domain_multi nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" derivative_domain_multi nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (<= const-decl "bool" reals nil)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (* const-decl "VectorN(length(v2))" matrices matrices)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (Vector type-eq-decl nil matrices matrices)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (p2 skolem-const-decl "VectorN(n)" derivative_domain_multi nil)
    (p1 skolem-const-decl "VectorN(n)" derivative_domain_multi nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (odd? const-decl "bool" integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (mult_zero formula-decl nil vector_arithmetic nil)
    (zero_id formula-decl nil vector_arithmetic nil)
    (one_idx formula-decl nil vector_arithmetic nil)
    (asso_sub_commute formula-decl nil vector_arithmetic nil)
    (sub_self formula-decl nil vector_arithmetic nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (add_commute formula-decl nil vector_arithmetic nil)
    (dist_1 formula-decl nil vector_arithmetic nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   shostak))
 (dd_norm_equiv 0
  (dd_norm_equiv-1 nil 3740928027
   ("" (skeep)
    (("" (lemma "equiv_norm")
      (("" (split)
        (("1" (flatten)
          (("1" (expand "deriv_domain?" -1)
            (("1" (inst -1 "norm_inf(n)")
              (("1" (inst 1 "norm_inf(n)")
                (("1" (expand "deriv_domain?") (("1" (propax) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (flatten)
          (("2" (skeep)
            (("2" (expand "deriv_domain?")
              (("2" (skeep)
                (("2" (inst -2 "nn" "nn!1")
                  (("2" (expand "equiv?")
                    (("2" (skeep)
                      (("2" (skeep)
                        (("2" (inst -1 "e/c2" "p")
                          (("2" (skeep)
                            (("2" (inst -2 "v")
                              (("2"
                                (flatten)
                                (("2"
                                  (mult-by -1 "c2")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (inst 1 "v")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((n formal-const-decl "posnat" derivative_domain_multi nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (equiv_norm formula-decl nil norms_equiv nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices matrices)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (Vector type-eq-decl nil matrices matrices)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (both_sides_times_pos_lt1 formula-decl nil real_props nil)
    (div_cancel2 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (equiv? const-decl "bool" norms_equiv nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (norm? const-decl "bool" norms nil)
    (norm_inf const-decl "(norm?(m))" norms nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil))
   shostak))
 (dd_directionv_implies_dd 0
  (dd_directionv_implies_dd-1 nil 3741351406
   ("" (skeep)
    (("" (skeep)
      (("" (expand "deriv_domain?")
        (("" (skeep)
          (("" (expand "deriv_domain_direction?")
            (("" (skeep)
              (("" (typepred "v")
                (("" (inst -4 "e/nn(v)" "p")
                  (("1" (skeep)
                    (("1" (inst 2 "delta*v")
                      (("1" (assert)
                        (("1" (mult-by -3 "nn(v)")
                          (("1" (typepred "nn")
                            (("1" (expand "norm?")
                              (("1"
                                (flatten)
                                (("1"
                                  (inst -2 "v" "delta")
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (typepred "nn")
                            (("2" (expand "norm?")
                              (("2"
                                (flatten)
                                (("2"
                                  (inst -3 "v")
                                  (("2"
                                    (flatten)
                                    (("2"
                                      (hide -1 -2 -5)
                                      (("2"
                                        (typepred "nn(v)")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (split)
                        (("1" (typepred "delta*v" "v")
                          (("1" (assert) nil nil)) nil)
                         ("2" (case "delta * v= zero_vec(n)")
                          (("1" (assert)
                            (("1" (lemma "asso_v")
                              (("1"
                                (inst -1 "1/delta" "delta" "v")
                                (("1"
                                  (case "v = 1/delta*zero_vec(n)")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (case
                                       "NOT 1 / delta * delta = 1")
                                      (("1" (assert) nil nil)
                                       ("2"
                                        (replace -1 -3)
                                        (("2"
                                          (lemma "scal_zero")
                                          (("2"
                                            (inst -1 "1/delta" "n")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (assert)
                                    (("2"
                                      (case
                                       "NOT 1 / delta * delta = 1")
                                      (("1" (assert) nil nil)
                                       ("2"
                                        (replace -1 -2)
                                        (("2"
                                          (lemma "one_idx")
                                          (("2"
                                            (inst -1 "v")
                                            (("2"
                                              (replace -1 -3 lr)
                                              (("2"
                                                (case
                                                 "1/delta*delta * v = 1/delta*zero_vec(n)")
                                                (("1" (assert) nil nil)
                                                 ("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (typepred "e")
                    (("2" (typepred "nn")
                      (("2" (expand "norm?")
                        (("2" (flatten)
                          (("2" (inst -3 "v")
                            (("2" (hide -1 -2 -4)
                              (("2"
                                (flatten)
                                (("2"
                                  (split)
                                  (("1" (propax) nil nil)
                                   ("2"
                                    (split)
                                    (("1" (propax) nil nil)
                                     ("2"
                                      (assert)
                                      (("2"
                                        (split)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (mult-by 1 "nn(v)")
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (mult-by 1 "nn(v)")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (assert)
                    (("3" (typepred "nn")
                      (("3" (expand "norm?" -1)
                        (("3" (flatten)
                          (("3" (inst -3 "v")
                            (("3" (hide -1 -2 -4)
                              (("3" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("4" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (v skolem-const-decl "{vv: VectorN(n) | vv /= zero_vec(n)}"
     derivative_domain_multi nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (norm? const-decl "bool" norms nil)
    (nn skolem-const-decl "(norm?(n))" derivative_domain_multi nil)
    (e skolem-const-decl "posreal" derivative_domain_multi nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (Vector type-eq-decl nil matrices matrices)
    (* const-decl "VectorN(length(v2))" matrices matrices)
    (D skolem-const-decl "domain[n]" derivative_domain_multi nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (p skolem-const-decl "(D)" derivative_domain_multi nil)
    (delta skolem-const-decl "{delta: posreal | D(p + delta * v)}"
     derivative_domain_multi nil)
    (both_sides_times_pos_lt1 formula-decl nil real_props nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (div_cancel2 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (asso_v formula-decl nil vector_arithmetic nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (scal_zero formula-decl nil vector_arithmetic nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (one_idx formula-decl nil vector_arithmetic nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (both_sides_times_pos_le1_imp formula-decl nil extra_real_props
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (both_sides_times_pos_ge1 formula-decl nil real_props nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n formal-const-decl "posnat" derivative_domain_multi nil)
    (VectorN type-eq-decl nil matrices matrices)
    (/= const-decl "boolean" notequal nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (deriv_domain_direction? const-decl "bool" derivative_domain_multi
     nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil))
   shostak))
 (dd_all_direction_implies_dd_all_partial 0
  (dd_all_direction_implies_dd_all_partial-1 nil 3852709923
   ("" (skeep)
    (("" (expand "deriv_domain_all_direction?")
      (("" (expand "deriv_domain_all_partial?")
        (("" (skeep)
          (("" (inst -1 "v")
            (("" (expand "deriv_domain_partial?")
              (("" (expand "deriv_domain_direction?")
                (("" (skeep)
                  (("" (inst -1 "e" "p")
                    (("" (skeep) (("" (inst 1 "delta") nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((deriv_domain_all_direction? const-decl "bool"
     derivative_domain_multi nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (deriv_domain_partial? const-decl "bool" derivative_domain_multi
     nil)
    (* const-decl "VectorN(length(v2))" matrices matrices)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (Vector type-eq-decl nil matrices matrices)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain_direction? const-decl "bool" derivative_domain_multi
     nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" derivative_domain_multi nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (deriv_domain_all_partial? const-decl "bool"
     derivative_domain_multi nil))
   shostak))
 (dd_direction_implies_dd_directionv 0
  (dd_direction_implies_dd_directionv-1 nil 3741352600
   ("" (skeep)
    (("" (expand "deriv_domain_all_direction?") (("" (propax) nil nil))
      nil))
    nil)
   ((deriv_domain_all_direction? const-decl "bool"
     derivative_domain_multi nil))
   shostak))
 (dd_direction_implies_dd 0
  (dd_direction_implies_dd-2 nil 3741430533
   ("" (lemma "dd_directionv_implies_dd")
    (("" (lemma "dd_direction_implies_dd_directionv")
      (("" (skeep)
        (("" (inst -1 "D")
          (("" (inst -2 "D")
            (("" (assert)
              (("" (inst -1 "e(n,0)")
                (("1" (assert)
                  (("1" (inst 1 "e(n,0)")
                    (("1" (assert)
                      (("1" (expand "e" 1)
                        (("1" (expand "zero_vec" -1)
                          (("1" (assert)
                            (("1" (decompose-equality -1) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((dd_direction_implies_dd_directionv formula-decl nil
     derivative_domain_multi nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n formal-const-decl "posnat" derivative_domain_multi nil)
    (VectorN type-eq-decl nil matrices matrices)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (/= const-decl "boolean" notequal nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (e def-decl "VectorN(m)" vector_arithmetic nil)
    (< const-decl "bool" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (dd_directionv_implies_dd formula-decl nil derivative_domain_multi
     nil))
   nil)
  (dd_direction_implies_dd-1 nil 3741430519 ("" (postpone) nil nil) nil
   shostak))
 (dd_all_partial_implies_dd 0
  (dd_all_partial_implies_dd-1 nil 3852710671
   ("" (skeep)
    (("" (lemma "dd_norm_equiv")
      (("" (inst -1 "D")
        (("" (assert)
          (("" (inst 1 "norm_inf(n)")
            (("" (hide 2)
              (("" (expand "deriv_domain?")
                (("" (expand "deriv_domain_all_partial?")
                  (("" (skeep)
                    (("" (expand "deriv_domain_partial?")
                      (("" (inst -1 "e(n,0)")
                        (("1" (inst -1 "e" "p")
                          (("1" (skeep)
                            (("1" (typepred "delta")
                              (("1"
                                (inst 1 "delta * e(n, 0)")
                                (("1"
                                  (typepred "norm_inf(n)")
                                  (("1"
                                    (expand "norm?" -1)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (inst -2 "e(n,0)" "delta")
                                        (("1"
                                          (replace -2)
                                          (("1"
                                            (lemma "norm_inf_e")
                                            (("1"
                                              (inst -1 "n" "0")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (typepred "delta * e(n,0)" "e(n,0)")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (typepred "delta")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (case
                                           "delta * e(n, 0) = zero_vec(n)")
                                          (("1"
                                            (grind)
                                            (("1"
                                              (decompose-equality -1)
                                              nil
                                              nil)
                                             ("2"
                                              (decompose-equality -1)
                                              nil
                                              nil))
                                            nil)
                                           ("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((dd_norm_equiv formula-decl nil derivative_domain_multi nil)
    (deriv_domain_all_partial? const-decl "bool"
     derivative_domain_multi nil)
    (deriv_domain_partial? const-decl "bool" derivative_domain_multi
     nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (/= const-decl "boolean" notequal nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (Vector type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (* const-decl "VectorN(length(v2))" matrices matrices)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (add def-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (scal def-decl "VectorN(length(v2))" matrices matrices)
    (below type-eq-decl nil naturalnumbers nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (norm_inf_e formula-decl nil norms nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (delta skolem-const-decl "{delta: nzreal | D(p + delta * e(n, 0))}"
     derivative_domain_multi nil)
    (p skolem-const-decl "(D)" derivative_domain_multi nil)
    (D skolem-const-decl "domain[n]" derivative_domain_multi nil)
    (e def-decl "VectorN(m)" vector_arithmetic nil)
    (< const-decl "bool" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (norm? const-decl "bool" norms nil)
    (norm_inf const-decl "(norm?(m))" norms nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" derivative_domain_multi nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (dd_direction_implies_dd_e_direction 0
  (dd_direction_implies_dd_e_direction-1 nil 3741532527
   ("" (skeep)
    (("" (lemma "dd_direction_implies_dd_directionv")
      (("" (inst -1 "D")
        (("" (assert)
          (("" (expand "deriv_domain_e_direction?")
            (("" (skeep)
              (("" (inst -1 "e(n,i)")
                (("" (assert)
                  (("" (expand "deriv_domain_direction?")
                    (("" (propax) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((dd_direction_implies_dd_directionv formula-decl nil
     derivative_domain_multi nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (deriv_domain_direction? const-decl "bool" derivative_domain_multi
     nil)
    (deriv_domain_direction? const-decl "bool" derivative_domain_multi
     nil)
    (below type-eq-decl nil naturalnumbers nil)
    (e def-decl "VectorN(m)" vector_arithmetic nil)
    (< const-decl "bool" reals nil)
    (deriv_domain_e_direction? const-decl "bool"
     derivative_domain_multi nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" derivative_domain_multi nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (dd_partial_implies_dd_e_direction 0
  (dd_partial_implies_dd_e_direction-1 nil 3852711136
   ("" (skeep)
    (("" (expand "deriv_domain_all_partial?")
      (("" (expand "deriv_domain_e_partial?")
        (("" (skeep)
          (("" (inst -1 "e(n,i)")
            (("" (assert)
              (("" (expand "deriv_domain_partial?")
                (("" (propax) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((deriv_domain_all_partial? const-decl "bool"
     derivative_domain_multi nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (deriv_domain_partial? const-decl "bool" derivative_domain_multi
     nil)
    (deriv_domain_partial? const-decl "bool" derivative_domain_multi
     nil)
    (below type-eq-decl nil naturalnumbers nil)
    (e def-decl "VectorN(m)" vector_arithmetic nil)
    (< const-decl "bool" reals nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" derivative_domain_multi nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (deriv_domain_e_partial? const-decl "bool" derivative_domain_multi
     nil))
   shostak))
 (dd_direction_implies_dd_e_partial 0
  (dd_direction_implies_dd_e_partial-1 nil 3852310176
   ("" (lemma "dd_direction_implies_dd_e_direction")
    (("" (lemma "e_direction_e_partial")
      (("" (skeep)
        (("" (inst?) (("" (inst?) (("" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((e_direction_e_partial formula-decl nil derivative_domain_multi
     nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n formal-const-decl "posnat" derivative_domain_multi nil)
    (VectorN type-eq-decl nil matrices matrices)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (dd_direction_implies_dd_e_direction formula-decl nil
     derivative_domain_multi nil))
   shostak))
 (dd_vdirection_implies_dd_partial 0
  (dd_vdirection_implies_dd_partial-1 nil 3851014555
   ("" (skeep)
    (("" (expand "deriv_domain_direction?")
      (("" (expand "deriv_domain_partial?")
        (("" (skeep)
          (("" (inst -1 "e" "p")
            (("" (skeep) (("" (inst 1 "delta") nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((deriv_domain_direction? const-decl "bool" derivative_domain_multi
     nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (* const-decl "VectorN(length(v2))" matrices matrices)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (Vector type-eq-decl nil matrices matrices)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" derivative_domain_multi nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (deriv_domain_partial? const-decl "bool" derivative_domain_multi
     nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   shostak))
 (dd_edirection_implies_dd_partial 0
  (dd_edirection_implies_dd_partial-1 nil 3852107713
   ("" (skeep)
    (("" (expand "deriv_domain_e_direction?" -1)
      (("" (lemma "dd_vdirection_implies_dd_partial")
        (("" (inst -2 "i")
          (("" (inst?)
            (("1" (assert)
              (("1" (expand "deriv_domain_direction?")
                (("1" (propax) nil nil)) nil))
              nil)
             ("2" (rewrite "e_not_zero") nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((deriv_domain_e_direction? const-decl "bool"
     derivative_domain_multi nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n formal-const-decl "posnat" derivative_domain_multi nil)
    (below type-eq-decl nil naturalnumbers nil)
    (e_not_zero formula-decl nil vector_arithmetic nil)
    (deriv_domain_direction? const-decl "bool" derivative_domain_multi
     nil)
    (deriv_domain_direction? const-decl "bool" derivative_domain_multi
     nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (list type-decl nil list_adt nil)
    (/= const-decl "boolean" notequal nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices matrices)
    (e def-decl "VectorN(m)" vector_arithmetic nil)
    (i skolem-const-decl "below(n)" derivative_domain_multi nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (dd_vdirection_implies_dd_partial formula-decl nil
     derivative_domain_multi nil))
   shostak))
 (dd_epartial_implies_dd_partial 0
  (dd_epartial_implies_dd_partial-1 nil 3852310216
   ("" (skeep)
    (("" (expand "deriv_domain_partial?")
      (("" (expand "deriv_domain_e_partial?")
        (("" (skeep)
          (("" (inst -1 "i")
            (("" (expand "deriv_domain_partial?")
              (("" (inst -1 "e_1" "p") nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((deriv_domain_partial? const-decl "bool" derivative_domain_multi
     nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (length def-decl "nat" list_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (n formal-const-decl "posnat" derivative_domain_multi nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (deriv_domain_e_partial? const-decl "bool" derivative_domain_multi
     nil))
   shostak))
 (dd_direction_implies_dd_partial 0
  (dd_direction_implies_dd_partial-1 nil 3851014580
   ("" (skeep)
    (("" (expand "deriv_domain_all_direction?")
      (("" (expand "deriv_domain_partial?")
        (("" (skeep)
          (("" (inst -1 "v")
            (("" (expand "deriv_domain_direction?")
              (("" (inst -1 "e" "p")
                (("" (skeep) (("" (inst?) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((deriv_domain_all_direction? const-decl "bool"
     derivative_domain_multi nil)
    (deriv_domain_direction? const-decl "bool" derivative_domain_multi
     nil)
    (/= const-decl "boolean" notequal nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (Vector type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (* const-decl "VectorN(length(v2))" matrices matrices)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" derivative_domain_multi nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (deriv_domain_partial? const-decl "bool" derivative_domain_multi
     nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   shostak))
 (dd_e_direction_implies_dd 0
  (dd_e_direction_implies_dd-1 nil 3741443308
   ("" (skeep)
    (("" (lemma "dd_directionv_implies_dd")
      (("" (inst -1 "D")
        (("" (expand "deriv_domain_e_direction?")
          (("" (inst -2 "0")
            (("1" (split -1)
              (("1" (propax) nil nil)
               ("2" (inst 1 "e(n,0)")
                (("1" (expand "deriv_domain_direction?")
                  (("1" (propax) nil nil)) nil)
                 ("2" (expand "e" 1)
                  (("2" (expand "zero_vec" -1)
                    (("2" (typepred "n")
                      (("2" (assert)
                        (("2" (decompose-equality -2) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (assert) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((dd_directionv_implies_dd formula-decl nil derivative_domain_multi
     nil)
    (deriv_domain_e_direction? const-decl "bool"
     derivative_domain_multi nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (deriv_domain_direction? const-decl "bool" derivative_domain_multi
     nil)
    (deriv_domain_direction? const-decl "bool" derivative_domain_multi
     nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (e def-decl "VectorN(m)" vector_arithmetic nil)
    (/= const-decl "boolean" notequal nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" derivative_domain_multi nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (dd_partial_implies_dd 0
  (dd_partial_implies_dd-1 nil 3851071994
   ("" (skeep)
    (("" (expand "deriv_domain?")
      (("" (skeep)
        (("" (expand "deriv_domain_partial?")
          (("" (skeep)
            (("" (typepred "v")
              (("" (inst -4 "e/nn(v)" "p")
                (("1" (skeep)
                  (("1" (inst 2 "delta*v")
                    (("1" (assert)
                      (("1" (mult-by -3 "nn(v)")
                        (("1" (typepred "nn")
                          (("1" (expand "norm?")
                            (("1" (flatten)
                              (("1"
                                (inst -2 "v" "delta")
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (typepred "nn")
                          (("2" (expand "norm?")
                            (("2" (flatten)
                              (("2"
                                (inst -3 "v")
                                (("2"
                                  (flatten)
                                  (("2"
                                    (hide -1 -2 -5)
                                    (("2"
                                      (typepred "nn(v)")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (split)
                      (("1" (typepred "delta*v" "v")
                        (("1" (assert) nil nil)) nil)
                       ("2" (case "delta * v= zero_vec(n)")
                        (("1" (assert)
                          (("1" (lemma "asso_v")
                            (("1" (inst -1 "1/delta" "delta" "v")
                              (("1"
                                (case "v = 1/delta*zero_vec(n)")
                                (("1"
                                  (assert)
                                  (("1"
                                    (case "NOT 1 / delta * delta = 1")
                                    (("1" (assert) nil nil)
                                     ("2"
                                      (replace -1 -3)
                                      (("2"
                                        (lemma "scal_zero")
                                        (("2"
                                          (inst -1 "1/delta" "n")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (assert)
                                  (("2"
                                    (case "NOT 1 / delta * delta = 1")
                                    (("1" (assert) nil nil)
                                     ("2"
                                      (replace -1 -2)
                                      (("2"
                                        (lemma "one_idx")
                                        (("2"
                                          (inst -1 "v")
                                          (("2"
                                            (replace -1 -3 lr)
                                            (("2"
                                              (case
                                               "1/delta*delta * v = 1/delta*zero_vec(n)")
                                              (("1" (assert) nil nil)
                                               ("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (typepred "e")
                  (("2" (typepred "nn")
                    (("2" (expand "norm?")
                      (("2" (flatten)
                        (("2" (inst -3 "v")
                          (("2" (hide -1 -2 -4)
                            (("2" (flatten)
                              (("2"
                                (split)
                                (("1" (assert) nil nil)
                                 ("2"
                                  (split)
                                  (("1" (propax) nil nil)
                                   ("2"
                                    (assert)
                                    (("2"
                                      (split)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (mult-by 1 "nn(v)")
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (mult-by 1 "nn(v)")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (assert)
                  (("3" (typepred "nn")
                    (("3" (expand "norm?" -1)
                      (("3" (flatten)
                        (("3" (inst -3 "v")
                          (("3" (hide -1 -2 -4)
                            (("3" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("4" (assert) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (deriv_domain_partial? const-decl "bool" derivative_domain_multi
     nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (/= const-decl "boolean" notequal nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" derivative_domain_multi nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (both_sides_times_pos_ge1 formula-decl nil real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (both_sides_times_pos_le1_imp formula-decl nil extra_real_props
     nil)
    (one_idx formula-decl nil vector_arithmetic nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (scal_zero formula-decl nil vector_arithmetic nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (asso_v formula-decl nil vector_arithmetic nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (div_cancel2 formula-decl nil real_props nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (both_sides_times_pos_lt1 formula-decl nil real_props nil)
    (delta skolem-const-decl "{delta: nzreal | D(p + delta * v)}"
     derivative_domain_multi nil)
    (p skolem-const-decl "(D)" derivative_domain_multi nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (D skolem-const-decl "domain[n]" derivative_domain_multi nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (* const-decl "VectorN(length(v2))" matrices matrices)
    (Vector type-eq-decl nil matrices matrices)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (e skolem-const-decl "posreal" derivative_domain_multi nil)
    (nn skolem-const-decl "(norm?(n))" derivative_domain_multi nil)
    (norm? const-decl "bool" norms nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (v skolem-const-decl "{v: VectorN(n) | v /= zero_vec(length(v))}"
     derivative_domain_multi nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   shostak))
 (dd_e_partial_implies_dd 0
  (dd_e_partial_implies_dd-1 nil 3852310878
   ("" (lemma "dd_partial_implies_dd")
    (("" (skeep)
      (("" (expand "deriv_domain_e_partial?" -2)
        (("" (inst -2 "0")
          (("1" (inst -1 "D" "e(n,0)")
            (("1" (assert) nil nil)
             ("2" (hide -1 2)
              (("2" (expand "zero_vec")
                (("2" (expand "e")
                  (("2" (typepred "n")
                    (("2" (assert)
                      (("2" (expand "length" -2)
                        (("2" (assert)
                          (("2" (decompose-equality -2) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (assert) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (n formal-const-decl "posnat" derivative_domain_multi nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil naturalnumbers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (list type-decl nil list_adt nil)
    (/= const-decl "boolean" notequal nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices matrices)
    (e def-decl "VectorN(m)" vector_arithmetic nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (deriv_domain_e_partial? const-decl "bool" derivative_domain_multi
     nil)
    (dd_partial_implies_dd formula-decl nil derivative_domain_multi
     nil))
   shostak))
 (dd_partial_implies_scal_partial_TCC1 0
  (dd_partial_implies_scal_partial_TCC1-1 nil 3852028936
   ("" (subtype-tcc) nil nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n formal-const-decl "posnat" derivative_domain_multi nil)
    (VectorN type-eq-decl nil matrices matrices)
    (deriv_domain_partial? const-decl "bool" derivative_domain_multi
     nil)
    (* const-decl "VectorN(length(v2))" matrices matrices))
   nil
   (dd_partial_implies_scal_partial subtype
    "matrices.*(derivative_domain_multi.c, derivative_domain_multi.v)"
    "matrices.VectorN(derivative_domain_multi.n)")))
 (dd_partial_implies_scal_partial 0
  (dd_partial_implies_scal_partial-1 nil 3852028983
   ("" (skeep)
    (("" (expand "deriv_domain_partial?")
      (("" (skeep 1)
        (("" (case "c=0")
          (("1" (inst 1 "e/2")
            (("1" (grind) nil nil)
             ("2" (lemma "mult_zero")
              (("2" (inst -1 "v")
                (("1" (replace -2 1)
                  (("1" (replace -1 1)
                    (("1" (lemma "scal_zero")
                      (("1" (inst -1 "e/2" "length(v)")
                        (("1" (replace -1)
                          (("1" (assert)
                            (("1" (lemma "zero_id")
                              (("1"
                                (assert)
                                (("1"
                                  (typepred "v")
                                  (("1"
                                    (hide -1)
                                    (("1"
                                      (inst -2 "p")
                                      (("1" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (typepred "v") (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil)
           ("2" (case "c>0")
            (("1" (inst -2 "e*c" "p")
              (("1" (assert)
                (("1" (skeep)
                  (("1" (inst 2 "delta/c")
                    (("1" (div-by -2 "c")
                      (("1" (lemma "abs_div")
                        (("1" (inst?)
                          (("1" (assert)
                            (("1" (replace -1 2)
                              (("1"
                                (expand "abs" 2 2)
                                (("1" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert)
                      (("2" (typepred "delta")
                        (("2"
                          (case "p + delta * v = p + delta / c * (c * v)")
                          (("1" (assert) nil nil)
                           ("2" (assert)
                            (("2" (hide 2 3)
                              (("2"
                                (hide -)
                                (("2"
                                  (lemma "add_cancel")
                                  (("2"
                                    (case
                                     "delta * v = delta / c * (c * v)")
                                    (("1" (assert) nil nil)
                                     ("2"
                                      (hide -1)
                                      (("2"
                                        (hide 2)
                                        (("2"
                                          (lemma "asso_v")
                                          (("2"
                                            (inst -1 "delta/c" "c" "v")
                                            (("1" (assert) nil nil)
                                             ("2"
                                              (typepred "v")
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (assert)
                (("2" (split 1)
                  (("1" (assert)
                    (("1" (div-by 1 "c")
                      (("1" (typepred "e") (("1" (assert) nil nil))
                        nil))
                      nil))
                    nil)
                   ("2" (div-by 1 "c")
                    (("2" (typepred "e") (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (case "c<0")
              (("1" (inst -2 "e*abs(c)" "p")
                (("1" (skeep)
                  (("1" (inst 3 "delta/c")
                    (("1" (assert)
                      (("1" (lemma "abs_div")
                        (("1" (inst?)
                          (("1" (div-by -3 "abs(c)")
                            (("1" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil)
                     ("2"
                      (case "p + delta * v = p + delta / c * (c * v)")
                      (("1" (assert) nil nil)
                       ("2" (assert)
                        (("2" (hide 2 3)
                          (("2" (hide -)
                            (("2" (lemma "add_cancel")
                              (("2"
                                (case
                                 "delta * v = delta / c * (c * v)")
                                (("1" (assert) nil nil)
                                 ("2"
                                  (hide -1)
                                  (("2"
                                    (hide 2)
                                    (("2"
                                      (lemma "asso_v")
                                      (("2"
                                        (inst -1 "delta/c" "c" "v")
                                        (("1" (assert) nil nil)
                                         ("2"
                                          (typepred "v")
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("3" (assert) nil nil))
                    nil))
                  nil)
                 ("2" (assert)
                  (("2" (div-by 1 "c")
                    (("2" (typepred "e")
                      (("2" (assert)
                        (("2" (div-by 1 "abs(c)")
                          (("2" (typepred "e") (("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (assert) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((deriv_domain_partial? const-decl "bool" derivative_domain_multi
     nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (mult_zero formula-decl nil vector_arithmetic nil)
    (scal_zero formula-decl nil vector_arithmetic nil)
    (zero_id formula-decl nil vector_arithmetic nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (list type-decl nil list_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n formal-const-decl "posnat" derivative_domain_multi nil)
    (VectorN type-eq-decl nil matrices matrices)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (D skolem-const-decl "domain[n]" derivative_domain_multi nil)
    (Vector type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (p skolem-const-decl "(D)" derivative_domain_multi nil)
    (* const-decl "VectorN(length(v2))" matrices matrices)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (e skolem-const-decl "posreal" derivative_domain_multi nil)
    (c skolem-const-decl "real" derivative_domain_multi nil)
    (v skolem-const-decl "VectorN(n)" derivative_domain_multi nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (< const-decl "bool" reals nil)
    (delta skolem-const-decl "{delta: nzreal | D(p + delta * v)}"
     derivative_domain_multi nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (add_cancel formula-decl nil vector_arithmetic nil)
    (asso_v formula-decl nil vector_arithmetic nil)
    (both_sides_div_pos_lt1 formula-decl nil real_props nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (times_div_cancel2 formula-decl nil extra_real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (abs_div formula-decl nil real_props nil)
    (delta skolem-const-decl "{delta: nzreal | D(p + delta * v)}"
     derivative_domain_multi nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (both_sides_div_pos_ge1 formula-decl nil real_props nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (both_sides_div_pos_gt1 formula-decl nil real_props nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   shostak))
 (dd_scal_partial_implies_partial_TCC1 0
  (dd_scal_partial_implies_partial_TCC1-1 nil 3852028936
   ("" (subtype-tcc) nil nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n formal-const-decl "posnat" derivative_domain_multi nil)
    (VectorN type-eq-decl nil matrices matrices)
    (/= const-decl "boolean" notequal nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (* const-decl "VectorN(length(v2))" matrices matrices))
   nil
   (dd_scal_partial_implies_partial subtype
    "matrices.*(derivative_domain_multi.c, derivative_domain_multi.v)"
    "matrices.VectorN(derivative_domain_multi.n)")))
 (dd_scal_partial_implies_partial 0
  (dd_scal_partial_implies_partial-1 nil 3852036811
   ("" (skeep)
    (("" (expand "deriv_domain_partial?")
      (("" (skeep)
        (("" (inst -1 "e/abs(c)" "p")
          (("" (skeep)
            (("" (inst 1 "delta*c")
              (("1" (lemma "abs_mult")
                (("1" (inst?)
                  (("1" (replace -1)
                    (("1" (assert)
                      (("1" (mult-by -2 "abs(c)") nil nil)) nil))
                    nil))
                  nil))
                nil)
               ("2" (assert)
                (("2" (typepred "p" "delta")
                  (("2" (hide -1)
                    (("2" (assert)
                      (("2" (lemma "asso_v")
                        (("2" (inst?) (("2" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((deriv_domain_partial? const-decl "bool" derivative_domain_multi
     nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (> const-decl "bool" reals nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n formal-const-decl "posnat" derivative_domain_multi nil)
    (VectorN type-eq-decl nil matrices matrices)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (D skolem-const-decl "domain[n]" derivative_domain_multi nil)
    (Vector type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (p skolem-const-decl "(D)" derivative_domain_multi nil)
    (* const-decl "VectorN(length(v2))" matrices matrices)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (c skolem-const-decl "nzreal" derivative_domain_multi nil)
    (v skolem-const-decl "VectorN(n)" derivative_domain_multi nil)
    (delta skolem-const-decl "{delta: nzreal | D(p + delta * (c * v))}"
     derivative_domain_multi nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posreal_times_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (both_sides_times_pos_lt1 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (div_cancel2 formula-decl nil real_props nil)
    (abs_mult formula-decl nil real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (asso_v formula-decl nil vector_arithmetic nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   shostak))
 (dd_zero 0
  (dd_zero-1 nil 3741507017
   ("" (skeep)
    (("" (expand "deriv_domain_direction?")
      (("" (skeep)
        (("" (inst 1 "e/2")
          (("1" (expand "abs" 1) (("1" (assert) nil nil)) nil)
           ("2" (assert)
            (("2" (lemma "scal_zero")
              (("2" (typepred "p")
                (("2" (inst -4 "e/2" "n")
                  (("2" (lemma "zero_id")
                    (("2" (inst -1 "p")
                      (("2" (replace -3 -1)
                        (("2" (replace -5 1)
                          (("2" (replace -1 1) (("2" (propax) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((deriv_domain_direction? const-decl "bool" derivative_domain_multi
     nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (e skolem-const-decl "posreal" derivative_domain_multi nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "VectorN(length(v2))" matrices matrices)
    (p skolem-const-decl "(D)" derivative_domain_multi nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (Vector type-eq-decl nil matrices matrices)
    (D skolem-const-decl "domain[n]" derivative_domain_multi nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" derivative_domain_multi nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (scal_zero formula-decl nil vector_arithmetic nil)
    (zero_id formula-decl nil vector_arithmetic nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   shostak))
 (dd_zero_partial 0
  (dd_zero_partial-1 nil 3852023532
   ("" (skeep)
    (("" (expand "deriv_domain_partial?")
      (("" (skeep)
        (("" (inst 1 "e/2")
          (("1" (expand "abs" 1) (("1" (assert) nil nil)) nil)
           ("2" (assert)
            (("2" (lemma "scal_zero")
              (("2" (typepred "p")
                (("2" (inst -4 "e/2" "n")
                  (("2" (lemma "zero_id")
                    (("2" (inst -1 "p")
                      (("2" (replace -3 -1)
                        (("2" (replace -5 1)
                          (("2" (replace -1 1) (("2" (propax) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((deriv_domain_partial? const-decl "bool" derivative_domain_multi
     nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (e skolem-const-decl "posreal" derivative_domain_multi nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "VectorN(length(v2))" matrices matrices)
    (p skolem-const-decl "(D)" derivative_domain_multi nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (Vector type-eq-decl nil matrices matrices)
    (D skolem-const-decl "domain[n]" derivative_domain_multi nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" derivative_domain_multi nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (scal_zero formula-decl nil vector_arithmetic nil)
    (zero_id formula-decl nil vector_arithmetic nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   shostak))
 (domain_direction_scal_TCC1 0
  (domain_direction_scal_TCC1-1 nil 3741507015
   ("" (subtype-tcc) nil nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n formal-const-decl "posnat" derivative_domain_multi nil)
    (VectorN type-eq-decl nil matrices matrices)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain_direction? const-decl "bool" derivative_domain_multi
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (* const-decl "VectorN(length(v2))" matrices matrices))
   nil
   (domain_direction_scal subtype
    "matrices.*(derivative_domain_multi.c, derivative_domain_multi.v)"
    "matrices.VectorN(derivative_domain_multi.n)")))
 (domain_direction_scal 0
  (domain_direction_scal-1 nil 3741507130
   ("" (skeep)
    (("" (case "c=0")
      (("1" (lemma "mult_zero")
        (("1" (inst -1 "v")
          (("1" (replace -2 1)
            (("1" (replace -1 1)
              (("1" (typepred "v")
                (("1" (replace -2 1)
                  (("1" (lemma "dd_zero") (("1" (inst -1 "D") nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (typepred "v") (("2" (assert) nil nil)) nil))
          nil))
        nil)
       ("2" (typepred "D")
        (("2" (expand "deriv_domain_direction?")
          (("2" (skeep)
            (("2" (inst -1 "e*abs(c)" "p")
              (("1" (skeep)
                (("1" (inst 2 "delta/abs(c)")
                  (("1" (lemma "abs_div")
                    (("1" (inst -1 "abs(c)" "delta")
                      (("1" (replace -1 2)
                        (("1" (expand "abs" 2 2)
                          (("1" (assert)
                            (("1" (mult-by 2 "abs(c)")
                              (("1" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert)
                    (("2" (expand "abs" 1)
                      (("2" (lemma "asso_v")
                        (("2" (inst -1 "delta/c" "c" "v")
                          (("1" (replace -1 1)
                            (("1" (assert)
                              (("1"
                                (split)
                                (("1"
                                  (mult-by 1 "c")
                                  (("1" (assert) nil nil))
                                  nil)
                                 ("2"
                                  (mult-by 1 "c")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (typepred "v") (("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (expand "abs" 1 1) (("3" (propax) nil nil))
                    nil))
                  nil))
                nil)
               ("2" (typepred "e" "abs(c)")
                (("2" (assert)
                  (("2" (div-by 1 "abs(c)") (("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (v skolem-const-decl "VectorN(n)" derivative_domain_multi nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" derivative_domain_multi nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (deriv_domain_direction? const-decl "bool" derivative_domain_multi
     nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (dd_zero formula-decl nil derivative_domain_multi nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (mult_zero formula-decl nil vector_arithmetic nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (e skolem-const-decl "posreal" derivative_domain_multi nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (c skolem-const-decl "{cc: real | cc >= 0}" derivative_domain_multi
       nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (/= const-decl "boolean" notequal nil)
    (delta skolem-const-decl "{delta: posreal | D(p + delta * v)}"
     derivative_domain_multi nil)
    (* const-decl "VectorN(length(v2))" matrices matrices)
    (p skolem-const-decl "(D)" derivative_domain_multi nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (Vector type-eq-decl nil matrices matrices)
    (D skolem-const-decl "(deriv_domain_direction?(v))"
     derivative_domain_multi nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (both_sides_times_pos_ge1_imp formula-decl nil extra_real_props
     nil)
    (< const-decl "bool" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (abs_div formula-decl nil real_props nil)
    (both_sides_times_pos_le1_imp formula-decl nil extra_real_props
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (both_sides_times_pos_ge1 formula-decl nil real_props nil)
    (div_cancel2 formula-decl nil real_props nil)
    (asso_v formula-decl nil vector_arithmetic nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (times_div_cancel2 formula-decl nil extra_real_props nil)
    (both_sides_div_pos_gt1 formula-decl nil real_props nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   shostak))
 (domain_direction_scal_real_TCC1 0
  (domain_direction_scal_real_TCC1-1 nil 3741507935
   ("" (subtype-tcc) nil nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n formal-const-decl "posnat" derivative_domain_multi nil)
    (VectorN type-eq-decl nil matrices matrices)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain_both_direction? const-decl "bool"
     derivative_domain_multi nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (deriv_domain_direction? const-decl "bool" derivative_domain_multi
     nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (* const-decl "VectorN(length(v2))" matrices matrices))
   nil
   (domain_direction_scal_real subtype
    "matrices.*(derivative_domain_multi.c, derivative_domain_multi.v)"
    "matrices.VectorN(derivative_domain_multi.n)")))
 (domain_direction_scal_real 0
  (domain_direction_scal_real-1 nil 3741508024
   ("" (skeep)
    (("" (typepred "D")
      (("" (expand "deriv_domain_both_direction?")
        (("" (flatten)
          (("" (case "c>=0")
            (("1" (lemma "domain_direction_scal")
              (("1" (inst -1 "c" "v" "D")
                (("1" (assert)
                  (("1" (expand "deriv_domain_direction?")
                    (("1" (propax) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("2" (case "NOT -c>=0")
              (("1" (assert) nil nil)
               ("2" (lemma "domain_direction_scal")
                (("2" (inst -1 "-c" "-1*v" "D")
                  (("1" (assert)
                    (("1" (lemma "asso_v")
                      (("1" (inst -1 "-c" "-1" "v")
                        (("1" (assert) nil nil)
                         ("2" (typepred "v") (("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (expand "deriv_domain_direction?" 1)
                    (("2" (expand "deriv_domain_direction?" -3)
                      (("2" (skeep)
                        (("2" (inst -3 "e" "p")
                          (("2" (skeep)
                            (("2" (inst 1 "delta") nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((deriv_domain_both_direction? const-decl "bool"
     derivative_domain_multi nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" derivative_domain_multi nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (Vector type-eq-decl nil matrices matrices)
    (* const-decl "VectorN(length(v2))" matrices matrices)
    (asso_v formula-decl nil vector_arithmetic nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (domain_direction_scal formula-decl nil derivative_domain_multi
     nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (deriv_domain_direction? const-decl "bool" derivative_domain_multi
     nil)
    (D skolem-const-decl "(deriv_domain_both_direction?(v))"
     derivative_domain_multi nil)
    (v skolem-const-decl "VectorN(n)" derivative_domain_multi nil)
    (deriv_domain_direction? const-decl "bool" derivative_domain_multi
     nil)
    (c skolem-const-decl "real" derivative_domain_multi nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   shostak))
 (del_neigh_all_mult?_TCC1 0
  (del_neigh_all_mult?_TCC1-1 nil 3740927819
   ("" (skeep)
    (("" (typepred "x-a")
      (("" (assert)
        (("" (typepred "x")
          (("" (typepred "a")
            (("" (expand "max") (("" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((domain type-eq-decl nil domain_vec2real_def nil)
    (n formal-const-decl "posnat" derivative_domain_multi nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (VectorN type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vector type-eq-decl nil matrices matrices)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (del_neigh_all_mult? subtype "derivative_domain_multi.x"
    "(list_adt[real].cons?)")))
 (del_neigh_all_mult?_TCC2 0
  (del_neigh_all_mult?_TCC2-1 nil 3741355842
   ("" (skeep)
    (("" (assert)
      (("" (typepred "a" "x" "a+x")
        (("" (assert) (("" (expand "max") (("" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n formal-const-decl "posnat" derivative_domain_multi nil)
    (VectorN type-eq-decl nil matrices matrices)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (Vector type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (del_neigh_all_mult? subtype
    "(matrices.+)(derivative_domain_multi.a, derivative_domain_multi.x)"
    "matrices.VectorN(derivative_domain_multi.n)")))
 (del_neigh_norm_equiv 0
  (del_neigh_norm_equiv-1 nil 3741354390
   ("" (skeep)
    (("" (lemma "equiv_norm")
      (("" (split)
        (("1" (flatten)
          (("1" (skeep)
            (("1" (expand "del_neigh_all_mult?")
              (("1" (skeep)
                (("1" (inst -2 "nn!1" "nn")
                  (("1" (expand "del_neigh_all_mult?")
                    (("1" (skeep)
                      (("1" (inst -1 "a")
                        (("1" (skeep)
                          (("1" (expand "equiv?" -2)
                            (("1" (skeep)
                              (("1"
                                (inst 1 "delta/c2")
                                (("1"
                                  (skeep)
                                  (("1"
                                    (inst -1 "x")
                                    (("1"
                                      (inst -3 "x")
                                      (("1"
                                        (flatten)
                                        (("1"
                                          (split)
                                          (("1" (propax) nil nil)
                                           ("2"
                                            (mult-by -1 "c2")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (flatten)
          (("2" (expand "del_neigh_all_mult?")
            (("2" (inst -1 "norm_inf(n)")
              (("2" (inst 1 "norm_inf(n)")
                (("2" (skeep)
                  (("2" (expand "del_neigh_all_mult?")
                    (("2" (inst -1 "a") nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((n formal-const-decl "posnat" derivative_domain_multi nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (equiv_norm formula-decl nil norms_equiv nil)
    (norm_inf const-decl "(norm?(m))" norms nil)
    (del_neigh_all_mult? const-decl "bool" derivative_domain_multi nil)
    (del_neigh_all_mult? const-decl "bool" derivative_domain_multi nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (norm? const-decl "bool" norms nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (div_cancel2 formula-decl nil real_props nil)
    (both_sides_times_pos_lt1 formula-decl nil real_props nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (equiv? const-decl "bool" norms_equiv nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices matrices)
    (domain type-eq-decl nil domain_vec2real_def nil))
   shostak))
 (del_neigh_all_lem_mutl 0
  (del_neigh_all_lem_mutl-1 nil 3741363092
   ("" (skeep)
    (("" (lemma "del_neigh_norm_equiv")
      (("" (inst -1 "D")
        (("" (flatten)
          (("" (assert)
            (("" (hide -2)
              (("" (split)
                (("1" (assert)
                  (("1" (expand "deriv_domain?")
                    (("1" (expand "del_neigh_all_mult?")
                      (("1" (skeep)
                        (("1" (hide -2)
                          (("1" (inst -1 "nn")
                            (("1" (expand "del_neigh_all_mult?")
                              (("1"
                                (skeep)
                                (("1"
                                  (inst -1 "p")
                                  (("1"
                                    (skeep)
                                    (("1"
                                      (inst
                                       1
                                       "(min(delta,e)/(nn(e(n,0))*2))*e(n,0)")
                                      (("1"
                                        (inst
                                         -1
                                         "(min(delta,e)/(nn(e(n,0))*2))*e(n,0)")
                                        (("1"
                                          (split)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (typepred "nn")
                                              (("1"
                                                (expand "norm?")
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (hide -1 -3 -4)
                                                    (("1"
                                                      (inst
                                                       -1
                                                       "e(n,0)"
                                                       "(min(delta, e) / (2 * nn(e(n, 0))))")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (replace
                                                           -1
                                                           1)
                                                          (("1"
                                                            (lemma
                                                             "abs_div")
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "(2 * nn(e(n, 0)))"
                                                               "min(delta, e)")
                                                              (("1"
                                                                (replace
                                                                 -1
                                                                 1)
                                                                (("1"
                                                                  (typepred
                                                                   "min(delta, e)")
                                                                  (("1"
                                                                    (expand
                                                                     "abs"
                                                                     1
                                                                     1)
                                                                    (("1"
                                                                      (typepred
                                                                       "nn(e(n, 0))")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (mult-by
                                                                           -1
                                                                           "2")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (expand
                                                                               "abs"
                                                                               1
                                                                               1)
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (typepred "nn")
                                            (("2"
                                              (expand "norm?")
                                              (("2"
                                                (flatten)
                                                (("2"
                                                  (inst
                                                   -2
                                                   "e(n, 0)"
                                                   "(min(delta, e) / (nn(e(n, 0)) * 2))")
                                                  (("2"
                                                    (hide -1 -3 -4)
                                                    (("2"
                                                      (replace -1 1)
                                                      (("2"
                                                        (replace -1 2)
                                                        (("2"
                                                          (lemma
                                                           "abs_div")
                                                          (("2"
                                                            (inst
                                                             -1
                                                             "(nn(e(n, 0)) * 2)"
                                                             "(min(delta, e))")
                                                            (("2"
                                                              (replace
                                                               -1
                                                               1)
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (expand
                                                                   "abs"
                                                                   1
                                                                   1)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (expand
                                                                       "abs"
                                                                       1)
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (typepred
                                           "(min(delta, e) / (2 * nn(e(n, 0)))) * e(n, 0)")
                                          (("2"
                                            (typepred "e(n,0)")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (split)
                                        (("1"
                                          (typepred
                                           "(min(delta, e) / (2 * nn(e(n, 0)))) * e(n, 0)")
                                          (("1"
                                            (typepred "e(n,0)")
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (lemma "zero_scal")
                                          (("2"
                                            (inst
                                             -1
                                             "e(n,0)"
                                             "(min(delta, e) / (2 * nn(e(n, 0))))")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (typepred "e(n,0)")
                                                (("2"
                                                  (hide -1)
                                                  (("2"
                                                    (replace -1 -2)
                                                    (("2"
                                                      (expand
                                                       "zero_vec"
                                                       -2)
                                                      (("2"
                                                        (expand "e" -2)
                                                        (("2"
                                                          (decompose-equality
                                                           -2)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (inst
                                           -1
                                           "(min(delta, e) / (2 * nn(e(n, 0)))) * e(n, 0)")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (typepred "nn")
                                              (("1"
                                                (expand "norm?")
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (hide -1 -3 -4)
                                                    (("1"
                                                      (inst
                                                       -1
                                                       "e(n,0)"
                                                       "(min(delta, e) / (2 * nn(e(n, 0))))")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (replace
                                                           -1
                                                           2)
                                                          (("1"
                                                            (lemma
                                                             "abs_div")
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "(2 * nn(e(n, 0)))"
                                                               "min(delta, e)")
                                                              (("1"
                                                                (replace
                                                                 -1
                                                                 2)
                                                                (("1"
                                                                  (expand
                                                                   "abs"
                                                                   2)
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (typepred
                                             "(min(delta, e) / (2 * nn(e(n, 0)))) * e(n, 0)"
                                             "e(n,0)")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (typepred "nn")
                                        (("3"
                                          (expand "norm?")
                                          (("3"
                                            (flatten)
                                            (("3"
                                              (hide -1 -4 -2)
                                              (("3"
                                                (inst -1 "e(n,0)")
                                                (("3"
                                                  (flatten)
                                                  (("3"
                                                    (mult-by -3 "1/2")
                                                    (("3"
                                                      (assert)
                                                      (("3"
                                                        (expand "e" -2)
                                                        (("3"
                                                          (expand
                                                           "zero_vec"
                                                           -2)
                                                          (("3"
                                                            (decompose-equality
                                                             -2)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("4"
                                        (typepred "(e(n, 0))")
                                        (("4" (assert) nil nil))
                                        nil)
                                       ("5" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (propax) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((del_neigh_norm_equiv formula-decl nil derivative_domain_multi nil)
    (del_neigh_all_mult? const-decl "bool" derivative_domain_multi nil)
    (del_neigh_all_mult? const-decl "bool" derivative_domain_multi nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (posreal_min application-judgement
     "{z: posreal | z <= x AND z <= y}" real_defs nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (< const-decl "bool" reals nil)
    (e def-decl "VectorN(m)" vector_arithmetic nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nn skolem-const-decl "(norm?(n))" derivative_domain_multi nil)
    (p skolem-const-decl "(D)" derivative_domain_multi nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (D skolem-const-decl "domain[n]" derivative_domain_multi nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (e skolem-const-decl "posreal" derivative_domain_multi nil)
    (delta skolem-const-decl "posreal" derivative_domain_multi nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (<= const-decl "bool" reals nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (* const-decl "VectorN(length(v2))" matrices matrices)
    (Vector type-eq-decl nil matrices matrices)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (both_sides_times_pos_ge1_imp formula-decl nil extra_real_props
     nil)
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (abs_div formula-decl nil real_props nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (zero_scal formula-decl nil vector_arithmetic nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (nnrat_times_nnrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (both_sides_times1_imp formula-decl nil extra_real_props nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (norm? const-decl "bool" norms nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" derivative_domain_multi nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil))
   nil))
 (domain_partial_p?_TCC1 0
  (domain_partial_p?_TCC1-1 nil 3841322117
   ("" (skeep)
    (("" (typepred "p+delta*e(n,i)" "p" "delta*e(n,i)" "e(n,i)")
      (("" (assert)
        (("" (hide -1 -3 -6 -8)
          (("" (replace -2)
            (("" (replace -5)
              (("" (replace -4)
                (("" (expand "max " -1) (("" (propax) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((below type-eq-decl nil naturalnumbers nil)
    (e def-decl "VectorN(m)" vector_arithmetic nil)
    (< const-decl "bool" reals nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (* const-decl "VectorN(length(v2))" matrices matrices)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (n formal-const-decl "posnat" derivative_domain_multi nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (VectorN type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vector type-eq-decl nil matrices matrices)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (domain_partial_p? subtype
    "(matrices.+)(derivative_domain_multi.p, matrices.*(derivative_domain_multi.delta, vector_arithmetic.e(derivative_domain_multi.n, derivative_domain_multi.i)))"
    "matrices.VectorN(derivative_domain_multi.n)"))))