derivative_domain_multi[n:posnat]: % Helo
%%n - derivative domain in Rn
THEORY 

%	              Aug 2018 JTS
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%|    define derivative domains  |%
%|    for functions from Rn->R   |%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%-----     %
  BEGIN
%     -----%
  
%--------------------------------------------
%% Importing topology_Rn[n] to have connected
%  domains
%--------------------------------------------

  IMPORTING topology_Rn[n]


%--------------------------------------------
%% define derivative domain
% (for Frechet derivative)
%--------------------------------------------

deriv_domain?(D:domain): bool = FORALL(nn:(norm?(n))): FORALL(e:posreal, p:(D)):
     EXISTS (v: {vv: VectorN(n) | vv /= zero_vec(n) AND D(p+vv)}): nn(v) < e;

%--------------------------------------------
%% define derivative domain in a direction
%  (for directional derivative)
%--------------------------------------------

deriv_domain_direction?(D:domain,v:VectorN(n)): bool =
      FORALL(e:posreal, p:(D)):
      EXISTS (delta: {delta: posreal | D(p+delta*v)}):
      abs(delta)< e

deriv_domain_direction?(v:VectorN(n))(D:domain): bool =
      FORALL(e:posreal, p:(D)):
      EXISTS (delta: {delta: posreal | D(p+delta*v)}):
      abs(delta)< e

%--------------------------------------------
%% define derivative domain in both direction
%  (for partial derivative)
%--------------------------------------------

deriv_domain_partial?(D:domain,v:VectorN(n)): bool =
      FORALL(e:posreal, p:(D)):
      EXISTS (delta: {delta: nzreal | D(p+delta*v)}):
      abs(delta)< e

deriv_domain_partial?(v:VectorN(n))(D:domain): bool =
      FORALL(e:posreal, p:(D)):
      EXISTS (delta: {delta: nzreal | D(p+delta*v)}):
      abs(delta)< e

%--------------------------------------------
%% deriv domain partial and direction connection
%--------------------------------------------

dd_direction_partial: LEMMA
  FORALL(v:VectorN(n), D:(deriv_domain_direction?(v))):
    deriv_domain_partial?(v)(D)

dd_direction_partial_neg: LEMMA
  FORALL(v:VectorN(n), D:(deriv_domain_direction?(-v))):
    deriv_domain_partial?(v)(D)

%--------------------------------------------
%% define derivative domain in all direction
%  (to have gradient and Frechet relationship)
%--------------------------------------------

deriv_domain_all_direction?(D:domain): bool =
     FORALL(v: VectorN(n)):
     deriv_domain_direction?(D,v)

%--------------------------------------------
%% define derivative domain in all direction
%  (to have gradient and Frechet relationship)
%--------------------------------------------

deriv_domain_all_partial?(D:domain): bool =
     FORALL(v: VectorN(n)):
     deriv_domain_partial?(D,v)

%--------------------------------------------
%% define derivative domain in all direction
%  (to have all partial derivatives)
%--------------------------------------------

deriv_domain_e_direction?(D:domain): bool =
     FORALL (i:below(n)):
     deriv_domain_direction?(e(n,i))(D)

deriv_domain_e_partial?(D:domain): bool =
     FORALL (i:below(n)):
     deriv_domain_partial?(e(n,i))(D)

e_direction_e_partial: LEMMA
     FORALL(D:domain):
     deriv_domain_e_direction?(D)
     IMPLIES
     deriv_domain_e_partial?(D)

%--------------------------------------------
%% define derivative domain in positive
%  and negative direction
%--------------------------------------------

deriv_domain_both_direction?(v:VectorN(n))(D:domain): bool=
     deriv_domain_direction?(D,v)
     AND
     deriv_domain_direction?(D,-1*v)
     
%--------------------------------------------
%% derive domain for one norm 
%--------------------------------------------
     
deriv_domain?(nn: (norm?(n)))(D:domain): bool = FORALL(e:posreal, p:(D)):
     EXISTS (v: {vv: VectorN(n) | vv /= zero_vec(n) AND D(p+vv)}): nn(v) < e;


%--------------------------------------------
%% Here are a bunch of connected between
%  the different types of derivative domains
%--------------------------------------------

deriv_domain_sub?(U:domain)(D:domain): bool = deriv_domain?(D)
AND (FORALL(d:(D)): U(d))

%--------------------------------------------
%% Domain that contains all points on line
%  segmant from p1 to p2
%--------------------------------------------

domain_connect?(p1,p2:VectorN(n))(D:domain): bool =
     FORALL(t : {tt:real | tt>=0 AND tt<=1}):
     D(p1+t*(p2-p1))
     
%--------------------------------------------
%% Domain that is open_neigh_domain is
%  derivative domain in standard basis
%  directions
%--------------------------------------------

open_implies_e_direction: LEMMA FORALL(D:domain):
     open_neigh_domain?(D)
     IMPLIES
     deriv_domain_e_direction?(D)

open_implies_e_partial: LEMMA FORALL(D:domain):
     open_neigh_domain?(D)
     IMPLIES
     deriv_domain_e_partial?(D)


     
%--------------------------------------------
%% Domain that contains all points on line
%  segmant from p1 to p2 contains p1 p2
%--------------------------------------------

d_con_ends: LEMMA FORALL(p1,p2:VectorN(n), D:(domain_connect?(p1,p2))):
     D(p1) AND D(p2)

%--------------------------------------------
%% Doesn't matter what norm is used
%--------------------------------------------

dd_norm_equiv: LEMMA  FORALL(D:domain):
     deriv_domain?(D) IFF
     EXISTS(nn:(norm?(n))): deriv_domain?(nn)(D)
  
%--------------------------------------------
%% Here are a bunch of connected between
%  the different types of derivative domains
%--------------------------------------------     

dd_directionv_implies_dd: LEMMA  FORALL(D:domain):
     (EXISTS(v:{vv:VectorN(n) | vv /= zero_vec(n)}): deriv_domain_direction?(D,v))
     IMPLIES
     deriv_domain?(D)

dd_all_direction_implies_dd_all_partial: LEMMA FORALL(D:domain):
     deriv_domain_all_direction?(D)
     IMPLIES
     deriv_domain_all_partial?(D)

dd_direction_implies_dd_directionv: LEMMA  FORALL(D:domain):
     deriv_domain_all_direction?(D)
     IMPLIES
     (FORALL(v:VectorN(n)): deriv_domain_direction?(D,v))

dd_direction_implies_dd: LEMMA FORALL(D:domain):
     deriv_domain_all_direction?(D)
     IMPLIES
     deriv_domain?(D)

dd_all_partial_implies_dd: LEMMA FORALL(D:domain):
     deriv_domain_all_partial?(D)
     IMPLIES
     deriv_domain?(D)

dd_direction_implies_dd_e_direction: LEMMA FORALL(D:domain):
     deriv_domain_all_direction?(D)
     IMPLIES
     deriv_domain_e_direction?(D)

dd_partial_implies_dd_e_direction: LEMMA FORALL(D:domain):
     deriv_domain_all_partial?(D)
     IMPLIES
     deriv_domain_e_partial?(D)

dd_direction_implies_dd_e_partial: LEMMA FORALL(D:domain):
     deriv_domain_all_direction?(D)
     IMPLIES
     deriv_domain_e_partial?(D)

dd_vdirection_implies_dd_partial: LEMMA FORALL(D:domain, v:VectorN(n) | v /= zero_vec(n)):
     deriv_domain_direction?(D,v)
     IMPLIES
     deriv_domain_partial?(v)(D)

dd_edirection_implies_dd_partial: LEMMA FORALL(D:domain, i:below(n)):
     deriv_domain_e_direction?(D)
     IMPLIES
     deriv_domain_partial?(e(n,i))(D)

dd_epartial_implies_dd_partial: LEMMA FORALL(D:domain, i:below(n)):
     deriv_domain_e_partial?(D)
     IMPLIES
     deriv_domain_partial?(e(n,i))(D)

dd_direction_implies_dd_partial: LEMMA FORALL(D:domain,v:VectorN(n)):
    deriv_domain_all_direction?(D)
    IMPLIES
    deriv_domain_partial?(v)(D)

dd_e_direction_implies_dd: LEMMA FORALL(D:domain):
     deriv_domain_e_direction?(D)
     IMPLIES
     deriv_domain?(D)

dd_partial_implies_dd: LEMMA FORALL(D:domain,v:VectorN(n) | v /= zero_vec(length(v))):
     deriv_domain_partial?(v)(D)
     IMPLIES
     deriv_domain?(D)

dd_e_partial_implies_dd: LEMMA FORALL(D:domain):
     deriv_domain_e_partial?(D)
     IMPLIES
     deriv_domain?(D)

dd_partial_implies_scal_partial: LEMMA FORALL(D:domain,v:VectorN(n),c:real):
     deriv_domain_partial?(v)(D)
     IMPLIES
     deriv_domain_partial?(c * v)(D)

dd_scal_partial_implies_partial: LEMMA FORALL(D:domain,v:VectorN(n), c:nzreal):
     deriv_domain_partial?(c * v)(D)
     IMPLIES
     deriv_domain_partial?(v)(D)

%--------------------------------------------
%% Useful facts for derivative domains
%-------------------------------------------- 

dd_zero: LEMMA FORALL(D:domain):
     deriv_domain_direction?(zero_vec(n))(D)

dd_zero_partial: LEMMA FORALL(D:domain):
     deriv_domain_partial?(zero_vec(n))(D)

domain_direction_scal: LEMMA
     FORALL(c:{cc:real|cc>=0}, v:VectorN(n),D:(deriv_domain_direction?(v))):
     deriv_domain_direction?(c*v)(D)

domain_direction_scal_real: LEMMA
     FORALL(c:real, v:VectorN(n),D: (deriv_domain_both_direction?(v))):
     deriv_domain_direction?(c*v)(D)

%--------------------------------------------
%% define not_one_element for domain
%--------------------------------------------

not_one_element?(D: domain): bool = (FORALL (x: (D)): EXISTS (y: (D)): x /= y)

%--------------------------------------------
%% connected domain with at least two elements
%  is derivative domain
%--------------------------------------------

%connected_dd: LEMMA FORALL(D:domain): connected_domain?(D) AND not_one_element?(D)
%     IMPLIES deriv_domain?(D)

%--------------------------------------------
%% del_neigh is an open domain, perhaps redundant 
%--------------------------------------------

del_neigh_all_mult?(nn:(norm?(n)))(D:domain): bool = FORALL(a: (D)):
     EXISTS(delta: posreal):
     FORALL(x: VectorN(n)):
     (nn(x)< delta
     IMPLIES
     D(a+x))

del_neigh_all_mult?(D:domain): bool = FORALL(nn: (norm?(n))):
     del_neigh_all_mult?(nn)(D)

%--------------------------------------------
%% del_neigh doesn't matter what norm you use
%--------------------------------------------

del_neigh_norm_equiv: LEMMA FORALL(D:domain):
     (EXISTS(nn:(norm?(n))):
     del_neigh_all_mult?(nn)(D))
     IFF
     del_neigh_all_mult?(D)
     
%--------------------------------------------
%% del_neigh is a derivative domain
%--------------------------------------------    
 
del_neigh_all_lem_mutl: LEMMA FORALL(D:domain):
     (EXISTS(nn:(norm?(n))):
     del_neigh_all_mult?(nn)(D))
     IMPLIES deriv_domain?(D)



domain_partial_p?(i:below(n))(D:domain)(p:(D)): bool
 =  FORALL(e:posreal,v:VectorN(n)):
      EXISTS (delta: {delta: nzreal | D(p+delta*e(n,i))}):
      abs(delta)< e

domain_partial(i:below(n))(D:domain): bool
 =  FORALL(p:(D)):
	domain_partial_p?(i)(D)(p)

%________________________________________________________
 % "Domain names and websites are Internet real estate."
 %      	    	                  -Marc Ostrofsky

  %---     ~The End~    ---%
  END derivative_domain_multi
