(directional_deriv_def
 (D_downd_der_domain 0
  (D_downd_der_domain-1 nil 3852224214
   ("" (skeep)
    (("" (typepred "D")
      (("" (typepred "p")
        (("" (typepred "v")
          (("" (expand "deriv_domain?")
            (("" (skeep)
              (("" (typepred "x")
                (("" (expand "D_downd" -1)
                  (("" (assert)
                    (("" (expand "deriv_domain_direction?" -7)
                      (("" (inst -7 "e" "p+x*v")
                        (("1" (skeep)
                          (("1" (typepred "delta")
                            (("1" (inst 1 "delta")
                              (("1"
                                (expand "D_downd")
                                (("1"
                                  (lemma "dist_scalar")
                                  (("1"
                                    (inst -1 "x" "delta" "v")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand "D_down" 1)
                                        (("1"
                                          (replace -1)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (replace -1 1 rl)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand "D_down" -5)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (lemma
                                                       "asso_add")
                                                      (("1"
                                                        (inst
                                                         -1
                                                         "p"
                                                         "x*v"
                                                         "delta*v")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert)
                          (("2" (expand "D_down" -1)
                            (("2" (flatten)
                              (("2"
                                (assert)
                                (("2"
                                  (typepred "p+x*v" "p" "x*v" "v")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (replace -7)
                                      (("2"
                                        (replace -9)
                                        (("2"
                                          (replace -4)
                                          (("2"
                                            (expand "max" -2)
                                            (("2" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((deriv_domain_direction? const-decl "bool" derivative_domain_multi
     nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" directional_deriv_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (delta skolem-const-decl
     "{delta: posreal | D(p + x * v + delta * v)}"
     directional_deriv_def nil)
    (dist_scalar formula-decl nil vector_arithmetic nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (asso_add formula-decl nil vector_arithmetic nil)
    (D_down const-decl "bool" init_partial_def nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (Vector type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (v skolem-const-decl "VectorN(n)" directional_deriv_def nil)
    (D skolem-const-decl "(deriv_domain_direction?(v))"
     directional_deriv_def nil)
    (p skolem-const-decl "(D)" directional_deriv_def nil)
    (* const-decl "VectorN(length(v2))" matrices matrices)
    (x skolem-const-decl "(D_downd(D, p, v))" directional_deriv_def
     nil)
    (D_downd const-decl "bool" directional_deriv_def nil)
    (deriv_domain? const-decl "bool" deriv_domain_def analysis)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   shostak))
 (D_downd_domain 0
  (D_downd_domain-1 nil 3852224556
   ("" (skeep)
    (("" (typepred "D")
      (("" (lemma "D_downd_der_domain")
        (("" (inst -1 "v" "D" "p")
          (("" (expand "deriv_domain_all_direction?")
            (("" (inst -1 "v")
              (("" (ground)
                (("" (expand "deriv_domain_direction?" -1)
                  (("" (expand "deriv_domain_direction?" 1)
                    (("" (propax) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((deriv_domain_all_direction? const-decl "bool"
     derivative_domain_multi nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" directional_deriv_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (deriv_domain_direction? const-decl "bool" derivative_domain_multi
     nil)
    (D skolem-const-decl "(deriv_domain_all_direction?)"
     directional_deriv_def nil)
    (v skolem-const-decl "VectorN(n)" directional_deriv_def nil)
    (deriv_domain_direction? const-decl "bool" derivative_domain_multi
     nil)
    (D_downd_der_domain formula-decl nil directional_deriv_def nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   shostak))
 (D_downd_der_domain_unit 0
  (D_downd_der_domain_unit-1 nil 3852224685
   ("" (skeep)
    (("" (typepred "p")
      (("" (typepred "v")
        (("" (hide -1 -3)
          (("" (expand "deriv_domain?")
            (("" (skeep)
              (("" (typepred "D")
                (("" (expand "deriv_domain_all_direction?")
                  (("" (inst -1 "v")
                    (("" (expand "deriv_domain_direction?")
                      ((""
                        (inst -1 "min(min(e,abs(1-x)),abs(x))/2"
                         "p+x*v")
                        (("1" (skeep)
                          (("1" (typepred "delta")
                            (("1" (inst 1 "delta")
                              (("1" (assert) nil nil)
                               ("2"
                                (split)
                                (("1"
                                  (expand "D_downd" 1)
                                  (("1"
                                    (expand "D_down" 1)
                                    (("1"
                                      (lemma "dist_scalar")
                                      (("1"
                                        (inst -1 "x" "delta" "v")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (replace -1 1)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (lemma "asso_add")
                                                (("1"
                                                  (inst
                                                   -1
                                                   "p"
                                                   "x * v"
                                                   "delta * v")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (assert)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (assert)
                                  (("2"
                                    (hide -3 -5 -6 -7)
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide 2)
                          (("2" (typepred "p + x * v" "p" "x*v")
                            (("2" (assert)
                              (("2"
                                (expand "max" -)
                                (("2"
                                  (assert)
                                  (("2"
                                    (typepred "x")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (expand "D_downd" -1)
                                        (("2"
                                          (expand "D_down" -1)
                                          (("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (hide 2) (("3" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((deriv_domain_all_direction? const-decl "bool"
     derivative_domain_multi nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" directional_deriv_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (deriv_domain_direction? const-decl "bool" derivative_domain_multi
     nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (delta skolem-const-decl
     "{delta: posreal | D(p + x * v + delta * v)}"
     directional_deriv_def nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (dist_scalar formula-decl nil vector_arithmetic nil)
    (asso_add formula-decl nil vector_arithmetic nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (D_down const-decl "bool" init_partial_def nil)
    (Vector type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (* const-decl "VectorN(length(v2))" matrices matrices)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (<= const-decl "bool" reals nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (e skolem-const-decl "posreal" directional_deriv_def nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (D_downd const-decl "bool" directional_deriv_def nil)
    (D skolem-const-decl "(deriv_domain_all_direction?)"
     directional_deriv_def nil)
    (p skolem-const-decl "(D)" directional_deriv_def nil)
    (v skolem-const-decl "VectorN(n)" directional_deriv_def nil)
    (< const-decl "bool" reals nil)
    (x skolem-const-decl "{t: (D_downd(D, p, v)) | t > 0 AND t < 1}"
     directional_deriv_def nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nonneg_real_min application-judgement
     "{z: nonneg_real | z <= x AND z <= y}" real_defs nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (deriv_domain? const-decl "bool" deriv_domain_def analysis)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   shostak))
 (D_downd_domain_unit 0
  (D_downd_domain_unit-1 nil 3852224866
   ("" (skeep)
    (("" (lemma "D_downd_der_domain_unit")
      (("" (inst -1 "v" "D" "p") nil nil)) nil))
    nil)
   ((D_downd_der_domain_unit formula-decl nil directional_deriv_def
     nil)
    (deriv_domain_all_direction? const-decl "bool"
     derivative_domain_multi nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" directional_deriv_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   shostak))
 (D_downd_domain_unitc 0
  (D_downd_domain_unitc-1 nil 3852224907
   ("" (skeep)
    (("" (expand "deriv_domain?")
      (("" (skeep)
        (("" (typepred "x")
          (("" (case "x=1")
            (("1" (typepred "D")
              (("1" (expand "deriv_domain_all_direction?")
                (("1" (inst -1 "-1*v")
                  (("1" (expand "deriv_domain_direction?")
                    (("1" (inst -1 "min(e/2,1/2)" "p+x*v")
                      (("1" (skeep)
                        (("1" (inst 1 "-delta")
                          (("1" (assert) (("1" (grind) nil nil)) nil)
                           ("2" (split)
                            (("1" (typepred "delta")
                              (("1"
                                (expand "D_downd" 1)
                                (("1"
                                  (expand "D_down" 1)
                                  (("1"
                                    (lemma "asso_v")
                                    (("1"
                                      (inst -1 "delta" "-1" "v")
                                      (("1"
                                        (replace -1 -4)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (lemma "dist_scalar")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (case
                                                 "NOT -delta = delta*-1")
                                                (("1" (assert) nil nil)
                                                 ("2"
                                                  (replace -1 -6)
                                                  (("2"
                                                    (replace -1 -6 rl)
                                                    (("2"
                                                      (inst
                                                       -2
                                                       "x"
                                                       "-delta"
                                                       "v")
                                                      (("1"
                                                        (replace -2 1)
                                                        (("1"
                                                          (lemma
                                                           "asso_add")
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "p"
                                                             "x*v"
                                                             "-delta*v")
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (typepred
                                                               "-delta*v"
                                                               "v")
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("3"
                                                              (typepred
                                                               "x*v"
                                                               "v")
                                                              (("3"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("4"
                                                              (typepred
                                                               "p")
                                                              (("4"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (typepred "v")
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (typepred "v")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert) nil nil))
                            nil))
                          nil))
                        nil)
                       ("2" (split)
                        (("1" (typepred "p+x*v" "x*v" "v")
                          (("1" (expand "max" -)
                            (("1" (assert) nil nil)) nil))
                          nil)
                         ("2" (expand "D_downd" -2)
                          (("2" (assert)
                            (("2" (expand "D_down" -2)
                              (("2" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert) nil nil))
                  nil))
                nil))
              nil)
             ("2" (typepred "-1*v" "v")
              (("2" (assert)
                (("2" (typepred "D")
                  (("2" (expand "deriv_domain_all_direction?")
                    (("2" (inst -1 "v")
                      (("2" (expand "deriv_domain_direction?")
                        (("2" (inst -1 "min(e,abs(1-x))/2" "p+x*v")
                          (("1" (skeep)
                            (("1" (inst 2 "delta")
                              (("1" (assert) nil nil)
                               ("2"
                                (split)
                                (("1"
                                  (typepred "delta")
                                  (("1"
                                    (expand "D_downd" 1)
                                    (("1"
                                      (expand "D_down" 1)
                                      (("1"
                                        (lemma "dist_scalar")
                                        (("1"
                                          (lemma "asso_add")
                                          (("1"
                                            (inst -2 "x" "delta" "v")
                                            (("1"
                                              (inst
                                               -1
                                               "p"
                                               "delta*v"
                                               "x*v")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (replace -2 1)
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (lemma
                                                       "asso_add")
                                                      (("1"
                                                        (inst
                                                         -1
                                                         "p"
                                                         "x*v"
                                                         "delta*v")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (typepred
                                                 "delta*v"
                                                 "v")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (typepred
                                                     "x*v"
                                                     "v")
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (typepred "p")
                                                (("3"
                                                  (assert)
                                                  (("3"
                                                    (typepred
                                                     "x*v"
                                                     "v")
                                                    (("3"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (typepred "delta*v" "v")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (typepred "p")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (typepred "v")
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (split)
                            (("1" (typepred "p+x*v" "x*v" "v")
                              (("1"
                                (expand "max" -)
                                (("1" (assert) nil nil))
                                nil))
                              nil)
                             ("2" (assert)
                              (("2"
                                (hide 3)
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil)
                           ("3" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_plus_real_is_real application-judgement "real" reals nil)
    (deriv_domain? const-decl "bool" deriv_domain_def analysis)
    (<= const-decl "bool" reals nil)
    (deriv_domain_all_direction? const-decl "bool"
     derivative_domain_multi nil)
    (D_downd const-decl "bool" directional_deriv_def nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" directional_deriv_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nonneg_real_min application-judgement
     "{z: nonneg_real | z <= x AND z <= y}" real_defs nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (e skolem-const-decl "posreal" directional_deriv_def nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (delta skolem-const-decl
     "{delta: posreal | D(p + x * v + delta * v)}"
     directional_deriv_def nil)
    (scal def-decl "VectorN(length(v2))" matrices matrices)
    (minus_real_is_real application-judgement "real" reals nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (add def-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (Vector type-eq-decl nil matrices matrices)
    (* const-decl "VectorN(length(v2))" matrices matrices)
    (v skolem-const-decl "VectorN(n)" directional_deriv_def nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (posreal_min application-judgement
     "{z: posreal | z <= x AND z <= y}" real_defs nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (D skolem-const-decl "(deriv_domain_all_direction?)"
     directional_deriv_def nil)
    (p skolem-const-decl "(D)" directional_deriv_def nil)
    (x skolem-const-decl "{t: (D_downd(D, p, v)) | t >= 0 AND t <= 1}"
     directional_deriv_def nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (delta skolem-const-decl
     "{delta: posreal | D(p + x * v + delta * (-1 * v))}"
     directional_deriv_def nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (D_down const-decl "bool" init_partial_def nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (asso_add formula-decl nil vector_arithmetic nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (dist_scalar formula-decl nil vector_arithmetic nil)
    (asso_v formula-decl nil vector_arithmetic nil)
    (deriv_domain_direction? const-decl "bool" derivative_domain_multi
     nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   shostak))
 (D_downd_not_one 0
  (D_downd_not_one-1 nil 3852225459
   ("" (skeep)
    (("" (expand "not_one_element?")
      (("" (skeep)
        (("" (typepred "D")
          (("" (expand "deriv_domain_all_direction?")
            (("" (inst -1 "v")
              (("" (expand "deriv_domain_direction?")
                (("" (inst-cp -1 "1" "p")
                  (("" (skeep)
                    (("" (inst -1 "delta" "p")
                      (("" (case "x=delta")
                        (("1" (skeep)
                          (("1" (inst 1 "delta_1")
                            (("1" (grind) nil nil)
                             ("2" (typepred "delta_1")
                              (("2"
                                (expand "D_downd")
                                (("2"
                                  (assert)
                                  (("2"
                                    (expand "D_down")
                                    (("2" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (skeep)
                          (("2" (inst 2 "delta")
                            (("1" (assert) nil nil)
                             ("2" (expand "D_downd" 1)
                              (("2"
                                (assert)
                                (("2"
                                  (expand "D_down" 1)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((not_one_element? const-decl "bool" deriv_domain_def analysis)
    (deriv_domain_all_direction? const-decl "bool"
     derivative_domain_multi nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" directional_deriv_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (Vector type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (* const-decl "VectorN(length(v2))" matrices matrices)
    (delta skolem-const-decl "{delta: posreal | D(p + delta * v)}"
     directional_deriv_def nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (D_down const-decl "bool" init_partial_def nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (/= const-decl "boolean" notequal nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (D skolem-const-decl "(deriv_domain_all_direction?)"
     directional_deriv_def nil)
    (p skolem-const-decl "(D)" directional_deriv_def nil)
    (v skolem-const-decl "VectorN(n)" directional_deriv_def nil)
    (delta_1 skolem-const-decl "{delta: posreal | D(p + delta * v)}"
     directional_deriv_def nil)
    (D_downd const-decl "bool" directional_deriv_def nil)
    (deriv_domain_direction? const-decl "bool" derivative_domain_multi
     nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   shostak))
 (D_downd_not_one_unit 0
  (D_downd_not_one_unit-1 nil 3852277872
   ("" (skeep)
    (("" (expand "not_one_element?")
      (("" (skeep)
        (("" (typepred "D")
          (("" (expand "deriv_domain_all_direction?")
            (("" (inst -1 "v")
              (("" (expand "deriv_domain_direction?")
                (("" (inst-cp -1 "1" "p")
                  (("" (skeep)
                    (("" (inst -1 "min(delta,1)" "p")
                      (("" (skeep)
                        (("" (case "x=delta")
                          (("1" (inst 1 "delta_1")
                            (("1" (assert) nil nil)
                             ("2" (typepred "delta_1")
                              (("2"
                                (assert)
                                (("2"
                                  (expand "D_downd" 1)
                                  (("2"
                                    (expand "D_down" 1)
                                    (("2" (propax) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert)
                            (("2" (inst 2 "delta")
                              (("1" (assert) nil nil)
                               ("2"
                                (expand "D_downd" 1)
                                (("2"
                                  (expand "D_down" 1)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((not_one_element? const-decl "bool" deriv_domain_def analysis)
    (deriv_domain_all_direction? const-decl "bool"
     derivative_domain_multi nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" directional_deriv_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal_min application-judgement
     "{z: posreal | z <= x AND z <= y}" real_defs nil)
    (<= const-decl "bool" reals nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (Vector type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (* const-decl "VectorN(length(v2))" matrices matrices)
    (D_downd const-decl "bool" directional_deriv_def nil)
    (< const-decl "bool" reals nil)
    (D_down const-decl "bool" init_partial_def nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (delta_1 skolem-const-decl "{delta: posreal | D(p + delta * v)}"
     directional_deriv_def nil)
    (v skolem-const-decl "VectorN(n)" directional_deriv_def nil)
    (p skolem-const-decl "(D)" directional_deriv_def nil)
    (D skolem-const-decl "(deriv_domain_all_direction?)"
     directional_deriv_def nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (delta skolem-const-decl "{delta: posreal | D(p + delta * v)}"
     directional_deriv_def nil)
    (deriv_domain_direction? const-decl "bool" derivative_domain_multi
     nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   shostak))
 (D_downd_not_one_unitc 0
  (D_downd_not_one_unitc-1 nil 3852278083
   ("" (skeep)
    (("" (expand "not_one_element?")
      (("" (skeep)
        (("" (typepred "D")
          (("" (expand "deriv_domain_all_direction?")
            (("" (inst -1 "v")
              (("" (expand "deriv_domain_direction?")
                (("" (inst-cp -1 "1/2" "p")
                  (("" (skeep)
                    (("" (inst -1 "min(delta,1)" "p")
                      (("" (skeep)
                        (("" (case "x=delta")
                          (("1" (inst 1 "delta_1")
                            (("1" (assert) nil nil)
                             ("2" (split)
                              (("1"
                                (expand "D_downd" 1)
                                (("1"
                                  (expand "D_down" 1)
                                  (("1" (assert) nil nil))
                                  nil))
                                nil)
                               ("2" (assert) nil nil))
                              nil))
                            nil)
                           ("2" (inst 2 "delta")
                            (("1" (assert) nil nil)
                             ("2" (expand "D_downd" 1)
                              (("2"
                                (expand "D_down" 1)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((not_one_element? const-decl "bool" deriv_domain_def analysis)
    (deriv_domain_all_direction? const-decl "bool"
     derivative_domain_multi nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" directional_deriv_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (posreal_min application-judgement
     "{z: posreal | z <= x AND z <= y}" real_defs nil)
    (* const-decl "VectorN(length(v2))" matrices matrices)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (Vector type-eq-decl nil matrices matrices)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (<= const-decl "bool" reals nil)
    (D_downd const-decl "bool" directional_deriv_def nil)
    (D_down const-decl "bool" init_partial_def nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (delta_1 skolem-const-decl "{delta: posreal | D(p + delta * v)}"
     directional_deriv_def nil)
    (v skolem-const-decl "VectorN(n)" directional_deriv_def nil)
    (p skolem-const-decl "(D)" directional_deriv_def nil)
    (D skolem-const-decl "(deriv_domain_all_direction?)"
     directional_deriv_def nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (delta skolem-const-decl "{delta: posreal | D(p + delta * v)}"
     directional_deriv_def nil)
    (deriv_domain_direction? const-decl "bool" derivative_domain_multi
     nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil))
 (D_downd_direction_not_one 0
  (D_downd_direction_not_one-1 nil 3852278210
   ("" (skeep)
    (("" (typepred "D")
      (("" (expand "deriv_domain_direction?")
        (("" (expand "not_one_element?" 1)
          (("" (skeep)
            (("" (typepred "x")
              (("" (expand "D_downd" -1)
                (("" (expand "D_down")
                  (("" (typepred "p")
                    (("" (typepred "x")
                      (("" (hide -1)
                        (("" (case "x=0")
                          (("1" (inst -6 "1" "p")
                            (("1" (skeep)
                              (("1"
                                (typepred "delta")
                                (("1"
                                  (inst 1 "delta")
                                  (("1" (assert) nil nil)
                                   ("2"
                                    (assert)
                                    (("2"
                                      (expand "D_downd" 1)
                                      (("2"
                                        (expand "D_down" 1)
                                        (("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert)
                            (("2" (inst 2 "0")
                              (("1" (assert) nil nil)
                               ("2"
                                (expand "D_downd" 1)
                                (("2"
                                  (expand "D_down" 1)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (lemma "mult_zero")
                                      (("2"
                                        (inst?)
                                        (("2"
                                          (replace -1)
                                          (("2"
                                            (lemma "zero_id")
                                            (("2"
                                              (inst -1 "p")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((deriv_domain_direction? const-decl "bool" derivative_domain_multi
     nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" directional_deriv_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (D_downd const-decl "bool" directional_deriv_def nil)
    (D_down const-decl "bool" init_partial_def nil)
    (delta skolem-const-decl "{delta: posreal | D(p + delta * v)}"
     directional_deriv_def nil)
    (p skolem-const-decl "(D)" directional_deriv_def nil)
    (D skolem-const-decl "(deriv_domain_direction?[n](v))"
     directional_deriv_def nil)
    (v skolem-const-decl "VectorN(n)" directional_deriv_def nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (Vector type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (* const-decl "VectorN(length(v2))" matrices matrices)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (mult_zero formula-decl nil vector_arithmetic nil)
    (zero_id formula-decl nil vector_arithmetic nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   shostak))
 (D_downd_direction_deriv_domain 0
  (D_downd_direction_deriv_domain-1 nil 3852278299
   ("" (skeep)
    (("" (lemma "D_downd_der_domain")
      (("" (inst -1 "v" "D" "p") nil nil)) nil))
    nil)
   ((D_downd_der_domain formula-decl nil directional_deriv_def nil)
    (deriv_domain_direction? const-decl "bool" derivative_domain_multi
     nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" directional_deriv_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   shostak))
 (directional_deriv?_TCC1 0
  (directional_deriv?_TCC1-1 nil 3852047509
   ("" (skeep)
    (("" (typepred "p+Delta*v" "p" "Delta*v" "v")
      (("" (hide "replace" -9)
        (("" (replace -7)
          (("" (replace -4)
            (("" (typepred "v")
              (("" (replace -2)
                (("" (expand "max" -4 1) (("" (propax) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((* const-decl "VectorN(length(v2))" matrices matrices)
    (deriv_domain_direction? const-decl "bool" derivative_domain_multi
     nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (n formal-const-decl "posnat" directional_deriv_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (VectorN type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vector type-eq-decl nil matrices matrices)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (directional_deriv? subtype
    "(matrices.+)(directional_deriv_def.p, matrices.*(directional_deriv_def.Delta, directional_deriv_def.v))"
    "matrices.VectorN(directional_deriv_def.n)")))
 (directional_deriv?_TCC2 0
  (directional_deriv?_TCC1-1 nil 3741426701
   ("" (skeep)
    (("" (expand "D_downd")
      (("" (expand "D_down")
        (("" (assert)
          (("" (lemma "mult_zero")
            (("" (inst -1 "v")
              (("1" (typepred "v")
                (("1" (replace -2 -3)
                  (("1" (replace -3 1)
                    (("1" (hide -1 -2 -3)
                      (("1" (lemma "zero_id")
                        (("1" (inst -1 "p")
                          (("1" (typepred "p")
                            (("1" (replace -2 -4)
                              (("1"
                                (replace -4 1)
                                (("1" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (typepred "v") (("2" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((D_downd const-decl "bool" directional_deriv_def nil)
    (v skolem-const-decl "VectorN(n)" directional_deriv_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" directional_deriv_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (deriv_domain_direction? const-decl "bool" derivative_domain_multi
     nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (zero_id formula-decl nil vector_arithmetic nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (mult_zero formula-decl nil vector_arithmetic nil)
    (D_down const-decl "bool" init_partial_def nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (directional_deriv? subtype "0"
    "(directional_deriv_def.D_downd(directional_deriv_def.D, directional_deriv_def.p, directional_deriv_def.v))")))
 (directional_deriv?_TCC3 0
  (directional_deriv?_TCC2-1 nil 3741426701
   ("" (skeep)
    (("" (expand "deriv_domain?")
      (("" (skeep)
        (("" (typepred "D")
          (("" (expand "deriv_domain_direction?")
            (("" (typepred "x")
              (("" (expand "D_downd" -1)
                (("" (expand "D_down" -1)
                  (("" (inst -2 "e" "p+x*v")
                    (("1" (skeep)
                      (("1" (typepred "delta")
                        (("1" (inst 1 "delta")
                          (("1" (expand "D_downd" 1)
                            (("1" (expand "D_down" 1)
                              (("1"
                                (lemma "dist_scalar")
                                (("1"
                                  (inst -1 "delta" "x" "v")
                                  (("1"
                                    (replace -1 1)
                                    (("1"
                                      (lemma "add_commute")
                                      (("1"
                                        (inst -1 "delta*v" "x*v")
                                        (("1"
                                          (replace -1 1)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (lemma "asso_add")
                                              (("1"
                                                (inst
                                                 -1
                                                 "p"
                                                 "x*v"
                                                 "delta*v")
                                                (("1" (assert) nil nil)
                                                 ("2"
                                                  (typepred
                                                   "delta*v"
                                                   "v")
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("3"
                                                  (typepred "x*v" "v")
                                                  (("3"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("4"
                                                  (typepred "p")
                                                  (("4"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (typepred "x*v" "v")
                                          (("2" (assert) nil nil))
                                          nil)
                                         ("3"
                                          (typepred "delta*v" "v")
                                          (("3" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (typepred "v")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_plus_real_is_real application-judgement "real" reals nil)
    (deriv_domain? const-decl "bool" deriv_domain_def analysis)
    (deriv_domain_direction? const-decl "bool" derivative_domain_multi
     nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" directional_deriv_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (D_downd const-decl "bool" directional_deriv_def nil)
    (D_down const-decl "bool" init_partial_def nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (delta skolem-const-decl
     "{delta: posreal | D(p + x * v + delta * v)}"
     directional_deriv_def nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (add_commute formula-decl nil vector_arithmetic nil)
    (asso_add formula-decl nil vector_arithmetic nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (dist_scalar formula-decl nil vector_arithmetic nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (v skolem-const-decl "VectorN(n)" directional_deriv_def nil)
    (D skolem-const-decl "(deriv_domain_direction?[n](v))"
     directional_deriv_def nil)
    (Vector type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (p skolem-const-decl "(D)" directional_deriv_def nil)
    (* const-decl "VectorN(length(v2))" matrices matrices)
    (x skolem-const-decl "(D_downd(D, p, v))" directional_deriv_def
     nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (directional_deriv? assuming
    "analysis@derivatives_def[(directional_deriv_def.D_downd(directional_deriv_def.D, directional_deriv_def.p, directional_deriv_def.v))].derivatives_def"
    "deriv_domain: ASSUMPTION deriv_domain_def[T].deriv_domain?")))
 (directional_deriv?_TCC4 0
  (directional_deriv?_TCC3-1 nil 3741427278
   ("" (skeep)
    (("" (typepred "D")
      (("" (expand "not_one_element?")
        (("" (skeep)
          (("" (expand "deriv_domain_direction?")
            (("" (inst -1 "1" "p+x*v")
              (("1" (skeep)
                (("1" (typepred "delta")
                  (("1" (typepred "x")
                    (("1" (case "x =delta")
                      (("1" (inst 1 "x+delta")
                        (("1" (assert) nil nil)
                         ("2" (assert)
                          (("2" (expand "D_downd" 1)
                            (("2" (expand "D_down" 1)
                              (("2"
                                (assert)
                                (("2"
                                  (lemma "add_commute")
                                  (("2"
                                    (lemma "dist_scalar")
                                    (("2"
                                      (inst -1 "x" "delta" "v")
                                      (("1"
                                        (replace -1 1)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (lemma "asso_add")
                                            (("1"
                                              (inst
                                               -1
                                               "p"
                                               "x*v"
                                               "delta*v")
                                              (("1" (assert) nil nil)
                                               ("2"
                                                (typepred
                                                 "delta*v"
                                                 "v")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil)
                                               ("3"
                                                (typepred "x*v" "v")
                                                (("3"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil)
                                               ("4"
                                                (typepred "p")
                                                (("4"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (typepred "v")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (typepred "D")
                        (("2" (expand "deriv_domain_direction?")
                          (("2" (inst -1 "1" "p")
                            (("2" (inst 2 "x+delta")
                              (("1" (assert) nil nil)
                               ("2"
                                (expand "D_downd" 1)
                                (("2"
                                  (expand "D_down" 1)
                                  (("2"
                                    (lemma "asso_add")
                                    (("2"
                                      (lemma "dist_scalar")
                                      (("2"
                                        (inst -1 "x" "delta" "v")
                                        (("1"
                                          (replace -1 1)
                                          (("1"
                                            (inst
                                             -2
                                             "p"
                                             "x*v"
                                             "delta*v")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (typepred
                                                 "delta*v"
                                                 "v")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (typepred "x*v")
                                                    (("1"
                                                      (typepred "v")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (typepred
                                                           "p")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (typepred
                                                               "x")
                                                              (("1"
                                                                (expand
                                                                 "D_downd"
                                                                 -1)
                                                                (("1"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (typepred "delta*v" "v")
                                              (("2" (assert) nil nil))
                                              nil)
                                             ("3"
                                              (typepred "x*v")
                                              (("3"
                                                (typepred "v")
                                                (("3"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("4"
                                              (typepred "p")
                                              (("4" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (typepred "v")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (split)
                (("1" (typepred "p+x*v" "p" "x*v" "v")
                  (("1" (assert)
                    (("1" (expand "max" -) (("1" (assert) nil nil))
                      nil))
                    nil))
                  nil)
                 ("2" (typepred "x")
                  (("2" (expand "D_downd" -1)
                    (("2" (expand "D_down" -1) (("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((deriv_domain_direction? const-decl "bool" derivative_domain_multi
     nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" directional_deriv_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (x skolem-const-decl "(D_downd(D, p, v))" directional_deriv_def
     nil)
    (D_downd const-decl "bool" directional_deriv_def nil)
    (* const-decl "VectorN(length(v2))" matrices matrices)
    (p skolem-const-decl "(D)" directional_deriv_def nil)
    (D skolem-const-decl "(deriv_domain_direction?[n](v))"
     directional_deriv_def nil)
    (v skolem-const-decl "VectorN(n)" directional_deriv_def nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (Vector type-eq-decl nil matrices matrices)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (D_down const-decl "bool" init_partial_def nil)
    (add_commute formula-decl nil vector_arithmetic nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (asso_add formula-decl nil vector_arithmetic nil)
    (dist_scalar formula-decl nil vector_arithmetic nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (delta skolem-const-decl
     "{delta: posreal | D(p + x * v + delta * v)}"
     directional_deriv_def nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (directional_deriv? assuming
    "analysis@derivatives_def[(directional_deriv_def.D_downd(directional_deriv_def.D, directional_deriv_def.p, directional_deriv_def.v))].derivatives_def"
    "not_one_element: ASSUMPTION deriv_domain_def[T].not_one_element?")))
 (diff_imp_direction_TCC1 0
  (diff_imp_direction_TCC1-1 nil 3741429980
   ("" (lemma "dd_direction_implies_dd")
    (("" (skeep) (("" (inst -1 "D") (("" (assert) nil nil)) nil)) nil))
    nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (deriv_domain_all_direction? const-decl "bool"
     derivative_domain_multi nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (dd_direction_implies_dd formula-decl nil derivative_domain_multi
     nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n formal-const-decl "posnat" directional_deriv_def nil))
   nil
   (diff_imp_direction subtype "directional_deriv_def.D"
    "(derivative_domain_multi[directional_deriv_def.n].deriv_domain?)")))
 (diff_imp_direction_TCC2 0
  (diff_imp_direction_TCC2-1 nil 3741429980 ("" (subtype-tcc) nil nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (deriv_domain_all_direction? const-decl "bool"
     derivative_domain_multi nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (deriv_domain_direction? const-decl "bool" derivative_domain_multi
     nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (norm_inf const-decl "(norm?(m))" norms nil)
    (sub const-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (norm_inf const-decl "[(cons?) -> nonneg_real]" norms nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (* const-decl "real" matrices matrices)
    (n formal-const-decl "posnat" directional_deriv_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (NQ const-decl "real" differentiable_def nil)
    (convergence_zero? const-decl "bool" vector_sequences nil)
    (differentiable? const-decl "bool" differentiable_def nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (deriv_domain_direction? const-decl "bool" derivative_domain_multi
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil))
   nil
   (diff_imp_direction subtype "directional_deriv_def.D"
    "(derivative_domain_multi[directional_deriv_def.n].deriv_domain_direction?(directional_deriv_def.v))")))
 (diff_imp_direction 0
  (diff_imp_direction-1 nil 3741430615
   ("" (skeep)
    (("" (skeep)
      (("" (case "v=zero_vec(n)")
        (("1" (replace -1 1)
          (("1" (expand "directional_deriv?")
            (("1" (expand "derivable?")
              (("1" (expand "convergent?" 1)
                (("1" (inst 1 "0")
                  (("1" (expand "convergence" 1)
                    (("1" (expand "convergence" 1)
                      (("1" (split)
                        (("1" (expand "adh" 1)
                          (("1" (skeep)
                            (("1" (typepred "D")
                              (("1"
                                (expand "deriv_domain_all_direction?")
                                (("1"
                                  (expand "fullset")
                                  (("1"
                                    (inst -1 "v")
                                    (("1"
                                      (expand
                                       "deriv_domain_direction?")
                                      (("1"
                                        (inst -1 "e" "p")
                                        (("1"
                                          (skeep)
                                          (("1"
                                            (inst 1 "delta")
                                            (("1"
                                              (expand "A" 1)
                                              (("1"
                                                (expand "D_downd" 1)
                                                (("1"
                                                  (expand "D_down" 1)
                                                  (("1"
                                                    (typepred "delta")
                                                    (("1"
                                                      (replace -5 -3)
                                                      (("1"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (skeep)
                          (("2" (inst 1 "1")
                            (("2" (skeep)
                              (("2"
                                (assert)
                                (("2"
                                  (lemma "scal_zero")
                                  (("2"
                                    (case
                                     "NOT (LAMBDA (Delta: real): f(p + Delta * zero_vec(n))) = LAMBDA (Delta: real): f(p+zero_vec(n))")
                                    (("1"
                                      (decompose-equality 1)
                                      (("1"
                                        (inst -1 "x!1" "n")
                                        (("1" (assert) nil nil))
                                        nil)
                                       ("2"
                                        (typepred "p + zero_vec(n)")
                                        (("2"
                                          (expand "max" -2)
                                          (("2"
                                            (typepred "p")
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (skeep)
                                        (("3"
                                          (typepred
                                           "p + Delta * zero_vec(n)")
                                          (("3"
                                            (typepred
                                             "Delta * zero_vec(n)")
                                            (("3"
                                              (hide -1 -3)
                                              (("3"
                                                (typepred " max" -2)
                                                (("3"
                                                  (assert)
                                                  (("3"
                                                    (hide -2)
                                                    (("3"
                                                      (typepred
                                                       "zero_vec(n)")
                                                      (("3"
                                                        (hide -1)
                                                        (("3"
                                                          (expand
                                                           "max"
                                                           -4)
                                                          (("3"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (replace -1 1)
                                      (("2"
                                        (hide -1)
                                        (("2"
                                          (lemma "zero_id")
                                          (("2"
                                            (case
                                             " NOT (LAMBDA (Delta: real): f(p + zero_vec(n))) = LAMBDA (Delta: real): f(p)")
                                            (("1"
                                              (decompose-equality 1)
                                              (("1"
                                                (inst -1 "p")
                                                (("1"
                                                  (typepred "p")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (typepred
                                                 "p + zero_vec(n)")
                                                (("2"
                                                  (typepred "p")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (typepred
                                                       "p"
                                                       "zero_vec(n)")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (expand
                                                           "max")
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (replace -1 1)
                                              (("2"
                                                (expand "NQ" 1)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (expand
                                                     "restrict"
                                                     1)
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (typepred "p + zero_vec(n)")
                                      (("3"
                                        (typepred "p")
                                        (("3"
                                          (assert)
                                          (("3"
                                            (typepred
                                             "p"
                                             "zero_vec(n)")
                                            (("3"
                                              (assert)
                                              (("3"
                                                (expand "max" -)
                                                (("3"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("4"
                                      (skeep)
                                      (("4"
                                        (typepred
                                         "p + Delta * zero_vec(n)")
                                        (("4"
                                          (typepred "p")
                                          (("4"
                                            (typepred
                                             "Delta*zero_vec(n)")
                                            (("4"
                                              (typepred "zero_vec(n)")
                                              (("4"
                                                (assert)
                                                (("4"
                                                  (typepred
                                                   "p"
                                                   "Delta*zero_vec(n)"
                                                   "zero_vec(n)")
                                                  (("4"
                                                    (typepred
                                                     "p+Delta*zero_vec(n)")
                                                    (("4"
                                                      (expand "max" -)
                                                      (("4"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (expand "directional_deriv?")
          (("2" (expand "differentiable?")
            (("2" (skeep)
              (("2" (expand "derivable?")
                (("2" (expand "convergent?")
                  (("2" (expand "convergence_zero?")
                    (("2" (inst 2 "g*v")
                      (("2" (expand "convergence")
                        (("2" (expand "convergence" 2)
                          (("2" (split)
                            (("1" (expand "adh" 1)
                              (("1"
                                (skeep)
                                (("1"
                                  (typepred "D")
                                  (("1"
                                    (expand
                                     "deriv_domain_all_direction?")
                                    (("1"
                                      (expand "fullset" 1)
                                      (("1"
                                        (inst -1 "v")
                                        (("1"
                                          (expand
                                           "deriv_domain_direction?")
                                          (("1"
                                            (inst -1 "e" "p")
                                            (("1"
                                              (skeep)
                                              (("1"
                                                (inst 1 "delta")
                                                (("1"
                                                  (expand "A")
                                                  (("1"
                                                    (typepred "delta")
                                                    (("1"
                                                      (expand
                                                       "D_downd")
                                                      (("1"
                                                        (expand
                                                         "D_down")
                                                        (("1"
                                                          (propax)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (skeep)
                              (("2"
                                (expand "NQ" -1)
                                (("2"
                                  (expand "NQ" 1)
                                  (("2"
                                    (inst -1 "epsilon/norm_inf(n)(v)")
                                    (("1"
                                      (skeep)
                                      (("1"
                                        (inst 1 "delta/norm_inf(n)(v)")
                                        (("1"
                                          (skeep)
                                          (("1"
                                            (inst -3 "x * v")
                                            (("1"
                                              (lemma "sub_zero")
                                              (("1"
                                                (lemma "mult_zero")
                                                (("1"
                                                  (expand "restrict" 1)
                                                  (("1"
                                                    (inst -1 "v")
                                                    (("1"
                                                      (replace -1 1)
                                                      (("1"
                                                        (typepred "v")
                                                        (("1"
                                                          (replace
                                                           -2
                                                           1)
                                                          (("1"
                                                            (hide -1)
                                                            (("1"
                                                              (lemma
                                                               "zero_id")
                                                              (("1"
                                                                (inst
                                                                 -1
                                                                 "p")
                                                                (("1"
                                                                  (typepred
                                                                   "p")
                                                                  (("1"
                                                                    (replace
                                                                     -2
                                                                     -4)
                                                                    (("1"
                                                                      (replace
                                                                       -4
                                                                       1)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (lemma
                                                                           "zero_id")
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             "p")
                                                                            (("1"
                                                                              (typepred
                                                                               "norm_inf(n)")
                                                                              (("1"
                                                                                (expand
                                                                                 "norm?"
                                                                                 -1)
                                                                                (("1"
                                                                                  (flatten)
                                                                                  (("1"
                                                                                    (hide
                                                                                     -1
                                                                                     -3
                                                                                     -4)
                                                                                    (("1"
                                                                                      (inst
                                                                                       -1
                                                                                       "v"
                                                                                       "x")
                                                                                      (("1"
                                                                                        (typepred
                                                                                         "x")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (split)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (mult-by
                                                                                                 -1
                                                                                                 "norm_inf(n)(v)")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (lemma
                                                                                                     "abs_div")
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       -1
                                                                                                       "abs(x) * norm_inf(n)(v)"
                                                                                                       "f(p + x * v) - f(p) - g * (x * v)")
                                                                                                      (("1"
                                                                                                        (lemma
                                                                                                         "abs_mult")
                                                                                                        (("1"
                                                                                                          (inst
                                                                                                           -1
                                                                                                           "abs(x)"
                                                                                                           "norm_inf(n)(v)")
                                                                                                          (("1"
                                                                                                            (typepred
                                                                                                             "norm_inf(n)(v)")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (case
                                                                                                                 "NOT abs(f(p + x * v) - f(p) - g * (x * v)) / (abs(x) * norm_inf(n)(v)) *
                                                                                                     norm_inf(n)(v) = abs(f(p + x * v) - f(p) - g * (x * v)) / (abs(x))")
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (lemma
                                                                                                                   "abs_div")
                                                                                                                  (("2"
                                                                                                                    (inst
                                                                                                                     -1
                                                                                                                     "x"
                                                                                                                     "f(p + x * v) - f(p) - g * (x * v)")
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      (("2"
                                                                                                                        (case
                                                                                                                         "NOT (f(p + x * v) - f(p) - g * (x * v)) / x = (f(p + x * v) - f(p)) / x - g * v")
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          (("1"
                                                                                                                            (lemma
                                                                                                                             "div_distributes_minus")
                                                                                                                            (("1"
                                                                                                                              (inst
                                                                                                                               -1
                                                                                                                               "x"
                                                                                                                               "f(p + x * v) - f(p)"
                                                                                                                               "g * (x * v)")
                                                                                                                              (("1"
                                                                                                                                (replace
                                                                                                                                 -1
                                                                                                                                 1)
                                                                                                                                (("1"
                                                                                                                                  (replace
                                                                                                                                   -1
                                                                                                                                   1
                                                                                                                                   rl)
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    (("1"
                                                                                                                                      (lemma
                                                                                                                                       "scal_cancel")
                                                                                                                                      (("1"
                                                                                                                                        (lemma
                                                                                                                                         "scal_asso")
                                                                                                                                        (("1"
                                                                                                                                          (inst
                                                                                                                                           -1
                                                                                                                                           "g"
                                                                                                                                           "v"
                                                                                                                                           "x")
                                                                                                                                          (("1"
                                                                                                                                            (replace
                                                                                                                                             -1
                                                                                                                                             1)
                                                                                                                                            (("1"
                                                                                                                                              (assert)
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (assert)
                                                                                                                          (("2"
                                                                                                                            (replace
                                                                                                                             -10
                                                                                                                             -7)
                                                                                                                            (("2"
                                                                                                                              (replace
                                                                                                                               -6
                                                                                                                               -7)
                                                                                                                              (("2"
                                                                                                                                (expand
                                                                                                                                 "abs"
                                                                                                                                 -7
                                                                                                                                 2)
                                                                                                                                (("2"
                                                                                                                                  (replace
                                                                                                                                   -3
                                                                                                                                   -7)
                                                                                                                                  (("2"
                                                                                                                                    (assert)
                                                                                                                                    (("2"
                                                                                                                                      (replace
                                                                                                                                       -2
                                                                                                                                       -7
                                                                                                                                       rl)
                                                                                                                                      (("2"
                                                                                                                                        (replace
                                                                                                                                         -1
                                                                                                                                         -7)
                                                                                                                                        (("2"
                                                                                                                                          (propax)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (case
                                                                                                           "abs(x) * norm_inf(n)(v) = 0")
                                                                                                          (("1"
                                                                                                            (div-by
                                                                                                             -1
                                                                                                             "abs(x)")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (case
                                                                                                                 "0 / abs(x) =0")
                                                                                                                (("1"
                                                                                                                  (replace
                                                                                                                   -1
                                                                                                                   -2)
                                                                                                                  (("1"
                                                                                                                    (typepred
                                                                                                                     "norm_inf(n)")
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "norm?")
                                                                                                                      (("1"
                                                                                                                        (flatten)
                                                                                                                        (("1"
                                                                                                                          (inst
                                                                                                                           -3
                                                                                                                           "v")
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (case
                                                                                                   "norm_inf(n)(v)=0")
                                                                                                  (("1"
                                                                                                    (typepred
                                                                                                     "norm_inf(n)")
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "norm?")
                                                                                                      (("1"
                                                                                                        (flatten)
                                                                                                        (("1"
                                                                                                          (inst
                                                                                                           -3
                                                                                                           "v")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (lemma
                                                                                               "sub_zero")
                                                                                              (("2"
                                                                                                (lemma
                                                                                                 "mult_zero")
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   -2
                                                                                                   "x * v")
                                                                                                  (("2"
                                                                                                    (typepred
                                                                                                     "x*v")
                                                                                                    (("2"
                                                                                                      (typepred
                                                                                                       "v")
                                                                                                      (("2"
                                                                                                        (replace
                                                                                                         -2
                                                                                                         -4)
                                                                                                        (("2"
                                                                                                          (replace
                                                                                                           -4
                                                                                                           -6)
                                                                                                          (("2"
                                                                                                            (hide
                                                                                                             -1
                                                                                                             -3)
                                                                                                            (("2"
                                                                                                              (replace
                                                                                                               -4
                                                                                                               1)
                                                                                                              (("2"
                                                                                                                (typepred
                                                                                                                 "norm_inf(n)")
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "norm?"
                                                                                                                   -1)
                                                                                                                  (("2"
                                                                                                                    (flatten)
                                                                                                                    (("2"
                                                                                                                      (hide
                                                                                                                       -1
                                                                                                                       -3
                                                                                                                       -4)
                                                                                                                      (("2"
                                                                                                                        (typepred
                                                                                                                         "x")
                                                                                                                        (("2"
                                                                                                                          (assert)
                                                                                                                          (("2"
                                                                                                                            (replace
                                                                                                                             -9
                                                                                                                             1)
                                                                                                                            (("2"
                                                                                                                              (mult-by
                                                                                                                               -19
                                                                                                                               "norm_inf(n)(v)")
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (split)
                                              (("1"
                                                (typepred "x*v")
                                                (("1"
                                                  (typepred "v")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand "fullset" -1)
                                                (("2"
                                                  (typepred "x")
                                                  (("2"
                                                    (expand "A" -2)
                                                    (("2"
                                                      (typepred "p")
                                                      (("2"
                                                        (typepred
                                                         "x*v")
                                                        (("2"
                                                          (expand
                                                           "NQ"
                                                           1)
                                                          (("2"
                                                            (case
                                                             "x*v = zero_vec(n)")
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (typepred
                                                                 "x")
                                                                (("1"
                                                                  (lemma
                                                                   "zero_scal")
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     "v"
                                                                     "x")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (assert)
                                                              (("2"
                                                                (typepred
                                                                 "norm_inf(n)(v)")
                                                                (("2"
                                                                  (typepred
                                                                   "delta")
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (div-by
                                                                       -1
                                                                       "norm_inf(n)(v)")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (typepred
                                                                           "norm_inf(n)(v)")
                                                                          (("1"
                                                                            (typepred
                                                                             "norm_inf(n)")
                                                                            (("1"
                                                                              (expand
                                                                               "norm?")
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (inst
                                                                                   -3
                                                                                   "v")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (typepred
                                                                                       "delta")
                                                                                      (("1"
                                                                                        (typepred
                                                                                         "norm_inf(n)(v)")
                                                                                        (("1"
                                                                                          (div-by
                                                                                           -3
                                                                                           "norm_inf(n)(v)")
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (typepred
                                                                                               "norm_inf(n)")
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "norm?"
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (flatten)
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       -3
                                                                                                       "v")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (typepred
                                                                                                           "norm_inf(n)")
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "norm?")
                                                                                                            (("1"
                                                                                                              (flatten)
                                                                                                              (("1"
                                                                                                                (inst
                                                                                                                 -3
                                                                                                                 "v")
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (typepred
                                                                                                                     "v")
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         "D_downd"
                                                                                                                         -25)
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           "D_down"
                                                                                                                           -25)
                                                                                                                          (("1"
                                                                                                                            (propax)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (expand
                                                                         "D_downd")
                                                                        (("2"
                                                                          (expand
                                                                           "D_down")
                                                                          (("2"
                                                                            (propax)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (case
                                                 "x*v = zero_vec(n)")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (typepred "x")
                                                    (("1"
                                                      (lemma
                                                       "zero_scal")
                                                      (("1"
                                                        (inst
                                                         -1
                                                         "v"
                                                         "x")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (split)
                                          (("1"
                                            (typepred "norm_inf(n)(v)")
                                            (("1"
                                              (typepred "delta")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (div-by
                                                   -1
                                                   "norm_inf(n)(v)")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (typepred
                                                     "norm_inf(n)(v)")
                                                    (("2"
                                                      (typepred
                                                       "norm_inf(n)")
                                                      (("2"
                                                        (expand
                                                         "norm?")
                                                        (("2"
                                                          (flatten)
                                                          (("2"
                                                            (inst
                                                             -3
                                                             "v")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (typepred "delta")
                                            (("2"
                                              (typepred
                                               "norm_inf(n)(v)")
                                              (("2"
                                                (div-by
                                                 -3
                                                 "norm_inf(n)(v)")
                                                (("1" (assert) nil nil)
                                                 ("2"
                                                  (typepred
                                                   "norm_inf(n)")
                                                  (("2"
                                                    (expand "norm?" -1)
                                                    (("2"
                                                      (flatten)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (inst -3 "v")
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (assert)
                                          (("3"
                                            (typepred "norm_inf(n)")
                                            (("3"
                                              (expand "norm?")
                                              (("3"
                                                (flatten)
                                                (("3"
                                                  (inst -3 "v")
                                                  (("3"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("4"
                                          (typepred "v")
                                          (("4" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (split)
                                      (("1"
                                        (typepred "epsilon")
                                        (("1"
                                          (typepred "norm_inf(n)(v)")
                                          (("1"
                                            (div-by
                                             -2
                                             "norm_inf(n)(v)")
                                            (("1" (assert) nil nil)
                                             ("2"
                                              (typepred "norm_inf(n)")
                                              (("2"
                                                (expand "norm?")
                                                (("2"
                                                  (flatten)
                                                  (("2"
                                                    (inst -3 "v")
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (typepred "epsilon")
                                        (("2"
                                          (typepred "norm_inf(n)(v)")
                                          (("2"
                                            (div-by
                                             -2
                                             "norm_inf(n)(v)")
                                            (("1" (assert) nil nil)
                                             ("2"
                                              (typepred "norm_inf(n)")
                                              (("2"
                                                (expand "norm?")
                                                (("2"
                                                  (flatten)
                                                  (("2"
                                                    (inst -3 "v")
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (assert)
                                      (("3"
                                        (typepred "norm_inf(n)")
                                        (("3"
                                          (expand "norm?" -1)
                                          (("3"
                                            (flatten)
                                            (("3"
                                              (inst -3 "v")
                                              (("3" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("4"
                                      (typepred "v")
                                      (("4" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((* const-decl "real" matrices matrices)
    (both_sides_div_pos_ge1 formula-decl nil real_props nil)
    (both_sides_div_pos_gt1 formula-decl nil real_props nil)
    (zero_scal formula-decl nil vector_arithmetic nil)
    (sub_zero formula-decl nil vector_arithmetic nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (scal_cancel formula-decl nil vector_arithmetic nil)
    (scal_asso formula-decl nil vector_arithmetic nil)
    (div_distributes_minus formula-decl nil real_props nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (abs_mult formula-decl nil real_props nil)
    (times_div_cancel1 formula-decl nil extra_real_props nil)
    (both_sides_div1 formula-decl nil real_props nil)
    (abs_div formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (div_cancel2 formula-decl nil real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (both_sides_times_pos_lt1 formula-decl nil real_props nil)
    (mult_zero formula-decl nil vector_arithmetic nil)
    (NQ const-decl "bool" differentiable_def nil)
    (x skolem-const-decl "(A(0))" directional_deriv_def nil)
    (delta skolem-const-decl "posreal" directional_deriv_def nil)
    (epsilon skolem-const-decl "posreal" directional_deriv_def nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (norm_inf const-decl "(norm?(m))" norms nil)
    (norm? const-decl "bool" norms nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NQ const-decl "real" differentiable_def nil)
    (delta skolem-const-decl "{delta: posreal | D(p + delta * v)}"
     directional_deriv_def nil)
    (convergence_zero? const-decl "bool" vector_sequences nil)
    (differentiable? const-decl "bool" differentiable_def nil)
    (derivable? const-decl "bool" derivatives_def analysis)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (convergence const-decl "bool" convergence_functions analysis)
    (scal_zero formula-decl nil vector_arithmetic nil)
    (zero_id formula-decl nil vector_arithmetic nil)
    (abs_nat formula-decl nil abs_lems reals)
    (restrict const-decl "R" restrict nil)
    (NQ const-decl "real" derivatives_def analysis)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (add def-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (even? const-decl "bool" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (adh const-decl "setof[real]" convergence_functions analysis)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain_all_direction? const-decl "bool"
     derivative_domain_multi nil)
    (fullset const-decl "set" sets nil)
    (deriv_domain_direction? const-decl "bool" derivative_domain_multi
     nil)
    (D_down const-decl "bool" init_partial_def nil)
    (D skolem-const-decl "(deriv_domain_all_direction?)"
     directional_deriv_def nil)
    (p skolem-const-decl "(D)" directional_deriv_def nil)
    (v skolem-const-decl "VectorN(n)" directional_deriv_def nil)
    (delta skolem-const-decl "{delta: posreal | D(p + delta * v)}"
     directional_deriv_def nil)
    (/= const-decl "boolean" notequal nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (D_downd const-decl "bool" directional_deriv_def nil)
    (setof type-eq-decl nil defined_types nil)
    (A const-decl "setof[nzreal]" derivatives_def analysis)
    (Vector type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (* const-decl "VectorN(length(v2))" matrices matrices)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (convergence const-decl "bool" lim_of_functions analysis)
    (convergent? const-decl "bool" lim_of_functions analysis)
    (directional_deriv? const-decl "bool" directional_deriv_def nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n formal-const-decl "posnat" directional_deriv_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil))
 (diff_imp_direction1_TCC1 0
  (diff_imp_direction1_TCC1-1 nil 3741429980
   ("" (skeep)
    (("" (typepred "D")
      (("" (lemma "dd_directionv_implies_dd")
        (("" (inst -1 "D")
          (("" (split)
            (("1" (propax) nil nil)
             ("2" (inst 1 "v")
              (("1" (assert)
                (("1" (expand "deriv_domain_direction?")
                  (("1" (propax) nil nil)) nil))
                nil)
               ("2" (assert)
                (("2" (expand "deriv_domain_direction?")
                  (("2" (expand "deriv_domain?")
                    (("2" (postpone) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (/= const-decl "boolean" notequal nil)
    (deriv_domain_direction? const-decl "bool" derivative_domain_multi
     nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" directional_deriv_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (deriv_domain_direction? const-decl "bool" derivative_domain_multi
     nil)
    (dd_directionv_implies_dd formula-decl nil derivative_domain_multi
     nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (diff_imp_direction1 subtype "directional_deriv_def.D"
    "(derivative_domain_multi[directional_deriv_def.n].deriv_domain?)")))
 (diff_imp_direction1 0
  (diff_imp_direction1-1 nil 3741439546
   ("" (skeep)
    (("" (case "v=zero_vec(n)")
      (("1" (replace -1 1)
        (("1" (expand "directional_deriv?")
          (("1" (expand "derivable?")
            (("1" (expand "convergent?" 1)
              (("1" (inst 1 "0")
                (("1" (expand "convergence" 1)
                  (("1" (expand "convergence" 1)
                    (("1" (split)
                      (("1" (expand "adh" 1)
                        (("1" (skeep)
                          (("1" (typepred "D")
                            (("1" (expand "deriv_domain_direction?")
                              (("1"
                                (inst -1 "e" "p")
                                (("1"
                                  (skeep)
                                  (("1"
                                    (inst 1 "delta")
                                    (("1"
                                      (split)
                                      (("1"
                                        (expand "fullset")
                                        (("1" (propax) nil nil))
                                        nil)
                                       ("2" (propax) nil nil))
                                      nil)
                                     ("2"
                                      (expand "A" 1)
                                      (("2"
                                        (typepred "delta")
                                        (("2"
                                          (expand "D_downd" 1)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (skeep)
                        (("2" (inst 1 "1")
                          (("2" (skeep) (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (lemma "scal_zero")
        (("2" (expand "directional_deriv?")
          (("2" (expand "differentiable?")
            (("2" (skeep)
              (("2" (expand "derivable?")
                (("2" (expand "convergent?")
                  (("2" (expand "convergence_zero?")
                    (("2" (inst 2 "g*v")
                      (("2" (expand "convergence")
                        (("2" (expand "convergence" 2)
                          (("2" (split)
                            (("1" (expand "adh" 1)
                              (("1"
                                (skeep)
                                (("1"
                                  (typepred "D")
                                  (("1"
                                    (expand "deriv_domain_direction?")
                                    (("1"
                                      (inst -1 "e" "p")
                                      (("1"
                                        (skeep)
                                        (("1"
                                          (inst 1 "delta")
                                          (("1"
                                            (split)
                                            (("1"
                                              (expand "fullset" 1)
                                              (("1" (propax) nil nil))
                                              nil)
                                             ("2" (propax) nil nil))
                                            nil)
                                           ("2"
                                            (expand "A" 1)
                                            (("2"
                                              (expand "D_downd" 1)
                                              (("2"
                                                (expand "D_down" 1)
                                                (("2"
                                                  (typepred "delta")
                                                  (("2"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (skeep)
                              (("2"
                                (expand "NQ" 1)
                                (("2"
                                  (hide -1)
                                  (("2"
                                    (inst -1 "epsilon/norm_inf(n)(v)")
                                    (("1"
                                      (skeep)
                                      (("1"
                                        (inst 1 "delta/norm_inf(n)(v)")
                                        (("1"
                                          (skeep)
                                          (("1"
                                            (inst -3 "x * v")
                                            (("1"
                                              (lemma "sub_zero")
                                              (("1"
                                                (lemma "mult_zero")
                                                (("1"
                                                  (expand "restrict" 1)
                                                  (("1"
                                                    (inst -1 "v")
                                                    (("1"
                                                      (replace -1 1)
                                                      (("1"
                                                        (typepred "v")
                                                        (("1"
                                                          (replace
                                                           -2
                                                           1)
                                                          (("1"
                                                            (hide -1)
                                                            (("1"
                                                              (lemma
                                                               "zero_id")
                                                              (("1"
                                                                (inst
                                                                 -1
                                                                 "p")
                                                                (("1"
                                                                  (typepred
                                                                   "p")
                                                                  (("1"
                                                                    (replace
                                                                     -2
                                                                     -4)
                                                                    (("1"
                                                                      (replace
                                                                       -4
                                                                       1)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (lemma
                                                                           "zero_id")
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             "p")
                                                                            (("1"
                                                                              (expand
                                                                               "NQ")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (split)
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (lift-if)
                                                                                      (("1"
                                                                                        (split)
                                                                                        (("1"
                                                                                          (flatten)
                                                                                          (("1"
                                                                                            (hide
                                                                                             -2
                                                                                             -3
                                                                                             -4
                                                                                             -5
                                                                                             -6
                                                                                             -7
                                                                                             -8
                                                                                             -9)
                                                                                            (("1"
                                                                                              (typepred
                                                                                               "norm_inf(n)")
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "norm?"
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (flatten)
                                                                                                  (("1"
                                                                                                    (hide
                                                                                                     -1
                                                                                                     -3
                                                                                                     -4)
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       -1
                                                                                                       "v"
                                                                                                       "x")
                                                                                                      (("1"
                                                                                                        (typepred
                                                                                                         "x")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (replace
                                                                                                             -3
                                                                                                             -4)
                                                                                                            (("1"
                                                                                                              (mult-by
                                                                                                               -4
                                                                                                               "norm_inf(n)(v)")
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (lemma
                                                                                                                   "abs_div")
                                                                                                                  (("1"
                                                                                                                    (inst
                                                                                                                     -1
                                                                                                                     "(abs(x) * norm_inf(n)(v))"
                                                                                                                     "f(p + x * v) - f(p) - g * (x * v)")
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      (("1"
                                                                                                                        (replace
                                                                                                                         -1
                                                                                                                         -5)
                                                                                                                        (("1"
                                                                                                                          (hide
                                                                                                                           -1)
                                                                                                                          (("1"
                                                                                                                            (lemma
                                                                                                                             "abs_mult")
                                                                                                                            (("1"
                                                                                                                              (inst
                                                                                                                               -1
                                                                                                                               "abs(x)"
                                                                                                                               "norm_inf(n)(v)")
                                                                                                                              (("1"
                                                                                                                                (replace
                                                                                                                                 -1
                                                                                                                                 -5)
                                                                                                                                (("1"
                                                                                                                                  (expand
                                                                                                                                   "abs"
                                                                                                                                   -5
                                                                                                                                   2)
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    (("1"
                                                                                                                                      (case
                                                                                                                                       " NOT abs(f(p + x * v) - f(p) - g * (x * v)) /
                                                     (abs(x) * abs(norm_inf(n)(v)))
                                                     * norm_inf(n)(v) = abs(f(p + x * v) - f(p) - g * (x * v)) /
                                                     (abs(x))")
                                                                                                                                      (("1"
                                                                                                                                        (assert)
                                                                                                                                        (("1"
                                                                                                                                          (expand
                                                                                                                                           "abs"
                                                                                                                                           1
                                                                                                                                           3)
                                                                                                                                          (("1"
                                                                                                                                            (assert)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil)
                                                                                                                                       ("2"
                                                                                                                                        (replace
                                                                                                                                         -1
                                                                                                                                         -6)
                                                                                                                                        (("2"
                                                                                                                                          (hide
                                                                                                                                           -1
                                                                                                                                           -2)
                                                                                                                                          (("2"
                                                                                                                                            (lemma
                                                                                                                                             "abs_div")
                                                                                                                                            (("2"
                                                                                                                                              (inst
                                                                                                                                               -1
                                                                                                                                               "x"
                                                                                                                                               "f(p + x * v) - f(p) - g * (x * v)")
                                                                                                                                              (("2"
                                                                                                                                                (replace
                                                                                                                                                 -1
                                                                                                                                                 -5
                                                                                                                                                 rl)
                                                                                                                                                (("2"
                                                                                                                                                  (case
                                                                                                                                                   "NOT (f(p + x * v) - f(p) - g * (x * v)) / x = (f(p + x * v) - f(p)) / x - g * v")
                                                                                                                                                  (("1"
                                                                                                                                                    (assert)
                                                                                                                                                    (("1"
                                                                                                                                                      (lemma
                                                                                                                                                       "div_distributes_minus")
                                                                                                                                                      (("1"
                                                                                                                                                        (inst
                                                                                                                                                         -1
                                                                                                                                                         "x"
                                                                                                                                                         "f(p + x * v) - f(p)"
                                                                                                                                                         "g * (x * v)")
                                                                                                                                                        (("1"
                                                                                                                                                          (replace
                                                                                                                                                           -1
                                                                                                                                                           1)
                                                                                                                                                          (("1"
                                                                                                                                                            (replace
                                                                                                                                                             -1
                                                                                                                                                             1
                                                                                                                                                             rl)
                                                                                                                                                            (("1"
                                                                                                                                                              (assert)
                                                                                                                                                              (("1"
                                                                                                                                                                (lemma
                                                                                                                                                                 "scal_cancel")
                                                                                                                                                                (("1"
                                                                                                                                                                  (lemma
                                                                                                                                                                   "scal_asso")
                                                                                                                                                                  (("1"
                                                                                                                                                                    (inst
                                                                                                                                                                     -1
                                                                                                                                                                     "g"
                                                                                                                                                                     "v"
                                                                                                                                                                     "x")
                                                                                                                                                                    (("1"
                                                                                                                                                                      (replace
                                                                                                                                                                       -1
                                                                                                                                                                       1)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (assert)
                                                                                                                                                                        nil
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil)
                                                                                                                                                   ("2"
                                                                                                                                                    (assert)
                                                                                                                                                    (("2"
                                                                                                                                                      (replace
                                                                                                                                                       -1
                                                                                                                                                       -6)
                                                                                                                                                      (("2"
                                                                                                                                                        (propax)
                                                                                                                                                        nil
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (typepred
                                                                                                                 "v")
                                                                                                                (("2"
                                                                                                                  (typepred
                                                                                                                   "norm_inf(n)")
                                                                                                                  (("2"
                                                                                                                    (expand
                                                                                                                     "norm?")
                                                                                                                    (("2"
                                                                                                                      (flatten)
                                                                                                                      (("2"
                                                                                                                        (inst
                                                                                                                         -3
                                                                                                                         "v")
                                                                                                                        (("2"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (flatten)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (typepred
                                                                                               "x")
                                                                                              (("2"
                                                                                                (lemma
                                                                                                 "zero_scal")
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   -1
                                                                                                   "v"
                                                                                                   "x")
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (lemma
                                                                                       "sub_zero")
                                                                                      (("2"
                                                                                        (inst
                                                                                         -1
                                                                                         "x*v")
                                                                                        (("2"
                                                                                          (typepred
                                                                                           "x*v"
                                                                                           "v")
                                                                                          (("2"
                                                                                            (replace
                                                                                             -4
                                                                                             -2)
                                                                                            (("2"
                                                                                              (replace
                                                                                               -2
                                                                                               -6)
                                                                                              (("2"
                                                                                                (replace
                                                                                                 -6
                                                                                                 1)
                                                                                                (("2"
                                                                                                  (typepred
                                                                                                   "norm_inf(n)")
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "norm?"
                                                                                                     -1)
                                                                                                    (("2"
                                                                                                      (flatten)
                                                                                                      (("2"
                                                                                                        (inst
                                                                                                         -2
                                                                                                         "v"
                                                                                                         "x")
                                                                                                        (("2"
                                                                                                          (replace
                                                                                                           -2
                                                                                                           2)
                                                                                                          (("2"
                                                                                                            (mult-by
                                                                                                             -19
                                                                                                             "norm_inf(n)(v)")
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (split)
                                              (("1"
                                                (typepred "x*v" "v")
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand "NQ" 1)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (typepred "x*v")
                                                    (("2"
                                                      (typepred "v")
                                                      (("2"
                                                        (typepred "x")
                                                        (("2"
                                                          (flatten)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (expand
                                                               "A"
                                                               -1)
                                                              (("2"
                                                                (expand
                                                                 "D_downd"
                                                                 -1)
                                                                (("2"
                                                                  (expand
                                                                   "D_down"
                                                                   -1)
                                                                  (("2"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (lemma "zero_scal")
                                                (("3"
                                                  (inst -1 "v" "x")
                                                  (("3"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (case
                                           "NOT norm_inf(n)(v) >0")
                                          (("1"
                                            (typepred "norm_inf(n)")
                                            (("1"
                                              (expand "norm?" -1)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (inst -3 "v")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (assert)
                                            (("2"
                                              (split)
                                              (("1"
                                                (mult-by
                                                 1
                                                 "norm_inf(n)(v)")
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil)
                                               ("2"
                                                (mult-by
                                                 1
                                                 "norm_inf(n)(v)")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (typepred "v")
                                            (("3" (assert) nil nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (assert)
                                          (("3"
                                            (typepred "norm_inf(n)")
                                            (("3"
                                              (expand "norm?")
                                              (("3"
                                                (flatten)
                                                (("3"
                                                  (inst -3 "v")
                                                  (("3"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("4"
                                          (typepred "v")
                                          (("4" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (case "NOT norm_inf(n)(v)>0")
                                      (("1"
                                        (typepred "norm_inf(n)")
                                        (("1"
                                          (expand "norm?" -1)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (inst -3 "v")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (split)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (mult-by
                                             1
                                             "norm_inf(n)(v)")
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (mult-by 1 "norm_inf(n)(v)")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (typepred "v")
                                        (("3" (assert) nil nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (assert)
                                      (("3"
                                        (typepred "v")
                                        (("3"
                                          (hide -1 -2 -3)
                                          (("3"
                                            (typepred "norm_inf(n)")
                                            (("3"
                                              (expand "norm?")
                                              (("3"
                                                (flatten)
                                                (("3"
                                                  (inst -3 "v")
                                                  (("3"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("4"
                                      (typepred "v")
                                      (("4" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (/= const-decl "boolean" notequal nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" directional_deriv_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (directional_deriv? const-decl "bool" directional_deriv_def nil)
    (convergent? const-decl "bool" lim_of_functions analysis)
    (convergence const-decl "bool" lim_of_functions analysis)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (fullset const-decl "set" sets nil)
    (D_downd const-decl "bool" directional_deriv_def nil)
    (v skolem-const-decl "{vv: VectorN(n) | vv /= zero_vec(n)}"
     directional_deriv_def nil)
    (D skolem-const-decl "(deriv_domain_direction?(v))"
     directional_deriv_def nil)
    (p skolem-const-decl "(D)" directional_deriv_def nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (setof type-eq-decl nil defined_types nil)
    (A const-decl "setof[nzreal]" derivatives_def analysis)
    (Vector type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (* const-decl "VectorN(length(v2))" matrices matrices)
    (delta skolem-const-decl "{delta: posreal | D(p + delta * v)}"
     directional_deriv_def nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (deriv_domain_direction? const-decl "bool" derivative_domain_multi
     nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (adh const-decl "setof[real]" convergence_functions analysis)
    (convergence const-decl "bool" convergence_functions analysis)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (derivable? const-decl "bool" derivatives_def analysis)
    (* const-decl "real" matrices matrices)
    (both_sides_times_pos_ge1 formula-decl nil real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (both_sides_times_pos_le1_imp formula-decl nil extra_real_props
     nil)
    (sub_zero formula-decl nil vector_arithmetic nil)
    (restrict const-decl "R" restrict nil)
    (zero_id formula-decl nil vector_arithmetic nil)
    (NQ const-decl "real" differentiable_def nil)
    (zero_scal formula-decl nil vector_arithmetic nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (both_sides_times_pos_lt1 formula-decl nil real_props nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (div_cancel2 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (abs_div formula-decl nil real_props nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (div_distributes_minus formula-decl nil real_props nil)
    (scal_asso formula-decl nil vector_arithmetic nil)
    (scal_cancel formula-decl nil vector_arithmetic nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (abs_mult formula-decl nil real_props nil)
    (abs_nat formula-decl nil abs_lems reals)
    (mult_zero formula-decl nil vector_arithmetic nil)
    (NQ const-decl "bool" differentiable_def nil)
    (x skolem-const-decl "(A(0))" directional_deriv_def nil)
    (delta skolem-const-decl "posreal" directional_deriv_def nil)
    (epsilon skolem-const-decl "posreal" directional_deriv_def nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (norm_inf const-decl "(norm?(m))" norms nil)
    (norm? const-decl "bool" norms nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (NQ const-decl "real" derivatives_def analysis)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (delta skolem-const-decl "{delta: posreal | D(p + delta * v)}"
     directional_deriv_def nil)
    (D_down const-decl "bool" init_partial_def nil)
    (convergence_zero? const-decl "bool" vector_sequences nil)
    (differentiable? const-decl "bool" differentiable_def nil)
    (scal_zero formula-decl nil vector_arithmetic nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   shostak))
 (directional_deriv_TCC1 0
  (directional_deriv_TCC1-2 nil 3741444916
   ("" (skeep)
    (("" (typepred "v")
      (("" (split)
        (("1" (expand "D_downd" 1)
          (("1" (assert)
            (("1" (typepred "p")
              (("1" (lemma "mult_zero")
                (("1" (inst -1 "v")
                  (("1" (lemma "zero_id")
                    (("1" (inst -1 "p")
                      (("1" (replace -4 -1)
                        (("1" (assert)
                          (("1" (expand "D_down" 1)
                            (("1" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (typepred "p")
          (("2" (lemma "mult_zero")
            (("2" (inst -1 "v")
              (("1" (lemma "zero_id")
                (("1" (inst -1 "p")
                  (("1" (replace -4 -1)
                    (("1" (assert)
                      (("1" (expand "restrict" 1)
                        (("1" (expand "directional_deriv?")
                          (("1" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (typepred "v") (("2" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" directional_deriv_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (v skolem-const-decl "VectorN(n)" directional_deriv_def nil)
    (restrict const-decl "R" restrict nil)
    (D_downd const-decl "bool" directional_deriv_def nil)
    (directional_deriv? const-decl "bool" directional_deriv_def nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain_direction? const-decl "bool" derivative_domain_multi
     nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (D_down const-decl "bool" init_partial_def nil)
    (zero_id formula-decl nil vector_arithmetic nil)
    (mult_zero formula-decl nil vector_arithmetic nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (directional_deriv subtype "0"
    "{x | derivatives_def[(directional_deriv_def.D_downd(directional_deriv_def.D, directional_deriv_def.p, directional_deriv_def.v))].derivable?(restrict[real, (directional_deriv_def.D_downd(directional_deriv_def.D, directional_deriv_def.p, directional_deriv_def.v)), real].restrict(LAMBDA (Delta: reals.real): directional_deriv_def.f((matrices.+)(directional_deriv_def.p, matrices.*(Delta, directional_deriv_def.v)))), x)}"))
  (directional_deriv_TCC1-1 nil 3741444835 ("" (subtype-tcc) nil nil)
   nil nil
   (directional_deriv subtype "0"
    "{x | derivatives_def[(directional_deriv_def.D_downd(directional_deriv_def.D, directional_deriv_def.p, directional_deriv_def.v))].derivable?(restrict[real, (directional_deriv_def.D_downd(directional_deriv_def.D, directional_deriv_def.p, directional_deriv_def.v)), real].restrict(LAMBDA (Delta: reals.real): directional_deriv_def.f((matrices.+)(directional_deriv_def.p, matrices.*(Delta, directional_deriv_def.v)))), x)}")))
 (directional_deriv_TCC2 0
  (directional_deriv_TCC2-1 nil 3852297406 ("" (subtype-tcc) nil nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n formal-const-decl "posnat" directional_deriv_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain_direction? const-decl "bool" derivative_domain_multi
     nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (directional_derivD? const-decl "bool" directional_deriv_def nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (Vector type-eq-decl nil matrices matrices)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (D!1 skolem-const-decl "(deriv_domain_direction?[n](v!1))"
     directional_deriv_def nil)
    (v!1 skolem-const-decl "VectorN(n)" directional_deriv_def nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (* const-decl "VectorN(length(v2))" matrices matrices)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (fullset const-decl "set" sets nil)
    (adh const-decl "setof[real]" convergence_functions analysis)
    (restrict const-decl "R" restrict nil)
    (NQ const-decl "real" derivatives_def analysis)
    (convergence const-decl "bool" convergence_functions analysis)
    (convergence const-decl "bool" lim_of_functions analysis)
    (convergent? const-decl "bool" lim_of_functions analysis)
    (derivable? const-decl "bool" derivatives_def analysis)
    (directional_deriv? const-decl "bool" directional_deriv_def nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil))
   nil
   (directional_deriv subtype "directional_deriv_def.p"
    "(directional_deriv_def.directional_deriv?(directional_deriv_def.v, directional_deriv_def.D, directional_deriv_def.f))")))
 (direction_zero_derivable_TCC1 0
  (direction_zero_derivable_TCC1-1 nil 3741512214
   ("" (lemma "dd_zero")
    (("" (skeep) (("" (inst -1 "D") nil nil)) nil)) nil)
   ((dd_zero formula-decl nil derivative_domain_multi nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n formal-const-decl "posnat" directional_deriv_def nil))
   nil
   (direction_zero_derivable subtype "directional_deriv_def.D"
    "(derivative_domain_multi[directional_deriv_def.n].deriv_domain_direction?(vector_arithmetic.zero_vec(directional_deriv_def.n)))")))
 (direction_zero_derivable 0
  (direction_zero_derivable-2 nil 3741512279
   ("" (skeep)
    (("" (expand "directional_derivD?")
      (("" (skeep)
        (("" (expand "directional_deriv?")
          (("" (expand "restrict" 1)
            (("" (expand "derivable?" 1)
              (("" (expand "NQ")
                (("" (expand "convergent?")
                  (("" (inst 1 "0")
                    (("" (expand "convergence" 1)
                      (("" (expand "convergence")
                        (("" (split)
                          (("1" (expand "fullset" 1)
                            (("1" (expand "adh" 1)
                              (("1"
                                (skeep)
                                (("1"
                                  (inst 1 "e/2")
                                  (("1"
                                    (expand "abs" 1)
                                    (("1" (assert) nil nil))
                                    nil)
                                   ("2"
                                    (expand "A")
                                    (("2"
                                      (expand "D_downd")
                                      (("2"
                                        (expand "D_down")
                                        (("2"
                                          (lemma "scal_zero")
                                          (("2"
                                            (lemma "zero_id")
                                            (("2"
                                              (inst -2 "e/2" "n")
                                              (("2"
                                                (replace -2 1)
                                                (("2"
                                                  (typepred "p")
                                                  (("2"
                                                    (lemma "zero_id")
                                                    (("2"
                                                      (lemma
                                                       "scal_zero")
                                                      (("2"
                                                        (inst
                                                         -1
                                                         "0"
                                                         "n")
                                                        (("2"
                                                          (typepred
                                                           "p")
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (lemma
                                                               "zero_id")
                                                              (("2"
                                                                (inst
                                                                 -1
                                                                 "p")
                                                                (("2"
                                                                  (replace
                                                                   -3
                                                                   -1)
                                                                  (("2"
                                                                    (replace
                                                                     -1
                                                                     1)
                                                                    (("2"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (skeep)
                            (("2" (inst 1 "1")
                              (("2"
                                (skeep)
                                (("2"
                                  (lemma "zero_id")
                                  (("2"
                                    (lemma "scal_zero")
                                    (("2"
                                      (inst-cp -1 "x" "n")
                                      (("2"
                                        (inst -1 "0" "n")
                                        (("2"
                                          (replace -1 1)
                                          (("2"
                                            (replace -2 1)
                                            (("2"
                                              (inst -3 "p")
                                              (("2"
                                                (typepred "p")
                                                (("2"
                                                  (replace -2 -6)
                                                  (("2"
                                                    (replace -6 1)
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((directional_derivD? const-decl "bool" directional_deriv_def nil)
    (directional_deriv? const-decl "bool" directional_deriv_def nil)
    (derivable? const-decl "bool" derivatives_def analysis)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (convergent? const-decl "bool" lim_of_functions analysis)
    (convergence const-decl "bool" lim_of_functions analysis)
    (adh const-decl "setof[real]" convergence_functions analysis)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (e skolem-const-decl "posreal" directional_deriv_def nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (A const-decl "setof[nzreal]" derivatives_def analysis)
    (setof type-eq-decl nil defined_types nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (p skolem-const-decl "(D)" directional_deriv_def nil)
    (D skolem-const-decl "domain[n]" directional_deriv_def nil)
    (D_downd const-decl "bool" directional_deriv_def nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" directional_deriv_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (scal_zero formula-decl nil vector_arithmetic nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (zero_id formula-decl nil vector_arithmetic nil)
    (D_down const-decl "bool" init_partial_def nil)
    (fullset const-decl "set" sets nil)
    (abs_nat formula-decl nil abs_lems reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (convergence const-decl "bool" convergence_functions analysis)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (NQ const-decl "real" derivatives_def analysis)
    (restrict const-decl "R" restrict nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil)
  (direction_zero_derivable-1 nil 3741512267 ("" (postpone) nil nil)
   nil shostak))
 (direction_zero_TCC1 0
  (direction_zero_TCC1-1 nil 3741509634
   ("" (lemma "direction_zero_derivable")
    (("" (skeep)
      (("" (inst -1 "D" "f")
        (("" (expand "directional_derivD?")
          (("" (inst -1 "p") nil nil)) nil))
        nil))
      nil))
    nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" directional_deriv_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (direction_zero_derivable formula-decl nil directional_deriv_def
     nil))
   nil
   (direction_zero subtype "directional_deriv_def.f"
    "(directional_deriv_def.directional_derivD?(vector_arithmetic.zero_vec(directional_deriv_def.n), directional_deriv_def.D))")))
 (direction_zero 0
  (direction_zero-1 nil 3741510073
   ("" (skeep)
    (("" (expand "directional_deriv")
      (("" (expand "directional_deriv")
        (("" (expand "deriv")
          ((""
            (lemma "lim_fun_def[(analysis@derivatives_def
                        [(D_downd(D, p, vector_arithmetic.zero_vec(n)))].A
                        (0))]")
            (("1"
              (inst -1
               "NQ(restrict[real, (D_downd(D, p, zero_vec(n))), real]
                               (LAMBDA (Delta: real): f(p + Delta * zero_vec(n))),0)"
               "0" "0")
              (("1" (assert)
                (("1" (expand "convergence" 1)
                  (("1" (expand "convergence" 1)
                    (("1" (split)
                      (("1" (expand "adh")
                        (("1" (hide 2)
                          (("1" (skeep)
                            (("1" (inst 1 "e/2")
                              (("1"
                                (split)
                                (("1"
                                  (expand "fullset" 1)
                                  (("1" (propax) nil nil))
                                  nil)
                                 ("2"
                                  (expand "abs" 1)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (expand "A" 1)
                                (("2"
                                  (expand "D_downd" 1)
                                  (("2"
                                    (expand "D_down" 1)
                                    (("2"
                                      (lemma "scal_zero")
                                      (("2"
                                        (inst -1 "e/2" "n")
                                        (("2"
                                          (replace -1 1)
                                          (("2"
                                            (lemma "zero_id")
                                            (("2"
                                              (inst -1 "p")
                                              (("2"
                                                (typepred "p")
                                                (("2"
                                                  (replace -2 -4)
                                                  (("2"
                                                    (replace -4 1)
                                                    (("2"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (skeep)
                        (("2" (hide 2)
                          (("2" (inst 1 "1")
                            (("2" (skeep)
                              (("2"
                                (expand "NQ" 1)
                                (("2"
                                  (expand "restrict" 1)
                                  (("2"
                                    (lemma "zero_id")
                                    (("2"
                                      (lemma "scal_zero")
                                      (("2"
                                        (inst-cp -1 "0" "n")
                                        (("2"
                                          (inst -1 "x" "n")
                                          (("2"
                                            (replace -1 1)
                                            (("2"
                                              (replace -2 1)
                                              (("2"
                                                (inst -3 "p")
                                                (("2"
                                                  (typepred "p")
                                                  (("2"
                                                    (replace -2 -6)
                                                    (("2"
                                                      (replace -6 1)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (expand "not_one_element?")
                (("2" (skeep)
                  (("2" (hide 2)
                    (("2" (case "x=0")
                      (("1" (inst 1 "1")
                        (("1" (assert) nil nil)
                         ("2" (expand "D_downd" 1)
                          (("2" (expand "D_down" 1)
                            (("2" (typepred "p")
                              (("2"
                                (lemma "scal_zero")
                                (("2"
                                  (inst -1 "1" "n")
                                  (("2"
                                    (replace -1 1)
                                    (("2"
                                      (lemma "zero_id")
                                      (("2"
                                        (inst -1 "p")
                                        (("2"
                                          (replace -4 -1)
                                          (("2"
                                            (replace -1 1)
                                            (("2" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (inst 2 "0")
                        (("1" (assert) nil nil)
                         ("2" (expand "D_downd" 1)
                          (("2" (expand "D_down" 1)
                            (("2" (lemma "zero_id")
                              (("2"
                                (lemma "scal_zero")
                                (("2"
                                  (inst -1 "0" "n")
                                  (("2"
                                    (replace -1 1)
                                    (("2"
                                      (inst -2 "p")
                                      (("2"
                                        (typepred "p")
                                        (("2"
                                          (replace -2 -5)
                                          (("2"
                                            (replace -5 1)
                                            (("2" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (assert)
                (("3" (expand "deriv_domain?")
                  (("3" (skeep)
                    (("3" (inst 1 "e/2")
                      (("1" (expand "abs" 1) (("1" (assert) nil nil))
                        nil)
                       ("2" (hide 2)
                        (("2" (expand "D_downd" 1)
                          (("2" (expand "D_down" 1)
                            (("2" (lemma "scal_zero")
                              (("2"
                                (inst -1 "e/2+x" "n")
                                (("2"
                                  (replace -1 1)
                                  (("2"
                                    (lemma "zero_id")
                                    (("2"
                                      (inst -1 "p")
                                      (("2"
                                        (typepred "p")
                                        (("2"
                                          (replace -2 -4)
                                          (("2"
                                            (replace -4 1)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (typepred "e" "x")
                                                (("2"
                                                  (expand "D_downd")
                                                  (("2"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("4" (hide 2)
                (("4" (skeep)
                  (("4"
                    (typepred "p + Delta * zero_vec(n)" "p"
                     "Delta * zero_vec(n)" "zero_vec(n)")
                    (("4" (assert)
                      (("4" (expand "max" -) (("4" (assert) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide 2)
              (("2" (expand "not_one_element?" 1)
                (("2" (skeep)
                  (("2" (typepred "x")
                    (("2" (assert)
                      (("2" (typepred "p")
                        (("2" (inst 1 "x+1")
                          (("1" (assert) nil nil)
                           ("2" (assert)
                            (("2" (expand "D_downd" 1 1)
                              (("2"
                                (expand "D_down" 1 1)
                                (("2"
                                  (assert)
                                  (("2"
                                    (lemma "scal_zero")
                                    (("2"
                                      (inst -1 "(1+x)" "n")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (replace -1)
                                          (("2"
                                            (expand "D_downd" -5)
                                            (("2"
                                              (expand "D_down" -5)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (lemma "scal_zero")
                                                  (("2"
                                                    (inst -1 "x" "n")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (flatten)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (hide 2)
              (("3" (expand "deriv_domain?" 1)
                (("3" (skeep)
                  (("3" (inst 1 "e/2")
                    (("1" (assert) (("1" (grind) nil nil)) nil)
                     ("2" (expand "D_downd" 1)
                      (("2" (expand "D_down" 1)
                        (("2" (assert)
                          (("2" (lemma "scal_zero")
                            (("2" (inst -1 "(e/2+x)" "n")
                              (("2"
                                (assert)
                                (("2"
                                  (replace -1 1)
                                  (("2"
                                    (typepred "p")
                                    (("2"
                                      (lemma "zero_id")
                                      (("2"
                                        (inst -1 "p")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (typepred "e" "x")
                                            (("2"
                                              (expand "D_downd" -3)
                                              (("2" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((directional_deriv const-decl "real" directional_deriv_def nil)
    (deriv const-decl "real" derivatives_def analysis)
    (x skolem-const-decl
     "(D_downd(D, p, vector_arithmetic.zero_vec(n)))"
     directional_deriv_def nil)
    (e skolem-const-decl "posreal" directional_deriv_def nil)
    (x skolem-const-decl
     "(D_downd(D, p, vector_arithmetic.zero_vec(n)))"
     directional_deriv_def nil)
    (Vector type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (D skolem-const-decl "domain[n]" directional_deriv_def nil)
    (p skolem-const-decl "(D)" directional_deriv_def nil)
    (* const-decl "VectorN(length(v2))" matrices matrices)
    (NQ const-decl "real" derivatives_def analysis)
    (restrict const-decl "R" restrict nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (convergent? const-decl "bool" lim_of_functions analysis)
    (convergence const-decl "bool" lim_of_functions analysis)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (e skolem-const-decl "posreal" directional_deriv_def nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (fullset const-decl "set" sets nil)
    (scal_zero formula-decl nil vector_arithmetic nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (zero_id formula-decl nil vector_arithmetic nil)
    (D_down const-decl "bool" init_partial_def nil)
    (adh const-decl "setof[real]" convergence_functions analysis)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (abs_nat formula-decl nil abs_lems reals)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (convergence const-decl "bool" convergence_functions analysis)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (e skolem-const-decl "posreal" directional_deriv_def nil)
    (x skolem-const-decl "(D_downd(D, p, zero_vec(n)))"
     directional_deriv_def nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (deriv_domain? const-decl "bool" deriv_domain_def analysis)
    (lim_fun_def formula-decl nil lim_of_functions analysis)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (list type-decl nil list_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n formal-const-decl "posnat" directional_deriv_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (D_downd const-decl "bool" directional_deriv_def nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (setof type-eq-decl nil defined_types nil)
    (A const-decl "setof[nzreal]" derivatives_def analysis)
    (directional_deriv const-decl "real" directional_deriv_def nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   shostak))
 (diff_imp_direction2_TCC1 0
  (diff_imp_direction2_TCC1-1 nil 3741519488
   ("" (skeep)
    (("" (typepred "D")
      (("" (lemma "dd_directionv_implies_dd")
        (("" (inst -1 "D")
          (("" (split)
            (("1" (propax) nil nil)
             ("2" (inst 1 "v")
              (("1" (expand "deriv_domain_direction?")
                (("1" (propax) nil nil)) nil)
               ("2" (assert) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((deriv_domain_direction? const-decl "bool" derivative_domain_multi
     nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" directional_deriv_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (/= const-decl "boolean" notequal nil)
    (v skolem-const-decl "VectorN(n)" directional_deriv_def nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (deriv_domain_direction? const-decl "bool" derivative_domain_multi
     nil)
    (dd_directionv_implies_dd formula-decl nil derivative_domain_multi
     nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (diff_imp_direction2 subtype "directional_deriv_def.D"
    "(derivative_domain_multi[directional_deriv_def.n].deriv_domain?)")))
 (diff_imp_direction2 0
  (diff_imp_direction2-1 nil 3741520167
   ("" (skeep)
    (("" (split)
      (("1" (flatten)
        (("1" (typepred "D")
          (("1" (lemma "diff_imp_direction1")
            (("1" (inst -1 "v" "D" "f" "p")
              (("1" (assert) nil nil) ("2" (assert) nil nil)) nil))
            nil))
          nil))
        nil)
       ("2" (flatten)
        (("2" (lemma "direction_zero_derivable")
          (("2" (inst -1 "D" "f")
            (("2" (assert)
              (("2" (replace -2 1)
                (("2" (expand "directional_derivD?")
                  (("2" (inst -1 "p") nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((deriv_domain_direction? const-decl "bool" derivative_domain_multi
     nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" directional_deriv_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (/= const-decl "boolean" notequal nil)
    (v skolem-const-decl "VectorN(n)" directional_deriv_def nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (diff_imp_direction1 formula-decl nil directional_deriv_def nil)
    (direction_zero_derivable formula-decl nil directional_deriv_def
     nil)
    (directional_derivD? const-decl "bool" directional_deriv_def nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   shostak))
 (directional_deriv_scal_TCC1 0
  (directional_deriv_scal_TCC1-1 nil 3741511344
   ("" (subtype-tcc) nil nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices matrices)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain_both_direction? const-decl "bool"
     derivative_domain_multi nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (* const-decl "VectorN(length(v2))" matrices matrices)
    (deriv_domain_direction? const-decl "bool" derivative_domain_multi
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (n formal-const-decl "posnat" directional_deriv_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (deriv_domain_direction? const-decl "bool" derivative_domain_multi
     nil))
   nil
   (directional_deriv_scal subtype "directional_deriv_def.D"
    "(derivative_domain_multi[directional_deriv_def.n].deriv_domain_direction?(directional_deriv_def.v))")))
 (directional_deriv_scal_TCC2 0
  (directional_deriv_scal_TCC2-1 nil 3741511344
   ("" (skeep) (("" (typepred "c*v" "v") (("" (assert) nil nil)) nil))
    nil)
   ((n formal-const-decl "posnat" directional_deriv_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (nnreal type-eq-decl nil real_types nil)
    (* const-decl "VectorN(length(v2))" matrices matrices)
    (VectorN type-eq-decl nil matrices matrices)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Vector type-eq-decl nil matrices matrices)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (directional_deriv_scal subtype
    "matrices.*(directional_deriv_def.c, directional_deriv_def.v)"
    "matrices.VectorN(directional_deriv_def.n)")))
 (directional_deriv_scal_TCC3 0
  (directional_deriv_scal_TCC3-1 nil 3741511415
   ("" (skeep)
    (("" (typepred "D")
      (("" (lemma "domain_direction_scal_real")
        (("" (inst -1 "c" "v" "D") nil nil)) nil))
      nil))
    nil)
   ((deriv_domain_both_direction? const-decl "bool"
     derivative_domain_multi nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" directional_deriv_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (nnreal type-eq-decl nil real_types nil)
    (domain_direction_scal_real formula-decl nil
     derivative_domain_multi nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (directional_deriv_scal subtype "directional_deriv_def.D"
    "(derivative_domain_multi[directional_deriv_def.n].deriv_domain_direction?(matrices.*(directional_deriv_def.c, directional_deriv_def.v)))")))
 (directional_deriv_scal 0
  (directional_deriv_scal-2 nil 3741512590
   ("" (skeep)
    (("" (case "v=zero_vec(n)")
      (("1" (replace -1 -2)
        (("1" (replace -1 1)
          (("1" (lemma "scal_zero")
            (("1" (inst -1 "c" "n")
              (("1" (replace -1 1) (("1" (propax) nil nil)) nil)) nil))
            nil))
          nil))
        nil)
       ("2" (case "c=0")
        (("1" (replace -1 2)
          (("1" (lemma "mult_zero")
            (("1" (inst -1 "v")
              (("1" (typepred "v")
                (("1" (replace -2 -3)
                  (("1" (replace -3 2)
                    (("1" (lemma "direction_zero_derivable")
                      (("1" (assert)
                        (("1" (inst -1 "D" "f")
                          (("1" (expand "directional_derivD?")
                            (("1" (inst -1 "p") nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (typepred "v") (("2" (assert) nil nil)) nil))
              nil))
            nil))
          nil)
         ("2" (expand "directional_deriv?")
          (("2" (expand "restrict")
            (("2" (expand "derivable?")
              (("2" (expand "NQ")
                (("2" (expand "convergent?")
                  (("2" (skeep)
                    (("2" (inst 3 "c*l")
                      (("2" (expand "convergence")
                        (("2" (expand "convergence")
                          (("2" (split)
                            (("1" (flatten)
                              (("1"
                                (expand "adh")
                                (("1"
                                  (skeep)
                                  (("1"
                                    (inst -1 "e*abs(c)")
                                    (("1"
                                      (skeep)
                                      (("1"
                                        (inst 1 "x/c")
                                        (("1"
                                          (split)
                                          (("1"
                                            (expand "fullset" 1)
                                            (("1" (propax) nil nil))
                                            nil)
                                           ("2"
                                            (lemma "abs_div")
                                            (("2"
                                              (inst -1 "c" "x")
                                              (("2"
                                                (replace -1 1)
                                                (("2"
                                                  (mult-by 1 "abs(c)")
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand "A" 1)
                                          (("2"
                                            (typepred "x")
                                            (("2"
                                              (expand "A" -2)
                                              (("2"
                                                (expand "D_downd")
                                                (("2"
                                                  (expand "D_down")
                                                  (("2"
                                                    (lemma "asso_v")
                                                    (("2"
                                                      (inst
                                                       -1
                                                       "x / c"
                                                       "c"
                                                       "v")
                                                      (("1"
                                                        (replace -1 1)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (mult-by
                                                                 2
                                                                 "c")
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (assert)
                                                        (("2"
                                                          (typepred
                                                           "v")
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("3" (assert) nil nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (typepred "e")
                                      (("2"
                                        (div-by 1 "abs(c)")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (flatten)
                              (("2"
                                (skeep)
                                (("2"
                                  (lemma "mult_zero")
                                  (("2"
                                    (inst -1 "c*v")
                                    (("1"
                                      (typepred "c*v" "v")
                                      (("1"
                                        (replace -4 -2)
                                        (("1"
                                          (replace -2 -5)
                                          (("1"
                                            (replace -5 1)
                                            (("1"
                                              (hide -1 -2 -3 -4)
                                              (("1"
                                                (lemma "mult_zero")
                                                (("1"
                                                  (inst -1 "v")
                                                  (("1"
                                                    (typepred "v")
                                                    (("1"
                                                      (replace -2 -3)
                                                      (("1"
                                                        (replace -3 -6)
                                                        (("1"
                                                          (lemma
                                                           "zero_id")
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "p")
                                                            (("1"
                                                              (typepred
                                                               "p")
                                                              (("1"
                                                                (replace
                                                                 -2
                                                                 -4)
                                                                (("1"
                                                                  (hide
                                                                   -1
                                                                   -2
                                                                   -5)
                                                                  (("1"
                                                                    (replace
                                                                     -2
                                                                     -7)
                                                                    (("1"
                                                                      (replace
                                                                       -2
                                                                       1)
                                                                      (("1"
                                                                        (lemma
                                                                         "asso_v")
                                                                        (("1"
                                                                          (inst
                                                                           -8
                                                                           "epsilon/abs(c)")
                                                                          (("1"
                                                                            (skeep)
                                                                            (("1"
                                                                              (inst
                                                                               1
                                                                               "delta/abs(c)")
                                                                              (("1"
                                                                                (skeep)
                                                                                (("1"
                                                                                  (inst
                                                                                   -10
                                                                                   "c*x")
                                                                                  (("1"
                                                                                    (split)
                                                                                    (("1"
                                                                                      (mult-by
                                                                                       -1
                                                                                       "abs(c)")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (lemma
                                                                                           "abs_mult")
                                                                                          (("1"
                                                                                            (inst
                                                                                             -1
                                                                                             "(f(p + c * x * v) - f(p)) / (c * x) - l"
                                                                                             "c")
                                                                                            (("1"
                                                                                              (replace
                                                                                               -1
                                                                                               -2
                                                                                               rl)
                                                                                              (("1"
                                                                                                (hide
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (case
                                                                                                     "(f(p + c * x * v) - f(p)) / (c * x) * c  = (f(p + x * (c * v)) - f(p)) / x")
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (case
                                                                                                       "NOT (f(p + c * x * v) - f(p)) / (c * x) * c = (f(p + c * x * v) - f(p)) / x")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (replace
                                                                                                         -1
                                                                                                         1)
                                                                                                        (("2"
                                                                                                          (case
                                                                                                           "NOT p + c * x * v = p + x * (c * v)")
                                                                                                          (("1"
                                                                                                            (lemma
                                                                                                             "asso_v")
                                                                                                            (("1"
                                                                                                              (inst
                                                                                                               -1
                                                                                                               "c"
                                                                                                               "x"
                                                                                                               "v")
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (replace
                                                                                                                   -1
                                                                                                                   1
                                                                                                                   rl)
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    (("1"
                                                                                                                      (hide
                                                                                                                       -4)
                                                                                                                      (("1"
                                                                                                                        (lemma
                                                                                                                         "asso_1_scal")
                                                                                                                        (("1"
                                                                                                                          (inst
                                                                                                                           -1
                                                                                                                           "v"
                                                                                                                           "c"
                                                                                                                           "x")
                                                                                                                          (("1"
                                                                                                                            (expand
                                                                                                                             "*"
                                                                                                                             1)
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (expand
                                                                                       "fullset"
                                                                                       1)
                                                                                      (("2"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil)
                                                                                     ("3"
                                                                                      (lemma
                                                                                       "abs_mult")
                                                                                      (("3"
                                                                                        (inst
                                                                                         -1
                                                                                         "c"
                                                                                         "x")
                                                                                        (("3"
                                                                                          (replace
                                                                                           -1
                                                                                           1)
                                                                                          (("3"
                                                                                            (div-by
                                                                                             1
                                                                                             "abs(c)")
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "A"
                                                                                       1)
                                                                                      (("2"
                                                                                        (typepred
                                                                                         "x")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "A")
                                                                                          (("2"
                                                                                            (expand
                                                                                             "D_downd")
                                                                                            (("2"
                                                                                              (expand
                                                                                               "D_down")
                                                                                              (("2"
                                                                                                (flatten)
                                                                                                (("2"
                                                                                                  (lemma
                                                                                                   "asso_v")
                                                                                                  (("2"
                                                                                                    (inst
                                                                                                     -1
                                                                                                     "x"
                                                                                                     "c"
                                                                                                     "v")
                                                                                                    (("2"
                                                                                                      (replace
                                                                                                       -1
                                                                                                       -2)
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (typepred
                                                                                                           "c")
                                                                                                          (("2"
                                                                                                            (div-by
                                                                                                             2
                                                                                                             "c")
                                                                                                            (("2"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (split)
                                                                                (("1"
                                                                                  (mult-by
                                                                                   1
                                                                                   "abs(c)")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (mult-by
                                                                                     1
                                                                                     "abs(c)")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("3"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (split)
                                                                            (("1"
                                                                              (mult-by
                                                                               1
                                                                               "abs(c)")
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (mult-by
                                                                               1
                                                                               "abs(c)")
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("3"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (typepred "v")
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (typepred "c*v" "v")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" directional_deriv_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (nnreal type-eq-decl nil real_types nil)
    (scal_zero formula-decl nil vector_arithmetic nil)
    (directional_deriv? const-decl "bool" directional_deriv_def nil)
    (derivable? const-decl "bool" derivatives_def analysis)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (convergent? const-decl "bool" lim_of_functions analysis)
    (real_times_real_is_real application-judgement "real" reals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (convergence const-decl "bool" convergence_functions analysis)
    (zero_id formula-decl nil vector_arithmetic nil)
    (epsilon skolem-const-decl "posreal" directional_deriv_def nil)
    (delta skolem-const-decl "posreal" directional_deriv_def nil)
    (x skolem-const-decl "(A(0))" directional_deriv_def nil)
    (both_sides_div_pos_lt1 formula-decl nil real_props nil)
    (times_div_cancel1 formula-decl nil extra_real_props nil)
    (both_sides_times_pos_lt1 formula-decl nil real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (abs_mult formula-decl nil real_props nil)
    (asso_1_scal formula-decl nil vector_arithmetic nil)
    (both_sides_div_pos_ge1 formula-decl nil real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (both_sides_times_pos_le1_imp formula-decl nil extra_real_props
     nil)
    (times_div_cancel2 formula-decl nil extra_real_props nil)
    (abs_nat formula-decl nil abs_lems reals)
    (both_sides_div_pos_gt1 formula-decl nil real_props nil)
    (D_down const-decl "bool" init_partial_def nil)
    (both_sides_times_pos_ge1 formula-decl nil real_props nil)
    (asso_v formula-decl nil vector_arithmetic nil)
    (fullset const-decl "set" sets nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (div_cancel2 formula-decl nil real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (< const-decl "bool" reals nil)
    (both_sides_times_pos_ge1_imp formula-decl nil extra_real_props
     nil)
    (abs_div formula-decl nil real_props nil)
    (x skolem-const-decl "(A(0))" directional_deriv_def nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (A const-decl "setof[nzreal]" derivatives_def analysis)
    (setof type-eq-decl nil defined_types nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (* const-decl "VectorN(length(v2))" matrices matrices)
    (Vector type-eq-decl nil matrices matrices)
    (p skolem-const-decl "(D)" directional_deriv_def nil)
    (D skolem-const-decl "(deriv_domain_both_direction?(v))"
     directional_deriv_def nil)
    (D_downd const-decl "bool" directional_deriv_def nil)
    (/= const-decl "boolean" notequal nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (c skolem-const-decl "nnreal" directional_deriv_def nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (e skolem-const-decl "posreal" directional_deriv_def nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (adh const-decl "setof[real]" convergence_functions analysis)
    (convergence const-decl "bool" lim_of_functions analysis)
    (NQ const-decl "real" derivatives_def analysis)
    (restrict const-decl "R" restrict nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (v skolem-const-decl "VectorN(n)" directional_deriv_def nil)
    (direction_zero_derivable formula-decl nil directional_deriv_def
     nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain_both_direction? const-decl "bool"
     derivative_domain_multi nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (directional_derivD? const-decl "bool" directional_deriv_def nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (mult_zero formula-decl nil vector_arithmetic nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil)
  (directional_deriv_scal-1 nil 3741511417
   ("" (skeep)
    (("" (case "v=zero_vec(n)")
      (("1" (replace -1 -2)
        (("1" (replace -1 1)
          (("1" (lemma "scal_zero")
            (("1" (inst -1 "c" "n")
              (("1" (replace -1 1) (("1" (propax) nil nil)) nil)) nil))
            nil))
          nil))
        nil)
       ("2" (case "c=0")
        (("1" (replace -1 2)
          (("1" (lemma "mult_zero")
            (("1" (inst -1 "v")
              (("1" (typepred "v")
                (("1" (replace -2 -3)
                  (("1" (replace -3 2)
                    (("1" (lemma "direction_zero_derivable")
                      (("1" (inst -1 "D" "f" "p")
                        (("1" (assert)
                          (("1" (expand "directional_derivD?")
                            (("1" (inst -1 "p") nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (typepred "v") (("2" (assert) nil nil)) nil))
              nil))
            nil))
          nil)
         ("2" (expand "directional_deriv?")
          (("2" (expand "restrict")
            (("2" (expand "derivable?")
              (("2" (expand "NQ")
                (("2" (expand "convergent?")
                  (("2" (skeep)
                    (("2" (inst 3 "c*l")
                      (("2" (expand "convergence")
                        (("2" (expand "convergence")
                          (("2" (split)
                            (("1" (flatten)
                              (("1"
                                (expand "adh")
                                (("1"
                                  (skeep)
                                  (("1"
                                    (inst -1 "e/abs(c)")
                                    (("1"
                                      (skeep)
                                      (("1"
                                        (inst 1 "x/c")
                                        (("1"
                                          (split)
                                          (("1"
                                            (expand "fullset" 1)
                                            (("1" (propax) nil nil))
                                            nil)
                                           ("2"
                                            (lemma "abs_div")
                                            (("2"
                                              (inst -1 "c" "x")
                                              (("2"
                                                (replace -1 1)
                                                (("2"
                                                  (mult-by 1 "abs(c)")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (postpone)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2" (postpone) nil nil)
                                         ("3" (postpone) nil nil))
                                        nil))
                                      nil)
                                     ("2" (postpone) nil nil)
                                     ("3" (postpone) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (postpone) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (der_f_is_direction_TCC1 0
  (der_f_is_direction_TCC1-1 nil 3789815182
   ("" (skeep)
    (("" (typepred "D")
      (("" (lemma "dd_directionv_implies_dd")
        (("" (typepred "v")
          (("" (inst -4 "D")
            (("" (assert)
              (("" (inst 1 "v")
                (("" (assert)
                  (("" (expand "deriv_domain_direction?")
                    (("" (propax) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (/= const-decl "boolean" notequal nil)
    (deriv_domain_direction? const-decl "bool" derivative_domain_multi
     nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" directional_deriv_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (deriv_domain_direction? const-decl "bool" derivative_domain_multi
     nil)
    (dd_directionv_implies_dd formula-decl nil derivative_domain_multi
     nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (der_f_is_direction subtype "directional_deriv_def.D"
    "(derivative_domain_multi[directional_deriv_def.n].deriv_domain?)")))
 (der_f_is_direction_TCC2 0
  (der_f_is_direction_TCC1-1 nil 3741445385
   ("" (skeep)
    (("" (expand "directional_derivD?")
      (("" (skeep)
        (("" (typepred "D" "f")
          (("" (lemma "diff_imp_direction1")
            (("" (inst -1 "v" "D" "f" "p!1")
              (("" (expand "differentiableD?" -3)
                (("" (inst -3 "p!1") (("" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((directional_derivD? const-decl "bool" directional_deriv_def nil)
    (differentiableD? const-decl "bool" differentiable_def nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (/= const-decl "boolean" notequal nil)
    (deriv_domain_direction? const-decl "bool" derivative_domain_multi
     nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" directional_deriv_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (diff_imp_direction1 formula-decl nil directional_deriv_def nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (der_f_is_direction subtype "directional_deriv_def.f"
    "(directional_deriv_def.directional_derivD?(directional_deriv_def.v, directional_deriv_def.D))")))
 (der_f_is_direction 0
  (der_f_is_direction-2 nil 3741448025
   ("" (skeep)
    (("" (skeep)
      (("" (expand "directional_deriv" 1)
        (("" (expand "directional_deriv" 1)
          (("" (expand "deriv")
            ((""
              (lemma
               "lim_fun_def[(analysis@derivatives_def[(D_downd(D, p, v))].A(0))]")
              (("1"
                (inst -1 "NQ(restrict[real, (D_downd(D, p, v)), real]
                                      (LAMBDA (Delta: real): f(p + Delta * v)),
                                  0)" "der_f(D)(f)(p) * v" "0")
                (("1" (flatten)
                  (("1" (assert)
                    (("1" (assert)
                      (("1" (hide -1)
                        (("1" (expand "convergence" 1)
                          (("1" (expand "convergence" 1)
                            (("1" (split)
                              (("1"
                                (expand "adh" 1)
                                (("1"
                                  (skeep)
                                  (("1"
                                    (typepred "D")
                                    (("1"
                                      (expand
                                       "deriv_domain_direction?"
                                       -1)
                                      (("1"
                                        (inst -1 "e" "_")
                                        (("1"
                                          (inst -1 "p")
                                          (("1"
                                            (skeep)
                                            (("1"
                                              (inst 1 "delta")
                                              (("1"
                                                (expand "fullset" 1)
                                                (("1"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand "A" 1)
                                                (("2"
                                                  (expand "D_downd" 1)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (expand
                                                       "D_down"
                                                       1)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (skeep)
                                (("2"
                                  (case "v=zero_vec(n)")
                                  (("1"
                                    (replace -1 1)
                                    (("1"
                                      (expand "restrict" 1)
                                      (("1"
                                        (expand "NQ" 1)
                                        (("1"
                                          (lemma "mult_zero")
                                          (("1"
                                            (inst -1 "zero_vec(n)")
                                            (("1"
                                              (typepred "zero_vec(n)")
                                              (("1"
                                                (replace -2 -3)
                                                (("1"
                                                  (replace -3 1)
                                                  (("1"
                                                    (lemma "zero_id")
                                                    (("1"
                                                      (inst -1 "p")
                                                      (("1"
                                                        (typepred "p")
                                                        (("1"
                                                          (replace
                                                           -2
                                                           -4)
                                                          (("1"
                                                            (replace
                                                             -4
                                                             1)
                                                            (("1"
                                                              (lemma
                                                               "scal_zero")
                                                              (("1"
                                                                (inst
                                                                 1
                                                                 "1")
                                                                (("1"
                                                                  (skeep)
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     "x"
                                                                     "n")
                                                                    (("1"
                                                                      (replace
                                                                       -1
                                                                       1)
                                                                      (("1"
                                                                        (replace
                                                                         -5
                                                                         1)
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (typepred "zero_vec(n)")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (expand "restrict" 2)
                                    (("2"
                                      (expand "NQ" 2)
                                      (("2"
                                        (typepred "der_f(D)(f)")
                                        (("2"
                                          (inst -1 "p")
                                          (("2"
                                            (expand
                                             "convergence_zero?"
                                             -1)
                                            (("2"
                                              (expand "NQ" -1 1)
                                              (("2"
                                                (lemma "mult_zero")
                                                (("2"
                                                  (inst -1 "v")
                                                  (("1"
                                                    (replace -1 2)
                                                    (("1"
                                                      (typepred "v")
                                                      (("1"
                                                        (typepred "p")
                                                        (("1"
                                                          (replace
                                                           -5
                                                           2)
                                                          (("1"
                                                            (lemma
                                                             "zero_id")
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "p")
                                                              (("1"
                                                                (replace
                                                                 -3
                                                                 -1)
                                                                (("1"
                                                                  (replace
                                                                   -1
                                                                   2)
                                                                  (("1"
                                                                    (inst
                                                                     -9
                                                                     "epsilon/norm_inf(n)(v)")
                                                                    (("1"
                                                                      (skeep)
                                                                      (("1"
                                                                        (inst
                                                                         3
                                                                         "delta/norm_inf(v)")
                                                                        (("1"
                                                                          (skeep)
                                                                          (("1"
                                                                            (inst
                                                                             -8
                                                                             "x*v")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (lemma
                                                                                 "mult_zero")
                                                                                (("1"
                                                                                  (lemma
                                                                                   "sub_zero")
                                                                                  (("1"
                                                                                    (inst
                                                                                     -1
                                                                                     "x*v")
                                                                                    (("1"
                                                                                      (typepred
                                                                                       "x*v")
                                                                                      (("1"
                                                                                        (replace
                                                                                         -10
                                                                                         -2)
                                                                                        (("1"
                                                                                          (replace
                                                                                           -2
                                                                                           -3)
                                                                                          (("1"
                                                                                            (replace
                                                                                             -3
                                                                                             -12)
                                                                                            (("1"
                                                                                              (typepred
                                                                                               "norm_inf(n)")
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "norm?"
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (flatten)
                                                                                                  (("1"
                                                                                                    (inst
                                                                                                     -2
                                                                                                     "v"
                                                                                                     "x")
                                                                                                    (("1"
                                                                                                      (replace
                                                                                                       -2
                                                                                                       -16)
                                                                                                      (("1"
                                                                                                        (mult-by
                                                                                                         -18
                                                                                                         "norm_inf(v)")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (case
                                                                                                             "NOT norm_inf(n)(v) =  norm_inf(v)")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "norm_inf"
                                                                                                                 1
                                                                                                                 1)
                                                                                                                (("1"
                                                                                                                  (propax)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (assert)
                                                                                                              (("2"
                                                                                                                (hide
                                                                                                                 -1
                                                                                                                 -2
                                                                                                                 -3
                                                                                                                 -4
                                                                                                                 -5
                                                                                                                 -6
                                                                                                                 -7
                                                                                                                 -8
                                                                                                                 -9
                                                                                                                 -10)
                                                                                                                (("2"
                                                                                                                  (lemma
                                                                                                                   "abs_div")
                                                                                                                  (("2"
                                                                                                                    (inst
                                                                                                                     -1
                                                                                                                     "(abs(x) * norm_inf(n)(v))"
                                                                                                                     "f(p + x * v) - f(p) - der_f(D)(f)(p) * (x * v)")
                                                                                                                    (("2"
                                                                                                                      (lemma
                                                                                                                       "abs_mult")
                                                                                                                      (("2"
                                                                                                                        (inst
                                                                                                                         -1
                                                                                                                         "abs(x)"
                                                                                                                         "norm_inf(n)(v)")
                                                                                                                        (("2"
                                                                                                                          (expand
                                                                                                                           "abs"
                                                                                                                           -1
                                                                                                                           3)
                                                                                                                          (("2"
                                                                                                                            (expand
                                                                                                                             "abs"
                                                                                                                             -1
                                                                                                                             4)
                                                                                                                            (("2"
                                                                                                                              (replace
                                                                                                                               -1
                                                                                                                               -2)
                                                                                                                              (("2"
                                                                                                                                (replace
                                                                                                                                 -2
                                                                                                                                 -9)
                                                                                                                                (("2"
                                                                                                                                  (mult-by
                                                                                                                                   -9
                                                                                                                                   "norm_inf(n)(v)")
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    (("1"
                                                                                                                                      (case
                                                                                                                                       "NOT abs(f(p + x * v) - f(p) - der_f(D)(f)(p) * (x * v)) /
                                                                                                                         (abs(x) * norm_inf(n)(v))
                                                                                                                         * norm_inf(n)(v) = abs(f(p + x * v) - f(p) - der_f(D)(f)(p) * (x * v)) /
                                                                                                                         (abs(x))")
                                                                                                                                      (("1"
                                                                                                                                        (assert)
                                                                                                                                        nil
                                                                                                                                        nil)
                                                                                                                                       ("2"
                                                                                                                                        (replace
                                                                                                                                         -1
                                                                                                                                         -10)
                                                                                                                                        (("2"
                                                                                                                                          (hide
                                                                                                                                           -1
                                                                                                                                           -2
                                                                                                                                           -3
                                                                                                                                           -4
                                                                                                                                           -5)
                                                                                                                                          (("2"
                                                                                                                                            (lemma
                                                                                                                                             "abs_div")
                                                                                                                                            (("2"
                                                                                                                                              (inst
                                                                                                                                               -1
                                                                                                                                               "x"
                                                                                                                                               "f(p + x * v) - f(p) - der_f(D)(f)(p) * (x * v)")
                                                                                                                                              (("2"
                                                                                                                                                (replace
                                                                                                                                                 -1
                                                                                                                                                 -6
                                                                                                                                                 rl)
                                                                                                                                                (("2"
                                                                                                                                                  (case
                                                                                                                                                   "NOT (f(p + x * v) - f(p) - der_f(D)(f)(p) * (x * v)) / x = (f(p + x * v) - f(p)) / x - der_f(D)(f)(p) * v")
                                                                                                                                                  (("1"
                                                                                                                                                    (lemma
                                                                                                                                                     "div_distributes_minus")
                                                                                                                                                    (("1"
                                                                                                                                                      (inst
                                                                                                                                                       -1
                                                                                                                                                       "x"
                                                                                                                                                       "f(p + x * v) - f(p)"
                                                                                                                                                       "der_f(D)(f)(p) * (x * v)")
                                                                                                                                                      (("1"
                                                                                                                                                        (replace
                                                                                                                                                         -1
                                                                                                                                                         1)
                                                                                                                                                        (("1"
                                                                                                                                                          (replace
                                                                                                                                                           -1
                                                                                                                                                           1
                                                                                                                                                           rl)
                                                                                                                                                          (("1"
                                                                                                                                                            (lemma
                                                                                                                                                             "scal_cancel")
                                                                                                                                                            (("1"
                                                                                                                                                              (lemma
                                                                                                                                                               "scal_asso")
                                                                                                                                                              (("1"
                                                                                                                                                                (assert)
                                                                                                                                                                (("1"
                                                                                                                                                                  (typepred
                                                                                                                                                                   "x*v")
                                                                                                                                                                  (("1"
                                                                                                                                                                    (inst
                                                                                                                                                                     -3
                                                                                                                                                                     "der_f(D)(f)(p)"
                                                                                                                                                                     "v"
                                                                                                                                                                     "x")
                                                                                                                                                                    (("1"
                                                                                                                                                                      (replace
                                                                                                                                                                       -3
                                                                                                                                                                       1)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (assert)
                                                                                                                                                                        nil
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil)
                                                                                                                                                   ("2"
                                                                                                                                                    (replace
                                                                                                                                                     -1
                                                                                                                                                     -7)
                                                                                                                                                    (("2"
                                                                                                                                                      (propax)
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil)
                                                                                                                                   ("2"
                                                                                                                                    (hide
                                                                                                                                     -)
                                                                                                                                    (("2"
                                                                                                                                      (typepred
                                                                                                                                       "norm_inf(n)")
                                                                                                                                      (("2"
                                                                                                                                        (expand
                                                                                                                                         "norm?"
                                                                                                                                         -1)
                                                                                                                                        (("2"
                                                                                                                                          (flatten)
                                                                                                                                          (("2"
                                                                                                                                            (inst
                                                                                                                                             -3
                                                                                                                                             "v")
                                                                                                                                            (("2"
                                                                                                                                              (assert)
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (hide
                                                                                                           -)
                                                                                                          (("2"
                                                                                                            (typepred
                                                                                                             "norm_inf(n)")
                                                                                                            (("2"
                                                                                                              (expand
                                                                                                               "norm?"
                                                                                                               -1)
                                                                                                              (("2"
                                                                                                                (flatten)
                                                                                                                (("2"
                                                                                                                  (inst
                                                                                                                   -3
                                                                                                                   "v")
                                                                                                                  (("2"
                                                                                                                    (hide
                                                                                                                     -1
                                                                                                                     -2
                                                                                                                     -4)
                                                                                                                    (("2"
                                                                                                                      (flatten)
                                                                                                                      (("2"
                                                                                                                        (case
                                                                                                                         "NOT norm_inf(v) = norm_inf(n)(v)")
                                                                                                                        (("1"
                                                                                                                          (expand
                                                                                                                           "norm_inf"
                                                                                                                           1
                                                                                                                           2)
                                                                                                                          (("1"
                                                                                                                            (propax)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (split)
                                                                              (("1"
                                                                                (typepred
                                                                                 "x*v"
                                                                                 "v")
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (expand
                                                                                 "NQ"
                                                                                 1)
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (typepred
                                                                                     "p")
                                                                                    (("2"
                                                                                      (typepred
                                                                                       "v")
                                                                                      (("2"
                                                                                        (typepred
                                                                                         "x*v")
                                                                                        (("2"
                                                                                          (hide
                                                                                           -1
                                                                                           -3
                                                                                           -6
                                                                                           -10
                                                                                           -13)
                                                                                          (("2"
                                                                                            (flatten)
                                                                                            (("2"
                                                                                              (typepred
                                                                                               "D")
                                                                                              (("2"
                                                                                                (typepred
                                                                                                 "x")
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "A"
                                                                                                   -2)
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "D_downd"
                                                                                                     -2)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "D_down"
                                                                                                       -2)
                                                                                                      (("2"
                                                                                                        (propax)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("3"
                                                                                (assert)
                                                                                (("3"
                                                                                  (case
                                                                                   "x * v = zero_vec(n)")
                                                                                  (("1"
                                                                                    (lemma
                                                                                     "zero_scal")
                                                                                    (("1"
                                                                                      (inst
                                                                                       -1
                                                                                       "v"
                                                                                       "x")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (split)
                                                                          (("1"
                                                                            (mult-by
                                                                             1
                                                                             "norm_inf(v)")
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil)
                                                                             ("2"
                                                                              (case
                                                                               "NOT norm_inf(n)(v) = norm_inf(v)")
                                                                              (("1"
                                                                                (expand
                                                                                 "norm_inf"
                                                                                 1
                                                                                 1)
                                                                                (("1"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (replace
                                                                                   -1
                                                                                   1
                                                                                   rl)
                                                                                  (("2"
                                                                                    (typepred
                                                                                     "norm_inf(n)")
                                                                                    (("2"
                                                                                      (expand
                                                                                       "norm?"
                                                                                       -1)
                                                                                      (("2"
                                                                                        (flatten)
                                                                                        (("2"
                                                                                          (inst
                                                                                           -3
                                                                                           "v")
                                                                                          (("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (mult-by
                                                                             1
                                                                             "norm_inf(v)")
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("3"
                                                                          (case
                                                                           "NOT norm_inf(v) = norm_inf(n)(v)")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (expand
                                                                               "norm_inf"
                                                                               1
                                                                               2)
                                                                              (("1"
                                                                                (propax)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (replace
                                                                               -1
                                                                               1)
                                                                              (("2"
                                                                                (typepred
                                                                                 "norm_inf(n)")
                                                                                (("2"
                                                                                  (expand
                                                                                   "norm?"
                                                                                   -1)
                                                                                  (("2"
                                                                                    (flatten)
                                                                                    (("2"
                                                                                      (inst
                                                                                       -3
                                                                                       "v")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("4"
                                                                          (typepred
                                                                           "v")
                                                                          (("4"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (split)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (mult-by
                                                                           1
                                                                           "norm_inf(n)(v)")
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil)
                                                                           ("2"
                                                                            (typepred
                                                                             "norm_inf(n)")
                                                                            (("2"
                                                                              (expand
                                                                               "norm?")
                                                                              (("2"
                                                                                (flatten)
                                                                                (("2"
                                                                                  (inst
                                                                                   -3
                                                                                   "v")
                                                                                  (("2"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (mult-by
                                                                         1
                                                                         "norm_inf(n)(v)")
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("3"
                                                                      (typepred
                                                                       "norm_inf(n)")
                                                                      (("3"
                                                                        (expand
                                                                         "norm?")
                                                                        (("3"
                                                                          (flatten)
                                                                          (("3"
                                                                            (inst
                                                                             -3
                                                                             "v")
                                                                            (("3"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("4"
                                                                      (typepred
                                                                       "v")
                                                                      (("4"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (typepred "v")
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (expand "not_one_element?")
                  (("2" (skeep)
                    (("2" (typepred "D")
                      (("2" (expand "deriv_domain_direction?")
                        (("2" (inst-cp -1 "1" "p")
                          (("2" (skeep)
                            (("2" (inst -1 "delta" "p")
                              (("2"
                                (skeep)
                                (("2"
                                  (case "delta=delta_1")
                                  (("1" (assert) nil nil)
                                   ("2"
                                    (expand "abs" -1)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (case "x=delta")
                                        (("1"
                                          (inst 2 "delta_1")
                                          (("1" (assert) nil nil)
                                           ("2"
                                            (expand "D_downd" 1)
                                            (("2"
                                              (expand "D_down" 1)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (inst 3 "delta")
                                          (("1" (assert) nil nil)
                                           ("2"
                                            (expand "D_downd" 1)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (expand "D_down" 1)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (assert)
                  (("3" (typepred "D")
                    (("3" (typepred "p")
                      (("3" (lemma "D_downd_der_domain")
                        (("3" (inst -1 "v" "D" "p") nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("4" (skeep)
                  (("4" (typepred "p+Delta*v")
                    (("4" (typepred "p")
                      (("4" (typepred "Delta*v")
                        (("4" (typepred "v")
                          (("4" (assert)
                            (("4" (expand "max" -)
                              (("4" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 2)
                (("2" (typepred "D")
                  (("2" (expand "deriv_domain_direction?" -1)
                    (("2" (expand "not_one_element?" 1)
                      (("2" (skeep)
                        (("2" (typepred "x")
                          (("2" (expand "D_downd" -1)
                            (("2" (expand "D_down" -1)
                              (("2"
                                (assert)
                                (("2"
                                  (case "x=0")
                                  (("1"
                                    (inst -3 "1" "p")
                                    (("1"
                                      (skeep)
                                      (("1"
                                        (inst 1 "delta")
                                        (("1" (assert) nil nil)
                                         ("2"
                                          (expand "D_downd" 1)
                                          (("2"
                                            (expand "D_down" 1)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (assert)
                                    (("2"
                                      (inst -2 "abs(x)/2" "p")
                                      (("1"
                                        (skeep)
                                        (("1"
                                          (inst 2 "delta")
                                          (("1" (assert) nil nil)
                                           ("2"
                                            (expand "D_downd" 1)
                                            (("2"
                                              (expand "D_down" 1)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide 2)
                                        (("2"
                                          (typepred "D")
                                          (("2"
                                            (lemma
                                             "D_downd_der_domain")
                                            (("2"
                                              (inst -1 "v" "D" "p")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (hide 2)
                (("3" (typepred "D")
                  (("3" (lemma "D_downd_der_domain")
                    (("3" (inst -1 "v" "D" "p") nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((directional_deriv const-decl "real" directional_deriv_def nil)
    (A const-decl "setof[nzreal]" derivatives_def analysis)
    (setof type-eq-decl nil defined_types nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (deriv_domain_direction? const-decl "bool" derivative_domain_multi
     nil)
    (D_downd const-decl "bool" directional_deriv_def nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" directional_deriv_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (lim_fun_def formula-decl nil lim_of_functions analysis)
    (deriv_domain? const-decl "bool" deriv_domain_def analysis)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (D_downd_der_domain formula-decl nil directional_deriv_def nil)
    (delta skolem-const-decl "{delta: posreal | D(p + delta * v)}"
     directional_deriv_def nil)
    (delta_1 skolem-const-decl "{delta: posreal | D(p + delta * v)}"
     directional_deriv_def nil)
    (convergence const-decl "bool" lim_of_functions analysis)
    (delta skolem-const-decl "{delta: posreal | D(p + delta * v)}"
     directional_deriv_def nil)
    (fullset const-decl "set" sets nil)
    (D_down const-decl "bool" init_partial_def nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (adh const-decl "setof[real]" convergence_functions analysis)
    (mult_zero formula-decl nil vector_arithmetic nil)
    (scal_zero formula-decl nil vector_arithmetic nil)
    (zero_id formula-decl nil vector_arithmetic nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (both_sides_times_pos_ge1 formula-decl nil real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (both_sides_times_pos_le1_imp formula-decl nil extra_real_props
     nil)
    (zero_scal formula-decl nil vector_arithmetic nil)
    (sub_zero formula-decl nil vector_arithmetic nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (abs_div formula-decl nil real_props nil)
    (abs_mult formula-decl nil real_props nil)
    (abs_nat formula-decl nil abs_lems reals)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (scal_asso formula-decl nil vector_arithmetic nil)
    (scal_cancel formula-decl nil vector_arithmetic nil)
    (div_distributes_minus formula-decl nil real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (div_cancel2 formula-decl nil real_props nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (both_sides_times_pos_lt1 formula-decl nil real_props nil)
    (x skolem-const-decl
     "(analysis@derivatives_def[(D_downd(D, p, v))].A(0))"
     directional_deriv_def nil)
    (delta skolem-const-decl "posreal" directional_deriv_def nil)
    (norm_inf const-decl "[(cons?) -> nonneg_real]" norms nil)
    (epsilon skolem-const-decl "posreal" directional_deriv_def nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (norm_inf const-decl "(norm?(m))" norms nil)
    (norm? const-decl "bool" norms nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (convergence const-decl "bool" convergence_functions analysis)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (convergent? const-decl "bool" lim_of_functions analysis)
    (der_f const-decl "{gg: [(D) -> VectorN(n)] |
   FORALL (p: (D)):
     convergence_zero?(NQ(D, p), NQ(f, gg(p), p), zero_vec(n))}"
     differentiable_def nil)
    (NQ const-decl "real" differentiable_def nil)
    (NQ const-decl "bool" differentiable_def nil)
    (convergence_zero? const-decl "bool" vector_sequences nil)
    (* const-decl "real" matrices matrices)
    (differentiableD? const-decl "bool" differentiable_def nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (restrict const-decl "R" restrict nil)
    (NQ const-decl "real" derivatives_def analysis)
    (* const-decl "VectorN(length(v2))" matrices matrices)
    (p skolem-const-decl "(D)" directional_deriv_def nil)
    (D skolem-const-decl "(deriv_domain_direction?(v))"
     directional_deriv_def nil)
    (v skolem-const-decl "{vv: VectorN(n) | vv /= zero_vec(n)}"
     directional_deriv_def nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (Vector type-eq-decl nil matrices matrices)
    (delta skolem-const-decl "{delta: posreal | D(p + delta * v)}"
     directional_deriv_def nil)
    (x skolem-const-decl "(D_downd(D, p, v))" directional_deriv_def
     nil)
    (delta skolem-const-decl "{delta: posreal | D(p + delta * v)}"
     directional_deriv_def nil)
    (deriv const-decl "real" derivatives_def analysis)
    (directional_deriv const-decl "real" directional_deriv_def nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil)
  (der_f_is_direction-1 nil 3741447247
   ("" (skeep)
    (("" (skeep)
      (("" (expand "directional_deriv" 1)
        (("" (expand "deriv")
          (("" (lemma "lim_fun_def[(D_down(D, p, v))]")
            ((""
              (inst -1 "NQ(restrict[real, (D_down(D, p, v)), real]
                  (LAMBDA (Delta: real): f(p + Delta * v)),
              0)" "der_f(D)(f)(p) * v" "0")
              (("1" (assert)
                (("1" (flatten)
                  (("1" (hide -1) (("1" (postpone) nil nil)) nil))
                  nil))
                nil)
               ("2" (postpone) nil nil) ("3" (postpone) nil nil)
               ("4" (postpone) nil nil) ("5" (postpone) nil nil)
               ("6" (postpone) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (der_f_is_direction1_TCC1 0
  (der_f_is_direction1_TCC1-1 nil 3741445988
   ("" (skeep)
    (("" (typepred "D")
      (("" (lemma "dd_direction_implies_dd")
        (("" (inst?) (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((deriv_domain_all_direction? const-decl "bool"
     derivative_domain_multi nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" directional_deriv_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (dd_direction_implies_dd formula-decl nil derivative_domain_multi
     nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (der_f_is_direction1 subtype "directional_deriv_def.D"
    "(derivative_domain_multi[directional_deriv_def.n].deriv_domain?)")))
 (der_f_is_direction1_TCC2 0
  (der_f_is_direction1_TCC2-1 nil 3789815182 ("" (subtype-tcc) nil nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices matrices)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain_all_direction? const-decl "bool"
     derivative_domain_multi nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (differentiableD? const-decl "bool" differentiable_def nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (differentiable? const-decl "bool" differentiable_def nil)
    (convergence_zero? const-decl "bool" vector_sequences nil)
    (NQ const-decl "real" differentiable_def nil)
    (* const-decl "real" matrices matrices)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (norm_inf const-decl "[(cons?) -> nonneg_real]" norms nil)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (sub const-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (norm_inf const-decl "(norm?(m))" norms nil)
    (deriv_domain_direction? const-decl "bool" derivative_domain_multi
     nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (n formal-const-decl "posnat" directional_deriv_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (deriv_domain_direction? const-decl "bool" derivative_domain_multi
     nil))
   nil
   (der_f_is_direction1 subtype "directional_deriv_def.D"
    "(derivative_domain_multi[directional_deriv_def.n].deriv_domain_direction?(directional_deriv_def.v))")))
 (der_f_is_direction1_TCC3 0
  (der_f_is_direction1_TCC2-1 nil 3741445988
   ("" (skeep)
    (("" (typepred "v" "f")
      (("" (lemma "diff_imp_direction")
        (("" (expand "directional_derivD?")
          (("" (skeep)
            (("" (expand "differentiableD?" -4)
              (("" (inst -4 "p!1")
                (("" (inst -1 "D" "f" "p!1")
                  (("" (assert) (("" (inst -1 "v") nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((deriv_domain_all_direction? const-decl "bool"
     derivative_domain_multi nil)
    (differentiableD? const-decl "bool" differentiable_def nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" directional_deriv_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (directional_derivD? const-decl "bool" directional_deriv_def nil)
    (diff_imp_direction formula-decl nil directional_deriv_def nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (der_f_is_direction1 subtype "directional_deriv_def.f"
    "(directional_deriv_def.directional_derivD?(directional_deriv_def.v, directional_deriv_def.D))")))
 (der_f_is_direction1 0
  (der_f_is_direction1-1 nil 3741452266
   ("" (lemma "der_f_is_direction")
    (("" (skeep)
      (("" (skeep)
        (("" (inst -1 "v" "D" "f" "p")
          (("" (case "NOT v= zero_vec(n)")
            (("1" (assert) nil nil)
             ("2" (replace -1 2)
              (("2" (lemma "dot_zero")
                (("2" (inst -1 "der_f(D)(f)(p)" "n")
                  (("1" (replace -1 2)
                    (("1" (expand "directional_deriv" 2)
                      (("1" (expand "directional_deriv" 2)
                        (("1" (expand "deriv" 2)
                          (("1"
                            (lemma
                             "lim_fun_def[(analysis@derivatives_def
                                   [(D_downd(D, p, vector_arithmetic.zero_vec(n)))].A
                                   (0))]")
                            (("1"
                              (inst -1
                               "NQ(restrict[real, (D_downd(D, p, zero_vec(n))), real]
                                                  (LAMBDA (Delta: real): f(p + Delta * zero_vec(n))),
                                              0)" "0" "0")
                              (("1"
                                (assert)
                                (("1"
                                  (hide 2 3)
                                  (("1"
                                    (expand "convergence" 1)
                                    (("1"
                                      (expand "convergence" 1)
                                      (("1"
                                        (split)
                                        (("1"
                                          (expand "adh" 1)
                                          (("1"
                                            (skeep)
                                            (("1"
                                              (inst 1 "e/2")
                                              (("1"
                                                (expand "fullset" 1)
                                                (("1"
                                                  (expand "abs" 1)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand "A" 1)
                                                (("2"
                                                  (expand "D_downd" 1)
                                                  (("2"
                                                    (lemma "scal_zero")
                                                    (("2"
                                                      (inst
                                                       -1
                                                       "e/2"
                                                       "n")
                                                      (("2"
                                                        (typepred "p")
                                                        (("2"
                                                          (lemma
                                                           "zero_id")
                                                          (("2"
                                                            (inst
                                                             -1
                                                             "p")
                                                            (("2"
                                                              (replace
                                                               -3
                                                               -1)
                                                              (("2"
                                                                (expand
                                                                 "D_down"
                                                                 1)
                                                                (("2"
                                                                  (lemma
                                                                   "scal_zero")
                                                                  (("2"
                                                                    (typepred
                                                                     "p")
                                                                    (("2"
                                                                      (lemma
                                                                       "zero_id")
                                                                      (("2"
                                                                        (inst
                                                                         -1
                                                                         "p")
                                                                        (("2"
                                                                          (replace
                                                                           -3
                                                                           -1)
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (skeep)
                                          (("2"
                                            (inst 1 "1")
                                            (("2"
                                              (skeep)
                                              (("2"
                                                (expand "NQ" 1)
                                                (("2"
                                                  (expand "restrict" 1)
                                                  (("2"
                                                    (lemma "scal_zero")
                                                    (("2"
                                                      (inst -1 "x" "n")
                                                      (("2"
                                                        (lemma
                                                         "scal_zero")
                                                        (("2"
                                                          (inst
                                                           -1
                                                           "0"
                                                           "n")
                                                          (("2"
                                                            (replace
                                                             -1
                                                             1)
                                                            (("2"
                                                              (replace
                                                               -2
                                                               1)
                                                              (("2"
                                                                (lemma
                                                                 "zero_id")
                                                                (("2"
                                                                  (inst
                                                                   -1
                                                                   "p")
                                                                  (("2"
                                                                    (typepred
                                                                     "p")
                                                                    (("2"
                                                                      (replace
                                                                       -2
                                                                       -4)
                                                                      (("2"
                                                                        (replace
                                                                         -4
                                                                         1)
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide 2 3)
                                (("2"
                                  (hide -1 -2)
                                  (("2"
                                    (expand "not_one_element?")
                                    (("2"
                                      (skeep)
                                      (("2"
                                        (typepred "D")
                                        (("2"
                                          (expand
                                           "deriv_domain_all_direction?")
                                          (("2"
                                            (inst -1 "zero_vec(n)")
                                            (("2"
                                              (case "x=1")
                                              (("1"
                                                (inst 1 "2")
                                                (("1" (assert) nil nil)
                                                 ("2"
                                                  (expand "D_downd" 1)
                                                  (("2"
                                                    (lemma "scal_zero")
                                                    (("2"
                                                      (inst -1 "2" "n")
                                                      (("2"
                                                        (lemma
                                                         "zero_id")
                                                        (("2"
                                                          (inst -1 "p")
                                                          (("2"
                                                            (typepred
                                                             "p")
                                                            (("2"
                                                              (replace
                                                               -2
                                                               -4)
                                                              (("2"
                                                                (expand
                                                                 "D_down"
                                                                 1)
                                                                (("2"
                                                                  (lemma
                                                                   "scal_zero")
                                                                  (("2"
                                                                    (lemma
                                                                     "zero_id")
                                                                    (("2"
                                                                      (inst
                                                                       -1
                                                                       "p")
                                                                      (("2"
                                                                        (typepred
                                                                         "p")
                                                                        (("2"
                                                                          (replace
                                                                           -2
                                                                           -4)
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (inst 2 "1")
                                                (("1" (assert) nil nil)
                                                 ("2"
                                                  (expand "D_downd")
                                                  (("2"
                                                    (expand "D_down")
                                                    (("2"
                                                      (lemma "zero_id")
                                                      (("2"
                                                        (lemma
                                                         "scal_zero")
                                                        (("2"
                                                          (inst
                                                           -1
                                                           "1"
                                                           "n")
                                                          (("2"
                                                            (replace
                                                             -1
                                                             1)
                                                            (("2"
                                                              (inst
                                                               -2
                                                               "p")
                                                              (("2"
                                                                (typepred
                                                                 "p")
                                                                (("2"
                                                                  (replace
                                                                   -2
                                                                   -5)
                                                                  (("2"
                                                                    (replace
                                                                     -5
                                                                     1)
                                                                    (("2"
                                                                      (propax)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (lemma "D_downd_der_domain")
                                (("3"
                                  (inst -1 "zero_vec(n)" "D" "p")
                                  (("3"
                                    (typepred "D")
                                    (("3"
                                      (expand
                                       "deriv_domain_all_direction?")
                                      (("3"
                                        (expand
                                         "deriv_domain_direction?")
                                        (("3"
                                          (skeep)
                                          (("3"
                                            (inst 1 "e/2")
                                            (("1"
                                              (expand "abs" 1)
                                              (("1" (assert) nil nil))
                                              nil)
                                             ("2"
                                              (lemma "scal_zero")
                                              (("2"
                                                (inst -1 "e/2" "n")
                                                (("2"
                                                  (replace -1 1)
                                                  (("2"
                                                    (lemma "zero_id")
                                                    (("2"
                                                      (inst -1 "p!1")
                                                      (("2"
                                                        (typepred
                                                         "p!1")
                                                        (("2"
                                                          (replace
                                                           -2
                                                           -4)
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("4"
                                (skeep)
                                (("4"
                                  (typepred
                                   "p + Delta * zero_vec(n)"
                                   "p"
                                   "Delta*zero_vec(n)"
                                   "zero_vec(n)")
                                  (("4"
                                    (assert)
                                    (("4"
                                      (expand "max" -)
                                      (("4" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide -1 -2 2 3)
                              (("2"
                                (expand "not_one_element?" 1)
                                (("2"
                                  (skeep)
                                  (("2"
                                    (typepred "x")
                                    (("2"
                                      (inst 1 "x+1")
                                      (("1" (assert) nil nil)
                                       ("2"
                                        (expand "D_downd")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (lemma "scal_zero")
                                            (("2"
                                              (inst-cp -1 "x" "n")
                                              (("2"
                                                (inst -1 "1+x" "n")
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (typepred "D")
                                                    (("2"
                                                      (lemma
                                                       "D_downd_domain")
                                                      (("2"
                                                        (expand
                                                         "D_down")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (flatten)
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (lemma "D_downd_domain")
                              (("3"
                                (inst
                                 -1
                                 "vector_arithmetic.zero_vec(n)"
                                 "D"
                                 "p")
                                nil
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (typepred "der_f[n](D)(f)(p)")
                    (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n formal-const-decl "posnat" directional_deriv_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (/= const-decl "boolean" notequal nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain_direction? const-decl "bool" derivative_domain_multi
     nil)
    (deriv_domain_all_direction? const-decl "bool"
     derivative_domain_multi nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (differentiableD? const-decl "bool" differentiable_def nil)
    (v skolem-const-decl "VectorN(n)" directional_deriv_def nil)
    (p skolem-const-decl "(D)" directional_deriv_def nil)
    (f skolem-const-decl "(differentiableD?(D))" directional_deriv_def
     nil)
    (D skolem-const-decl "(deriv_domain_all_direction?)"
     directional_deriv_def nil)
    (der_f const-decl "{gg: [(D) -> VectorN(n)] |
   FORALL (p: (D)):
     convergence_zero?(NQ(D, p), NQ(f, gg(p), p), zero_vec(n))}"
     differentiable_def nil)
    (NQ const-decl "real" differentiable_def nil)
    (NQ const-decl "bool" differentiable_def nil)
    (convergence_zero? const-decl "bool" vector_sequences nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (directional_deriv const-decl "real" directional_deriv_def nil)
    (deriv const-decl "real" derivatives_def analysis)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (x skolem-const-decl
     "(D_downd(D, p, vector_arithmetic.zero_vec(n)))"
     directional_deriv_def nil)
    (D_downd_domain formula-decl nil directional_deriv_def nil)
    (Vector type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (* const-decl "VectorN(length(v2))" matrices matrices)
    (convergent? const-decl "bool" lim_of_functions analysis)
    (restrict const-decl "R" restrict nil)
    (NQ const-decl "real" derivatives_def analysis)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (convergence const-decl "bool" convergence_functions analysis)
    (abs_nat formula-decl nil abs_lems reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (adh const-decl "setof[real]" convergence_functions analysis)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (e skolem-const-decl "posreal" directional_deriv_def nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (fullset const-decl "set" sets nil)
    (zero_id formula-decl nil vector_arithmetic nil)
    (D_down const-decl "bool" init_partial_def nil)
    (scal_zero formula-decl nil vector_arithmetic nil)
    (convergence const-decl "bool" lim_of_functions analysis)
    (e skolem-const-decl "posreal" directional_deriv_def nil)
    (p!1 skolem-const-decl "(D)" directional_deriv_def nil)
    (deriv_domain_direction? const-decl "bool" derivative_domain_multi
     nil)
    (D_downd_der_domain formula-decl nil directional_deriv_def nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (deriv_domain? const-decl "bool" deriv_domain_def analysis)
    (A const-decl "setof[nzreal]" derivatives_def analysis)
    (setof type-eq-decl nil defined_types nil)
    (D_downd const-decl "bool" directional_deriv_def nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (lim_fun_def formula-decl nil lim_of_functions analysis)
    (directional_deriv const-decl "real" directional_deriv_def nil)
    (dot_zero formula-decl nil vector_arithmetic nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (der_f_is_direction formula-decl nil directional_deriv_def nil))
   shostak))
 (directional_deriv_scalar_TCC1 0
  (directional_deriv_scalar_TCC3-1 nil 3741506389
   ("" (skeep)
    (("" (typepred "D")
      (("" (lemma "dd_directionv_implies_dd")
        (("" (inst?)
          (("" (assert)
            (("" (expand "deriv_domain_both_direction?" -1)
              (("" (flatten) (("" (inst 1 "v") nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (/= const-decl "boolean" notequal nil)
    (deriv_domain_both_direction? const-decl "bool"
     derivative_domain_multi nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" directional_deriv_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (dd_directionv_implies_dd formula-decl nil derivative_domain_multi
     nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (directional_deriv_scalar subtype "directional_deriv_def.D"
    "(derivative_domain_multi[directional_deriv_def.n].deriv_domain?)")))
 (directional_deriv_scalar_TCC2 0
  (directional_deriv_scalar_TCC4-1 nil 3741516239
   ("" (skeep)
    (("" (typepred "f")
      (("" (expand "directional_derivD?")
        (("" (skeep)
          (("" (lemma "diff_imp_direction1")
            (("" (inst?)
              (("" (assert)
                (("" (expand "differentiableD?" -1)
                  (("" (inst -1 "p!1") nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (/= const-decl "boolean" notequal nil)
    (deriv_domain_both_direction? const-decl "bool"
     derivative_domain_multi nil)
    (differentiableD? const-decl "bool" differentiable_def nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" directional_deriv_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (deriv_domain_direction? const-decl "bool" derivative_domain_multi
     nil)
    (diff_imp_direction1 formula-decl nil directional_deriv_def nil)
    (directional_derivD? const-decl "bool" directional_deriv_def nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (directional_deriv_scalar subtype "directional_deriv_def.f"
    "(directional_deriv_def.directional_derivD?(directional_deriv_def.v, directional_deriv_def.D))")))
 (directional_deriv_scalar_TCC3 0
  (directional_deriv_scalar_TCC2-1 nil 3741506389
   ("" (skeep) (("" (typepred "c*v" "v") (("" (assert) nil nil)) nil))
    nil)
   ((zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (/= const-decl "boolean" notequal nil)
    (n formal-const-decl "posnat" directional_deriv_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (nnreal type-eq-decl nil real_types nil)
    (* const-decl "VectorN(length(v2))" matrices matrices)
    (VectorN type-eq-decl nil matrices matrices)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Vector type-eq-decl nil matrices matrices)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (directional_deriv_scalar subtype
    "matrices.*(directional_deriv_def.c, directional_deriv_def.v)"
    "matrices.VectorN(directional_deriv_def.n)")))
 (directional_deriv_scalar_TCC4 0
  (directional_deriv_scalar_TCC4-1 nil 3789815182
   ("" (skeep)
    (("" (typepred "D")
      (("" (expand "deriv_domain_direction?")
        (("" (expand "deriv_domain_both_direction?" -1)
          (("" (skeep 1)
            (("" (case "c=0")
              (("1" (inst 1 "e/2")
                (("1" (grind) nil nil)
                 ("2" (lemma "mult_zero")
                  (("2" (inst -1 "v")
                    (("1" (replace -2 1)
                      (("1" (replace -1 1)
                        (("1" (lemma "scal_zero")
                          (("1" (inst -1 "e/2" "length(v)")
                            (("1" (replace -1)
                              (("1"
                                (assert)
                                (("1"
                                  (lemma "zero_id")
                                  (("1"
                                    (inst -1 "p!1")
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (typepred "v") (("2" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil)
               ("2" (case "c>0")
                (("1" (expand "deriv_domain_direction?" -2)
                  (("1" (inst -2 "e*c" "p!1")
                    (("1" (assert)
                      (("1" (skeep)
                        (("1" (inst 2 "delta/c")
                          (("1" (div-by -2 "c")
                            (("1" (lemma "abs_div")
                              (("1"
                                (inst?)
                                (("1"
                                  (assert)
                                  (("1"
                                    (replace -1 2)
                                    (("1"
                                      (expand "abs" 2 2)
                                      (("1" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert)
                            (("2" (split 1)
                              (("1"
                                (assert)
                                (("1"
                                  (mult-by 1 "c")
                                  (("1" (assert) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (mult-by 1 "c")
                                (("2" (assert) nil nil))
                                nil)
                               ("3"
                                (typepred "delta")
                                (("3"
                                  (case
                                   "p!1 + delta * v = p!1 + delta / c * (c * v)")
                                  (("1" (assert) nil nil)
                                   ("2"
                                    (assert)
                                    (("2"
                                      (hide 2 3)
                                      (("2"
                                        (hide -)
                                        (("2"
                                          (lemma "add_cancel")
                                          (("2"
                                            (case
                                             "delta * v = delta / c * (c * v)")
                                            (("1" (assert) nil nil)
                                             ("2"
                                              (hide -1)
                                              (("2"
                                                (hide 2)
                                                (("2"
                                                  (lemma "asso_v")
                                                  (("2"
                                                    (inst
                                                     -1
                                                     "delta/c"
                                                     "c"
                                                     "v")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (typepred "v")
                                                      (("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert)
                      (("2" (split 1)
                        (("1" (assert)
                          (("1" (div-by 1 "c")
                            (("1" (typepred "e")
                              (("1" (assert) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (div-by 1 "c")
                          (("2" (typepred "e") (("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (case "c<0")
                  (("1" (expand "deriv_domain_direction?" -3)
                    (("1" (inst -3 "e*abs(c)" "p!1")
                      (("1" (skeep)
                        (("1" (inst 3 "delta/abs(c)")
                          (("1" (assert)
                            (("1" (lemma "abs_div")
                              (("1"
                                (inst?)
                                (("1"
                                  (div-by -4 "abs(c)")
                                  (("1"
                                    (assert)
                                    (("1" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert)
                            (("2" (split 1)
                              (("1"
                                (mult-by 1 "abs(c)")
                                (("1" (assert) nil nil))
                                nil)
                               ("2"
                                (mult-by 1 "abs(c)")
                                (("2" (assert) nil nil))
                                nil)
                               ("3"
                                (typepred "delta")
                                (("3"
                                  (assert)
                                  (("3"
                                    (case
                                     "p!1 + delta / abs(c) * (c * v) = p!1 + delta * (-1 * v)")
                                    (("1" (assert) nil nil)
                                     ("2"
                                      (case
                                       "delta / abs(c) * (c * v) = delta * (-1 * v)")
                                      (("1" (assert) nil nil)
                                       ("2"
                                        (hide 2)
                                        (("2"
                                          (lemma "asso_v")
                                          (("2"
                                            (inst
                                             -1
                                             "delta/abs(c)"
                                             "c"
                                             "v")
                                            (("1"
                                              (replace -1)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (lemma "asso_v")
                                                  (("1"
                                                    (inst
                                                     -1
                                                     "delta"
                                                     "-1"
                                                     "v")
                                                    (("1"
                                                      (replace -1)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (case
                                                           "delta / abs(c) * c = delta * -1")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (replace
                                                               -1
                                                               1)
                                                              (("1"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide
                                                             2
                                                             3
                                                             4
                                                             5)
                                                            (("2"
                                                              (hide -)
                                                              (("2"
                                                                (expand
                                                                 "abs"
                                                                 1
                                                                 1)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide 2 3 4 5)
                                                      (("2"
                                                        (hide -)
                                                        (("2"
                                                          (typepred
                                                           "v")
                                                          (("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (typepred "v")
                                              (("2"
                                                (hide
                                                 -1
                                                 -3
                                                 -4
                                                 -5
                                                 -6
                                                 -7
                                                 -8)
                                                (("2"
                                                  (hide 2 3 4 5)
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (grind) nil nil))
                          nil))
                        nil)
                       ("2" (hide -1 -2)
                        (("2" (hide 4)
                          (("2" (div-by 1 "abs(c)")
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (/= const-decl "boolean" notequal nil)
    (deriv_domain_both_direction? const-decl "bool"
     derivative_domain_multi nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" directional_deriv_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (nnreal type-eq-decl nil real_types nil)
    (mult_zero formula-decl nil vector_arithmetic nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (scal_zero formula-decl nil vector_arithmetic nil)
    (zero_id formula-decl nil vector_arithmetic nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (deriv_domain_direction? const-decl "bool" derivative_domain_multi
     nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (v skolem-const-decl "{vv: VectorN(n) | vv /= zero_vec(n)}"
     directional_deriv_def nil)
    (D skolem-const-decl "(deriv_domain_both_direction?[n](v))"
     directional_deriv_def nil)
    (Vector type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (p!1 skolem-const-decl "(D)" directional_deriv_def nil)
    (* const-decl "VectorN(length(v2))" matrices matrices)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (e skolem-const-decl "posreal" directional_deriv_def nil)
    (c skolem-const-decl "nnreal" directional_deriv_def nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (< const-decl "bool" reals nil)
    (delta skolem-const-decl
     "{delta: posreal | D(p!1 + delta * (-1 * v))}"
     directional_deriv_def nil)
    (abs_nat formula-decl nil abs_lems reals)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (both_sides_div_pos_gt1 formula-decl nil real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (delta skolem-const-decl "{delta: posreal | D(p!1 + delta * v)}"
     directional_deriv_def nil)
    (abs_div formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (times_div_cancel2 formula-decl nil extra_real_props nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (both_sides_div_pos_lt1 formula-decl nil real_props nil)
    (both_sides_times_pos_ge1 formula-decl nil real_props nil)
    (div_cancel2 formula-decl nil real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (both_sides_times_pos_le1_imp formula-decl nil extra_real_props
     nil)
    (add_cancel formula-decl nil vector_arithmetic nil)
    (asso_v formula-decl nil vector_arithmetic nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (deriv_domain_direction? const-decl "bool" derivative_domain_multi
     nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (directional_deriv_scalar subtype "directional_deriv_def.D"
    "(derivative_domain_multi[directional_deriv_def.n].deriv_domain_direction?(matrices.*(directional_deriv_def.c, directional_deriv_def.v)))")))
 (directional_deriv_scalar_TCC5 0
  (directional_deriv_scalar_TCC5-1 nil 3789830485
   ("" (skeep)
    (("" (lemma "directional_deriv_scal")
      (("" (expand "directional_derivD?")
        (("" (skeep)
          (("" (inst -1 "v" "D" "p!1" "f" "c")
            (("" (assert)
              (("" (typepred "f")
                (("" (typepred "D")
                  (("" (lemma "diff_imp_direction1")
                    (("" (case "v=zero_vec(n)")
                      (("1" (assert) nil nil)
                       ("2" (inst -1 "v" "D" "f" "p!1")
                        (("2" (expand "differentiableD?")
                          (("2" (inst -3 "p!1")
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((directional_deriv_scal formula-decl nil directional_deriv_def nil)
    (deriv_domain_direction? const-decl "bool" derivative_domain_multi
     nil)
    (diff_imp_direction1 formula-decl nil directional_deriv_def nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nnreal type-eq-decl nil real_types nil)
    (differentiableD? const-decl "bool" differentiable_def nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain_both_direction? const-decl "bool"
     derivative_domain_multi nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (/= const-decl "boolean" notequal nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" directional_deriv_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (directional_derivD? const-decl "bool" directional_deriv_def nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (directional_deriv_scalar subtype "directional_deriv_def.f"
    "(directional_deriv_def.directional_derivD?(matrices.*(directional_deriv_def.c, directional_deriv_def.v), directional_deriv_def.D))")))
 (directional_deriv_scalar 0
  (no "no" 3741517423
   ("" (skeep)
    (("" (case "v=zero_vec(n)")
      (("1" (replace -1 1)
        (("1" (lemma "direction_zero")
          (("1" (inst -1 "D" "f" "p")
            (("1" (lemma "scal_zero")
              (("1" (inst -1 "c" "n")
                (("1" (replace -1 1) (("1" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (lemma "der_f_is_direction")
        (("2" (inst-cp -1 "v" "D" "f" "p")
          (("1" (inst -1 "c*v" "D" "f" "p")
            (("1" (assert)
              (("1" (lemma "dot_scalar1")
                (("1" (inst -1 "der_f(D)(f)(p)" "v" "c")
                  (("1" (assert) nil nil)) nil))
                nil))
              nil)
             ("2" (case "c=0")
              (("1" (replace -1 1)
                (("1" (replace -1 3)
                  (("1" (assert)
                    (("1" (lemma "mult_zero")
                      (("1" (assert)
                        (("1"
                          (case "NOT 0 * directional_deriv(v, D, f)(p)=0")
                          (("1" (assert) nil nil)
                           ("2" (replace -1 3)
                            (("2" (inst -2 "v")
                              (("2"
                                (typepred "v")
                                (("2"
                                  (replace -2 -4)
                                  (("2"
                                    (replace -4 3)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (lemma "direction_zero")
                                        (("2"
                                          (inst -1 "D" "f" "p")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (assert)
                (("2" (lemma "zero_mult")
                  (("2" (inst -1 "c" "v") (("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (assert) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (/= const-decl "boolean" notequal nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" directional_deriv_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (direction_zero formula-decl nil directional_deriv_def nil)
    (scal_zero formula-decl nil vector_arithmetic nil)
    (nnreal type-eq-decl nil real_types nil)
    (differentiableD? const-decl "bool" differentiable_def nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain_both_direction? const-decl "bool"
     derivative_domain_multi nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain_direction? const-decl "bool" derivative_domain_multi
     nil)
    (mult_zero formula-decl nil vector_arithmetic nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (directional_derivD? const-decl "bool" directional_deriv_def nil)
    (directional_deriv const-decl "real" directional_deriv_def nil)
    (zero_mult formula-decl nil vector_arithmetic nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (der_f const-decl "{gg: [(D) -> VectorN(n)] |
   FORALL (p: (D)):
     convergence_zero?(NQ(D, p), NQ(f, gg(p), p), zero_vec(n))}"
     differentiable_def nil)
    (NQ const-decl "real" differentiable_def nil)
    (NQ const-decl "bool" differentiable_def nil)
    (convergence_zero? const-decl "bool" vector_sequences nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (dot_scalar1 formula-decl nil vector_arithmetic nil)
    (v skolem-const-decl "{vv: VectorN(n) | vv /= zero_vec(n)}"
     directional_deriv_def nil)
    (c skolem-const-decl "nnreal" directional_deriv_def nil)
    (* const-decl "VectorN(length(v2))" matrices matrices)
    (Vector type-eq-decl nil matrices matrices)
    (der_f_is_direction formula-decl nil directional_deriv_def nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   shostak)
  (directional_deriv_scalar-1 nil 3741509358
   ("" (skeep)
    (("" (case "v=zero_vec(n)")
      (("1" (replace -1 1)
        (("1" (lemma "direction_zero")
          (("1" (inst -1 "D" "f" "p")
            (("1" (lemma "scal_zero")
              (("1" (inst -1 "c" "n")
                (("1" (replace -1 1) (("1" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (lemma "der_f_is_direction")
        (("2" (inst-cp -1 "v" "D" "f" "p")
          (("1" (inst -1 "c*v" "D" "f" "p")
            (("1" (assert)
              (("1" (lemma "dot_scalar1")
                (("1" (inst -1 "der_f(D)(f)(p)" "v" "c")
                  (("1" (assert) nil nil)) nil))
                nil))
              nil)
             ("2" (typepred "c") (("2" (postpone) nil nil)) nil))
            nil)
           ("2" (typepred "D") (("2" (postpone) nil nil)) nil)
           ("3" (postpone) nil nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (directional_deriv_additive_TCC1 0
  (directional_deriv_additive_TCC1-1 nil 3741518646
   ("" (skeep)
    (("" (typepred "v1+v2" "v1" "v2")
      (("" (assert) (("" (expand "max" -) (("" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (/= const-decl "boolean" notequal nil)
    (n formal-const-decl "posnat" directional_deriv_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (VectorN type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vector type-eq-decl nil matrices matrices)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (directional_deriv_additive subtype
    "(matrices.+)(directional_deriv_def.v1, directional_deriv_def.v2)"
    "matrices.VectorN(directional_deriv_def.n)")))
 (directional_deriv_additive_TCC2 0
  (directional_deriv_additive_TCC1-1 nil 3789815182
   ("" (skeep)
    (("" (typepred "v1")
      (("" (typepred "D")
        (("" (lemma "dd_directionv_implies_dd")
          (("" (lemma "dd_directionv_implies_dd")
            (("" (inst -1 "D")
              (("" (assert)
                (("" (inst 1 "v1+v2")
                  (("" (assert)
                    (("" (expand "deriv_domain_direction?")
                      (("" (propax) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" directional_deriv_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (dd_directionv_implies_dd formula-decl nil derivative_domain_multi
     nil)
    (deriv_domain_direction? const-decl "bool" derivative_domain_multi
     nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain_direction? const-decl "bool" derivative_domain_multi
     nil)
    (/= const-decl "boolean" notequal nil)
    (Vector type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (directional_deriv_additive subtype "directional_deriv_def.D"
    "(derivative_domain_multi[directional_deriv_def.n].deriv_domain?)")))
 (directional_deriv_additive_TCC3 0
  (directional_deriv_additive_TCC2-1 nil 3741518646
   ("" (skeep)
    (("" (typepred "v1" "v2" "v1+v2")
      (("" (expand "max" -) (("" (assert) nil nil)) nil)) nil))
    nil)
   ((zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (Vector type-eq-decl nil matrices matrices)
    (/= const-decl "boolean" notequal nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" directional_deriv_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (directional_deriv_additive subtype
    "(matrices.+)(directional_deriv_def.v1, directional_deriv_def.v2)"
    "matrices.VectorN(directional_deriv_def.n)")))
 (directional_deriv_additive_TCC4 0
  (directional_deriv_additive_TCC3-1 nil 3741518646
   ("" (skeep)
    (("" (lemma "diff_imp_direction1")
      (("" (case "v1+v2 = zero_vec(n)")
        (("1" (lemma "direction_zero_derivable")
          (("1" (inst -1 "D" "f")
            (("1" (replace -2 1) (("1" (propax) nil nil)) nil)) nil))
          nil)
         ("2" (expand "directional_derivD?")
          (("2" (skeep)
            (("2" (inst -1 "v1+v2" "D" "f" "p!1")
              (("1" (assert)
                (("1" (typepred "f")
                  (("1" (expand "differentiableD?")
                    (("1" (inst -1 "p!1") nil nil)) nil))
                  nil))
                nil)
               ("2" (assert) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((diff_imp_direction1 formula-decl nil directional_deriv_def nil)
    (directional_derivD? const-decl "bool" directional_deriv_def nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (direction_zero_derivable formula-decl nil directional_deriv_def
     nil)
    (differentiableD? const-decl "bool" differentiable_def nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain_direction? const-decl "bool" derivative_domain_multi
     nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (Vector type-eq-decl nil matrices matrices)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (VectorN type-eq-decl nil matrices matrices)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n formal-const-decl "posnat" directional_deriv_def nil)
    (/= const-decl "boolean" notequal nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (directional_deriv_additive subtype "directional_deriv_def.f"
    "(directional_deriv_def.directional_derivD?((matrices.+)(directional_deriv_def.v1, directional_deriv_def.v2), directional_deriv_def.D))")))
 (directional_deriv_additive_TCC5 0
  (directional_deriv_additive_TCC4-1 nil 3741518646
   ("" (skeep)
    (("" (typepred "f" "D")
      (("" (lemma "diff_imp_direction1")
        (("" (inst -1 "v1" "D" "f" "_")
          (("1" (expand "directional_derivD?")
            (("1" (skeep)
              (("1" (inst -1 "p!1")
                (("1" (assert)
                  (("1" (expand "differentiableD?")
                    (("1" (inst -1 "p!1") nil nil)) nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (assert)
            (("2" (lemma "direction_zero_derivable")
              (("2" (inst -1 "D" "f") (("2" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (Vector type-eq-decl nil matrices matrices)
    (/= const-decl "boolean" notequal nil)
    (deriv_domain_direction? const-decl "bool" derivative_domain_multi
     nil)
    (differentiableD? const-decl "bool" differentiable_def nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" directional_deriv_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (v1 skolem-const-decl "VectorN(n)" directional_deriv_def nil)
    (directional_derivD? const-decl "bool" directional_deriv_def nil)
    (direction_zero_derivable formula-decl nil directional_deriv_def
     nil)
    (diff_imp_direction1 formula-decl nil directional_deriv_def nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (directional_deriv_additive subtype "directional_deriv_def.f"
    "(directional_deriv_def.directional_derivD?(directional_deriv_def.v1, directional_deriv_def.D))")))
 (directional_deriv_additive_TCC6 0
  (directional_deriv_additive_TCC5-1 nil 3741518646
   ("" (skeep)
    (("" (case "v2=zero_vec(n)")
      (("1" (lemma "direction_zero_derivable")
        (("1" (inst -1 "D" "f") (("1" (assert) nil nil)) nil)) nil)
       ("2" (typepred "D" "f")
        (("2" (lemma "diff_imp_direction1")
          (("2" (inst -1 "v2" "D" "f" "_")
            (("1" (expand "differentiableD?" -5)
              (("1" (expand "directional_derivD?")
                (("1" (skeep)
                  (("1" (inst -1 "p!1")
                    (("1" (inst -5 "p!1") (("1" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (assert) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (Vector type-eq-decl nil matrices matrices)
    (/= const-decl "boolean" notequal nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" directional_deriv_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain_direction? const-decl "bool" derivative_domain_multi
     nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (differentiableD? const-decl "bool" differentiable_def nil)
    (direction_zero_derivable formula-decl nil directional_deriv_def
     nil)
    (diff_imp_direction1 formula-decl nil directional_deriv_def nil)
    (directional_derivD? const-decl "bool" directional_deriv_def nil)
    (v2 skolem-const-decl "{vv: VectorN(n) | v1 + vv /= zero_vec(n)}"
     directional_deriv_def nil)
    (v1 skolem-const-decl "VectorN(n)" directional_deriv_def nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (directional_deriv_additive subtype "directional_deriv_def.f"
    "(directional_deriv_def.directional_derivD?(directional_deriv_def.v2, directional_deriv_def.D))")))
 (directional_deriv_additive 0
  (directional_deriv_additive-1 nil 3741521861
   ("" (lemma "der_f_is_direction")
    (("" (skeep)
      (("" (case "v1=zero_vec(n)")
        (("1" (replace -1 1)
          (("1" (lemma "direction_zero")
            (("1" (inst -1 "D" "f" "p")
              (("1" (replace -1 1)
                (("1" (assert)
                  (("1" (lemma "add_commute")
                    (("1" (inst -1 "zero_vec(n)" "v2")
                      (("1" (replace -1 1)
                        (("1" (lemma "zero_id")
                          (("1" (inst -1 "v2")
                            (("1" (typepred "v2")
                              (("1"
                                (hide -1)
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (case "v2=zero_vec(n)")
          (("1" (replace -1 2)
            (("1" (lemma "zero_id")
              (("1" (inst -1 "v1")
                (("1" (typepred "v1")
                  (("1" (replace -2 -3)
                    (("1" (replace -3 2)
                      (("1" (lemma "direction_zero")
                        (("1" (inst -1 "D" "f" "p")
                          (("1" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (assert)
            (("2" (case "v1+v2 = zero_vec(n)")
              (("1" (typepred "v2") (("1" (assert) nil nil)) nil)
               ("2" (inst-cp -1 "v1+v2" "D" "f" "p")
                (("2" (inst-cp -1 "v1" "D" "f" "p")
                  (("2" (inst -1 "v2" "D" "f" "p")
                    (("2" (replace -1 4 rl)
                      (("2" (replace -2 4 rl)
                        (("2" (replace -3 4 rl)
                          (("2" (lemma "dot_dist")
                            (("2" (inst -1 "der_f(D)(f)(p)" "v1" "v2")
                              (("2"
                                (assert)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (convergence_zero? const-decl "bool" vector_sequences nil)
    (NQ const-decl "bool" differentiable_def nil)
    (NQ const-decl "real" differentiable_def nil)
    (der_f const-decl "{gg: [(D) -> VectorN(n)] |
   FORALL (p: (D)):
     convergence_zero?(NQ(D, p), NQ(f, gg(p), p), zero_vec(n))}"
     differentiable_def nil)
    (p skolem-const-decl "(D)" directional_deriv_def nil)
    (f skolem-const-decl "(differentiableD?(D))" directional_deriv_def
     nil)
    (D skolem-const-decl "{DD: domain |
   (deriv_domain_direction?(v1)(DD) AND deriv_domain_direction?(v2)(DD))
    AND deriv_domain_direction?(v1 + v2)(DD)}" directional_deriv_def
     nil)
    (v2 skolem-const-decl "{vv: VectorN(n) | v1 + vv /= zero_vec(n)}"
     directional_deriv_def nil)
    (v1 skolem-const-decl "VectorN(n)" directional_deriv_def nil)
    (dot_dist formula-decl nil vector_arithmetic nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain_direction? const-decl "bool" derivative_domain_multi
     nil)
    (/= const-decl "boolean" notequal nil)
    (Vector type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (differentiableD? const-decl "bool" differentiable_def nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (zero_id formula-decl nil vector_arithmetic nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (add_commute formula-decl nil vector_arithmetic nil)
    (direction_zero formula-decl nil directional_deriv_def nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n formal-const-decl "posnat" directional_deriv_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (der_f_is_direction formula-decl nil directional_deriv_def nil))
   shostak))
 (directional_deriv_linear_TCC1 0
  (directional_deriv_linear_TCC2-1 nil 3789831264
   ("" (skeep)
    (("" (typepred "v1+c*v2" "v1" "v2" "c*v2") (("" (grind) nil nil))
      nil))
    nil)
   ((zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (/= const-decl "boolean" notequal nil)
    (nnreal type-eq-decl nil real_types nil)
    (* const-decl "VectorN(length(v2))" matrices matrices)
    (n formal-const-decl "posnat" directional_deriv_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (VectorN type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vector type-eq-decl nil matrices matrices)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (add def-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (deriv_domain_both_direction? const-decl "bool"
     derivative_domain_multi nil)
    (deriv_domain_direction? const-decl "bool" derivative_domain_multi
     nil)
    (deriv_domain_direction? const-decl "bool" derivative_domain_multi
     nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (scal def-decl "VectorN(length(v2))" matrices matrices)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (directional_deriv_linear subtype
    "(matrices.+)(directional_deriv_def.v1, matrices.*(directional_deriv_def.c, directional_deriv_def.v2))"
    "matrices.VectorN(directional_deriv_def.n)")))
 (directional_deriv_linear_TCC2 0
  (directional_deriv_linear_TCC3-3 nil 3741524671
   ("" (skeep)
    (("" (lemma "dd_directionv_implies_dd")
      (("" (inst -1 "D")
        (("" (assert)
          (("" (typepred "D" "c")
            (("" (inst 1 "v1+ c*v2")
              (("" (expand "deriv_domain_direction?")
                (("" (propax) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((n formal-const-decl "posnat" directional_deriv_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (dd_directionv_implies_dd formula-decl nil derivative_domain_multi
     nil)
    (deriv_domain_direction? const-decl "bool" derivative_domain_multi
     nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (/= const-decl "boolean" notequal nil)
    (nnreal type-eq-decl nil real_types nil)
    (* const-decl "VectorN(length(v2))" matrices matrices)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (Vector type-eq-decl nil matrices matrices)
    (deriv_domain_both_direction? const-decl "bool"
     derivative_domain_multi nil)
    (deriv_domain_direction? const-decl "bool" derivative_domain_multi
     nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (directional_deriv_linear subtype "directional_deriv_def.D"
    "(derivative_domain_multi[directional_deriv_def.n].deriv_domain?)"))
  (directional_deriv_linear_TCC3-2 nil 3741523915
   ("" (skeep)
    (("" (typepred "f" "D")
      (("" (lemma "diff_imp_direction2")
        (("" (inst -1 "v1" "D" "f" "_")
          (("" (expand "directional_derivD?" 1)
            (("" (skeep)
              (("" (inst -1 "p")
                (("" (assert)
                  (("" (flatten)
                    (("" (assert)
                      (("" (expand "differentiableD?" -1)
                        (("" (inst -1 "p") nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (* const-decl "VectorN(length(v2))" matrices matrices)
    (Vector type-eq-decl nil matrices matrices)
    (deriv_domain_both_direction? const-decl "bool"
     derivative_domain_multi nil)
    (differentiableD? const-decl "bool" differentiable_def nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" directional_deriv_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (directional_derivD? const-decl "bool" directional_deriv_def nil)
    (diff_imp_direction2 formula-decl nil directional_deriv_def nil))
   nil
   (directional_deriv_linear subtype "directional_deriv_def.D"
    "(derivative_domain_multi[directional_deriv_def.n].deriv_domain?)"))
  (directional_deriv_linear_TCC3-1 nil 3741523573
   ("" (subtype-tcc) nil nil) nil nil
   (directional_deriv_linear subtype "directional_deriv_def.D"
    "(derivative_domain_multi[directional_deriv_def.n].deriv_domain?)")))
 (directional_deriv_linear_TCC3 0
  (directional_deriv_linear_TCC3-1 nil 3789831264
   ("" (skeep)
    (("" (typepred "v1 + c*v2" "v1" "c*v2" "v2") (("" (grind) nil nil))
      nil))
    nil)
   ((zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (/= const-decl "boolean" notequal nil)
    (nnreal type-eq-decl nil real_types nil)
    (* const-decl "VectorN(length(v2))" matrices matrices)
    (n formal-const-decl "posnat" directional_deriv_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (VectorN type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vector type-eq-decl nil matrices matrices)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (add def-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (scal def-decl "VectorN(length(v2))" matrices matrices)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (directional_deriv_linear subtype
    "(matrices.+)(directional_deriv_def.v1, matrices.*(directional_deriv_def.c, directional_deriv_def.v2))"
    "matrices.VectorN(directional_deriv_def.n)")))
 (directional_deriv_linear_TCC4 0
  (directional_deriv_linear_TCC1-1 nil 3741523573
   ("" (skeep)
    (("" (lemma "diff_imp_direction2")
      (("" (inst -1 "v1+c*v2" "D" "f" "_")
        (("" (expand "directional_derivD?")
          (("" (skeep)
            (("" (inst -1 "p")
              (("" (assert)
                (("" (flatten)
                  (("" (assert)
                    (("" (typepred "f" "D")
                      (("" (expand "differentiableD?" -1)
                        (("" (inst -1 "p") nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((diff_imp_direction2 formula-decl nil directional_deriv_def nil)
    (directional_derivD? const-decl "bool" directional_deriv_def nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (differentiableD? const-decl "bool" differentiable_def nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain_both_direction? const-decl "bool"
     derivative_domain_multi nil)
    (deriv_domain_direction? const-decl "bool" derivative_domain_multi
     nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (/= const-decl "boolean" notequal nil)
    (nnreal type-eq-decl nil real_types nil)
    (* const-decl "VectorN(length(v2))" matrices matrices)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (Vector type-eq-decl nil matrices matrices)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" directional_deriv_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (directional_deriv_linear subtype "directional_deriv_def.f"
    "(directional_deriv_def.directional_derivD?((matrices.+)(directional_deriv_def.v1, matrices.*(directional_deriv_def.c, directional_deriv_def.v2)), directional_deriv_def.D))")))
 (directional_deriv_linear_TCC5 0
  (directional_deriv_linear_TCC2-2 nil 3741524654
   ("" (skeep)
    (("" (lemma "diff_imp_direction2")
      (("" (inst -1 "v1" "D" "f" "_")
        (("" (expand "directional_derivD?")
          (("" (skeep)
            (("" (inst -1 "p")
              (("" (assert)
                (("" (flatten)
                  (("" (assert)
                    (("" (typepred "f" "D")
                      (("" (expand "differentiableD?" -1)
                        (("" (inst -1 "p") nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((diff_imp_direction2 formula-decl nil directional_deriv_def nil)
    (directional_derivD? const-decl "bool" directional_deriv_def nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (differentiableD? const-decl "bool" differentiable_def nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (/= const-decl "boolean" notequal nil)
    (nnreal type-eq-decl nil real_types nil)
    (* const-decl "VectorN(length(v2))" matrices matrices)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (Vector type-eq-decl nil matrices matrices)
    (deriv_domain_both_direction? const-decl "bool"
     derivative_domain_multi nil)
    (deriv_domain_direction? const-decl "bool" derivative_domain_multi
     nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" directional_deriv_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (directional_deriv_linear subtype "directional_deriv_def.f"
    "(directional_deriv_def.directional_derivD?(directional_deriv_def.v1, directional_deriv_def.D))"))
  (directional_deriv_linear_TCC2-1 nil 3741523573
   ("" (skeep)
    (("" (typepred "f" "D")
      (("" (lemma "diff_imp_direction2")
        (("" (inst -1 "v1 + c * v2" "D" "f" "_")
          (("" (expand "directional_derivD?" 1)
            (("" (skeep)
              (("" (inst -1 "p")
                (("" (assert)
                  (("" (flatten)
                    (("" (assert)
                      (("" (expand "differentiableD?" -1)
                        (("" (inst -1 "p") nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (* const-decl "VectorN(length(v2))" matrices matrices)
    (Vector type-eq-decl nil matrices matrices)
    (deriv_domain_both_direction? const-decl "bool"
     derivative_domain_multi nil)
    (differentiableD? const-decl "bool" differentiable_def nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" directional_deriv_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (directional_derivD? const-decl "bool" directional_deriv_def nil)
    (diff_imp_direction2 formula-decl nil directional_deriv_def nil))
   nil
   (directional_deriv_linear subtype "directional_deriv_def.f"
    "(directional_deriv_def.directional_derivD?(directional_deriv_def.v1, directional_deriv_def.D))")))
 (directional_deriv_linear_TCC6 0
  (directional_deriv_linear_TCC4-1 nil 3789815182
   ("" (subtype-tcc) nil nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices matrices)
    (nnreal type-eq-decl nil real_types nil)
    (/= const-decl "boolean" notequal nil)
    (Vector type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (* const-decl "VectorN(length(v2))" matrices matrices)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain_both_direction? const-decl "bool"
     derivative_domain_multi nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (differentiableD? const-decl "bool" differentiable_def nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (deriv_domain_direction? const-decl "bool" derivative_domain_multi
     nil)
    (norm_inf const-decl "(norm?(m))" norms nil)
    (sub const-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (norm_inf const-decl "[(cons?) -> nonneg_real]" norms nil)
    (* const-decl "real" matrices matrices)
    (NQ const-decl "real" differentiable_def nil)
    (convergence_zero? const-decl "bool" vector_sequences nil)
    (differentiable? const-decl "bool" differentiable_def nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (n formal-const-decl "posnat" directional_deriv_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (deriv_domain_direction? const-decl "bool" derivative_domain_multi
     nil))
   nil
   (directional_deriv_linear subtype "directional_deriv_def.D"
    "(derivative_domain_multi[directional_deriv_def.n].deriv_domain_direction?(directional_deriv_def.v2))")))
 (directional_deriv_linear_TCC7 0
  (directional_deriv_linear_TCC4-2 nil 3741523949
   ("" (skeep)
    (("" (typepred "f" "D")
      (("" (lemma "diff_imp_direction2")
        (("" (inst -1 "v2" "D" "f" "_")
          (("" (expand "directional_derivD?" 1)
            (("" (skeep)
              (("" (inst -1 "p")
                (("" (assert)
                  (("" (flatten)
                    (("" (assert)
                      (("" (expand "differentiableD?" -1)
                        (("" (inst -1 "p") nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (/= const-decl "boolean" notequal nil)
    (nnreal type-eq-decl nil real_types nil)
    (* const-decl "VectorN(length(v2))" matrices matrices)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (Vector type-eq-decl nil matrices matrices)
    (deriv_domain_both_direction? const-decl "bool"
     derivative_domain_multi nil)
    (deriv_domain_direction? const-decl "bool" derivative_domain_multi
     nil)
    (differentiableD? const-decl "bool" differentiable_def nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" directional_deriv_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (directional_derivD? const-decl "bool" directional_deriv_def nil)
    (diff_imp_direction2 formula-decl nil directional_deriv_def nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (directional_deriv_linear subtype "directional_deriv_def.f"
    "(directional_deriv_def.directional_derivD?(directional_deriv_def.v2, directional_deriv_def.D))"))
  (directional_deriv_linear_TCC4-1 nil 3741523573
   ("" (subtype-tcc) nil nil) nil nil
   (directional_deriv_linear subtype "directional_deriv_def.f"
    "(directional_deriv_def.directional_derivD?(directional_deriv_def.v2, directional_deriv_def.D))")))
 (directional_deriv_linear 0
  (directional_deriv_linear-1 nil 3741523957
   ("" (skeep)
    (("" (lemma "directional_deriv_additive")
      (("" (inst -1 "v1" "c*v2" "D" "f" "_")
        (("1" (decompose-equality 1)
          (("1" (inst -1 "x!1")
            (("1" (lemma "directional_deriv_scalar")
              (("1" (inst -1 "v2" "D" "f" "x!1" "c")
                (("1" (assert)
                  (("1" (replace -2 1)
                    (("1" (replace -1 1 rl)
                      (("1" (assert)
                        (("1" (expand "+" 1 2)
                          (("1" (assert)
                            (("1" (expand "*" 1 2)
                              (("1" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (typepred "v2")
                  (("2" (lemma "direction_zero")
                    (("2" (inst -1 "D" "f" "_")
                      (("2" (inst -1 "x!1")
                        (("2" (case "NOT v2 = zero_vec(n)")
                          (("1" (assert) nil nil)
                           ("2" (replace -1)
                            (("2" (assert)
                              (("2"
                                (expand "*" 2 2)
                                (("2"
                                  (assert)
                                  (("2"
                                    (expand "+" 2 2)
                                    (("2"
                                      (replace -2 2)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (case
                                           "v1 + c * zero_vec(n) = v1")
                                          (("1" (assert) nil nil)
                                           ("2"
                                            (hide 3)
                                            (("2"
                                              (lemma "scal_zero")
                                              (("2"
                                                (inst -1 "c" "n")
                                                (("2"
                                                  (replace -1 1)
                                                  (("2"
                                                    (lemma "zero_id")
                                                    (("2"
                                                      (inst -1 "v1")
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (typepred "v2")
          (("2" (typepred "D")
            (("2" (lemma "directional_deriv_scal_TCC3")
              (("2" (inst -1 "v2" "D" "_" "f" "c")
                (("2" (assert)
                  (("2" (reveal -)
                    (("2" (hide -2 -1)
                      (("2" (typepred "f")
                        (("2" (expand "deriv_domain_direction?" 1 1)
                          (("2" (skeep)
                            (("2" (inst -2 "p")
                              (("2"
                                (lemma "diff_imp_direction2")
                                (("2"
                                  (inst -1 "v2" "D" "f" "p")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (flatten)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (expand
                                           "differentiableD?"
                                           -1)
                                          (("2" (inst -1 "p") nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (typepred "c*v2" "v2") (("3" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((directional_deriv_additive formula-decl nil directional_deriv_def
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (add def-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (scal def-decl "VectorN(length(v2))" matrices matrices)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (directional_deriv_scal_TCC3 subtype-tcc nil directional_deriv_def
     nil)
    (diff_imp_direction2 formula-decl nil directional_deriv_def nil)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (+ const-decl "[T -> real]" real_fun_ops reals)
    (directional_deriv const-decl "real" directional_deriv_def nil)
    (directional_derivD? const-decl "bool" directional_deriv_def nil)
    (directional_deriv_scalar formula-decl nil directional_deriv_def
     nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (scal_zero formula-decl nil vector_arithmetic nil)
    (zero_id formula-decl nil vector_arithmetic nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (direction_zero formula-decl nil directional_deriv_def nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (differentiableD? const-decl "bool" differentiable_def nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain_direction? const-decl "bool" derivative_domain_multi
     nil)
    (deriv_domain_both_direction? const-decl "bool"
     derivative_domain_multi nil)
    (D skolem-const-decl "{DD: domain |
   (deriv_domain_direction?(v1)(DD) AND
     deriv_domain_both_direction?(v2)(DD))
    AND deriv_domain_direction?(v1 + c * v2)(DD)}"
     directional_deriv_def nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (list type-decl nil list_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (Vector type-eq-decl nil matrices matrices)
    (VectorN type-eq-decl nil matrices matrices)
    (* const-decl "VectorN(length(v2))" matrices matrices)
    (nnreal type-eq-decl nil real_types nil)
    (/= const-decl "boolean" notequal nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n formal-const-decl "posnat" directional_deriv_def nil)
    (v1 skolem-const-decl "VectorN(n)" directional_deriv_def nil)
    (v2 skolem-const-decl "VectorN(n)" directional_deriv_def nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (c skolem-const-decl "{cc: nnreal | v1 + cc * v2 /= zero_vec(n)}"
       directional_deriv_def nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   shostak))
 (directional_deriv_unique 0
  (directional_deriv_unique-1 nil 3741525000
   ("" (skeep) (("" (assert) nil nil)) nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   shostak))
 (init_par_dir_derivable_TCC1 0
  (init_par_dir_derivable_TCC1-1 nil 3852295696
   ("" (subtype-tcc) nil nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices matrices)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain_direction? const-decl "bool" derivative_domain_multi
     nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (/= const-decl "boolean" notequal nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (Vector type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (* const-decl "VectorN(length(v2))" matrices matrices)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (n formal-const-decl "posnat" directional_deriv_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (deriv_domain_partial? const-decl "bool" derivative_domain_multi
     nil))
   nil
   (init_par_dir_derivable subtype "directional_deriv_def.D"
    "(derivative_domain_multi[directional_deriv_def.n].deriv_domain_partial?(directional_deriv_def.v))")))
 (init_par_dir_derivable 0
  (init_par_dir_derivable-1 nil 3852295878
   ("" (skeep)
    (("" (expand "directional_deriv?")
      (("" (expand "init_partial?")
        (("" (expand "restrict")
          (("" (expand "derivable?")
            (("" (expand "convergent?")
              (("" (skeep)
                (("" (inst 1 "l")
                  (("" (expand "convergence")
                    (("" (expand "convergence")
                      (("" (flatten)
                        (("" (split)
                          (("1" (expand "adh" 1)
                            (("1" (typepred "D")
                              (("1"
                                (expand "deriv_domain_direction?")
                                (("1"
                                  (skeep)
                                  (("1"
                                    (inst -1 "e" "p")
                                    (("1"
                                      (skeep)
                                      (("1"
                                        (inst 1 "delta")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "fullset" 1)
                                            (("1" (propax) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (expand "A")
                                          (("2"
                                            (expand "D_downd" 1)
                                            (("2"
                                              (expand "D_down" 1)
                                              (("2"
                                                (typepred "delta")
                                                (("2"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (skeep)
                            (("2" (inst -2 "epsilon")
                              (("2"
                                (skeep)
                                (("2"
                                  (inst 1 "delta")
                                  (("2"
                                    (skeep)
                                    (("2"
                                      (inst -4 "x")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "NQ")
                                            (("1" (propax) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (hide 2)
                                        (("2"
                                          (expand "A" 1)
                                          (("2"
                                            (typepred "x")
                                            (("2"
                                              (expand "A" -2)
                                              (("2"
                                                (expand "D_downd" -2)
                                                (("2"
                                                  (flatten)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((directional_deriv? const-decl "bool" directional_deriv_def nil)
    (restrict const-decl "R" restrict nil)
    (convergent? const-decl "bool" lim_of_functions analysis)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (convergence const-decl "bool" convergence_functions analysis)
    (deriv_domain_direction? const-decl "bool" derivative_domain_multi
     nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" directional_deriv_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (D_down const-decl "bool" init_partial_def nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (fullset const-decl "set" sets nil)
    (D_downd const-decl "bool" directional_deriv_def nil)
    (v skolem-const-decl "VectorN(n)" directional_deriv_def nil)
    (D skolem-const-decl "(deriv_domain_direction?(v))"
     directional_deriv_def nil)
    (p skolem-const-decl "(D)" directional_deriv_def nil)
    (/= const-decl "boolean" notequal nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (setof type-eq-decl nil defined_types nil)
    (A const-decl "setof[nzreal]" derivatives_def analysis)
    (Vector type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (* const-decl "VectorN(length(v2))" matrices matrices)
    (delta skolem-const-decl "{delta: posreal | D(p + delta * v)}"
     directional_deriv_def nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (adh const-decl "setof[real]" convergence_functions analysis)
    (x skolem-const-decl "(A(0))" directional_deriv_def nil)
    (NQ const-decl "real" derivatives_def analysis)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (convergence const-decl "bool" lim_of_functions analysis)
    (derivable? const-decl "bool" derivatives_def analysis)
    (init_partial? const-decl "bool" init_partial_def nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   shostak))
 (init_par_dir_deriv_TCC1 0
  (init_par_dir_deriv_TCC1-1 nil 3852296916
   ("" (lemma "init_par_dir_derivable")
    (("" (skeep)
      (("" (inst?)
        (("" (inst -1 "D" "f" "p")
          (("" (assert) (("" (postpone) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (init_partial? const-decl "bool" init_partial_def nil)
    (deriv_domain_partial? const-decl "bool" derivative_domain_multi
     nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain_direction? const-decl "bool" derivative_domain_multi
     nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" directional_deriv_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (init_par_dir_derivable formula-decl nil directional_deriv_def
     nil))
   nil
   (init_par_dir_deriv subtype "directional_deriv_def.p"
    "(directional_deriv_def.directional_deriv?(directional_deriv_def.v, directional_deriv_def.D, directional_deriv_def.f))")))
 (init_par_dir_deriv 0
  (init_par_dir_deriv-1 nil 3852307972
   ("" (skeep)
    (("" (expand "init_partial")
      (("" (expand "directional_deriv")
        (("" (lemma "deriv_def[(D_downd(D,p,v))]")
          (("1"
            (inst -1 "restrict[real, (D_downd(D, p, v)), real]
                (LAMBDA (Delta: real): f(p + Delta * v))"
             "deriv[(D_down(D, p, v))]
          (restrict[real, (D_down(D, p, v)), real]
               (LAMBDA (Delta: real): f(p + Delta * v)),
           0)" "0")
            (("1" (assert)
              (("1" (expand "deriv" 2 1)
                (("1"
                  (typepred
                   "lim(NQ(restrict[real, (D_down(D, p, v)), real]
                 (LAMBDA (Delta: real): f(p + Delta * v)),
             0),
          0)")
                  (("1" (hide 2)
                    (("1" (expand "convergence")
                      (("1" (expand "convergence")
                        (("1" (flatten)
                          (("1" (split 1)
                            (("1" (expand "adh")
                              (("1"
                                (skeep)
                                (("1"
                                  (inst? -1)
                                  (("1"
                                    (hide -1)
                                    (("1"
                                      (typepred "D")
                                      (("1"
                                        (expand
                                         "deriv_domain_direction?"
                                         -1)
                                        (("1"
                                          (inst -1 "e" "p")
                                          (("1"
                                            (skeep)
                                            (("1"
                                              (inst 1 "delta")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (typepred "delta")
                                                  (("1"
                                                    (expand
                                                     "fullset"
                                                     1)
                                                    (("1"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand "A" 1)
                                                (("2"
                                                  (typepred "delta")
                                                  (("2"
                                                    (expand
                                                     "D_downd"
                                                     1)
                                                    (("2"
                                                      (expand
                                                       "D_down"
                                                       1)
                                                      (("2"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (skeep)
                              (("2"
                                (inst -2 "epsilon")
                                (("2"
                                  (skeep)
                                  (("2"
                                    (inst 1 "delta")
                                    (("2"
                                      (skeep)
                                      (("2"
                                        (inst -4 "x")
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "deriv" 1)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand "restrict")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (expand "NQ")
                                                    (("1"
                                                      (propax)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide 2)
                                          (("2"
                                            (expand "A" 1)
                                            (("2"
                                              (typepred "x")
                                              (("2"
                                                (expand "A")
                                                (("2"
                                                  (expand "D_downd" -2)
                                                  (("2"
                                                    (flatten)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide 2 3)
                    (("2" (lemma "D_down_direction_not_one")
                      (("2" (inst -1 "v" "D" "p") nil nil)) nil))
                    nil)
                   ("3" (hide 2 3)
                    (("3" (lemma "D_down_direction_deriv_domain")
                      (("3" (inst -1 "v" "D" "p") nil nil)) nil))
                    nil)
                   ("4" (hide 2 3)
                    (("4" (skeep)
                      (("4" (typepred "p + Delta*v" "p" "Delta*v")
                        (("4" (hide -1 -3 -7)
                          (("4" (replace -1)
                            (("4" (replace -2)
                              (("4"
                                (replace -5)
                                (("4"
                                  (typepred "v")
                                  (("4"
                                    (replace -2)
                                    (("4"
                                      (expand "max")
                                      (("4" (propax) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide 2)
              (("2" (lemma "D_down_direction_not_one")
                (("2" (inst -1 "v" "D" "p") nil nil)) nil))
              nil)
             ("3" (hide 2)
              (("3" (lemma "D_down_direction_deriv_domain")
                (("3" (inst -1 "v" "D" "p") nil nil)) nil))
              nil)
             ("4" (hide 2)
              (("4" (skeep)
                (("4" (typepred "p+Delta*v" "p" "Delta*v" "v")
                  (("4" (replace -2)
                    (("4" (replace -4)
                      (("4" (replace -8)
                        (("4" (hide -1 -3 -7 -9)
                          (("4" (replace -6)
                            (("4" (expand "max" 1)
                              (("4" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (assert)
            (("2" (hide 2)
              (("2" (lemma "D_downd_direction_not_one")
                (("2" (inst -1 "v" "D" "p") nil nil)) nil))
              nil))
            nil)
           ("3" (hide 2)
            (("3" (lemma "D_downd_direction_deriv_domain")
              (("3" (inst -1 "v" "D" "p") nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((init_partial const-decl "real" init_partial_def nil)
    (init_partial? const-decl "bool" init_partial_def nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain_partial? const-decl "bool" derivative_domain_multi
     nil)
    (deriv_domain_direction? const-decl "bool" derivative_domain_multi
     nil)
    (D_downd const-decl "bool" directional_deriv_def nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" directional_deriv_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (deriv_def formula-decl nil derivatives_def analysis)
    (deriv_domain? const-decl "bool" deriv_domain_def analysis)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (lim const-decl "{l: real | convergence(f, x0, l)}"
     lim_of_functions analysis)
    (convergent? const-decl "bool" lim_of_functions analysis)
    (NQ const-decl "real" derivatives_def analysis)
    (convergence const-decl "bool" lim_of_functions analysis)
    (A const-decl "setof[nzreal]" derivatives_def analysis)
    (setof type-eq-decl nil defined_types nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (x skolem-const-decl "(A(0))" directional_deriv_def nil)
    (adh const-decl "setof[real]" convergence_functions analysis)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (delta skolem-const-decl "{delta: posreal | D(p + delta * v)}"
     directional_deriv_def nil)
    (fullset const-decl "set" sets nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (convergence const-decl "bool" convergence_functions analysis)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (D_down_direction_not_one formula-decl nil init_partial_def nil)
    (D_down_direction_deriv_domain formula-decl nil init_partial_def
     nil)
    (deriv const-decl "real" derivatives_def analysis)
    (derivable? const-decl "bool" derivatives_def analysis)
    (restrict const-decl "R" restrict nil)
    (D_down const-decl "bool" init_partial_def nil)
    (Vector type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (v skolem-const-decl "VectorN(n)" directional_deriv_def nil)
    (D skolem-const-decl "(deriv_domain_direction?(v))"
     directional_deriv_def nil)
    (f skolem-const-decl "vec2real_f[n]" directional_deriv_def nil)
    (p skolem-const-decl "{p: (D) | init_partial?(v, D, f)(p)}"
     directional_deriv_def nil)
    (* const-decl "VectorN(length(v2))" matrices matrices)
    (D_downd_direction_not_one formula-decl nil directional_deriv_def
     nil)
    (D_downd_direction_deriv_domain formula-decl nil
     directional_deriv_def nil)
    (directional_deriv const-decl "real" directional_deriv_def nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   shostak)))