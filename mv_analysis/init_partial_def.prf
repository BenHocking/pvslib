(init_partial_def
 (D_down_TCC1 0
  (D_down_TCC1-2 nil 3851004022
   ("" (skeep)
    (("" (typepred "p+Delta*v")
      (("" (typepred "p" "Delta*v")
        (("" (assert)
          (("" (typepred "v")
            (("" (assert)
              (("" (expand "max" -8) (("" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((* const-decl "VectorN(length(v2))" matrices matrices)
    (n formal-const-decl "posnat" init_partial_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (VectorN type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vector type-eq-decl nil matrices matrices)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (D_down subtype
    "(matrices.+)(init_partial_def.p, matrices.*(init_partial_def.Delta, init_partial_def.v))"
    "matrices.VectorN(init_partial_def.n)"))
  (D_down_TCC1-1 nil 3851003286 ("" (subtype-tcc) nil nil) nil nil
   (D_down subtype
    "(matrices.+)(init_partial_def.p, matrices.*(init_partial_def.Delta, init_partial_def.v))"
    "matrices.VectorN(init_partial_def.n)")))
 (D_down_der_domain 0
  (D_down_der_domain-1 nil 3851004042
   ("" (skeep)
    (("" (typepred "D")
      (("" (typepred "p")
        (("" (typepred "v")
          (("" (expand "deriv_domain?")
            (("" (skeep)
              (("" (typepred "x")
                (("" (expand "D_down" -1)
                  (("" (assert)
                    (("" (expand "deriv_domain_direction?" -7)
                      (("" (inst -7 "e" "p+x*v")
                        (("" (skeep)
                          (("" (typepred "delta")
                            (("" (inst 1 "delta")
                              ((""
                                (expand "D_down")
                                ((""
                                  (lemma "dist_scalar")
                                  ((""
                                    (inst -1 "x" "delta" "v")
                                    ((""
                                      (assert)
                                      ((""
                                        (replace -1 1)
                                        ((""
                                          (assert)
                                          ((""
                                            (lemma "asso_add")
                                            ((""
                                              (inst
                                               -1
                                               "p"
                                               "x*v"
                                               "delta*v")
                                              (("" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((deriv_domain_direction? const-decl "bool" derivative_domain_multi
     nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" init_partial_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (/= const-decl "boolean" notequal nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (delta skolem-const-decl
     "{delta: posreal | D(p + x * v + delta * v)}" init_partial_def
     nil)
    (x skolem-const-decl "(D_down(D, p, v))" init_partial_def nil)
    (p skolem-const-decl "(D)" init_partial_def nil)
    (D skolem-const-decl "(deriv_domain_direction?(v))"
     init_partial_def nil)
    (v skolem-const-decl "VectorN(n)" init_partial_def nil)
    (dist_scalar formula-decl nil vector_arithmetic nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (asso_add formula-decl nil vector_arithmetic nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (* const-decl "VectorN(length(v2))" matrices matrices)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (Vector type-eq-decl nil matrices matrices)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (D_down const-decl "bool" init_partial_def nil)
    (deriv_domain? const-decl "bool" deriv_domain_def analysis)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil))
 (D_down_domain 0
  (D_down_domain-1 nil 3851004141
   ("" (skeep)
    (("" (typepred "D")
      (("" (lemma "D_down_der_domain")
        (("" (inst -1 "v" "D" "p")
          (("" (expand "deriv_domain_all_direction?")
            (("" (inst -1 "v")
              (("" (ground)
                (("" (expand "deriv_domain_direction?")
                  (("" (propax) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((deriv_domain_all_direction? const-decl "bool"
     derivative_domain_multi nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" init_partial_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (deriv_domain_direction? const-decl "bool" derivative_domain_multi
     nil)
    (D skolem-const-decl "(deriv_domain_all_direction?)"
     init_partial_def nil)
    (v skolem-const-decl "VectorN(n)" init_partial_def nil)
    (deriv_domain_direction? const-decl "bool" derivative_domain_multi
     nil)
    (D_down_der_domain formula-decl nil init_partial_def nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   shostak))
 (D_down_der_domain_unit 0
  (D_down_der_domain_unit-1 nil 3851004176
   ("" (skeep)
    (("" (typepred "p")
      (("" (typepred "v")
        (("" (hide -1 -3)
          (("" (expand "deriv_domain?")
            (("" (skeep)
              (("" (typepred "D")
                (("" (expand "deriv_domain_all_direction?")
                  (("" (inst -1 "v")
                    (("" (expand "deriv_domain_direction?")
                      ((""
                        (inst -1 "min(min(e,abs(1-x)),abs(x))/2"
                         "p+x*v")
                        (("1" (skeep)
                          (("1" (typepred "delta")
                            (("1" (inst 1 "delta")
                              (("1" (assert) nil nil)
                               ("2"
                                (split)
                                (("1"
                                  (expand "D_down" 1)
                                  (("1"
                                    (lemma "dist_scalar")
                                    (("1"
                                      (inst -1 "x" "delta" "v")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (replace -1 1)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (lemma "asso_add")
                                              (("1"
                                                (inst
                                                 -1
                                                 "p"
                                                 "x * v"
                                                 "delta * v")
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (assert)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (assert)
                                  (("2"
                                    (hide -3 -5 -6 -7)
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide 2)
                          (("2" (typepred "p + x * v" "p" "x*v")
                            (("2" (assert)
                              (("2"
                                (expand "max" -)
                                (("2"
                                  (assert)
                                  (("2"
                                    (typepred "x")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (expand "D_down" -1)
                                        (("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (hide 2) (("3" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((deriv_domain_all_direction? const-decl "bool"
     derivative_domain_multi nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" init_partial_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (deriv_domain_direction? const-decl "bool" derivative_domain_multi
     nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (delta skolem-const-decl
     "{delta: posreal | D(p + x * v + delta * v)}" init_partial_def
     nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (asso_add formula-decl nil vector_arithmetic nil)
    (dist_scalar formula-decl nil vector_arithmetic nil)
    (Vector type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (* const-decl "VectorN(length(v2))" matrices matrices)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (<= const-decl "bool" reals nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (e skolem-const-decl "posreal" init_partial_def nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (D_down const-decl "bool" init_partial_def nil)
    (D skolem-const-decl "(deriv_domain_all_direction?)"
     init_partial_def nil)
    (p skolem-const-decl "(D)" init_partial_def nil)
    (v skolem-const-decl "VectorN(n)" init_partial_def nil)
    (< const-decl "bool" reals nil)
    (x skolem-const-decl "{t: (D_down(D, p, v)) | t > 0 AND t < 1}"
     init_partial_def nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nonneg_real_min application-judgement
     "{z: nonneg_real | z <= x AND z <= y}" real_defs nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (deriv_domain? const-decl "bool" deriv_domain_def analysis)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   shostak))
 (D_down_domain_unit 0
  (D_down_domain_unit-1 nil 3851004266
   ("" (skeep)
    (("" (lemma "D_down_der_domain_unit")
      (("" (inst -1 "v" "D" "p") nil nil)) nil))
    nil)
   ((D_down_der_domain_unit formula-decl nil init_partial_def nil)
    (deriv_domain_all_direction? const-decl "bool"
     derivative_domain_multi nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" init_partial_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil))
 (D_down_domain_unitc 0
  (D_down_domain_unitc-1 nil 3851004321
   ("" (skeep)
    (("" (expand "deriv_domain?")
      (("" (skeep)
        (("" (typepred "x")
          (("" (case "x=1")
            (("1" (typepred "D")
              (("1" (expand "deriv_domain_all_direction?")
                (("1" (inst -1 "-1*v")
                  (("1" (expand "deriv_domain_direction?")
                    (("1" (inst -1 "min(e/2,1/2)" "p+x*v")
                      (("1" (skeep)
                        (("1" (inst 1 "-delta")
                          (("1" (assert) (("1" (grind) nil nil)) nil)
                           ("2" (split)
                            (("1" (typepred "delta")
                              (("1"
                                (expand "D_down" 1)
                                (("1"
                                  (lemma "asso_v")
                                  (("1"
                                    (inst -1 "delta" "-1" "v")
                                    (("1"
                                      (replace -1 -4)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (lemma "dist_scalar")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (case
                                               "NOT -delta = delta*-1")
                                              (("1" (assert) nil nil)
                                               ("2"
                                                (replace -1 -6)
                                                (("2"
                                                  (replace -1 -6 rl)
                                                  (("2"
                                                    (inst
                                                     -2
                                                     "x"
                                                     "-delta"
                                                     "v")
                                                    (("1"
                                                      (replace -2 1)
                                                      (("1"
                                                        (lemma
                                                         "asso_add")
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "p"
                                                           "x*v"
                                                           "-delta*v")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil)
                                                           ("2"
                                                            (typepred
                                                             "-delta*v"
                                                             "v")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("3"
                                                            (typepred
                                                             "x*v"
                                                             "v")
                                                            (("3"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("4"
                                                            (typepred
                                                             "p")
                                                            (("4"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (typepred "v")
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (typepred "v")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert) nil nil))
                            nil))
                          nil))
                        nil)
                       ("2" (split)
                        (("1" (typepred "p+x*v" "x*v" "v")
                          (("1" (expand "max" -)
                            (("1" (assert) nil nil)) nil))
                          nil)
                         ("2" (expand "D_down" -2)
                          (("2" (propax) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert) nil nil))
                  nil))
                nil))
              nil)
             ("2" (typepred "-1*v" "v")
              (("2" (assert)
                (("2" (typepred "D")
                  (("2" (expand "deriv_domain_all_direction?")
                    (("2" (inst -1 "v")
                      (("2" (expand "deriv_domain_direction?")
                        (("2" (inst -1 "min(e,abs(1-x))/2" "p+x*v")
                          (("1" (skeep)
                            (("1" (inst 2 "delta")
                              (("1" (assert) nil nil)
                               ("2"
                                (split)
                                (("1"
                                  (typepred "delta")
                                  (("1"
                                    (expand "D_down" 1)
                                    (("1"
                                      (lemma "dist_scalar")
                                      (("1"
                                        (lemma "asso_add")
                                        (("1"
                                          (inst -2 "x" "delta" "v")
                                          (("1"
                                            (inst
                                             -1
                                             "p"
                                             "delta*v"
                                             "x*v")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (replace -2 1)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (lemma "asso_add")
                                                    (("1"
                                                      (inst
                                                       -1
                                                       "p"
                                                       "x*v"
                                                       "delta*v")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (typepred "delta*v" "v")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (typepred "x*v" "v")
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("3"
                                              (typepred "p")
                                              (("3"
                                                (assert)
                                                (("3"
                                                  (typepred "x*v" "v")
                                                  (("3"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (typepred "delta*v" "v")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (typepred "p")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (typepred "v")
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (split)
                            (("1" (typepred "p+x*v" "x*v" "v")
                              (("1"
                                (expand "max" -)
                                (("1" (assert) nil nil))
                                nil))
                              nil)
                             ("2" (assert)
                              (("2"
                                (hide 3)
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil)
                           ("3" (grind) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_plus_real_is_real application-judgement "real" reals nil)
    (deriv_domain? const-decl "bool" deriv_domain_def analysis)
    (<= const-decl "bool" reals nil)
    (deriv_domain_all_direction? const-decl "bool"
     derivative_domain_multi nil)
    (D_down const-decl "bool" init_partial_def nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" init_partial_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nonneg_real_min application-judgement
     "{z: nonneg_real | z <= x AND z <= y}" real_defs nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (e skolem-const-decl "posreal" init_partial_def nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (delta skolem-const-decl
     "{delta: posreal | D(p + x * v + delta * v)}" init_partial_def
     nil)
    (scal def-decl "VectorN(length(v2))" matrices matrices)
    (minus_real_is_real application-judgement "real" reals nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (add def-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (Vector type-eq-decl nil matrices matrices)
    (* const-decl "VectorN(length(v2))" matrices matrices)
    (v skolem-const-decl "VectorN(n)" init_partial_def nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (posreal_min application-judgement
     "{z: posreal | z <= x AND z <= y}" real_defs nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (D skolem-const-decl "(deriv_domain_all_direction?)"
     init_partial_def nil)
    (p skolem-const-decl "(D)" init_partial_def nil)
    (x skolem-const-decl "{t: (D_down(D, p, v)) | t >= 0 AND t <= 1}"
     init_partial_def nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (delta skolem-const-decl
     "{delta: posreal | D(p + x * v + delta * (-1 * v))}"
     init_partial_def nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (asso_v formula-decl nil vector_arithmetic nil)
    (dist_scalar formula-decl nil vector_arithmetic nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (asso_add formula-decl nil vector_arithmetic nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (deriv_domain_direction? const-decl "bool" derivative_domain_multi
     nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil))
 (D_down_not_one 0
  (D_down_not_one-1 nil 3851004533
   ("" (skeep)
    (("" (expand "not_one_element?")
      (("" (skeep)
        (("" (typepred "D")
          (("" (expand "deriv_domain_all_direction?")
            (("" (inst -1 "v")
              (("" (expand "deriv_domain_direction?")
                (("" (inst-cp -1 "1" "p")
                  (("" (skeep)
                    (("" (inst -1 "delta" "p")
                      (("" (case "x=delta")
                        (("1" (skeep)
                          (("1" (inst 1 "delta_1")
                            (("1" (grind) nil nil)
                             ("2" (typepred "delta_1")
                              (("2"
                                (expand "D_down")
                                (("2" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (skeep)
                          (("2" (inst 2 "delta")
                            (("1" (assert) nil nil)
                             ("2" (expand "D_down" 1)
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((not_one_element? const-decl "bool" deriv_domain_def analysis)
    (deriv_domain_all_direction? const-decl "bool"
     derivative_domain_multi nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" init_partial_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (Vector type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (* const-decl "VectorN(length(v2))" matrices matrices)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (delta skolem-const-decl "{delta: posreal | D(p + delta * v)}"
     init_partial_def nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (/= const-decl "boolean" notequal nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (D skolem-const-decl "(deriv_domain_all_direction?)"
     init_partial_def nil)
    (p skolem-const-decl "(D)" init_partial_def nil)
    (v skolem-const-decl "VectorN(n)" init_partial_def nil)
    (delta_1 skolem-const-decl "{delta: posreal | D(p + delta * v)}"
     init_partial_def nil)
    (D_down const-decl "bool" init_partial_def nil)
    (deriv_domain_direction? const-decl "bool" derivative_domain_multi
     nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   shostak))
 (D_down_not_one_unit 0
  (D_down_not_one_unit-1 nil 3851004733
   ("" (skeep)
    (("" (expand "not_one_element?")
      (("" (skeep)
        (("" (typepred "D")
          (("" (expand "deriv_domain_all_direction?")
            (("" (inst -1 "v")
              (("" (expand "deriv_domain_direction?")
                (("" (inst-cp -1 "1" "p")
                  (("" (skeep)
                    (("" (inst -1 "min(delta,1)" "p")
                      (("" (skeep)
                        (("" (case "x=delta")
                          (("1" (inst 1 "delta_1")
                            (("1" (assert) nil nil)
                             ("2" (typepred "delta_1")
                              (("2"
                                (expand "D_down" 1)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil)
                           ("2" (inst 2 "delta")
                            (("1" (assert) nil nil)
                             ("2" (expand "D_down" 1)
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((not_one_element? const-decl "bool" deriv_domain_def analysis)
    (deriv_domain_all_direction? const-decl "bool"
     derivative_domain_multi nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" init_partial_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal_min application-judgement
     "{z: posreal | z <= x AND z <= y}" real_defs nil)
    (<= const-decl "bool" reals nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (Vector type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (* const-decl "VectorN(length(v2))" matrices matrices)
    (D_down const-decl "bool" init_partial_def nil)
    (< const-decl "bool" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (delta_1 skolem-const-decl "{delta: posreal | D(p + delta * v)}"
     init_partial_def nil)
    (v skolem-const-decl "VectorN(n)" init_partial_def nil)
    (p skolem-const-decl "(D)" init_partial_def nil)
    (D skolem-const-decl "(deriv_domain_all_direction?)"
     init_partial_def nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (delta skolem-const-decl "{delta: posreal | D(p + delta * v)}"
     init_partial_def nil)
    (deriv_domain_direction? const-decl "bool" derivative_domain_multi
     nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   shostak))
 (D_down_not_one_unitc 0
  (D_down_not_one_unitc-1 nil 3851004760
   ("" (skeep)
    (("" (expand "not_one_element?")
      (("" (skeep)
        (("" (typepred "D")
          (("" (expand "deriv_domain_all_direction?")
            (("" (inst -1 "v")
              (("" (expand "deriv_domain_direction?")
                (("" (inst-cp -1 "1/2" "p")
                  (("" (skeep)
                    (("" (inst -1 "min(delta,1)" "p")
                      (("" (skeep)
                        (("" (case "x=delta")
                          (("1" (inst 1 "delta_1")
                            (("1" (assert) nil nil)
                             ("2" (split)
                              (("1"
                                (expand "D_down" 1)
                                (("1" (assert) nil nil))
                                nil)
                               ("2" (assert) nil nil))
                              nil))
                            nil)
                           ("2" (inst 2 "delta")
                            (("1" (assert) nil nil)
                             ("2" (expand "D_down" 1)
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((not_one_element? const-decl "bool" deriv_domain_def analysis)
    (deriv_domain_all_direction? const-decl "bool"
     derivative_domain_multi nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" init_partial_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (posreal_min application-judgement
     "{z: posreal | z <= x AND z <= y}" real_defs nil)
    (* const-decl "VectorN(length(v2))" matrices matrices)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (Vector type-eq-decl nil matrices matrices)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (<= const-decl "bool" reals nil)
    (D_down const-decl "bool" init_partial_def nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (delta_1 skolem-const-decl "{delta: posreal | D(p + delta * v)}"
     init_partial_def nil)
    (v skolem-const-decl "VectorN(n)" init_partial_def nil)
    (p skolem-const-decl "(D)" init_partial_def nil)
    (D skolem-const-decl "(deriv_domain_all_direction?)"
     init_partial_def nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (delta skolem-const-decl "{delta: posreal | D(p + delta * v)}"
     init_partial_def nil)
    (deriv_domain_direction? const-decl "bool" derivative_domain_multi
     nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   shostak))
 (D_down_partial 0
  (D_down_partial-1 nil 3851011128
   ("" (skeep)
    (("" (typepred "D")
      (("" (expand "deriv_domain?")
        (("" (expand "deriv_domain_partial?")
          (("" (skeep)
            (("" (typepred "x")
              (("" (expand "D_down" -1)
                (("" (inst -2 "e" "p+x*v")
                  (("" (skeep)
                    (("" (typepred "delta")
                      (("" (inst 1 "delta")
                        (("" (expand "D_down" 1)
                          ((""
                            (case "p + x * v + delta * v = p + (delta + x) * v")
                            (("1" (assert) nil nil)
                             ("2" (hide 2)
                              (("2"
                                (lemma "dist_scalar")
                                (("2"
                                  (inst -1 "x" "delta" "v")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (replace -1 1)
                                      (("1"
                                        (lemma "asso_add")
                                        (("1"
                                          (inst -1 "p" "x*v" "delta*v")
                                          (("1" (assert) nil nil)
                                           ("2"
                                            (hide 2)
                                            (("2"
                                              (typepred "delta*v" "v")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (typepred "x*v" "v")
                                            (("3" (assert) nil nil))
                                            nil)
                                           ("4"
                                            (typepred "p")
                                            (("4" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (typepred "v")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((deriv_domain_partial? const-decl "bool" derivative_domain_multi
     nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" init_partial_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (D_down const-decl "bool" init_partial_def nil)
    (x skolem-const-decl "(D_down(D, p, v))" init_partial_def nil)
    (* const-decl "VectorN(length(v2))" matrices matrices)
    (p skolem-const-decl "(D)" init_partial_def nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (Vector type-eq-decl nil matrices matrices)
    (D skolem-const-decl "(deriv_domain_partial?[n](v))"
     init_partial_def nil)
    (v skolem-const-decl "VectorN(n)" init_partial_def nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (/= const-decl "boolean" notequal nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (asso_add formula-decl nil vector_arithmetic nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (dist_scalar formula-decl nil vector_arithmetic nil)
    (delta skolem-const-decl
     "{delta: nzreal | D(p + x * v + delta * v)}" init_partial_def nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (deriv_domain? const-decl "bool" deriv_domain_def analysis)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   shostak))
 (D_down_all_partial 0
  (D_down_all_partial-1 nil 3852717116
   ("" (skeep)
    (("" (lemma "D_down_partial")
      (("" (inst -1 "v" "D" "p")
        (("" (typepred "D")
          (("" (expand "deriv_domain_all_partial?" -1)
            (("" (inst -1 "v")
              (("" (expand "deriv_domain_partial?")
                (("" (propax) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((D_down_partial formula-decl nil init_partial_def nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (deriv_domain_partial? const-decl "bool" derivative_domain_multi
     nil)
    (v skolem-const-decl "VectorN(n)" init_partial_def nil)
    (D skolem-const-decl "(deriv_domain_all_partial?[n])"
     init_partial_def nil)
    (deriv_domain_all_partial? const-decl "bool"
     derivative_domain_multi nil)
    (deriv_domain_partial? const-decl "bool" derivative_domain_multi
     nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" init_partial_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   shostak))
 (D_down_partial_not_one 0
  (D_down_partial_not_one-1 nil 3851013600
   ("" (skeep)
    (("" (typepred "D")
      (("" (expand "deriv_domain_partial?" -1)
        (("" (expand "not_one_element?" 1)
          (("" (skeep)
            (("" (typepred "x")
              (("" (expand "D_down" -1)
                (("" (inst -2 "abs(x)" "p")
                  (("1" (skeep)
                    (("1" (inst 1 "delta")
                      (("1" (typepred "delta") (("1" (assert) nil nil))
                        nil)
                       ("2" (typepred "delta")
                        (("2" (expand "D_down" 1)
                          (("2" (propax) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert)
                    (("2" (case "NOT x=0")
                      (("1" (grind) nil nil)
                       ("2" (replace -1)
                        (("2" (assert)
                          (("2" (typepred "D")
                            (("2" (expand "deriv_domain_partial?" -1)
                              (("2"
                                (inst -1 "1" "p")
                                (("2"
                                  (skeep)
                                  (("2"
                                    (typepred "delta")
                                    (("2"
                                      (inst 2 "delta")
                                      (("1" (assert) nil nil)
                                       ("2"
                                        (expand "D_down" 1)
                                        (("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((deriv_domain_partial? const-decl "bool" derivative_domain_multi
     nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" init_partial_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (D_down const-decl "bool" init_partial_def nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (x skolem-const-decl "(D_down(D, p, v))" init_partial_def nil)
    (p skolem-const-decl "(D)" init_partial_def nil)
    (D skolem-const-decl "(deriv_domain_partial?[n](v))"
     init_partial_def nil)
    (v skolem-const-decl "VectorN(n)" init_partial_def nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (/= const-decl "boolean" notequal nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (Vector type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (* const-decl "VectorN(length(v2))" matrices matrices)
    (delta skolem-const-decl "{delta: nzreal | D(p + delta * v)}"
     init_partial_def nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (abs_0 formula-decl nil abs_lems reals)
    (delta skolem-const-decl "{delta: nzreal | D(p + delta * v)}"
     init_partial_def nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   shostak))
 (D_down_direction_not_one 0
  (D_down_direction_not_one-1 nil 3852215750
   ("" (skeep)
    (("" (typepred "D")
      (("" (expand "deriv_domain_direction?")
        (("" (expand "not_one_element?" 1)
          (("" (skeep)
            (("" (typepred "x")
              (("" (expand "D_down" -1)
                (("" (typepred "p")
                  (("" (typepred "x")
                    (("" (hide -1)
                      (("" (case "x=0")
                        (("1" (inst -6 "1" "p")
                          (("1" (skeep)
                            (("1" (typepred "delta")
                              (("1"
                                (inst 1 "delta")
                                (("1" (assert) nil nil)
                                 ("2"
                                  (expand "D_down" 1)
                                  (("2" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (assert)
                          (("2" (inst 2 "0")
                            (("1" (assert) nil nil)
                             ("2" (expand "D_down" 1)
                              (("2"
                                (assert)
                                (("2"
                                  (lemma "mult_zero")
                                  (("2"
                                    (inst?)
                                    (("2"
                                      (replace -1)
                                      (("2"
                                        (lemma "zero_id")
                                        (("2"
                                          (inst -1 "p")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((deriv_domain_direction? const-decl "bool" derivative_domain_multi
     nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" init_partial_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (D_down const-decl "bool" init_partial_def nil)
    (mult_zero formula-decl nil vector_arithmetic nil)
    (zero_id formula-decl nil vector_arithmetic nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (* const-decl "VectorN(length(v2))" matrices matrices)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (Vector type-eq-decl nil matrices matrices)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (v skolem-const-decl "VectorN(n)" init_partial_def nil)
    (D skolem-const-decl "(deriv_domain_direction?[n](v))"
     init_partial_def nil)
    (p skolem-const-decl "(D)" init_partial_def nil)
    (delta skolem-const-decl "{delta: posreal | D(p + delta * v)}"
     init_partial_def nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   shostak))
 (D_down_direction_deriv_domain 0
  (D_down_direction_deriv_domain-1 nil 3852216341
   ("" (skeep)
    (("" (lemma "D_down_partial")
      (("" (inst -1 "v" "D" "p")
        (("" (assert)
          (("" (typepred "D")
            (("" (hide 2)
              (("" (expand "deriv_domain_partial?")
                (("" (expand "deriv_domain_direction?")
                  (("" (skeep)
                    (("" (inst?)
                      (("" (inst -1 "p!1")
                        (("" (skeep) (("" (inst 1 "delta") nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((D_down_partial formula-decl nil init_partial_def nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (* const-decl "VectorN(length(v2))" matrices matrices)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (Vector type-eq-decl nil matrices matrices)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (v skolem-const-decl "VectorN(n)" init_partial_def nil)
    (D skolem-const-decl "(deriv_domain_direction?[n](v))"
     init_partial_def nil)
    (deriv_domain_direction? const-decl "bool" derivative_domain_multi
     nil)
    (deriv_domain_partial? const-decl "bool" derivative_domain_multi
     nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" init_partial_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   shostak))
 (init_partial?_TCC1 0
  (init_partial?_TCC1-1 nil 3851010631
   ("" (skeep)
    (("" (expand "D_down" 1 1)
      (("" (typepred "p")
        (("" (case "p = p + 0 *v")
          (("1" (assert) nil nil)
           ("2" (hide 2)
            (("2" (lemma "zero_id")
              (("2" (lemma "mult_zero")
                (("2" (inst -1 "v")
                  (("1" (replace -1)
                    (("1" (typepred "v")
                      (("1" (inst -4 "p") (("1" (assert) nil nil))
                        nil))
                      nil))
                    nil)
                   ("2" (typepred "v")
                    (("2" (expand "length") (("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((D_down const-decl "bool" init_partial_def nil)
    (* const-decl "VectorN(length(v2))" matrices matrices)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (Vector type-eq-decl nil matrices matrices)
    (zero_id formula-decl nil vector_arithmetic nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (v skolem-const-decl "VectorN(n)" init_partial_def nil)
    (mult_zero formula-decl nil vector_arithmetic nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n formal-const-decl "posnat" init_partial_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain_partial? const-decl "bool" derivative_domain_multi
     nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (init_partial? subtype "0"
    "(init_partial_def.D_down(init_partial_def.D, init_partial_def.p, init_partial_def.v))")))
 (init_partial?_TCC2 0
  (init_partial?_TCC2-1 nil 3851010631
   ("" (skeep)
    (("" (lemma "D_down_partial") (("" (inst -1 "v" "D" "p") nil nil))
      nil))
    nil)
   ((D_down_partial formula-decl nil init_partial_def nil)
    (deriv_domain_partial? const-decl "bool" derivative_domain_multi
     nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" init_partial_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (init_partial? assuming
    "analysis@derivatives_def[(init_partial_def.D_down(init_partial_def.D, init_partial_def.p, init_partial_def.v))].derivatives_def"
    "deriv_domain: ASSUMPTION deriv_domain_def[T].deriv_domain?")))
 (init_partial?_TCC3 0
  (init_partial?_TCC3-1 nil 3851010631
   ("" (lemma "D_down_partial_not_one") (("" (propax) nil nil)) nil)
   ((D_down_partial_not_one formula-decl nil init_partial_def nil)) nil
   (init_partial? assuming
    "analysis@derivatives_def[(init_partial_def.D_down(init_partial_def.D, init_partial_def.p, init_partial_def.v))].derivatives_def"
    "not_one_element: ASSUMPTION deriv_domain_def[T].not_one_element?")))
 (diff_imp_init_partial_TCC1 0
  (diff_imp_init_partial_TCC1-1 nil 3851013571
   ("" (skeep)
    (("" (lemma "dd_all_partial_implies_dd")
      (("" (inst -1 "D") (("" (assert) nil nil)) nil)) nil))
    nil)
   ((n formal-const-decl "posnat" init_partial_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (dd_all_partial_implies_dd formula-decl nil derivative_domain_multi
     nil)
    (deriv_domain_all_partial? const-decl "bool"
     derivative_domain_multi nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (diff_imp_init_partial subtype "init_partial_def.D"
    "(derivative_domain_multi[init_partial_def.n].deriv_domain?)")))
 (diff_imp_init_partial_TCC2 0
  (diff_imp_init_partial_TCC2-1 nil 3851013571
   ("" (skeep)
    (("" (typepred "D")
      (("" (expand "deriv_domain_all_partial?")
        (("" (skeep)
          (("" (inst -1 "v")
            (("" (expand "deriv_domain_partial?")
              (("" (propax) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((deriv_domain_all_partial? const-decl "bool"
     derivative_domain_multi nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" init_partial_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (deriv_domain_partial? const-decl "bool" derivative_domain_multi
     nil)
    (deriv_domain_partial? const-decl "bool" derivative_domain_multi
     nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (diff_imp_init_partial subtype "init_partial_def.D"
    "(derivative_domain_multi[init_partial_def.n].deriv_domain_partial?(init_partial_def.v))")))
 (diff_imp_init_partial 0
  (diff_imp_init_partial-1 nil 3851014749
   ("" (skeep)
    (("" (skeep)
      (("" (case "v=zero_vec(n)")
        (("1" (replace -1 1)
          (("1" (expand "init_partial?")
            (("1" (expand "derivable?")
              (("1" (expand "convergent?" 1)
                (("1" (inst 1 "0")
                  (("1" (expand "convergence" 1)
                    (("1" (expand "convergence" 1)
                      (("1" (split)
                        (("1" (expand "adh" 1)
                          (("1" (skeep)
                            (("1" (typepred "D")
                              (("1"
                                (expand "deriv_domain_all_partial?")
                                (("1"
                                  (expand "fullset")
                                  (("1"
                                    (inst -1 "v")
                                    (("1"
                                      (expand "deriv_domain_partial?")
                                      (("1"
                                        (inst -1 "e" "p")
                                        (("1"
                                          (skeep)
                                          (("1"
                                            (inst 1 "delta")
                                            (("1"
                                              (expand "A" 1)
                                              (("1"
                                                (expand "D_down" 1)
                                                (("1"
                                                  (typepred "delta")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (skeep)
                          (("2" (inst 1 "1")
                            (("2" (skeep)
                              (("2"
                                (assert)
                                (("2"
                                  (lemma "scal_zero")
                                  (("2"
                                    (case
                                     "NOT (LAMBDA (Delta: real): f(p + Delta * zero_vec(n))) = LAMBDA (Delta: real): f(p+zero_vec(n))")
                                    (("1"
                                      (decompose-equality 1)
                                      (("1"
                                        (inst -1 "x!1" "n")
                                        (("1" (assert) nil nil))
                                        nil)
                                       ("2"
                                        (typepred "p + zero_vec(n)")
                                        (("2"
                                          (expand "max" -2)
                                          (("2"
                                            (typepred "p")
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (skeep)
                                        (("3"
                                          (typepred
                                           "p + Delta * zero_vec(n)")
                                          (("3"
                                            (typepred
                                             "Delta * zero_vec(n)")
                                            (("3"
                                              (hide -1 -3)
                                              (("3"
                                                (typepred " max" -2)
                                                (("3"
                                                  (assert)
                                                  (("3"
                                                    (hide -2)
                                                    (("3"
                                                      (typepred
                                                       "zero_vec(n)")
                                                      (("3"
                                                        (hide -1)
                                                        (("3"
                                                          (expand
                                                           "max"
                                                           -4)
                                                          (("3"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (replace -1 1)
                                      (("2"
                                        (hide -1)
                                        (("2"
                                          (lemma "zero_id")
                                          (("2"
                                            (case
                                             " NOT (LAMBDA (Delta: real): f(p + zero_vec(n))) = LAMBDA (Delta: real): f(p)")
                                            (("1"
                                              (decompose-equality 1)
                                              (("1"
                                                (inst -1 "p")
                                                (("1"
                                                  (typepred "p")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (typepred
                                                 "p + zero_vec(n)")
                                                (("2"
                                                  (typepred "p")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (typepred
                                                       "p"
                                                       "zero_vec(n)")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (expand
                                                           "max")
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (replace -1 1)
                                              (("2"
                                                (expand "NQ" 1)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (expand
                                                     "restrict"
                                                     1)
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (typepred "p + zero_vec(n)")
                                      (("3"
                                        (typepred "p")
                                        (("3"
                                          (assert)
                                          (("3"
                                            (typepred
                                             "p"
                                             "zero_vec(n)")
                                            (("3"
                                              (assert)
                                              (("3"
                                                (expand "max" -)
                                                (("3"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("4"
                                      (skeep)
                                      (("4"
                                        (typepred
                                         "p + Delta * zero_vec(n)")
                                        (("4"
                                          (typepred "p")
                                          (("4"
                                            (typepred
                                             "Delta*zero_vec(n)")
                                            (("4"
                                              (typepred "zero_vec(n)")
                                              (("4"
                                                (assert)
                                                (("4"
                                                  (typepred
                                                   "p"
                                                   "Delta*zero_vec(n)"
                                                   "zero_vec(n)")
                                                  (("4"
                                                    (typepred
                                                     "p+Delta*zero_vec(n)")
                                                    (("4"
                                                      (expand "max" -)
                                                      (("4"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (expand "differentiable?")
          (("2" (skeep)
            (("2" (expand "convergence_zero?")
              (("2" (expand "init_partial?")
                (("2" (expand "derivable?")
                  (("2" (expand "convergent?")
                    (("2" (inst 2 "g*v")
                      (("2" (expand "convergence")
                        (("2" (expand "convergence" 2)
                          (("2" (split)
                            (("1" (expand "adh" 1)
                              (("1"
                                (skeep)
                                (("1"
                                  (typepred "D")
                                  (("1"
                                    (expand "fullset" 1)
                                    (("1"
                                      (expand
                                       "deriv_domain_all_partial?")
                                      (("1"
                                        (inst -1 "v")
                                        (("1"
                                          (expand
                                           "deriv_domain_partial?")
                                          (("1"
                                            (inst -1 "e" "p")
                                            (("1"
                                              (skeep)
                                              (("1"
                                                (inst 1 "delta")
                                                (("1"
                                                  (expand "A")
                                                  (("1"
                                                    (typepred "delta")
                                                    (("1"
                                                      (expand "D_down")
                                                      (("1"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (skeep)
                              (("2"
                                (expand "NQ" -1)
                                (("2"
                                  (expand "NQ" 1)
                                  (("2"
                                    (inst -1 "epsilon/norm_inf(n)(v)")
                                    (("1"
                                      (skeep)
                                      (("1"
                                        (inst 1 "delta/norm_inf(n)(v)")
                                        (("1"
                                          (skeep)
                                          (("1"
                                            (inst -3 "x * v")
                                            (("1"
                                              (lemma "sub_zero")
                                              (("1"
                                                (lemma "mult_zero")
                                                (("1"
                                                  (expand "restrict" 1)
                                                  (("1"
                                                    (inst -1 "v")
                                                    (("1"
                                                      (replace -1 1)
                                                      (("1"
                                                        (typepred "v")
                                                        (("1"
                                                          (replace
                                                           -2
                                                           1)
                                                          (("1"
                                                            (hide -1)
                                                            (("1"
                                                              (lemma
                                                               "zero_id")
                                                              (("1"
                                                                (inst
                                                                 -1
                                                                 "p")
                                                                (("1"
                                                                  (typepred
                                                                   "p")
                                                                  (("1"
                                                                    (replace
                                                                     -2
                                                                     -4)
                                                                    (("1"
                                                                      (replace
                                                                       -4
                                                                       1)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (lemma
                                                                           "zero_id")
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             "p")
                                                                            (("1"
                                                                              (typepred
                                                                               "norm_inf(n)")
                                                                              (("1"
                                                                                (expand
                                                                                 "norm?"
                                                                                 -1)
                                                                                (("1"
                                                                                  (flatten)
                                                                                  (("1"
                                                                                    (hide
                                                                                     -1
                                                                                     -3
                                                                                     -4)
                                                                                    (("1"
                                                                                      (inst
                                                                                       -1
                                                                                       "v"
                                                                                       "x")
                                                                                      (("1"
                                                                                        (typepred
                                                                                         "x")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (split)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (mult-by
                                                                                                 -1
                                                                                                 "norm_inf(n)(v)")
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (lemma
                                                                                                     "abs_div")
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       -1
                                                                                                       "abs(x) * norm_inf(n)(v)"
                                                                                                       "f(p + x * v) - f(p) - g * (x * v)")
                                                                                                      (("1"
                                                                                                        (lemma
                                                                                                         "abs_mult")
                                                                                                        (("1"
                                                                                                          (inst
                                                                                                           -1
                                                                                                           "abs(x)"
                                                                                                           "norm_inf(n)(v)")
                                                                                                          (("1"
                                                                                                            (typepred
                                                                                                             "norm_inf(n)(v)")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (case
                                                                                                                 "NOT abs(f(p + x * v) - f(p) - g * (x * v)) / (abs(x) * norm_inf(n)(v)) *
                                                                                                                            norm_inf(n)(v) = abs(f(p + x * v) - f(p) - g * (x * v)) / (abs(x))")
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (lemma
                                                                                                                   "abs_div")
                                                                                                                  (("2"
                                                                                                                    (inst
                                                                                                                     -1
                                                                                                                     "x"
                                                                                                                     "f(p + x * v) - f(p) - g * (x * v)")
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      (("2"
                                                                                                                        (case
                                                                                                                         "NOT (f(p + x * v) - f(p) - g * (x * v)) / x = (f(p + x * v) - f(p)) / x - g * v")
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          (("1"
                                                                                                                            (lemma
                                                                                                                             "div_distributes_minus")
                                                                                                                            (("1"
                                                                                                                              (inst
                                                                                                                               -1
                                                                                                                               "x"
                                                                                                                               "f(p + x * v) - f(p)"
                                                                                                                               "g * (x * v)")
                                                                                                                              (("1"
                                                                                                                                (replace
                                                                                                                                 -1
                                                                                                                                 1)
                                                                                                                                (("1"
                                                                                                                                  (replace
                                                                                                                                   -1
                                                                                                                                   1
                                                                                                                                   rl)
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    (("1"
                                                                                                                                      (lemma
                                                                                                                                       "scal_cancel")
                                                                                                                                      (("1"
                                                                                                                                        (lemma
                                                                                                                                         "scal_asso")
                                                                                                                                        (("1"
                                                                                                                                          (inst
                                                                                                                                           -1
                                                                                                                                           "g"
                                                                                                                                           "v"
                                                                                                                                           "x")
                                                                                                                                          (("1"
                                                                                                                                            (replace
                                                                                                                                             -1
                                                                                                                                             1)
                                                                                                                                            (("1"
                                                                                                                                              (assert)
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (assert)
                                                                                                                          (("2"
                                                                                                                            (replace
                                                                                                                             -10
                                                                                                                             -7)
                                                                                                                            (("2"
                                                                                                                              (replace
                                                                                                                               -6
                                                                                                                               -7)
                                                                                                                              (("2"
                                                                                                                                (expand
                                                                                                                                 "abs"
                                                                                                                                 -7
                                                                                                                                 2)
                                                                                                                                (("2"
                                                                                                                                  (replace
                                                                                                                                   -3
                                                                                                                                   -7)
                                                                                                                                  (("2"
                                                                                                                                    (assert)
                                                                                                                                    (("2"
                                                                                                                                      (replace
                                                                                                                                       -2
                                                                                                                                       -7
                                                                                                                                       rl)
                                                                                                                                      (("2"
                                                                                                                                        (replace
                                                                                                                                         -1
                                                                                                                                         -7)
                                                                                                                                        (("2"
                                                                                                                                          (propax)
                                                                                                                                          nil
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (assert)
                                                                                                        (("2"
                                                                                                          (case
                                                                                                           "abs(x) * norm_inf(n)(v) = 0")
                                                                                                          (("1"
                                                                                                            (div-by
                                                                                                             -1
                                                                                                             "abs(x)")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (case
                                                                                                                 "0 / abs(x) =0")
                                                                                                                (("1"
                                                                                                                  (replace
                                                                                                                   -1
                                                                                                                   -2)
                                                                                                                  (("1"
                                                                                                                    (typepred
                                                                                                                     "norm_inf(n)")
                                                                                                                    (("1"
                                                                                                                      (expand
                                                                                                                       "norm?")
                                                                                                                      (("1"
                                                                                                                        (flatten)
                                                                                                                        (("1"
                                                                                                                          (inst
                                                                                                                           -3
                                                                                                                           "v")
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (case
                                                                                                   "norm_inf(n)(v)=0")
                                                                                                  (("1"
                                                                                                    (typepred
                                                                                                     "norm_inf(n)")
                                                                                                    (("1"
                                                                                                      (expand
                                                                                                       "norm?")
                                                                                                      (("1"
                                                                                                        (flatten)
                                                                                                        (("1"
                                                                                                          (inst
                                                                                                           -3
                                                                                                           "v")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (lemma
                                                                                               "sub_zero")
                                                                                              (("2"
                                                                                                (lemma
                                                                                                 "mult_zero")
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   -2
                                                                                                   "x * v")
                                                                                                  (("2"
                                                                                                    (typepred
                                                                                                     "x*v")
                                                                                                    (("2"
                                                                                                      (typepred
                                                                                                       "v")
                                                                                                      (("2"
                                                                                                        (replace
                                                                                                         -2
                                                                                                         -4)
                                                                                                        (("2"
                                                                                                          (replace
                                                                                                           -4
                                                                                                           -6)
                                                                                                          (("2"
                                                                                                            (hide
                                                                                                             -1
                                                                                                             -3)
                                                                                                            (("2"
                                                                                                              (replace
                                                                                                               -4
                                                                                                               1)
                                                                                                              (("2"
                                                                                                                (typepred
                                                                                                                 "norm_inf(n)")
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "norm?"
                                                                                                                   -1)
                                                                                                                  (("2"
                                                                                                                    (flatten)
                                                                                                                    (("2"
                                                                                                                      (hide
                                                                                                                       -1
                                                                                                                       -3
                                                                                                                       -4)
                                                                                                                      (("2"
                                                                                                                        (typepred
                                                                                                                         "x")
                                                                                                                        (("2"
                                                                                                                          (assert)
                                                                                                                          (("2"
                                                                                                                            (replace
                                                                                                                             -9
                                                                                                                             1)
                                                                                                                            (("2"
                                                                                                                              (mult-by
                                                                                                                               -19
                                                                                                                               "norm_inf(n)(v)")
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (split)
                                              (("1"
                                                (typepred "x*v")
                                                (("1"
                                                  (typepred "v")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand "fullset" -1)
                                                (("2"
                                                  (typepred "x")
                                                  (("2"
                                                    (expand "A" -2)
                                                    (("2"
                                                      (expand
                                                       "D_down"
                                                       -2)
                                                      (("2"
                                                        (typepred "p")
                                                        (("2"
                                                          (typepred
                                                           "x*v")
                                                          (("2"
                                                            (expand
                                                             "NQ"
                                                             1)
                                                            (("2"
                                                              (propax)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (case
                                                 "x*v = zero_vec(n)")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (typepred "x")
                                                    (("1"
                                                      (lemma
                                                       "zero_scal")
                                                      (("1"
                                                        (inst
                                                         -1
                                                         "v"
                                                         "x")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (split)
                                          (("1"
                                            (typepred "norm_inf(n)(v)")
                                            (("1"
                                              (typepred "delta")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (div-by
                                                   -1
                                                   "norm_inf(n)(v)")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (typepred
                                                     "norm_inf(n)(v)")
                                                    (("2"
                                                      (typepred
                                                       "norm_inf(n)")
                                                      (("2"
                                                        (expand
                                                         "norm?")
                                                        (("2"
                                                          (flatten)
                                                          (("2"
                                                            (inst
                                                             -3
                                                             "v")
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (typepred "delta")
                                            (("2"
                                              (typepred
                                               "norm_inf(n)(v)")
                                              (("2"
                                                (div-by
                                                 -3
                                                 "norm_inf(n)(v)")
                                                (("1" (assert) nil nil)
                                                 ("2"
                                                  (typepred
                                                   "norm_inf(n)")
                                                  (("2"
                                                    (expand "norm?" -1)
                                                    (("2"
                                                      (flatten)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (inst -3 "v")
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (assert)
                                          (("3"
                                            (typepred "norm_inf(n)")
                                            (("3"
                                              (expand "norm?")
                                              (("3"
                                                (flatten)
                                                (("3"
                                                  (inst -3 "v")
                                                  (("3"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("4"
                                          (typepred "v")
                                          (("4" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (split)
                                      (("1"
                                        (typepred "epsilon")
                                        (("1"
                                          (typepred "norm_inf(n)(v)")
                                          (("1"
                                            (div-by
                                             -2
                                             "norm_inf(n)(v)")
                                            (("1" (assert) nil nil)
                                             ("2"
                                              (typepred "norm_inf(n)")
                                              (("2"
                                                (expand "norm?")
                                                (("2"
                                                  (flatten)
                                                  (("2"
                                                    (inst -3 "v")
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (typepred "epsilon")
                                        (("2"
                                          (typepred "norm_inf(n)(v)")
                                          (("2"
                                            (div-by
                                             -2
                                             "norm_inf(n)(v)")
                                            (("1" (assert) nil nil)
                                             ("2"
                                              (typepred "norm_inf(n)")
                                              (("2"
                                                (expand "norm?")
                                                (("2"
                                                  (flatten)
                                                  (("2"
                                                    (inst -3 "v")
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (assert)
                                      (("3"
                                        (typepred "norm_inf(n)")
                                        (("3"
                                          (expand "norm?" -1)
                                          (("3"
                                            (flatten)
                                            (("3"
                                              (inst -3 "v")
                                              (("3" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("4"
                                      (typepred "v")
                                      (("4" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((differentiable? const-decl "bool" differentiable_def nil)
    (convergence_zero? const-decl "bool" vector_sequences nil)
    (* const-decl "real" matrices matrices)
    (both_sides_div_pos_ge1 formula-decl nil real_props nil)
    (both_sides_div_pos_gt1 formula-decl nil real_props nil)
    (zero_scal formula-decl nil vector_arithmetic nil)
    (sub_zero formula-decl nil vector_arithmetic nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (scal_cancel formula-decl nil vector_arithmetic nil)
    (scal_asso formula-decl nil vector_arithmetic nil)
    (div_distributes_minus formula-decl nil real_props nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (abs_mult formula-decl nil real_props nil)
    (times_div_cancel1 formula-decl nil extra_real_props nil)
    (both_sides_div1 formula-decl nil real_props nil)
    (abs_div formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (div_cancel2 formula-decl nil real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (both_sides_times_pos_lt1 formula-decl nil real_props nil)
    (mult_zero formula-decl nil vector_arithmetic nil)
    (NQ const-decl "bool" differentiable_def nil)
    (x skolem-const-decl "(A(0))" init_partial_def nil)
    (delta skolem-const-decl "posreal" init_partial_def nil)
    (epsilon skolem-const-decl "posreal" init_partial_def nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (norm_inf const-decl "(norm?(m))" norms nil)
    (norm? const-decl "bool" norms nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NQ const-decl "real" differentiable_def nil)
    (delta skolem-const-decl "{delta: nzreal | D(p + delta * v)}"
     init_partial_def nil)
    (derivable? const-decl "bool" derivatives_def analysis)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (convergence const-decl "bool" convergence_functions analysis)
    (scal_zero formula-decl nil vector_arithmetic nil)
    (zero_id formula-decl nil vector_arithmetic nil)
    (abs_0 formula-decl nil abs_lems reals)
    (restrict const-decl "R" restrict nil)
    (NQ const-decl "real" derivatives_def analysis)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (add def-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (even? const-decl "bool" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_even_is_even application-judgement "even_int" integers nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (adh const-decl "setof[real]" convergence_functions analysis)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain_all_partial? const-decl "bool"
     derivative_domain_multi nil)
    (fullset const-decl "set" sets nil)
    (deriv_domain_partial? const-decl "bool" derivative_domain_multi
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (D skolem-const-decl "(deriv_domain_all_partial?)" init_partial_def
     nil)
    (p skolem-const-decl "(D)" init_partial_def nil)
    (v skolem-const-decl "VectorN(n)" init_partial_def nil)
    (delta skolem-const-decl "{delta: nzreal | D(p + delta * v)}"
     init_partial_def nil)
    (/= const-decl "boolean" notequal nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (D_down const-decl "bool" init_partial_def nil)
    (setof type-eq-decl nil defined_types nil)
    (A const-decl "setof[nzreal]" derivatives_def analysis)
    (Vector type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (* const-decl "VectorN(length(v2))" matrices matrices)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (convergence const-decl "bool" lim_of_functions analysis)
    (convergent? const-decl "bool" lim_of_functions analysis)
    (init_partial? const-decl "bool" init_partial_def nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n formal-const-decl "posnat" init_partial_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   shostak))
 (diff_imp_init_partial1_TCC1 0
  (diff_imp_init_partial1_TCC1-1 nil 3851013571
   ("" (lemma "dd_directionv_implies_dd")
    (("" (skeep)
      (("" (inst?)
        (("" (assert)
          (("" (typepred "v")
            (("" (typepred "D")
              (("" (inst 1 "v")
                (("" (assert)
                  (("" (expand "deriv_domain_direction?")
                    (("" (propax) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (deriv_domain_direction? const-decl "bool" derivative_domain_multi
     nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (/= const-decl "boolean" notequal nil)
    (deriv_domain_direction? const-decl "bool" derivative_domain_multi
     nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (dd_directionv_implies_dd formula-decl nil derivative_domain_multi
     nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n formal-const-decl "posnat" init_partial_def nil))
   nil
   (diff_imp_init_partial1 subtype "init_partial_def.D"
    "(derivative_domain_multi[init_partial_def.n].deriv_domain?)")))
 (diff_imp_init_partial1_TCC2 0
  (diff_imp_init_partial1_TCC2-1 nil 3852716736
   ("" (skeep)
    (("" (lemma "dd_vdirection_implies_dd_partial")
      (("" (inst -1 "D" "v")
        (("" (assert)
          (("" (typepred "D")
            (("" (expand "deriv_domain_direction?")
              (("" (propax) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((n formal-const-decl "posnat" init_partial_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (dd_vdirection_implies_dd_partial formula-decl nil
     derivative_domain_multi nil)
    (deriv_domain_direction? const-decl "bool" derivative_domain_multi
     nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (/= const-decl "boolean" notequal nil)
    (deriv_domain_direction? const-decl "bool" derivative_domain_multi
     nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (diff_imp_init_partial1 subtype "init_partial_def.D"
    "(derivative_domain_multi[init_partial_def.n].deriv_domain_partial?(init_partial_def.v))")))
 (diff_imp_init_partial1 0
  (diff_imp_init_partial1-1 nil 3851068206
   ("" (skeep)
    (("" (case "v=zero_vec(n)")
      (("1" (replace -1 1)
        (("1" (expand "init_partial?")
          (("1" (expand "derivable?")
            (("1" (expand "convergent?" 1)
              (("1" (inst 1 "0")
                (("1" (expand "convergence" 1)
                  (("1" (expand "convergence" 1)
                    (("1" (split)
                      (("1" (expand "adh" 1)
                        (("1" (skeep)
                          (("1" (typepred "D")
                            (("1" (expand "deriv_domain_direction?")
                              (("1"
                                (inst -1 "e" "p")
                                (("1"
                                  (skeep)
                                  (("1"
                                    (inst 1 "delta")
                                    (("1"
                                      (split)
                                      (("1"
                                        (expand "fullset")
                                        (("1" (propax) nil nil))
                                        nil)
                                       ("2" (propax) nil nil))
                                      nil)
                                     ("2"
                                      (expand "A" 1)
                                      (("2"
                                        (typepred "delta")
                                        (("2"
                                          (expand "D_down" 1)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (skeep)
                        (("2" (inst 1 "1")
                          (("2" (skeep) (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (lemma "scal_zero")
        (("2" (expand "init_partial?")
          (("2" (expand "differentiable?")
            (("2" (skeep)
              (("2" (expand "derivable?")
                (("2" (expand "convergent?")
                  (("2" (expand "convergence_zero?")
                    (("2" (inst 2 "g*v")
                      (("2" (expand "convergence")
                        (("2" (expand "convergence" 2)
                          (("2" (split)
                            (("1" (expand "adh" 1)
                              (("1"
                                (skeep)
                                (("1"
                                  (typepred "D")
                                  (("1"
                                    (expand "deriv_domain_direction?")
                                    (("1"
                                      (inst -1 "e" "p")
                                      (("1"
                                        (skeep)
                                        (("1"
                                          (inst 1 "delta")
                                          (("1"
                                            (split)
                                            (("1"
                                              (expand "fullset" 1)
                                              (("1" (propax) nil nil))
                                              nil)
                                             ("2" (propax) nil nil))
                                            nil)
                                           ("2"
                                            (expand "A" 1)
                                            (("2"
                                              (expand "D_down" 1)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (skeep)
                              (("2"
                                (expand "NQ" 1)
                                (("2"
                                  (hide -1)
                                  (("2"
                                    (inst -1 "epsilon/norm_inf(n)(v)")
                                    (("1"
                                      (skeep)
                                      (("1"
                                        (inst 1 "delta/norm_inf(n)(v)")
                                        (("1"
                                          (skeep)
                                          (("1"
                                            (inst -3 "x * v")
                                            (("1"
                                              (lemma "sub_zero")
                                              (("1"
                                                (lemma "mult_zero")
                                                (("1"
                                                  (expand "restrict" 1)
                                                  (("1"
                                                    (inst -1 "v")
                                                    (("1"
                                                      (replace -1 1)
                                                      (("1"
                                                        (typepred "v")
                                                        (("1"
                                                          (replace
                                                           -2
                                                           1)
                                                          (("1"
                                                            (hide -1)
                                                            (("1"
                                                              (lemma
                                                               "zero_id")
                                                              (("1"
                                                                (inst
                                                                 -1
                                                                 "p")
                                                                (("1"
                                                                  (typepred
                                                                   "p")
                                                                  (("1"
                                                                    (replace
                                                                     -2
                                                                     -4)
                                                                    (("1"
                                                                      (replace
                                                                       -4
                                                                       1)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (lemma
                                                                           "zero_id")
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             "p")
                                                                            (("1"
                                                                              (expand
                                                                               "NQ")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (split)
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (lift-if)
                                                                                      (("1"
                                                                                        (split)
                                                                                        (("1"
                                                                                          (flatten)
                                                                                          (("1"
                                                                                            (hide
                                                                                             -2
                                                                                             -3
                                                                                             -4
                                                                                             -5
                                                                                             -6
                                                                                             -7
                                                                                             -8
                                                                                             -9)
                                                                                            (("1"
                                                                                              (typepred
                                                                                               "norm_inf(n)")
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "norm?"
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (flatten)
                                                                                                  (("1"
                                                                                                    (hide
                                                                                                     -1
                                                                                                     -3
                                                                                                     -4)
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       -1
                                                                                                       "v"
                                                                                                       "x")
                                                                                                      (("1"
                                                                                                        (typepred
                                                                                                         "x")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (replace
                                                                                                             -3
                                                                                                             -4)
                                                                                                            (("1"
                                                                                                              (mult-by
                                                                                                               -4
                                                                                                               "norm_inf(n)(v)")
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (lemma
                                                                                                                   "abs_div")
                                                                                                                  (("1"
                                                                                                                    (inst
                                                                                                                     -1
                                                                                                                     "(abs(x) * norm_inf(n)(v))"
                                                                                                                     "f(p + x * v) - f(p) - g * (x * v)")
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      (("1"
                                                                                                                        (replace
                                                                                                                         -1
                                                                                                                         -5)
                                                                                                                        (("1"
                                                                                                                          (hide
                                                                                                                           -1)
                                                                                                                          (("1"
                                                                                                                            (lemma
                                                                                                                             "abs_mult")
                                                                                                                            (("1"
                                                                                                                              (inst
                                                                                                                               -1
                                                                                                                               "abs(x)"
                                                                                                                               "norm_inf(n)(v)")
                                                                                                                              (("1"
                                                                                                                                (replace
                                                                                                                                 -1
                                                                                                                                 -5)
                                                                                                                                (("1"
                                                                                                                                  (expand
                                                                                                                                   "abs"
                                                                                                                                   -5
                                                                                                                                   2)
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    (("1"
                                                                                                                                      (case
                                                                                                                                       " NOT abs(f(p + x * v) - f(p) - g * (x * v)) /
                              (abs(x) * abs(norm_inf(n)(v)))
                              * norm_inf(n)(v) = abs(f(p + x * v) - f(p) - g * (x * v)) /
                              (abs(x))")
                                                                                                                                      (("1"
                                                                                                                                        (assert)
                                                                                                                                        (("1"
                                                                                                                                          (expand
                                                                                                                                           "abs"
                                                                                                                                           1
                                                                                                                                           3)
                                                                                                                                          (("1"
                                                                                                                                            (assert)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil)
                                                                                                                                       ("2"
                                                                                                                                        (replace
                                                                                                                                         -1
                                                                                                                                         -6)
                                                                                                                                        (("2"
                                                                                                                                          (hide
                                                                                                                                           -1
                                                                                                                                           -2)
                                                                                                                                          (("2"
                                                                                                                                            (lemma
                                                                                                                                             "abs_div")
                                                                                                                                            (("2"
                                                                                                                                              (inst
                                                                                                                                               -1
                                                                                                                                               "x"
                                                                                                                                               "f(p + x * v) - f(p) - g * (x * v)")
                                                                                                                                              (("2"
                                                                                                                                                (replace
                                                                                                                                                 -1
                                                                                                                                                 -5
                                                                                                                                                 rl)
                                                                                                                                                (("2"
                                                                                                                                                  (case
                                                                                                                                                   "NOT (f(p + x * v) - f(p) - g * (x * v)) / x = (f(p + x * v) - f(p)) / x - g * v")
                                                                                                                                                  (("1"
                                                                                                                                                    (assert)
                                                                                                                                                    (("1"
                                                                                                                                                      (lemma
                                                                                                                                                       "div_distributes_minus")
                                                                                                                                                      (("1"
                                                                                                                                                        (inst
                                                                                                                                                         -1
                                                                                                                                                         "x"
                                                                                                                                                         "f(p + x * v) - f(p)"
                                                                                                                                                         "g * (x * v)")
                                                                                                                                                        (("1"
                                                                                                                                                          (replace
                                                                                                                                                           -1
                                                                                                                                                           1)
                                                                                                                                                          (("1"
                                                                                                                                                            (replace
                                                                                                                                                             -1
                                                                                                                                                             1
                                                                                                                                                             rl)
                                                                                                                                                            (("1"
                                                                                                                                                              (assert)
                                                                                                                                                              (("1"
                                                                                                                                                                (lemma
                                                                                                                                                                 "scal_cancel")
                                                                                                                                                                (("1"
                                                                                                                                                                  (lemma
                                                                                                                                                                   "scal_asso")
                                                                                                                                                                  (("1"
                                                                                                                                                                    (inst
                                                                                                                                                                     -1
                                                                                                                                                                     "g"
                                                                                                                                                                     "v"
                                                                                                                                                                     "x")
                                                                                                                                                                    (("1"
                                                                                                                                                                      (replace
                                                                                                                                                                       -1
                                                                                                                                                                       1)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (assert)
                                                                                                                                                                        nil
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil)
                                                                                                                                                   ("2"
                                                                                                                                                    (assert)
                                                                                                                                                    (("2"
                                                                                                                                                      (replace
                                                                                                                                                       -1
                                                                                                                                                       -6)
                                                                                                                                                      (("2"
                                                                                                                                                        (propax)
                                                                                                                                                        nil
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (typepred
                                                                                                                 "v")
                                                                                                                (("2"
                                                                                                                  (typepred
                                                                                                                   "norm_inf(n)")
                                                                                                                  (("2"
                                                                                                                    (expand
                                                                                                                     "norm?")
                                                                                                                    (("2"
                                                                                                                      (flatten)
                                                                                                                      (("2"
                                                                                                                        (inst
                                                                                                                         -3
                                                                                                                         "v")
                                                                                                                        (("2"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (flatten)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (typepred
                                                                                               "x")
                                                                                              (("2"
                                                                                                (lemma
                                                                                                 "zero_scal")
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   -1
                                                                                                   "v"
                                                                                                   "x")
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (lemma
                                                                                       "sub_zero")
                                                                                      (("2"
                                                                                        (inst
                                                                                         -1
                                                                                         "x*v")
                                                                                        (("2"
                                                                                          (typepred
                                                                                           "x*v"
                                                                                           "v")
                                                                                          (("2"
                                                                                            (replace
                                                                                             -4
                                                                                             -2)
                                                                                            (("2"
                                                                                              (replace
                                                                                               -2
                                                                                               -6)
                                                                                              (("2"
                                                                                                (replace
                                                                                                 -6
                                                                                                 1)
                                                                                                (("2"
                                                                                                  (typepred
                                                                                                   "norm_inf(n)")
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "norm?"
                                                                                                     -1)
                                                                                                    (("2"
                                                                                                      (flatten)
                                                                                                      (("2"
                                                                                                        (inst
                                                                                                         -2
                                                                                                         "v"
                                                                                                         "x")
                                                                                                        (("2"
                                                                                                          (replace
                                                                                                           -2
                                                                                                           2)
                                                                                                          (("2"
                                                                                                            (mult-by
                                                                                                             -19
                                                                                                             "norm_inf(n)(v)")
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (split)
                                              (("1"
                                                (typepred "x*v" "v")
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand "NQ" 1)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (typepred "x*v")
                                                    (("2"
                                                      (typepred "v")
                                                      (("2"
                                                        (typepred "x")
                                                        (("2"
                                                          (flatten)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (expand
                                                               "A"
                                                               -1)
                                                              (("2"
                                                                (expand
                                                                 "D_down"
                                                                 -1)
                                                                (("2"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (lemma "zero_scal")
                                                (("3"
                                                  (inst -1 "v" "x")
                                                  (("3"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (case
                                           "NOT norm_inf(n)(v) >0")
                                          (("1"
                                            (typepred "norm_inf(n)")
                                            (("1"
                                              (expand "norm?" -1)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (inst -3 "v")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (assert)
                                            (("2"
                                              (split)
                                              (("1"
                                                (mult-by
                                                 1
                                                 "norm_inf(n)(v)")
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil)
                                               ("2"
                                                (mult-by
                                                 1
                                                 "norm_inf(n)(v)")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (typepred "v")
                                            (("3" (assert) nil nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (assert)
                                          (("3"
                                            (typepred "norm_inf(n)")
                                            (("3"
                                              (expand "norm?")
                                              (("3"
                                                (flatten)
                                                (("3"
                                                  (inst -3 "v")
                                                  (("3"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("4"
                                          (typepred "v")
                                          (("4" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (case "NOT norm_inf(n)(v)>0")
                                      (("1"
                                        (typepred "norm_inf(n)")
                                        (("1"
                                          (expand "norm?" -1)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (inst -3 "v")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (split)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (mult-by
                                             1
                                             "norm_inf(n)(v)")
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (mult-by 1 "norm_inf(n)(v)")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (typepred "v")
                                        (("3" (assert) nil nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (assert)
                                      (("3"
                                        (typepred "v")
                                        (("3"
                                          (hide -1 -2 -3)
                                          (("3"
                                            (typepred "norm_inf(n)")
                                            (("3"
                                              (expand "norm?")
                                              (("3"
                                                (flatten)
                                                (("3"
                                                  (inst -3 "v")
                                                  (("3"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("4"
                                      (typepred "v")
                                      (("4" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (/= const-decl "boolean" notequal nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" init_partial_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (init_partial? const-decl "bool" init_partial_def nil)
    (convergent? const-decl "bool" lim_of_functions analysis)
    (convergence const-decl "bool" lim_of_functions analysis)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (fullset const-decl "set" sets nil)
    (D_down const-decl "bool" init_partial_def nil)
    (v skolem-const-decl "{vv: VectorN(n) | vv /= zero_vec(n)}"
     init_partial_def nil)
    (D skolem-const-decl "(deriv_domain_direction?(v))"
     init_partial_def nil)
    (p skolem-const-decl "(D)" init_partial_def nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (setof type-eq-decl nil defined_types nil)
    (A const-decl "setof[nzreal]" derivatives_def analysis)
    (Vector type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (* const-decl "VectorN(length(v2))" matrices matrices)
    (delta skolem-const-decl "{delta: posreal | D(p + delta * v)}"
     init_partial_def nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (deriv_domain_direction? const-decl "bool" derivative_domain_multi
     nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (adh const-decl "setof[real]" convergence_functions analysis)
    (convergence const-decl "bool" convergence_functions analysis)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (derivable? const-decl "bool" derivatives_def analysis)
    (* const-decl "real" matrices matrices)
    (both_sides_times_pos_ge1 formula-decl nil real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (both_sides_times_pos_le1_imp formula-decl nil extra_real_props
     nil)
    (sub_zero formula-decl nil vector_arithmetic nil)
    (restrict const-decl "R" restrict nil)
    (zero_id formula-decl nil vector_arithmetic nil)
    (NQ const-decl "real" differentiable_def nil)
    (zero_scal formula-decl nil vector_arithmetic nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (both_sides_times_pos_lt1 formula-decl nil real_props nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (div_cancel2 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (abs_div formula-decl nil real_props nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (div_distributes_minus formula-decl nil real_props nil)
    (scal_asso formula-decl nil vector_arithmetic nil)
    (scal_cancel formula-decl nil vector_arithmetic nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (abs_mult formula-decl nil real_props nil)
    (abs_0 formula-decl nil abs_lems reals)
    (mult_zero formula-decl nil vector_arithmetic nil)
    (NQ const-decl "bool" differentiable_def nil)
    (x skolem-const-decl "(A(0))" init_partial_def nil)
    (delta skolem-const-decl "posreal" init_partial_def nil)
    (epsilon skolem-const-decl "posreal" init_partial_def nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (norm_inf const-decl "(norm?(m))" norms nil)
    (norm? const-decl "bool" norms nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (NQ const-decl "real" derivatives_def analysis)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (delta skolem-const-decl "{delta: posreal | D(p + delta * v)}"
     init_partial_def nil)
    (convergence_zero? const-decl "bool" vector_sequences nil)
    (differentiable? const-decl "bool" differentiable_def nil)
    (scal_zero formula-decl nil vector_arithmetic nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   shostak))
 (diff_imp_init_partial2_TCC1 0
  (diff_imp_init_partial2_TCC1-1 nil 3852716736
   ("" (skeep)
    (("" (lemma "dd_partial_implies_dd")
      (("" (inst -1 "D" "v") (("" (assert) nil nil)) nil)) nil))
    nil)
   ((n formal-const-decl "posnat" init_partial_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (dd_partial_implies_dd formula-decl nil derivative_domain_multi
     nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (/= const-decl "boolean" notequal nil)
    (deriv_domain_partial? const-decl "bool" derivative_domain_multi
     nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (diff_imp_init_partial2 subtype "init_partial_def.D"
    "(derivative_domain_multi[init_partial_def.n].deriv_domain?)")))
 (diff_imp_init_partial2 0
  (diff_imp_init_partial2-1 nil 3852021962
   ("" (skeep)
    (("" (case "v=zero_vec(n)")
      (("1" (replace -1 1)
        (("1" (expand "init_partial?")
          (("1" (expand "derivable?")
            (("1" (expand "convergent?" 1)
              (("1" (inst 1 "0")
                (("1" (expand "convergence" 1)
                  (("1" (expand "convergence" 1)
                    (("1" (split)
                      (("1" (expand "adh" 1)
                        (("1" (skeep)
                          (("1" (typepred "D")
                            (("1" (expand "deriv_domain_partial?")
                              (("1"
                                (inst -1 "e" "p")
                                (("1"
                                  (skeep)
                                  (("1"
                                    (inst 1 "delta")
                                    (("1"
                                      (split)
                                      (("1"
                                        (expand "fullset")
                                        (("1" (propax) nil nil))
                                        nil)
                                       ("2" (propax) nil nil))
                                      nil)
                                     ("2"
                                      (expand "A" 1)
                                      (("2"
                                        (typepred "delta")
                                        (("2"
                                          (expand "D_down" 1)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (skeep)
                        (("2" (inst 1 "1")
                          (("2" (skeep) (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (lemma "scal_zero")
        (("2" (expand "init_partial?")
          (("2" (expand "differentiable?")
            (("2" (skeep)
              (("2" (expand "derivable?")
                (("2" (expand "convergent?")
                  (("2" (expand "convergence_zero?")
                    (("2" (inst 2 "g*v")
                      (("2" (expand "convergence")
                        (("2" (expand "convergence" 2)
                          (("2" (split)
                            (("1" (expand "adh" 1)
                              (("1"
                                (skeep)
                                (("1"
                                  (typepred "D")
                                  (("1"
                                    (expand "deriv_domain_partial?")
                                    (("1"
                                      (inst -1 "e" "p")
                                      (("1"
                                        (skeep)
                                        (("1"
                                          (inst 1 "delta")
                                          (("1"
                                            (split)
                                            (("1"
                                              (expand "fullset" 1)
                                              (("1" (propax) nil nil))
                                              nil)
                                             ("2" (propax) nil nil))
                                            nil)
                                           ("2"
                                            (expand "A" 1)
                                            (("2"
                                              (expand "D_down" 1)
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (skeep)
                              (("2"
                                (expand "NQ" 1)
                                (("2"
                                  (hide -1)
                                  (("2"
                                    (inst -1 "epsilon/norm_inf(n)(v)")
                                    (("1"
                                      (skeep)
                                      (("1"
                                        (inst 1 "delta/norm_inf(n)(v)")
                                        (("1"
                                          (skeep)
                                          (("1"
                                            (inst -3 "x * v")
                                            (("1"
                                              (lemma "sub_zero")
                                              (("1"
                                                (lemma "mult_zero")
                                                (("1"
                                                  (expand "restrict" 1)
                                                  (("1"
                                                    (inst -1 "v")
                                                    (("1"
                                                      (replace -1 1)
                                                      (("1"
                                                        (typepred "v")
                                                        (("1"
                                                          (replace
                                                           -2
                                                           1)
                                                          (("1"
                                                            (hide -1)
                                                            (("1"
                                                              (lemma
                                                               "zero_id")
                                                              (("1"
                                                                (inst
                                                                 -1
                                                                 "p")
                                                                (("1"
                                                                  (typepred
                                                                   "p")
                                                                  (("1"
                                                                    (replace
                                                                     -2
                                                                     -4)
                                                                    (("1"
                                                                      (replace
                                                                       -4
                                                                       1)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (lemma
                                                                           "zero_id")
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             "p")
                                                                            (("1"
                                                                              (expand
                                                                               "NQ")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (split)
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (lift-if)
                                                                                      (("1"
                                                                                        (split)
                                                                                        (("1"
                                                                                          (flatten)
                                                                                          (("1"
                                                                                            (hide
                                                                                             -2
                                                                                             -3
                                                                                             -4
                                                                                             -5
                                                                                             -6
                                                                                             -7
                                                                                             -8
                                                                                             -9)
                                                                                            (("1"
                                                                                              (typepred
                                                                                               "norm_inf(n)")
                                                                                              (("1"
                                                                                                (expand
                                                                                                 "norm?"
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (flatten)
                                                                                                  (("1"
                                                                                                    (hide
                                                                                                     -1
                                                                                                     -3
                                                                                                     -4)
                                                                                                    (("1"
                                                                                                      (inst
                                                                                                       -1
                                                                                                       "v"
                                                                                                       "x")
                                                                                                      (("1"
                                                                                                        (typepred
                                                                                                         "x")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (replace
                                                                                                             -3
                                                                                                             -4)
                                                                                                            (("1"
                                                                                                              (mult-by
                                                                                                               -4
                                                                                                               "norm_inf(n)(v)")
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (lemma
                                                                                                                   "abs_div")
                                                                                                                  (("1"
                                                                                                                    (inst
                                                                                                                     -1
                                                                                                                     "(abs(x) * norm_inf(n)(v))"
                                                                                                                     "f(p + x * v) - f(p) - g * (x * v)")
                                                                                                                    (("1"
                                                                                                                      (assert)
                                                                                                                      (("1"
                                                                                                                        (replace
                                                                                                                         -1
                                                                                                                         -5)
                                                                                                                        (("1"
                                                                                                                          (hide
                                                                                                                           -1)
                                                                                                                          (("1"
                                                                                                                            (lemma
                                                                                                                             "abs_mult")
                                                                                                                            (("1"
                                                                                                                              (inst
                                                                                                                               -1
                                                                                                                               "abs(x)"
                                                                                                                               "norm_inf(n)(v)")
                                                                                                                              (("1"
                                                                                                                                (replace
                                                                                                                                 -1
                                                                                                                                 -5)
                                                                                                                                (("1"
                                                                                                                                  (expand
                                                                                                                                   "abs"
                                                                                                                                   -5
                                                                                                                                   2)
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    (("1"
                                                                                                                                      (case
                                                                                                                                       " NOT abs(f(p + x * v) - f(p) - g * (x * v)) /
                                                     (abs(x) * abs(norm_inf(n)(v)))
                                                     * norm_inf(n)(v) = abs(f(p + x * v) - f(p) - g * (x * v)) /
                                                     (abs(x))")
                                                                                                                                      (("1"
                                                                                                                                        (assert)
                                                                                                                                        (("1"
                                                                                                                                          (expand
                                                                                                                                           "abs"
                                                                                                                                           1
                                                                                                                                           3)
                                                                                                                                          (("1"
                                                                                                                                            (assert)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil)
                                                                                                                                       ("2"
                                                                                                                                        (replace
                                                                                                                                         -1
                                                                                                                                         -6)
                                                                                                                                        (("2"
                                                                                                                                          (hide
                                                                                                                                           -1
                                                                                                                                           -2)
                                                                                                                                          (("2"
                                                                                                                                            (lemma
                                                                                                                                             "abs_div")
                                                                                                                                            (("2"
                                                                                                                                              (inst
                                                                                                                                               -1
                                                                                                                                               "x"
                                                                                                                                               "f(p + x * v) - f(p) - g * (x * v)")
                                                                                                                                              (("2"
                                                                                                                                                (replace
                                                                                                                                                 -1
                                                                                                                                                 -5
                                                                                                                                                 rl)
                                                                                                                                                (("2"
                                                                                                                                                  (case
                                                                                                                                                   "NOT (f(p + x * v) - f(p) - g * (x * v)) / x = (f(p + x * v) - f(p)) / x - g * v")
                                                                                                                                                  (("1"
                                                                                                                                                    (assert)
                                                                                                                                                    (("1"
                                                                                                                                                      (lemma
                                                                                                                                                       "div_distributes_minus")
                                                                                                                                                      (("1"
                                                                                                                                                        (inst
                                                                                                                                                         -1
                                                                                                                                                         "x"
                                                                                                                                                         "f(p + x * v) - f(p)"
                                                                                                                                                         "g * (x * v)")
                                                                                                                                                        (("1"
                                                                                                                                                          (replace
                                                                                                                                                           -1
                                                                                                                                                           1)
                                                                                                                                                          (("1"
                                                                                                                                                            (replace
                                                                                                                                                             -1
                                                                                                                                                             1
                                                                                                                                                             rl)
                                                                                                                                                            (("1"
                                                                                                                                                              (assert)
                                                                                                                                                              (("1"
                                                                                                                                                                (lemma
                                                                                                                                                                 "scal_cancel")
                                                                                                                                                                (("1"
                                                                                                                                                                  (lemma
                                                                                                                                                                   "scal_asso")
                                                                                                                                                                  (("1"
                                                                                                                                                                    (inst
                                                                                                                                                                     -1
                                                                                                                                                                     "g"
                                                                                                                                                                     "v"
                                                                                                                                                                     "x")
                                                                                                                                                                    (("1"
                                                                                                                                                                      (replace
                                                                                                                                                                       -1
                                                                                                                                                                       1)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (assert)
                                                                                                                                                                        nil
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil)
                                                                                                                                                   ("2"
                                                                                                                                                    (assert)
                                                                                                                                                    (("2"
                                                                                                                                                      (replace
                                                                                                                                                       -1
                                                                                                                                                       -6)
                                                                                                                                                      (("2"
                                                                                                                                                        (propax)
                                                                                                                                                        nil
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (typepred
                                                                                                                 "v")
                                                                                                                (("2"
                                                                                                                  (typepred
                                                                                                                   "norm_inf(n)")
                                                                                                                  (("2"
                                                                                                                    (expand
                                                                                                                     "norm?")
                                                                                                                    (("2"
                                                                                                                      (flatten)
                                                                                                                      (("2"
                                                                                                                        (inst
                                                                                                                         -3
                                                                                                                         "v")
                                                                                                                        (("2"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (flatten)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (typepred
                                                                                               "x")
                                                                                              (("2"
                                                                                                (lemma
                                                                                                 "zero_scal")
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   -1
                                                                                                   "v"
                                                                                                   "x")
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (lemma
                                                                                       "sub_zero")
                                                                                      (("2"
                                                                                        (inst
                                                                                         -1
                                                                                         "x*v")
                                                                                        (("2"
                                                                                          (typepred
                                                                                           "x*v"
                                                                                           "v")
                                                                                          (("2"
                                                                                            (replace
                                                                                             -4
                                                                                             -2)
                                                                                            (("2"
                                                                                              (replace
                                                                                               -2
                                                                                               -6)
                                                                                              (("2"
                                                                                                (replace
                                                                                                 -6
                                                                                                 1)
                                                                                                (("2"
                                                                                                  (typepred
                                                                                                   "norm_inf(n)")
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "norm?"
                                                                                                     -1)
                                                                                                    (("2"
                                                                                                      (flatten)
                                                                                                      (("2"
                                                                                                        (inst
                                                                                                         -2
                                                                                                         "v"
                                                                                                         "x")
                                                                                                        (("2"
                                                                                                          (replace
                                                                                                           -2
                                                                                                           2)
                                                                                                          (("2"
                                                                                                            (mult-by
                                                                                                             -19
                                                                                                             "norm_inf(n)(v)")
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (split)
                                              (("1"
                                                (typepred "x*v" "v")
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil)
                                               ("2"
                                                (expand "NQ" 1)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (typepred "x*v")
                                                    (("2"
                                                      (typepred "v")
                                                      (("2"
                                                        (typepred "x")
                                                        (("2"
                                                          (flatten)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (expand
                                                               "A"
                                                               -1)
                                                              (("2"
                                                                (expand
                                                                 "D_down"
                                                                 -1)
                                                                (("2"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (lemma "zero_scal")
                                                (("3"
                                                  (inst -1 "v" "x")
                                                  (("3"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (case
                                           "NOT norm_inf(n)(v) >0")
                                          (("1"
                                            (typepred "norm_inf(n)")
                                            (("1"
                                              (expand "norm?" -1)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (inst -3 "v")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (assert)
                                            (("2"
                                              (split)
                                              (("1"
                                                (mult-by
                                                 1
                                                 "norm_inf(n)(v)")
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil)
                                               ("2"
                                                (mult-by
                                                 1
                                                 "norm_inf(n)(v)")
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (typepred "v")
                                            (("3" (assert) nil nil))
                                            nil))
                                          nil)
                                         ("3"
                                          (assert)
                                          (("3"
                                            (typepred "norm_inf(n)")
                                            (("3"
                                              (expand "norm?")
                                              (("3"
                                                (flatten)
                                                (("3"
                                                  (inst -3 "v")
                                                  (("3"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("4"
                                          (typepred "v")
                                          (("4" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (case "NOT norm_inf(n)(v)>0")
                                      (("1"
                                        (typepred "norm_inf(n)")
                                        (("1"
                                          (expand "norm?" -1)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (inst -3 "v")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (split)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (mult-by
                                             1
                                             "norm_inf(n)(v)")
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (mult-by 1 "norm_inf(n)(v)")
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (typepred "v")
                                        (("3" (assert) nil nil))
                                        nil))
                                      nil)
                                     ("3"
                                      (assert)
                                      (("3"
                                        (typepred "v")
                                        (("3"
                                          (hide -1 -2 -3)
                                          (("3"
                                            (typepred "norm_inf(n)")
                                            (("3"
                                              (expand "norm?")
                                              (("3"
                                                (flatten)
                                                (("3"
                                                  (inst -3 "v")
                                                  (("3"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("4"
                                      (typepred "v")
                                      (("4" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (/= const-decl "boolean" notequal nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" init_partial_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (init_partial? const-decl "bool" init_partial_def nil)
    (convergent? const-decl "bool" lim_of_functions analysis)
    (convergence const-decl "bool" lim_of_functions analysis)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (fullset const-decl "set" sets nil)
    (D_down const-decl "bool" init_partial_def nil)
    (v skolem-const-decl "{vv: VectorN(n) | vv /= zero_vec(n)}"
     init_partial_def nil)
    (D skolem-const-decl "(deriv_domain_partial?(v))" init_partial_def
     nil)
    (p skolem-const-decl "(D)" init_partial_def nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (setof type-eq-decl nil defined_types nil)
    (A const-decl "setof[nzreal]" derivatives_def analysis)
    (Vector type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (* const-decl "VectorN(length(v2))" matrices matrices)
    (delta skolem-const-decl "{delta: nzreal | D(p + delta * v)}"
     init_partial_def nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (deriv_domain_partial? const-decl "bool" derivative_domain_multi
     nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (adh const-decl "setof[real]" convergence_functions analysis)
    (convergence const-decl "bool" convergence_functions analysis)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (derivable? const-decl "bool" derivatives_def analysis)
    (* const-decl "real" matrices matrices)
    (both_sides_times_pos_ge1 formula-decl nil real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (both_sides_times_pos_le1_imp formula-decl nil extra_real_props
     nil)
    (sub_zero formula-decl nil vector_arithmetic nil)
    (restrict const-decl "R" restrict nil)
    (zero_id formula-decl nil vector_arithmetic nil)
    (NQ const-decl "real" differentiable_def nil)
    (zero_scal formula-decl nil vector_arithmetic nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (both_sides_times_pos_lt1 formula-decl nil real_props nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (div_cancel2 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (abs_div formula-decl nil real_props nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (div_distributes_minus formula-decl nil real_props nil)
    (scal_asso formula-decl nil vector_arithmetic nil)
    (scal_cancel formula-decl nil vector_arithmetic nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (abs_mult formula-decl nil real_props nil)
    (abs_0 formula-decl nil abs_lems reals)
    (mult_zero formula-decl nil vector_arithmetic nil)
    (NQ const-decl "bool" differentiable_def nil)
    (x skolem-const-decl "(A(0))" init_partial_def nil)
    (delta skolem-const-decl "posreal" init_partial_def nil)
    (epsilon skolem-const-decl "posreal" init_partial_def nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (norm_inf const-decl "(norm?(m))" norms nil)
    (norm? const-decl "bool" norms nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NQ const-decl "real" derivatives_def analysis)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (delta skolem-const-decl "{delta: nzreal | D(p + delta * v)}"
     init_partial_def nil)
    (convergence_zero? const-decl "bool" vector_sequences nil)
    (differentiable? const-decl "bool" differentiable_def nil)
    (scal_zero formula-decl nil vector_arithmetic nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   shostak))
 (init_partial_TCC1 0
  (init_partial_TCC1-1 nil 3851071425
   ("" (skeep)
    (("" (typepred "v")
      (("" (split)
        (("1" (expand "D_down" 1)
          (("1" (assert)
            (("1" (typepred "p")
              (("1" (lemma "mult_zero")
                (("1" (inst -1 "v")
                  (("1" (replace -1 1)
                    (("1" (lemma "zero_id")
                      (("1" (inst -1 "p")
                        (("1" (replace -4 -1) (("1" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (expand "restrict" 1)
          (("2" (typepred "p")
            (("2" (expand "init_partial?")
              (("2" (assert)
                (("2" (expand "restrict" -4) (("2" (propax) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" init_partial_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (restrict const-decl "R" restrict nil)
    (D_down const-decl "bool" init_partial_def nil)
    (init_partial? const-decl "bool" init_partial_def nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain_partial? const-decl "bool" derivative_domain_multi
     nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (zero_id formula-decl nil vector_arithmetic nil)
    (mult_zero formula-decl nil vector_arithmetic nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (init_partial subtype "0"
    "{x | derivatives_def[(init_partial_def.D_down(init_partial_def.D, init_partial_def.p, init_partial_def.v))].derivable?(restrict[real, (init_partial_def.D_down(init_partial_def.D, init_partial_def.p, init_partial_def.v)), real].restrict(LAMBDA (Delta: reals.real): init_partial_def.f((matrices.+)(init_partial_def.p, matrices.*(Delta, init_partial_def.v)))), x)}")))
 (init_partial_zero_derivable_TCC1 0
  (init_partial_zero_derivable_TCC1-1 nil 3852022780
   ("" (lemma "dd_zero_partial") (("" (propax) nil nil)) nil)
   ((dd_zero_partial formula-decl nil derivative_domain_multi nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n formal-const-decl "posnat" init_partial_def nil))
   nil
   (init_partial_zero_derivable subtype "init_partial_def.D"
    "(derivative_domain_multi[init_partial_def.n].deriv_domain_partial?(vector_arithmetic.zero_vec(init_partial_def.n)))")))
 (init_partial_zero_derivable 0
  (init_partial_zero_derivable-1 nil 3852023759
   ("" (skeep)
    (("" (expand "init_partial?")
      (("" (skeep)
        (("" (expand "init_partial?")
          (("" (expand "restrict" 1)
            (("" (expand "derivable?" 1)
              (("" (expand "NQ")
                (("" (expand "convergent?")
                  (("" (inst 1 "0")
                    (("" (expand "convergence" 1)
                      (("" (expand "convergence")
                        (("" (split)
                          (("1" (expand "fullset" 1)
                            (("1" (expand "adh" 1)
                              (("1"
                                (skeep)
                                (("1"
                                  (inst 1 "e/2")
                                  (("1"
                                    (expand "abs" 1)
                                    (("1" (assert) nil nil))
                                    nil)
                                   ("2"
                                    (expand "A")
                                    (("2"
                                      (expand "D_down")
                                      (("2"
                                        (lemma "scal_zero")
                                        (("2"
                                          (lemma "zero_id")
                                          (("2"
                                            (inst -2 "e/2" "n")
                                            (("2"
                                              (replace -2 1)
                                              (("2"
                                                (typepred "p")
                                                (("2"
                                                  (lemma "zero_id")
                                                  (("2"
                                                    (lemma "scal_zero")
                                                    (("2"
                                                      (inst -1 "0" "n")
                                                      (("2"
                                                        (typepred "p")
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (lemma
                                                             "zero_id")
                                                            (("2"
                                                              (inst
                                                               -1
                                                               "p")
                                                              (("2"
                                                                (replace
                                                                 -3
                                                                 -1)
                                                                (("2"
                                                                  (replace
                                                                   -1
                                                                   1)
                                                                  (("2"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (skeep)
                            (("2" (inst 1 "1")
                              (("2"
                                (skeep)
                                (("2"
                                  (lemma "zero_id")
                                  (("2"
                                    (lemma "scal_zero")
                                    (("2"
                                      (inst-cp -1 "x" "n")
                                      (("2"
                                        (inst -1 "0" "n")
                                        (("2"
                                          (replace -1 1)
                                          (("2"
                                            (replace -2 1)
                                            (("2"
                                              (inst -3 "p")
                                              (("2"
                                                (typepred "p")
                                                (("2"
                                                  (replace -2 -6)
                                                  (("2"
                                                    (replace -6 1)
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((init_partial? const-decl "bool" init_partial_def nil)
    (init_partial? const-decl "bool" init_partial_def nil)
    (derivable? const-decl "bool" derivatives_def analysis)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (convergent? const-decl "bool" lim_of_functions analysis)
    (convergence const-decl "bool" lim_of_functions analysis)
    (adh const-decl "setof[real]" convergence_functions analysis)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (e skolem-const-decl "posreal" init_partial_def nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (A const-decl "setof[nzreal]" derivatives_def analysis)
    (setof type-eq-decl nil defined_types nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (p skolem-const-decl "(D)" init_partial_def nil)
    (D skolem-const-decl "domain[n]" init_partial_def nil)
    (D_down const-decl "bool" init_partial_def nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" init_partial_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (zero_id formula-decl nil vector_arithmetic nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (scal_zero formula-decl nil vector_arithmetic nil)
    (fullset const-decl "set" sets nil)
    (abs_0 formula-decl nil abs_lems reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (convergence const-decl "bool" convergence_functions analysis)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (NQ const-decl "real" derivatives_def analysis)
    (restrict const-decl "R" restrict nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   shostak))
 (init_partial_zero_TCC1 0
  (init_partial_zero_TCC1-1 nil 3852042751
   ("" (lemma "init_partial_zero_derivable")
    (("" (skeep)
      (("" (inst?)
        (("" (inst -1 "f")
          (("" (expand "init_partial?" -1) (("" (inst -1 "p") nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (init_partial? const-decl "bool" init_partial_def nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" init_partial_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (init_partial_zero_derivable formula-decl nil init_partial_def
     nil))
   nil
   (init_partial_zero subtype "init_partial_def.p"
    "(init_partial_def.init_partial?(vector_arithmetic.zero_vec(init_partial_def.n), init_partial_def.D, init_partial_def.f))")))
 (init_partial_zero 0
  (init_partial_zero-1 nil 3852042803
   ("" (skeep)
    (("" (expand "init_partial")
      (("" (expand "deriv")
        ((""
          (lemma "lim_fun_def[(analysis@derivatives_def
                      [(D_down(D, p, vector_arithmetic.zero_vec(n)))].A
                      (0))]")
          (("1"
            (inst -1
             "NQ(restrict[real, (D_down(D, p, zero_vec(n))), real]
                           (LAMBDA (Delta: real): f(p + Delta * zero_vec(n))),0)"
             "0" "0")
            (("1" (assert)
              (("1" (expand "convergence" 1)
                (("1" (expand "convergence" 1)
                  (("1" (split)
                    (("1" (expand "adh")
                      (("1" (hide 2)
                        (("1" (skeep)
                          (("1" (inst 1 "e/2")
                            (("1" (split)
                              (("1"
                                (expand "fullset" 1)
                                (("1" (propax) nil nil))
                                nil)
                               ("2"
                                (expand "abs" 1)
                                (("2" (assert) nil nil))
                                nil))
                              nil)
                             ("2" (expand "A" 1)
                              (("2"
                                (expand "D_down" 1)
                                (("2"
                                  (lemma "scal_zero")
                                  (("2"
                                    (inst -1 "e/2" "n")
                                    (("2"
                                      (replace -1 1)
                                      (("2"
                                        (lemma "zero_id")
                                        (("2"
                                          (inst -1 "p")
                                          (("2"
                                            (typepred "p")
                                            (("2"
                                              (replace -2 -4)
                                              (("2"
                                                (replace -4 1)
                                                (("2"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (skeep)
                      (("2" (hide 2)
                        (("2" (inst 1 "1")
                          (("2" (skeep)
                            (("2" (expand "NQ" 1)
                              (("2"
                                (expand "restrict" 1)
                                (("2"
                                  (lemma "zero_id")
                                  (("2"
                                    (lemma "scal_zero")
                                    (("2"
                                      (inst-cp -1 "0" "n")
                                      (("2"
                                        (inst -1 "x" "n")
                                        (("2"
                                          (replace -1 1)
                                          (("2"
                                            (replace -2 1)
                                            (("2"
                                              (inst -3 "p")
                                              (("2"
                                                (typepred "p")
                                                (("2"
                                                  (replace -2 -6)
                                                  (("2"
                                                    (replace -6 1)
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand "not_one_element?")
              (("2" (skeep)
                (("2" (hide 2)
                  (("2" (case "x=0")
                    (("1" (inst 1 "1")
                      (("1" (assert) nil nil)
                       ("2" (expand "D_down" 1)
                        (("2" (typepred "p")
                          (("2" (lemma "scal_zero")
                            (("2" (inst -1 "1" "n")
                              (("2"
                                (replace -1 1)
                                (("2"
                                  (lemma "zero_id")
                                  (("2"
                                    (inst -1 "p")
                                    (("2"
                                      (replace -4 -1)
                                      (("2"
                                        (replace -1 1)
                                        (("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (inst 2 "0")
                      (("1" (assert) nil nil)
                       ("2" (expand "D_down" 1)
                        (("2" (lemma "zero_id")
                          (("2" (lemma "scal_zero")
                            (("2" (inst -1 "0" "n")
                              (("2"
                                (replace -1 1)
                                (("2"
                                  (inst -2 "p")
                                  (("2"
                                    (typepred "p")
                                    (("2"
                                      (replace -2 -5)
                                      (("2"
                                        (replace -5 1)
                                        (("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (assert)
              (("3" (expand "deriv_domain?")
                (("3" (skeep)
                  (("3" (inst 1 "e/2")
                    (("1" (expand "abs" 1) (("1" (assert) nil nil))
                      nil)
                     ("2" (hide 2)
                      (("2" (expand "D_down" 1)
                        (("2" (lemma "scal_zero")
                          (("2" (inst -1 "e/2+x" "n")
                            (("2" (replace -1 1)
                              (("2"
                                (lemma "zero_id")
                                (("2"
                                  (inst -1 "p")
                                  (("2"
                                    (typepred "p")
                                    (("2"
                                      (replace -2 -4)
                                      (("2"
                                        (replace -4 1)
                                        (("2" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("4" (hide 2)
              (("4" (skeep)
                (("4"
                  (typepred "p + Delta * zero_vec(n)" "p"
                   "Delta * zero_vec(n)" "zero_vec(n)")
                  (("4" (assert)
                    (("4" (expand "max" -) (("4" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide 2)
            (("2" (expand "not_one_element?" 1)
              (("2" (skeep)
                (("2" (typepred "x")
                  (("2" (assert)
                    (("2" (typepred "p")
                      (("2" (inst 1 "x+1")
                        (("1" (assert) nil nil)
                         ("2" (assert)
                          (("2" (expand "D_down" 1 1)
                            (("2" (assert)
                              (("2"
                                (lemma "scal_zero")
                                (("2"
                                  (inst -1 "(1+x)" "n")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (replace -1)
                                      (("2"
                                        (expand "D_down" -5)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (lemma "scal_zero")
                                            (("2"
                                              (inst -1 "x" "n")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (hide 2)
            (("3" (expand "deriv_domain?" 1)
              (("3" (skeep)
                (("3" (inst 1 "e/2")
                  (("1" (assert) (("1" (grind) nil nil)) nil)
                   ("2" (expand "D_down" 1)
                    (("2" (assert)
                      (("2" (lemma "scal_zero")
                        (("2" (inst -1 "(e/2+x)" "n")
                          (("2" (assert)
                            (("2" (replace -1 1)
                              (("2"
                                (typepred "p")
                                (("2"
                                  (lemma "zero_id")
                                  (("2"
                                    (inst -1 "p")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((init_partial const-decl "real" init_partial_def nil)
    (A const-decl "setof[nzreal]" derivatives_def analysis)
    (setof type-eq-decl nil defined_types nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (D_down const-decl "bool" init_partial_def nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" init_partial_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (lim_fun_def formula-decl nil lim_of_functions analysis)
    (deriv_domain? const-decl "bool" deriv_domain_def analysis)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (x skolem-const-decl "(D_down(D, p, zero_vec(n)))" init_partial_def
     nil)
    (e skolem-const-decl "posreal" init_partial_def nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (convergence const-decl "bool" convergence_functions analysis)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (abs_0 formula-decl nil abs_lems reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (adh const-decl "setof[real]" convergence_functions analysis)
    (scal_zero formula-decl nil vector_arithmetic nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (zero_id formula-decl nil vector_arithmetic nil)
    (fullset const-decl "set" sets nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (e skolem-const-decl "posreal" init_partial_def nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (convergence const-decl "bool" lim_of_functions analysis)
    (convergent? const-decl "bool" lim_of_functions analysis)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (restrict const-decl "R" restrict nil)
    (NQ const-decl "real" derivatives_def analysis)
    (* const-decl "VectorN(length(v2))" matrices matrices)
    (p skolem-const-decl "(D)" init_partial_def nil)
    (D skolem-const-decl "domain[n]" init_partial_def nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (Vector type-eq-decl nil matrices matrices)
    (x skolem-const-decl
     "(D_down(D, p, vector_arithmetic.zero_vec(n)))" init_partial_def
     nil)
    (x skolem-const-decl
     "(D_down(D, p, vector_arithmetic.zero_vec(n)))" init_partial_def
     nil)
    (e skolem-const-decl "posreal" init_partial_def nil)
    (deriv const-decl "real" derivatives_def analysis)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil))
 (frech_diff_imp_init_partial_TCC1 0
  (frech_diff_imp_init_partial_TCC1-1 nil 3852026193
   ("" (skeep)
    (("" (typepred "D")
      (("" (lemma "dd_partial_implies_dd")
        (("" (inst -1 "D" "v")
          (("1" (assert) nil nil) ("2" (assert) nil nil)) nil))
        nil))
      nil))
    nil)
   ((deriv_domain_partial? const-decl "bool" derivative_domain_multi
     nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" init_partial_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (/= const-decl "boolean" notequal nil)
    (v skolem-const-decl "VectorN(n)" init_partial_def nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (dd_partial_implies_dd formula-decl nil derivative_domain_multi
     nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (frech_diff_imp_init_partial subtype "init_partial_def.D"
    "(derivative_domain_multi[init_partial_def.n].deriv_domain?)")))
 (frech_diff_imp_init_partial 0
  (frech_diff_imp_init_partial-1 nil 3852026274
   ("" (skeep)
    (("" (split)
      (("1" (flatten)
        (("1" (typepred "D")
          (("1" (lemma "diff_imp_init_partial2")
            (("1" (inst -1 "v" "D" "f" "p")
              (("1" (assert) nil nil) ("2" (assert) nil nil)) nil))
            nil))
          nil))
        nil)
       ("2" (flatten)
        (("2" (lemma " init_partial_zero_derivable")
          (("2" (inst -1 "D" "f")
            (("2" (assert)
              (("2" (expand "init_partial?" -1)
                (("2" (inst -1 "p") (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((deriv_domain_partial? const-decl "bool" derivative_domain_multi
     nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" init_partial_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (/= const-decl "boolean" notequal nil)
    (v skolem-const-decl "VectorN(n)" init_partial_def nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (diff_imp_init_partial2 formula-decl nil init_partial_def nil)
    (init_partial_zero_derivable formula-decl nil init_partial_def nil)
    (init_partial? const-decl "bool" init_partial_def nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   shostak))
 (init_partial_scal_TCC1 0
  (init_partial_scal_TCC1-1 nil 3852037187 ("" (subtype-tcc) nil nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n formal-const-decl "posnat" init_partial_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain_partial? const-decl "bool" derivative_domain_multi
     nil)
    (* const-decl "VectorN(length(v2))" matrices matrices)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (fullset const-decl "set" sets nil)
    (adh const-decl "setof[real]" convergence_functions analysis)
    (restrict const-decl "R" restrict nil)
    (NQ const-decl "real" derivatives_def analysis)
    (convergence const-decl "bool" convergence_functions analysis)
    (convergence const-decl "bool" lim_of_functions analysis)
    (convergent? const-decl "bool" lim_of_functions analysis)
    (derivable? const-decl "bool" derivatives_def analysis)
    (init_partial? const-decl "bool" init_partial_def nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil))
   nil
   (init_partial_scal subtype
    "matrices.*(init_partial_def.c, init_partial_def.v)"
    "matrices.VectorN(init_partial_def.n)")))
 (init_partial_scal_TCC2 0
  (init_partial_scal_TCC2-1 nil 3852037187
   ("" (lemma "dd_partial_implies_scal_partial")
    (("" (skeep) (("" (inst?) (("" (assert) nil nil)) nil)) nil)) nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (deriv_domain_partial? const-decl "bool" derivative_domain_multi
     nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (dd_partial_implies_scal_partial formula-decl nil
     derivative_domain_multi nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n formal-const-decl "posnat" init_partial_def nil))
   nil
   (init_partial_scal subtype "init_partial_def.D"
    "(derivative_domain_multi[init_partial_def.n].deriv_domain_partial?(matrices.*(init_partial_def.c, init_partial_def.v)))")))
 (init_partial_scal 0
  (init_partial_scal-1 nil 3852037722
   ("" (skeep)
    (("" (case "v=zero_vec(n)")
      (("1" (replace -1 -2)
        (("1" (replace -1 1)
          (("1" (lemma "scal_zero")
            (("1" (inst -1 "c" "n")
              (("1" (replace -1 1) (("1" (propax) nil nil)) nil)) nil))
            nil))
          nil))
        nil)
       ("2" (case "c=0")
        (("1" (replace -1 2)
          (("1" (lemma "mult_zero")
            (("1" (inst -1 "v")
              (("1" (typepred "v")
                (("1" (replace -2 -3)
                  (("1" (replace -3 2)
                    (("1" (lemma "init_partial_zero_derivable")
                      (("1" (assert)
                        (("1" (inst -1 "D" "f")
                          (("1" (expand "init_partial?")
                            (("1" (inst -1 "p")
                              (("1"
                                (typepred "v")
                                (("1" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (typepred "v") (("2" (assert) nil nil)) nil))
              nil))
            nil))
          nil)
         ("2" (expand "init_partial?")
          (("2" (expand "restrict")
            (("2" (expand "derivable?")
              (("2" (expand "NQ")
                (("2" (expand "convergent?")
                  (("2" (skeep)
                    (("2" (inst 3 "c*l")
                      (("2" (expand "convergence")
                        (("2" (expand "convergence")
                          (("2" (split)
                            (("1" (expand "adh")
                              (("1"
                                (skeep)
                                (("1"
                                  (inst -1 "e*abs(c)")
                                  (("1"
                                    (skeep)
                                    (("1"
                                      (inst 1 "x/c")
                                      (("1"
                                        (split)
                                        (("1"
                                          (expand "fullset" 1)
                                          (("1" (propax) nil nil))
                                          nil)
                                         ("2"
                                          (lemma "abs_div")
                                          (("2"
                                            (inst -1 "c" "x")
                                            (("2"
                                              (replace -1 1)
                                              (("2"
                                                (mult-by 1 "abs(c)")
                                                nil
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (expand "A" 1)
                                        (("2"
                                          (typepred "x")
                                          (("2"
                                            (expand "A" -2)
                                            (("2"
                                              (expand "D_down")
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (lemma "asso_v")
                                                  (("2"
                                                    (inst
                                                     -1
                                                     "x / c"
                                                     "c"
                                                     "v")
                                                    (("2"
                                                      (replace -1 1)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("3"
                                        (typepred "v")
                                        (("3" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (assert)
                                    (("2"
                                      (typepred "e")
                                      (("2"
                                        (div-by 1 "abs(c)")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (flatten)
                              (("2"
                                (skeep)
                                (("2"
                                  (lemma "mult_zero")
                                  (("2"
                                    (inst -1 "c*v")
                                    (("1"
                                      (typepred "c*v" "v")
                                      (("1"
                                        (replace -4 -2)
                                        (("1"
                                          (replace -2 -5)
                                          (("1"
                                            (replace -5 1)
                                            (("1"
                                              (hide -1 -2 -3 -4)
                                              (("1"
                                                (lemma "mult_zero")
                                                (("1"
                                                  (inst -1 "v")
                                                  (("1"
                                                    (typepred "v")
                                                    (("1"
                                                      (replace -2 -3)
                                                      (("1"
                                                        (replace -3 -6)
                                                        (("1"
                                                          (lemma
                                                           "zero_id")
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "p")
                                                            (("1"
                                                              (typepred
                                                               "p")
                                                              (("1"
                                                                (replace
                                                                 -2
                                                                 -4)
                                                                (("1"
                                                                  (hide
                                                                   -1
                                                                   -2
                                                                   -5)
                                                                  (("1"
                                                                    (replace
                                                                     -2
                                                                     -7)
                                                                    (("1"
                                                                      (replace
                                                                       -2
                                                                       1)
                                                                      (("1"
                                                                        (lemma
                                                                         "asso_v")
                                                                        (("1"
                                                                          (inst
                                                                           -8
                                                                           "epsilon/abs(c)")
                                                                          (("1"
                                                                            (skeep)
                                                                            (("1"
                                                                              (inst
                                                                               1
                                                                               "delta/abs(c)")
                                                                              (("1"
                                                                                (skeep)
                                                                                (("1"
                                                                                  (inst
                                                                                   -10
                                                                                   "c*x")
                                                                                  (("1"
                                                                                    (split)
                                                                                    (("1"
                                                                                      (mult-by
                                                                                       -1
                                                                                       "abs(c)")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (lemma
                                                                                           "abs_mult")
                                                                                          (("1"
                                                                                            (inst
                                                                                             -1
                                                                                             "(f(p + c * x * v) - f(p)) / (c * x) - l"
                                                                                             "c")
                                                                                            (("1"
                                                                                              (replace
                                                                                               -1
                                                                                               -2
                                                                                               rl)
                                                                                              (("1"
                                                                                                (hide
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (assert)
                                                                                                  (("1"
                                                                                                    (case
                                                                                                     "(f(p + c * x * v) - f(p)) / (c * x) * c  = (f(p + x * (c * v)) - f(p)) / x")
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (case
                                                                                                       "NOT (f(p + c * x * v) - f(p)) / (c * x) * c = (f(p + c * x * v) - f(p)) / x")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (replace
                                                                                                         -1
                                                                                                         1)
                                                                                                        (("2"
                                                                                                          (case
                                                                                                           "NOT p + c * x * v = p + x * (c * v)")
                                                                                                          (("1"
                                                                                                            (lemma
                                                                                                             "asso_v")
                                                                                                            (("1"
                                                                                                              (inst
                                                                                                               -1
                                                                                                               "c"
                                                                                                               "x"
                                                                                                               "v")
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (replace
                                                                                                                   -1
                                                                                                                   1
                                                                                                                   rl)
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    (("1"
                                                                                                                      (hide
                                                                                                                       -4)
                                                                                                                      (("1"
                                                                                                                        (lemma
                                                                                                                         "asso_1_scal")
                                                                                                                        (("1"
                                                                                                                          (inst
                                                                                                                           -1
                                                                                                                           "v"
                                                                                                                           "c"
                                                                                                                           "x")
                                                                                                                          (("1"
                                                                                                                            (expand
                                                                                                                             "*"
                                                                                                                             1)
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (assert)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (expand
                                                                                       "fullset"
                                                                                       1)
                                                                                      (("2"
                                                                                        (propax)
                                                                                        nil
                                                                                        nil))
                                                                                      nil)
                                                                                     ("3"
                                                                                      (lemma
                                                                                       "abs_mult")
                                                                                      (("3"
                                                                                        (inst
                                                                                         -1
                                                                                         "c"
                                                                                         "x")
                                                                                        (("3"
                                                                                          (replace
                                                                                           -1
                                                                                           1)
                                                                                          (("3"
                                                                                            (div-by
                                                                                             1
                                                                                             "abs(c)")
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "A"
                                                                                       1)
                                                                                      (("2"
                                                                                        (typepred
                                                                                         "x")
                                                                                        (("2"
                                                                                          (expand
                                                                                           "A")
                                                                                          (("2"
                                                                                            (expand
                                                                                             "D_down")
                                                                                            (("2"
                                                                                              (assert)
                                                                                              (("2"
                                                                                                (lemma
                                                                                                 "asso_v")
                                                                                                (("2"
                                                                                                  (inst
                                                                                                   -1
                                                                                                   "x"
                                                                                                   "c"
                                                                                                   "v")
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (split)
                                                                                (("1"
                                                                                  (mult-by
                                                                                   1
                                                                                   "abs(c)")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (mult-by
                                                                                     1
                                                                                     "abs(c)")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("3"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (split)
                                                                            (("1"
                                                                              (mult-by
                                                                               1
                                                                               "abs(c)")
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (mult-by
                                                                               1
                                                                               "abs(c)")
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("3"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (typepred "v")
                                                    (("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (typepred "c*v" "v")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" init_partial_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (scal_zero formula-decl nil vector_arithmetic nil)
    (derivable? const-decl "bool" derivatives_def analysis)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (convergent? const-decl "bool" lim_of_functions analysis)
    (real_times_real_is_real application-judgement "real" reals nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (convergence const-decl "bool" convergence_functions analysis)
    (zero_id formula-decl nil vector_arithmetic nil)
    (epsilon skolem-const-decl "posreal" init_partial_def nil)
    (delta skolem-const-decl "posreal" init_partial_def nil)
    (x skolem-const-decl "(A(0))" init_partial_def nil)
    (both_sides_div_pos_lt1 formula-decl nil real_props nil)
    (times_div_cancel1 formula-decl nil extra_real_props nil)
    (both_sides_times_pos_lt1 formula-decl nil real_props nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (abs_nat formula-decl nil abs_lems reals)
    (abs_mult formula-decl nil real_props nil)
    (asso_1_scal formula-decl nil vector_arithmetic nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (both_sides_times_pos_le1_imp formula-decl nil extra_real_props
     nil)
    (both_sides_times_pos_ge1 formula-decl nil real_props nil)
    (adh const-decl "setof[real]" convergence_functions analysis)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (e skolem-const-decl "posreal" init_partial_def nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (c skolem-const-decl "real" init_partial_def nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (/= const-decl "boolean" notequal nil)
    (D_down const-decl "bool" init_partial_def nil)
    (D skolem-const-decl "(deriv_domain_partial?(v))" init_partial_def
     nil)
    (p skolem-const-decl "(D)" init_partial_def nil)
    (Vector type-eq-decl nil matrices matrices)
    (* const-decl "VectorN(length(v2))" matrices matrices)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (setof type-eq-decl nil defined_types nil)
    (A const-decl "setof[nzreal]" derivatives_def analysis)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (x skolem-const-decl "(A(0))" init_partial_def nil)
    (abs_div formula-decl nil real_props nil)
    (both_sides_times_pos_ge1_imp formula-decl nil extra_real_props
     nil)
    (< const-decl "bool" reals nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (div_cancel2 formula-decl nil real_props nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (fullset const-decl "set" sets nil)
    (asso_v formula-decl nil vector_arithmetic nil)
    (times_div_cancel2 formula-decl nil extra_real_props nil)
    (both_sides_div_pos_gt1 formula-decl nil real_props nil)
    (convergence const-decl "bool" lim_of_functions analysis)
    (NQ const-decl "real" derivatives_def analysis)
    (restrict const-decl "R" restrict nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (v skolem-const-decl "VectorN(n)" init_partial_def nil)
    (init_partial_zero_derivable formula-decl nil init_partial_def nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain_partial? const-decl "bool" derivative_domain_multi
     nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (init_partial? const-decl "bool" init_partial_def nil)
    (init_partial? const-decl "bool" init_partial_def nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (mult_zero formula-decl nil vector_arithmetic nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   shostak))
 (der_f_is_init_partial_TCC1 0
  (der_f_is_init_partial_TCC1-1 nil 3852037187
   ("" (skeep)
    (("" (typepred "D")
      (("" (lemma "dd_partial_implies_dd")
        (("" (inst?) (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (/= const-decl "boolean" notequal nil)
    (deriv_domain_partial? const-decl "bool" derivative_domain_multi
     nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" init_partial_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (dd_partial_implies_dd formula-decl nil derivative_domain_multi
     nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (der_f_is_init_partial subtype "init_partial_def.D"
    "(derivative_domain_multi[init_partial_def.n].deriv_domain?)")))
 (der_f_is_init_partial_TCC2 0
  (der_f_is_init_partial_TCC2-1 nil 3852037187
   ("" (lemma "frech_diff_imp_init_partial")
    (("" (skeep)
      (("" (inst?)
        (("" (assert)
          (("" (typepred "f")
            (("" (expand "differentiableD?" -1)
              (("" (inst -1 "p") nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (differentiableD? const-decl "bool" differentiable_def nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain_partial? const-decl "bool" derivative_domain_multi
     nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (/= const-decl "boolean" notequal nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" init_partial_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (frech_diff_imp_init_partial formula-decl nil init_partial_def
     nil))
   nil
   (der_f_is_init_partial subtype "init_partial_def.p"
    "(init_partial_def.init_partial?(init_partial_def.v, init_partial_def.D, init_partial_def.f))")))
 (der_f_is_init_partial 0
  (der_f_is_init_partial-1 nil 3852038742
   ("" (skeep)
    (("" (skeep)
      (("" (expand "init_partial")
        (("" (expand "deriv")
          ((""
            (lemma
             "lim_fun_def[(analysis@derivatives_def[(D_down(D, p, v))].A(0))]")
            (("1"
              (inst -1 "NQ(restrict[real, (D_down(D, p, v)), real]
                              (LAMBDA (Delta: real): f(p + Delta * v)),
                          0)" "der_f(D)(f)(p) * v" "0")
              (("1" (flatten)
                (("1" (assert)
                  (("1" (assert)
                    (("1" (hide -1)
                      (("1" (expand "convergence" 1)
                        (("1" (expand "convergence" 1)
                          (("1" (split)
                            (("1" (expand "adh" 1)
                              (("1"
                                (skeep)
                                (("1"
                                  (typepred "D")
                                  (("1"
                                    (expand "deriv_domain_partial?")
                                    (("1"
                                      (inst -1 "e" "_")
                                      (("1"
                                        (inst -1 "p")
                                        (("1"
                                          (skeep)
                                          (("1"
                                            (inst 1 "delta")
                                            (("1"
                                              (expand "fullset" 1)
                                              (("1" (propax) nil nil))
                                              nil)
                                             ("2"
                                              (expand "A" 1)
                                              (("2"
                                                (expand "D_down" 1)
                                                (("2"
                                                  (case
                                                   "v=zero_vec(n)")
                                                  (("1"
                                                    (replace -1 1)
                                                    (("1"
                                                      (lemma
                                                       "mult_zero")
                                                      (("1"
                                                        (inst
                                                         -1
                                                         "zero_vec(n)")
                                                        (("1"
                                                          (typepred
                                                           "zero_vec(n)")
                                                          (("1"
                                                            (replace
                                                             -2
                                                             -3)
                                                            (("1"
                                                              (lemma
                                                               "zero_id")
                                                              (("1"
                                                                (inst
                                                                 -1
                                                                 "p")
                                                                (("1"
                                                                  (typepred
                                                                   "p")
                                                                  (("1"
                                                                    (replace
                                                                     -2
                                                                     -4)
                                                                    (("1"
                                                                      (lemma
                                                                       "scal_zero")
                                                                      (("1"
                                                                        (typepred
                                                                         "delta")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (skeep)
                              (("2"
                                (case "v=zero_vec(n)")
                                (("1"
                                  (replace -1 1)
                                  (("1"
                                    (expand "restrict" 1)
                                    (("1"
                                      (expand "NQ" 1)
                                      (("1"
                                        (lemma "mult_zero")
                                        (("1"
                                          (inst -1 "zero_vec(n)")
                                          (("1"
                                            (typepred "zero_vec(n)")
                                            (("1"
                                              (replace -2 -3)
                                              (("1"
                                                (replace -3 1)
                                                (("1"
                                                  (lemma "zero_id")
                                                  (("1"
                                                    (inst -1 "p")
                                                    (("1"
                                                      (typepred "p")
                                                      (("1"
                                                        (replace -2 -4)
                                                        (("1"
                                                          (replace
                                                           -4
                                                           1)
                                                          (("1"
                                                            (lemma
                                                             "scal_zero")
                                                            (("1"
                                                              (inst
                                                               1
                                                               "1")
                                                              (("1"
                                                                (skeep)
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "x"
                                                                   "n")
                                                                  (("1"
                                                                    (replace
                                                                     -1
                                                                     1)
                                                                    (("1"
                                                                      (replace
                                                                       -5
                                                                       1)
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (typepred "zero_vec(n)")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (expand "restrict" 2)
                                  (("2"
                                    (expand "NQ" 2)
                                    (("2"
                                      (typepred "der_f(D)(f)")
                                      (("2"
                                        (inst -1 "p")
                                        (("2"
                                          (expand
                                           "convergence_zero?"
                                           -1)
                                          (("2"
                                            (expand "NQ" -1 1)
                                            (("2"
                                              (lemma "mult_zero")
                                              (("2"
                                                (inst -1 "v")
                                                (("1"
                                                  (replace -1 2)
                                                  (("1"
                                                    (typepred "v")
                                                    (("1"
                                                      (typepred "p")
                                                      (("1"
                                                        (replace -5 2)
                                                        (("1"
                                                          (lemma
                                                           "zero_id")
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "p")
                                                            (("1"
                                                              (replace
                                                               -3
                                                               -1)
                                                              (("1"
                                                                (replace
                                                                 -1
                                                                 2)
                                                                (("1"
                                                                  (inst
                                                                   -9
                                                                   "epsilon/norm_inf(n)(v)")
                                                                  (("1"
                                                                    (skeep)
                                                                    (("1"
                                                                      (inst
                                                                       3
                                                                       "delta/norm_inf(v)")
                                                                      (("1"
                                                                        (skeep)
                                                                        (("1"
                                                                          (inst
                                                                           -8
                                                                           "x*v")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (lemma
                                                                               "mult_zero")
                                                                              (("1"
                                                                                (lemma
                                                                                 "sub_zero")
                                                                                (("1"
                                                                                  (inst
                                                                                   -1
                                                                                   "x*v")
                                                                                  (("1"
                                                                                    (typepred
                                                                                     "x*v")
                                                                                    (("1"
                                                                                      (replace
                                                                                       -10
                                                                                       -2)
                                                                                      (("1"
                                                                                        (replace
                                                                                         -2
                                                                                         -3)
                                                                                        (("1"
                                                                                          (replace
                                                                                           -3
                                                                                           -12)
                                                                                          (("1"
                                                                                            (typepred
                                                                                             "norm_inf(n)")
                                                                                            (("1"
                                                                                              (expand
                                                                                               "norm?"
                                                                                               -1)
                                                                                              (("1"
                                                                                                (flatten)
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -2
                                                                                                   "v"
                                                                                                   "x")
                                                                                                  (("1"
                                                                                                    (replace
                                                                                                     -2
                                                                                                     -16)
                                                                                                    (("1"
                                                                                                      (mult-by
                                                                                                       -18
                                                                                                       "norm_inf(v)")
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (case
                                                                                                           "NOT norm_inf(n)(v) =  norm_inf(v)")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "norm_inf"
                                                                                                               1
                                                                                                               1)
                                                                                                              (("1"
                                                                                                                (propax)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (assert)
                                                                                                            (("2"
                                                                                                              (hide
                                                                                                               -1
                                                                                                               -2
                                                                                                               -3
                                                                                                               -4
                                                                                                               -5
                                                                                                               -6
                                                                                                               -7
                                                                                                               -8
                                                                                                               -9
                                                                                                               -10)
                                                                                                              (("2"
                                                                                                                (lemma
                                                                                                                 "abs_div")
                                                                                                                (("2"
                                                                                                                  (inst
                                                                                                                   -1
                                                                                                                   "(abs(x) * norm_inf(n)(v))"
                                                                                                                   "f(p + x * v) - f(p) - der_f(D)(f)(p) * (x * v)")
                                                                                                                  (("2"
                                                                                                                    (lemma
                                                                                                                     "abs_mult")
                                                                                                                    (("2"
                                                                                                                      (inst
                                                                                                                       -1
                                                                                                                       "abs(x)"
                                                                                                                       "norm_inf(n)(v)")
                                                                                                                      (("2"
                                                                                                                        (expand
                                                                                                                         "abs"
                                                                                                                         -1
                                                                                                                         3)
                                                                                                                        (("2"
                                                                                                                          (expand
                                                                                                                           "abs"
                                                                                                                           -1
                                                                                                                           4)
                                                                                                                          (("2"
                                                                                                                            (replace
                                                                                                                             -1
                                                                                                                             -2)
                                                                                                                            (("2"
                                                                                                                              (replace
                                                                                                                               -2
                                                                                                                               -9)
                                                                                                                              (("2"
                                                                                                                                (mult-by
                                                                                                                                 -9
                                                                                                                                 "norm_inf(n)(v)")
                                                                                                                                (("1"
                                                                                                                                  (assert)
                                                                                                                                  (("1"
                                                                                                                                    (case
                                                                                                                                     "NOT abs(f(p + x * v) - f(p) - der_f(D)(f)(p) * (x * v)) /
                                                               (abs(x) * norm_inf(n)(v))
                                                               * norm_inf(n)(v) = abs(f(p + x * v) - f(p) - der_f(D)(f)(p) * (x * v)) /
                                                               (abs(x))")
                                                                                                                                    (("1"
                                                                                                                                      (assert)
                                                                                                                                      nil
                                                                                                                                      nil)
                                                                                                                                     ("2"
                                                                                                                                      (replace
                                                                                                                                       -1
                                                                                                                                       -10)
                                                                                                                                      (("2"
                                                                                                                                        (hide
                                                                                                                                         -1
                                                                                                                                         -2
                                                                                                                                         -3
                                                                                                                                         -4
                                                                                                                                         -5)
                                                                                                                                        (("2"
                                                                                                                                          (lemma
                                                                                                                                           "abs_div")
                                                                                                                                          (("2"
                                                                                                                                            (inst
                                                                                                                                             -1
                                                                                                                                             "x"
                                                                                                                                             "f(p + x * v) - f(p) - der_f(D)(f)(p) * (x * v)")
                                                                                                                                            (("2"
                                                                                                                                              (replace
                                                                                                                                               -1
                                                                                                                                               -6
                                                                                                                                               rl)
                                                                                                                                              (("2"
                                                                                                                                                (case
                                                                                                                                                 "NOT (f(p + x * v) - f(p) - der_f(D)(f)(p) * (x * v)) / x = (f(p + x * v) - f(p)) / x - der_f(D)(f)(p) * v")
                                                                                                                                                (("1"
                                                                                                                                                  (lemma
                                                                                                                                                   "div_distributes_minus")
                                                                                                                                                  (("1"
                                                                                                                                                    (inst
                                                                                                                                                     -1
                                                                                                                                                     "x"
                                                                                                                                                     "f(p + x * v) - f(p)"
                                                                                                                                                     "der_f(D)(f)(p) * (x * v)")
                                                                                                                                                    (("1"
                                                                                                                                                      (replace
                                                                                                                                                       -1
                                                                                                                                                       1)
                                                                                                                                                      (("1"
                                                                                                                                                        (replace
                                                                                                                                                         -1
                                                                                                                                                         1
                                                                                                                                                         rl)
                                                                                                                                                        (("1"
                                                                                                                                                          (lemma
                                                                                                                                                           "scal_cancel")
                                                                                                                                                          (("1"
                                                                                                                                                            (lemma
                                                                                                                                                             "scal_asso")
                                                                                                                                                            (("1"
                                                                                                                                                              (assert)
                                                                                                                                                              (("1"
                                                                                                                                                                (typepred
                                                                                                                                                                 "x*v")
                                                                                                                                                                (("1"
                                                                                                                                                                  (inst
                                                                                                                                                                   -3
                                                                                                                                                                   "der_f(D)(f)(p)"
                                                                                                                                                                   "v"
                                                                                                                                                                   "x")
                                                                                                                                                                  (("1"
                                                                                                                                                                    (replace
                                                                                                                                                                     -3
                                                                                                                                                                     1)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (assert)
                                                                                                                                                                      nil
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil)
                                                                                                                                                 ("2"
                                                                                                                                                  (replace
                                                                                                                                                   -1
                                                                                                                                                   -7)
                                                                                                                                                  (("2"
                                                                                                                                                    (propax)
                                                                                                                                                    nil
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil)
                                                                                                                                 ("2"
                                                                                                                                  (hide
                                                                                                                                   -)
                                                                                                                                  (("2"
                                                                                                                                    (typepred
                                                                                                                                     "norm_inf(n)")
                                                                                                                                    (("2"
                                                                                                                                      (expand
                                                                                                                                       "norm?"
                                                                                                                                       -1)
                                                                                                                                      (("2"
                                                                                                                                        (flatten)
                                                                                                                                        (("2"
                                                                                                                                          (inst
                                                                                                                                           -3
                                                                                                                                           "v")
                                                                                                                                          (("2"
                                                                                                                                            (assert)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (hide
                                                                                                         -)
                                                                                                        (("2"
                                                                                                          (typepred
                                                                                                           "norm_inf(n)")
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "norm?"
                                                                                                             -1)
                                                                                                            (("2"
                                                                                                              (flatten)
                                                                                                              (("2"
                                                                                                                (inst
                                                                                                                 -3
                                                                                                                 "v")
                                                                                                                (("2"
                                                                                                                  (hide
                                                                                                                   -1
                                                                                                                   -2
                                                                                                                   -4)
                                                                                                                  (("2"
                                                                                                                    (flatten)
                                                                                                                    (("2"
                                                                                                                      (case
                                                                                                                       "NOT norm_inf(v) = norm_inf(n)(v)")
                                                                                                                      (("1"
                                                                                                                        (expand
                                                                                                                         "norm_inf"
                                                                                                                         1
                                                                                                                         2)
                                                                                                                        (("1"
                                                                                                                          (propax)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (split)
                                                                            (("1"
                                                                              (typepred
                                                                               "x*v"
                                                                               "v")
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (expand
                                                                               "NQ"
                                                                               1)
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (typepred
                                                                                   "p")
                                                                                  (("2"
                                                                                    (typepred
                                                                                     "v")
                                                                                    (("2"
                                                                                      (typepred
                                                                                       "x*v")
                                                                                      (("2"
                                                                                        (hide
                                                                                         -1
                                                                                         -3
                                                                                         -6
                                                                                         -10
                                                                                         -13)
                                                                                        (("2"
                                                                                          (flatten)
                                                                                          (("2"
                                                                                            (typepred
                                                                                             "D")
                                                                                            (("2"
                                                                                              (typepred
                                                                                               "x")
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "A"
                                                                                                 -2)
                                                                                                (("2"
                                                                                                  (expand
                                                                                                   "D_down"
                                                                                                   -2)
                                                                                                  (("2"
                                                                                                    (propax)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("3"
                                                                              (assert)
                                                                              (("3"
                                                                                (case
                                                                                 "x * v = zero_vec(n)")
                                                                                (("1"
                                                                                  (lemma
                                                                                   "zero_scal")
                                                                                  (("1"
                                                                                    (inst
                                                                                     -1
                                                                                     "v"
                                                                                     "x")
                                                                                    (("1"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (split)
                                                                        (("1"
                                                                          (mult-by
                                                                           1
                                                                           "norm_inf(v)")
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil)
                                                                           ("2"
                                                                            (case
                                                                             "NOT norm_inf(n)(v) = norm_inf(v)")
                                                                            (("1"
                                                                              (expand
                                                                               "norm_inf"
                                                                               1
                                                                               1)
                                                                              (("1"
                                                                                (propax)
                                                                                nil
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (replace
                                                                                 -1
                                                                                 1
                                                                                 rl)
                                                                                (("2"
                                                                                  (typepred
                                                                                   "norm_inf(n)")
                                                                                  (("2"
                                                                                    (expand
                                                                                     "norm?"
                                                                                     -1)
                                                                                    (("2"
                                                                                      (flatten)
                                                                                      (("2"
                                                                                        (inst
                                                                                         -3
                                                                                         "v")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (mult-by
                                                                           1
                                                                           "norm_inf(v)")
                                                                          (("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("3"
                                                                        (case
                                                                         "NOT norm_inf(v) = norm_inf(n)(v)")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (expand
                                                                             "norm_inf"
                                                                             1
                                                                             2)
                                                                            (("1"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (replace
                                                                             -1
                                                                             1)
                                                                            (("2"
                                                                              (typepred
                                                                               "norm_inf(n)")
                                                                              (("2"
                                                                                (expand
                                                                                 "norm?"
                                                                                 -1)
                                                                                (("2"
                                                                                  (flatten)
                                                                                  (("2"
                                                                                    (inst
                                                                                     -3
                                                                                     "v")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("4"
                                                                        (typepred
                                                                         "v")
                                                                        (("4"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (split)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (mult-by
                                                                         1
                                                                         "norm_inf(n)(v)")
                                                                        (("1"
                                                                          (assert)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (typepred
                                                                           "norm_inf(n)")
                                                                          (("2"
                                                                            (expand
                                                                             "norm?")
                                                                            (("2"
                                                                              (flatten)
                                                                              (("2"
                                                                                (inst
                                                                                 -3
                                                                                 "v")
                                                                                (("2"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (mult-by
                                                                       1
                                                                       "norm_inf(n)(v)")
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("3"
                                                                    (typepred
                                                                     "norm_inf(n)")
                                                                    (("3"
                                                                      (expand
                                                                       "norm?")
                                                                      (("3"
                                                                        (flatten)
                                                                        (("3"
                                                                          (inst
                                                                           -3
                                                                           "v")
                                                                          (("3"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("4"
                                                                    (typepred
                                                                     "v")
                                                                    (("4"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (typepred "v")
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (expand "not_one_element?")
                (("2" (skeep)
                  (("2" (typepred "D")
                    (("2" (expand "deriv_domain_partial?")
                      (("2" (inst-cp -1 "1" "p")
                        (("2" (skeep)
                          (("2" (inst-cp -1 "1" "p")
                            (("2" (skeep)
                              (("2"
                                (inst -1 "abs(delta)" "p")
                                (("2"
                                  (skeep)
                                  (("2"
                                    (case "delta=delta_1")
                                    (("1" (assert) nil nil)
                                     ("2"
                                      (expand "abs" -1)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (case "x=delta")
                                          (("1"
                                            (inst 2 "delta_1")
                                            (("1" (assert) nil nil)
                                             ("2"
                                              (expand "D_down" 1)
                                              (("2"
                                                (typepred "delta_1")
                                                (("2"
                                                  (propax)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (assert)
                                            (("2"
                                              (typepred "delta")
                                              (("2"
                                                (inst 3 "delta")
                                                (("1" (assert) nil nil)
                                                 ("2"
                                                  (expand "D_down" 1)
                                                  (("2"
                                                    (propax)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (typepred "D")
                (("3" (typepred "p")
                  (("3" (lemma "D_down_partial")
                    (("3" (inst -1 "v" "D" "p") nil nil)) nil))
                  nil))
                nil)
               ("4" (skeep)
                (("4" (typepred "p+Delta*v")
                  (("4" (typepred "p")
                    (("4" (typepred "Delta*v")
                      (("4" (typepred "v")
                        (("4" (assert)
                          (("4" (expand "max" -)
                            (("4" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide 2)
              (("2" (typepred "D")
                (("2" (expand "deriv_domain_partial?")
                  (("2" (expand "not_one_element?" 1)
                    (("2" (skeep)
                      (("2" (typepred "x")
                        (("2" (expand "D_down" -1)
                          (("2" (case "x=0")
                            (("1" (inst -3 "1" "p")
                              (("1"
                                (skeep)
                                (("1"
                                  (inst 1 "delta")
                                  (("1" (assert) nil nil)
                                   ("2"
                                    (expand "D_down" 1)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (inst -2 "abs(x)/2" "p")
                              (("1"
                                (skeep)
                                (("1"
                                  (inst 2 "delta")
                                  (("1" (assert) nil nil)
                                   ("2"
                                    (expand "D_down" 1)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide 2)
                                (("2"
                                  (typepred "x")
                                  (("2"
                                    (mult-by 1 "2")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (reveal -)
                                        (("2"
                                          (reveal +)
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (typepred "D")
              (("3" (lemma "D_down_partial")
                (("3" (inst -1 "v" "D" "p") nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((deriv const-decl "real" derivatives_def analysis)
    (x skolem-const-decl "(D_down(D, p, v))" init_partial_def nil)
    (delta skolem-const-decl "{delta: nzreal | D(p + delta * v)}"
     init_partial_def nil)
    (int_times_even_is_even application-judgement "even_int" integers
     nil)
    (nnint_times_nnint_is_nnint application-judgement "nonneg_int"
     integers nil)
    (delta skolem-const-decl "{delta: nzreal | D(p + delta * v)}"
     init_partial_def nil)
    (Vector type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (v skolem-const-decl "{vv: VectorN(n) | vv /= zero_vec(n)}"
     init_partial_def nil)
    (D skolem-const-decl "(deriv_domain_partial?(v))" init_partial_def
     nil)
    (p skolem-const-decl "(D)" init_partial_def nil)
    (* const-decl "VectorN(length(v2))" matrices matrices)
    (NQ const-decl "real" derivatives_def analysis)
    (restrict const-decl "R" restrict nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (differentiableD? const-decl "bool" differentiable_def nil)
    (* const-decl "real" matrices matrices)
    (convergence_zero? const-decl "bool" vector_sequences nil)
    (NQ const-decl "bool" differentiable_def nil)
    (NQ const-decl "real" differentiable_def nil)
    (der_f const-decl "{gg: [(D) -> VectorN(n)] |
   FORALL (p: (D)):
     convergence_zero?(NQ(D, p), NQ(f, gg(p), p), zero_vec(n))}"
     differentiable_def nil)
    (convergent? const-decl "bool" lim_of_functions analysis)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (convergence const-decl "bool" convergence_functions analysis)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (norm? const-decl "bool" norms nil)
    (norm_inf const-decl "(norm?(m))" norms nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (epsilon skolem-const-decl "posreal" init_partial_def nil)
    (norm_inf const-decl "[(cons?) -> nonneg_real]" norms nil)
    (delta skolem-const-decl "posreal" init_partial_def nil)
    (x skolem-const-decl
     "(analysis@derivatives_def[(D_down(D, p, v))].A(0))"
     init_partial_def nil)
    (both_sides_times_pos_lt1 formula-decl nil real_props nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (div_cancel2 formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (div_distributes_minus formula-decl nil real_props nil)
    (scal_cancel formula-decl nil vector_arithmetic nil)
    (scal_asso formula-decl nil vector_arithmetic nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (abs_nat formula-decl nil abs_lems reals)
    (abs_mult formula-decl nil real_props nil)
    (abs_div formula-decl nil real_props nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (sub_zero formula-decl nil vector_arithmetic nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (zero_scal formula-decl nil vector_arithmetic nil)
    (both_sides_times_pos_le1_imp formula-decl nil extra_real_props
     nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (both_sides_times_pos_ge1 formula-decl nil real_props nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (adh const-decl "setof[real]" convergence_functions analysis)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (mult_zero formula-decl nil vector_arithmetic nil)
    (zero_id formula-decl nil vector_arithmetic nil)
    (scal_zero formula-decl nil vector_arithmetic nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (fullset const-decl "set" sets nil)
    (delta skolem-const-decl "{delta: nzreal | D(p + delta * v)}"
     init_partial_def nil)
    (convergence const-decl "bool" lim_of_functions analysis)
    (delta_1 skolem-const-decl "{delta: nzreal | D(p + delta * v)}"
     init_partial_def nil)
    (delta skolem-const-decl "{delta: nzreal | D(p + delta * v)}"
     init_partial_def nil)
    (minus_nzreal_is_nzreal application-judgement "nzreal" real_types
     nil)
    (D_down_partial formula-decl nil init_partial_def nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (deriv_domain? const-decl "bool" deriv_domain_def analysis)
    (lim_fun_def formula-decl nil lim_of_functions analysis)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (list type-decl nil list_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n formal-const-decl "posnat" init_partial_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (D_down const-decl "bool" init_partial_def nil)
    (deriv_domain_partial? const-decl "bool" derivative_domain_multi
     nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (setof type-eq-decl nil defined_types nil)
    (A const-decl "setof[nzreal]" derivatives_def analysis)
    (init_partial const-decl "real" init_partial_def nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   shostak))
 (conv_NQ_is_init_partial_TCC1 0
  (conv_NQ_is_init_partial_TCC1-1 nil 3852724118
   ("" (skeep)
    (("" (typepred "v")
      (("" (lemma "diff_imp_init_partial2")
        (("" (inst -1 "v" "D" "f" "p")
          (("" (assert)
            (("" (expand "differentiable?" 1)
              (("" (inst 1 "dif") nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (/= const-decl "boolean" notequal nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" init_partial_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain_partial? const-decl "bool" derivative_domain_multi
     nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (differentiable? const-decl "bool" differentiable_def nil)
    (diff_imp_init_partial2 formula-decl nil init_partial_def nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (conv_NQ_is_init_partial subtype "init_partial_def.p"
    "(init_partial_def.init_partial?(init_partial_def.v, init_partial_def.D, init_partial_def.f))")))
 (conv_NQ_is_init_partial 0
  (conv_NQ_is_init_partial-1 nil 3852726373
   ("" (skeep)
    (("" (expand "init_partial")
      (("" (expand "deriv")
        ((""
          (lemma
           "lim_fun_def[(analysis@derivatives_def[(D_down(D, p, v))].A(0))]")
          (("1"
            (inst -1 "NQ(restrict[real, (D_down(D, p, v)), real]
                                  (LAMBDA (Delta: real): f(p + Delta * v)),
                              0)" "dif * v" "0")
            (("1" (flatten)
              (("1" (assert)
                (("1" (assert)
                  (("1" (hide -1)
                    (("1" (expand "convergence" 1)
                      (("1" (expand "convergence" 1)
                        (("1" (split)
                          (("1" (expand "adh" 1)
                            (("1" (skeep)
                              (("1"
                                (typepred "D")
                                (("1"
                                  (expand "deriv_domain_partial?")
                                  (("1"
                                    (inst -1 "e" "_")
                                    (("1"
                                      (inst -1 "p")
                                      (("1"
                                        (skeep)
                                        (("1"
                                          (inst 1 "delta")
                                          (("1"
                                            (expand "fullset" 1)
                                            (("1" (propax) nil nil))
                                            nil)
                                           ("2"
                                            (expand "A" 1)
                                            (("2"
                                              (expand "D_down" 1)
                                              (("2"
                                                (case "v=zero_vec(n)")
                                                (("1"
                                                  (replace -1 1)
                                                  (("1"
                                                    (lemma "mult_zero")
                                                    (("1"
                                                      (inst
                                                       -1
                                                       "zero_vec(n)")
                                                      (("1"
                                                        (typepred
                                                         "zero_vec(n)")
                                                        (("1"
                                                          (replace
                                                           -2
                                                           -3)
                                                          (("1"
                                                            (lemma
                                                             "zero_id")
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "p")
                                                              (("1"
                                                                (typepred
                                                                 "p")
                                                                (("1"
                                                                  (replace
                                                                   -2
                                                                   -4)
                                                                  (("1"
                                                                    (lemma
                                                                     "scal_zero")
                                                                    (("1"
                                                                      (typepred
                                                                       "delta")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (assert)
                            (("2" (skeep)
                              (("2"
                                (case "v=zero_vec(n)")
                                (("1"
                                  (replace -1 1)
                                  (("1"
                                    (expand "restrict" 1)
                                    (("1"
                                      (expand "NQ" 1)
                                      (("1"
                                        (lemma "mult_zero")
                                        (("1"
                                          (inst -1 "zero_vec(n)")
                                          (("1"
                                            (typepred "zero_vec(n)")
                                            (("1"
                                              (replace -2 -3)
                                              (("1"
                                                (replace -3 1)
                                                (("1"
                                                  (lemma "zero_id")
                                                  (("1"
                                                    (inst -1 "p")
                                                    (("1"
                                                      (typepred "p")
                                                      (("1"
                                                        (replace -2 -4)
                                                        (("1"
                                                          (replace
                                                           -4
                                                           1)
                                                          (("1"
                                                            (lemma
                                                             "scal_zero")
                                                            (("1"
                                                              (inst
                                                               1
                                                               "1")
                                                              (("1"
                                                                (skeep)
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "x"
                                                                   "n")
                                                                  (("1"
                                                                    (replace
                                                                     -1
                                                                     1)
                                                                    (("1"
                                                                      (replace
                                                                       -5
                                                                       1)
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (typepred "zero_vec(n)")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (expand "restrict" 2)
                                      (("2"
                                        (expand "NQ" 2)
                                        (("2"
                                          (hide -1 -2)
                                          (("2"
                                            (expand
                                             "convergence_zero?"
                                             -1)
                                            (("2"
                                              (expand "NQ" -1 1)
                                              (("2"
                                                (lemma "mult_zero")
                                                (("2"
                                                  (inst -1 "v")
                                                  (("2"
                                                    (replace -1 2)
                                                    (("2"
                                                      (typepred "v")
                                                      (("2"
                                                        (typepred "p")
                                                        (("2"
                                                          (replace
                                                           -5
                                                           2)
                                                          (("2"
                                                            (lemma
                                                             "zero_id")
                                                            (("2"
                                                              (inst
                                                               -1
                                                               "p")
                                                              (("2"
                                                                (replace
                                                                 -3
                                                                 -1)
                                                                (("2"
                                                                  (replace
                                                                   -1
                                                                   2)
                                                                  (("2"
                                                                    (inst
                                                                     -9
                                                                     "epsilon/norm_inf(n)(v)")
                                                                    (("1"
                                                                      (skeep)
                                                                      (("1"
                                                                        (inst
                                                                         3
                                                                         "delta/norm_inf(v)")
                                                                        (("1"
                                                                          (skeep)
                                                                          (("1"
                                                                            (hide
                                                                             -2
                                                                             -5)
                                                                            (("1"
                                                                              (inst
                                                                               -8
                                                                               "x*v")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (lemma
                                                                                   "mult_zero")
                                                                                  (("1"
                                                                                    (lemma
                                                                                     "sub_zero")
                                                                                    (("1"
                                                                                      (inst
                                                                                       -1
                                                                                       "x*v")
                                                                                      (("1"
                                                                                        (typepred
                                                                                         "x*v")
                                                                                        (("1"
                                                                                          (replace
                                                                                           -2
                                                                                           -3)
                                                                                          (("1"
                                                                                            (replace
                                                                                             -8
                                                                                             -2)
                                                                                            (("1"
                                                                                              (replace
                                                                                               -8
                                                                                               -3)
                                                                                              (("1"
                                                                                                (replace
                                                                                                 -3
                                                                                                 -12)
                                                                                                (("1"
                                                                                                  (typepred
                                                                                                   "norm_inf(n)")
                                                                                                  (("1"
                                                                                                    (expand
                                                                                                     "norm?"
                                                                                                     -1)
                                                                                                    (("1"
                                                                                                      (flatten)
                                                                                                      (("1"
                                                                                                        (inst
                                                                                                         -2
                                                                                                         "v"
                                                                                                         "x")
                                                                                                        (("1"
                                                                                                          (replace
                                                                                                           -2
                                                                                                           -16)
                                                                                                          (("1"
                                                                                                            (mult-by
                                                                                                             -15
                                                                                                             "norm_inf(v)")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (case
                                                                                                                 "NOT norm_inf(n)(v) =  norm_inf(v)")
                                                                                                                (("1"
                                                                                                                  (assert)
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "norm_inf"
                                                                                                                     1
                                                                                                                     1)
                                                                                                                    (("1"
                                                                                                                      (propax)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (expand
                                                                                                                   "norm_inf"
                                                                                                                   -17
                                                                                                                   1)
                                                                                                                  (("2"
                                                                                                                    (assert)
                                                                                                                    (("2"
                                                                                                                      (hide
                                                                                                                       -1
                                                                                                                       -2
                                                                                                                       -3
                                                                                                                       -4
                                                                                                                       -5
                                                                                                                       -6
                                                                                                                       -7
                                                                                                                       -8
                                                                                                                       -9
                                                                                                                       -10)
                                                                                                                      (("2"
                                                                                                                        (lemma
                                                                                                                         "abs_div")
                                                                                                                        (("2"
                                                                                                                          (inst
                                                                                                                           -1
                                                                                                                           "(abs(x) * norm_inf(n)(v))"
                                                                                                                           "f(p + x * v) - f(p) - dif* (x * v)")
                                                                                                                          (("2"
                                                                                                                            (lemma
                                                                                                                             "abs_mult")
                                                                                                                            (("2"
                                                                                                                              (inst
                                                                                                                               -1
                                                                                                                               "abs(x)"
                                                                                                                               "norm_inf(n)(v)")
                                                                                                                              (("2"
                                                                                                                                (expand
                                                                                                                                 "abs"
                                                                                                                                 -1
                                                                                                                                 3)
                                                                                                                                (("2"
                                                                                                                                  (expand
                                                                                                                                   "abs"
                                                                                                                                   -1
                                                                                                                                   4)
                                                                                                                                  (("2"
                                                                                                                                    (replace
                                                                                                                                     -1
                                                                                                                                     -2)
                                                                                                                                    (("2"
                                                                                                                                      (replace
                                                                                                                                       -2
                                                                                                                                       -9)
                                                                                                                                      (("2"
                                                                                                                                        (mult-by
                                                                                                                                         -9
                                                                                                                                         "norm_inf(n)(v)")
                                                                                                                                        (("1"
                                                                                                                                          (assert)
                                                                                                                                          (("1"
                                                                                                                                            (case
                                                                                                                                             "NOT abs(f(p + x * v) - f(p) - dif * (x * v)) /
                                                                                            (abs(x) * norm_inf(n)(v))
                                                                                            * norm_inf(n)(v) = abs(f(p + x * v) - f(p) - dif * (x * v)) /
                                                                                            (abs(x))")
                                                                                                                                            (("1"
                                                                                                                                              (assert)
                                                                                                                                              nil
                                                                                                                                              nil)
                                                                                                                                             ("2"
                                                                                                                                              (replace
                                                                                                                                               -1
                                                                                                                                               -10)
                                                                                                                                              (("2"
                                                                                                                                                (hide
                                                                                                                                                 -1
                                                                                                                                                 -2
                                                                                                                                                 -3
                                                                                                                                                 -4
                                                                                                                                                 -5)
                                                                                                                                                (("2"
                                                                                                                                                  (lemma
                                                                                                                                                   "abs_div")
                                                                                                                                                  (("2"
                                                                                                                                                    (inst
                                                                                                                                                     -1
                                                                                                                                                     "x"
                                                                                                                                                     "f(p + x * v) - f(p) - dif * (x * v)")
                                                                                                                                                    (("2"
                                                                                                                                                      (replace
                                                                                                                                                       -1
                                                                                                                                                       -6
                                                                                                                                                       rl)
                                                                                                                                                      (("2"
                                                                                                                                                        (case
                                                                                                                                                         "NOT (f(p + x * v) - f(p) - dif * (x * v)) / x = (f(p + x * v) - f(p)) / x - dif * v")
                                                                                                                                                        (("1"
                                                                                                                                                          (lemma
                                                                                                                                                           "div_distributes_minus")
                                                                                                                                                          (("1"
                                                                                                                                                            (inst
                                                                                                                                                             -1
                                                                                                                                                             "x"
                                                                                                                                                             "f(p + x * v) - f(p)"
                                                                                                                                                             " dif * (x * v)")
                                                                                                                                                            (("1"
                                                                                                                                                              (replace
                                                                                                                                                               -1
                                                                                                                                                               1)
                                                                                                                                                              (("1"
                                                                                                                                                                (replace
                                                                                                                                                                 -1
                                                                                                                                                                 1
                                                                                                                                                                 rl)
                                                                                                                                                                (("1"
                                                                                                                                                                  (lemma
                                                                                                                                                                   "scal_cancel")
                                                                                                                                                                  (("1"
                                                                                                                                                                    (lemma
                                                                                                                                                                     "scal_asso")
                                                                                                                                                                    (("1"
                                                                                                                                                                      (assert)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (typepred
                                                                                                                                                                         "x*v")
                                                                                                                                                                        (("1"
                                                                                                                                                                          (inst
                                                                                                                                                                           -3
                                                                                                                                                                           "dif"
                                                                                                                                                                           "v"
                                                                                                                                                                           "x")
                                                                                                                                                                          (("1"
                                                                                                                                                                            (replace
                                                                                                                                                                             -3
                                                                                                                                                                             1)
                                                                                                                                                                            (("1"
                                                                                                                                                                              (assert)
                                                                                                                                                                              nil
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil)
                                                                                                                                                         ("2"
                                                                                                                                                          (replace
                                                                                                                                                           -1
                                                                                                                                                           -7)
                                                                                                                                                          (("2"
                                                                                                                                                            (propax)
                                                                                                                                                            nil
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil)
                                                                                                                                         ("2"
                                                                                                                                          (hide
                                                                                                                                           -)
                                                                                                                                          (("2"
                                                                                                                                            (typepred
                                                                                                                                             "norm_inf(n)")
                                                                                                                                            (("2"
                                                                                                                                              (expand
                                                                                                                                               "norm?"
                                                                                                                                               -1)
                                                                                                                                              (("2"
                                                                                                                                                (flatten)
                                                                                                                                                (("2"
                                                                                                                                                  (inst
                                                                                                                                                   -3
                                                                                                                                                   "v")
                                                                                                                                                  (("2"
                                                                                                                                                    (assert)
                                                                                                                                                    nil
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (hide
                                                                                                               -)
                                                                                                              (("2"
                                                                                                                (typepred
                                                                                                                 "norm_inf(n)")
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "norm?"
                                                                                                                   -1)
                                                                                                                  (("2"
                                                                                                                    (flatten)
                                                                                                                    (("2"
                                                                                                                      (inst
                                                                                                                       -3
                                                                                                                       "v")
                                                                                                                      (("2"
                                                                                                                        (hide
                                                                                                                         -1
                                                                                                                         -2
                                                                                                                         -4)
                                                                                                                        (("2"
                                                                                                                          (flatten)
                                                                                                                          (("2"
                                                                                                                            (case
                                                                                                                             "NOT norm_inf(v) = norm_inf(n)(v)")
                                                                                                                            (("1"
                                                                                                                              (expand
                                                                                                                               "norm_inf"
                                                                                                                               1
                                                                                                                               2)
                                                                                                                              (("1"
                                                                                                                                (propax)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil)
                                                                                                                             ("2"
                                                                                                                              (assert)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (split)
                                                                                (("1"
                                                                                  (typepred
                                                                                   "x*v"
                                                                                   "v")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (expand
                                                                                   "NQ"
                                                                                   1)
                                                                                  (("2"
                                                                                    (assert)
                                                                                    (("2"
                                                                                      (typepred
                                                                                       "p")
                                                                                      (("2"
                                                                                        (typepred
                                                                                         "v")
                                                                                        (("2"
                                                                                          (typepred
                                                                                           "x*v")
                                                                                          (("2"
                                                                                            (hide
                                                                                             -1
                                                                                             -3
                                                                                             -6
                                                                                             -10
                                                                                             -13)
                                                                                            (("2"
                                                                                              (flatten)
                                                                                              (("2"
                                                                                                (typepred
                                                                                                 "D")
                                                                                                (("2"
                                                                                                  (typepred
                                                                                                   "x")
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "A"
                                                                                                     -2)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "D_down"
                                                                                                       -2)
                                                                                                      (("2"
                                                                                                        (propax)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("3"
                                                                                  (assert)
                                                                                  (("3"
                                                                                    (case
                                                                                     "x * v = zero_vec(n)")
                                                                                    (("1"
                                                                                      (lemma
                                                                                       "zero_scal")
                                                                                      (("1"
                                                                                        (inst
                                                                                         -1
                                                                                         "v"
                                                                                         "x")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (split)
                                                                          (("1"
                                                                            (mult-by
                                                                             1
                                                                             "norm_inf(v)")
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil)
                                                                             ("2"
                                                                              (case
                                                                               "NOT norm_inf(n)(v) = norm_inf(v)")
                                                                              (("1"
                                                                                (expand
                                                                                 "norm_inf"
                                                                                 1
                                                                                 1)
                                                                                (("1"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (replace
                                                                                   -1
                                                                                   1
                                                                                   rl)
                                                                                  (("2"
                                                                                    (typepred
                                                                                     "norm_inf(n)")
                                                                                    (("2"
                                                                                      (expand
                                                                                       "norm?"
                                                                                       -1)
                                                                                      (("2"
                                                                                        (flatten)
                                                                                        (("2"
                                                                                          (inst
                                                                                           -3
                                                                                           "v")
                                                                                          (("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (mult-by
                                                                             1
                                                                             "norm_inf(v)")
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("3"
                                                                          (case
                                                                           "NOT norm_inf(v) = norm_inf(n)(v)")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (expand
                                                                               "norm_inf"
                                                                               1
                                                                               2)
                                                                              (("1"
                                                                                (propax)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (assert)
                                                                            (("2"
                                                                              (replace
                                                                               -1
                                                                               1)
                                                                              (("2"
                                                                                (typepred
                                                                                 "norm_inf(n)")
                                                                                (("2"
                                                                                  (expand
                                                                                   "norm?"
                                                                                   -1)
                                                                                  (("2"
                                                                                    (flatten)
                                                                                    (("2"
                                                                                      (inst
                                                                                       -3
                                                                                       "v")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (typepred
                                                                       "v")
                                                                      (("2"
                                                                        (assert)
                                                                        (("2"
                                                                          (split)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (mult-by
                                                                               1
                                                                               "norm_inf(n)(v)")
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil)
                                                                               ("2"
                                                                                (typepred
                                                                                 "norm_inf(n)")
                                                                                (("2"
                                                                                  (expand
                                                                                   "norm?")
                                                                                  (("2"
                                                                                    (flatten)
                                                                                    (("2"
                                                                                      (inst
                                                                                       -3
                                                                                       "v")
                                                                                      (("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (mult-by
                                                                             1
                                                                             "norm_inf(n)(v)")
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("3"
                                                                      (typepred
                                                                       "norm_inf(n)")
                                                                      (("3"
                                                                        (expand
                                                                         "norm?")
                                                                        (("3"
                                                                          (flatten)
                                                                          (("3"
                                                                            (inst
                                                                             -3
                                                                             "v")
                                                                            (("3"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (typepred "v")
              (("2" (assert)
                (("2" (typepred "v")
                  (("2" (typepred "D")
                    (("2" (lemma "D_down_partial_not_one")
                      (("2" (inst -1 "v" "D" "p") nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil)
             ("3" (lemma "D_down_partial")
              (("3" (inst -1 "v" "D" "p") nil nil)) nil)
             ("4" (skeep)
              (("4" (typepred "p+Delta*v")
                (("4" (typepred "p")
                  (("4" (typepred "Delta*v")
                    (("4" (typepred "v")
                      (("4" (assert)
                        (("4" (expand "max" -) (("4" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (hide 2)
            (("2" (typepred "D")
              (("2" (expand "deriv_domain_partial?")
                (("2" (lemma "D_down_partial_not_one")
                  (("2" (inst -1 "v" "D" "p") nil nil)) nil))
                nil))
              nil))
            nil)
           ("3" (lemma "D_down_partial")
            (("3" (inst -1 "v" "D" "p") nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((init_partial const-decl "real" init_partial_def nil)
    (A const-decl "setof[nzreal]" derivatives_def analysis)
    (setof type-eq-decl nil defined_types nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (deriv_domain_partial? const-decl "bool" derivative_domain_multi
     nil)
    (D_down const-decl "bool" init_partial_def nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" init_partial_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (/= const-decl "boolean" notequal nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (lim_fun_def formula-decl nil lim_of_functions analysis)
    (deriv_domain? const-decl "bool" deriv_domain_def analysis)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (D_down_partial formula-decl nil init_partial_def nil)
    (D_down_partial_not_one formula-decl nil init_partial_def nil)
    (convergence const-decl "bool" lim_of_functions analysis)
    (delta skolem-const-decl "{delta: nzreal | D(p + delta * v)}"
     init_partial_def nil)
    (fullset const-decl "set" sets nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (scal_zero formula-decl nil vector_arithmetic nil)
    (zero_id formula-decl nil vector_arithmetic nil)
    (mult_zero formula-decl nil vector_arithmetic nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (adh const-decl "setof[real]" convergence_functions analysis)
    (NQ const-decl "real" differentiable_def nil)
    (both_sides_times_pos_ge1 formula-decl nil real_props nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (both_sides_times_pos_le1_imp formula-decl nil extra_real_props
     nil)
    (x skolem-const-decl
     "(analysis@derivatives_def[(D_down(D, p, v))].A(0))"
     init_partial_def nil)
    (NQ const-decl "bool" differentiable_def nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (div_distributes_minus formula-decl nil real_props nil)
    (scal_cancel formula-decl nil vector_arithmetic nil)
    (scal_asso formula-decl nil vector_arithmetic nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (abs_nat formula-decl nil abs_lems reals)
    (abs_mult formula-decl nil real_props nil)
    (abs_div formula-decl nil real_props nil)
    (nonzero_real nonempty-type-eq-decl nil reals nil)
    (div_cancel2 formula-decl nil real_props nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (both_sides_times_pos_lt1 formula-decl nil real_props nil)
    (sub_zero formula-decl nil vector_arithmetic nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (zero_scal formula-decl nil vector_arithmetic nil)
    (delta skolem-const-decl "posreal" init_partial_def nil)
    (norm_inf const-decl "[(cons?) -> nonneg_real]" norms nil)
    (epsilon skolem-const-decl "posreal" init_partial_def nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (norm_inf const-decl "(norm?(m))" norms nil)
    (norm? const-decl "bool" norms nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (convergence_zero? const-decl "bool" vector_sequences nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (convergence const-decl "bool" convergence_functions analysis)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (convergent? const-decl "bool" lim_of_functions analysis)
    (* const-decl "real" matrices matrices)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (restrict const-decl "R" restrict nil)
    (NQ const-decl "real" derivatives_def analysis)
    (* const-decl "VectorN(length(v2))" matrices matrices)
    (p skolem-const-decl "(D)" init_partial_def nil)
    (D skolem-const-decl "(deriv_domain_partial?(v))" init_partial_def
     nil)
    (v skolem-const-decl "{vv: VectorN(n) | vv /= zero_vec(n)}"
     init_partial_def nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (Vector type-eq-decl nil matrices matrices)
    (deriv const-decl "real" derivatives_def analysis)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   shostak))
 (der_f_is_init_partial1_TCC1 0
  (der_f_is_init_partial1_TCC1-1 nil 3852037187
   ("" (lemma "dd_all_partial_implies_dd")
    (("" (skeep) (("" (inst -1 "D") (("" (assert) nil nil)) nil)) nil))
    nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (deriv_domain_all_partial? const-decl "bool"
     derivative_domain_multi nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (dd_all_partial_implies_dd formula-decl nil derivative_domain_multi
     nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n formal-const-decl "posnat" init_partial_def nil))
   nil
   (der_f_is_init_partial1 subtype "init_partial_def.D"
    "(derivative_domain_multi[init_partial_def.n].deriv_domain?)")))
 (der_f_is_init_partial1_TCC2 0
  (der_f_is_init_partial1_TCC2-1 nil 3852037187
   ("" (assert)
    (("" (lemma "diff_imp_init_partial")
      (("" (skeep)
        (("" (inst?)
          (("" (assert)
            (("" (inst -1 "f" "p")
              (("" (typepred "p")
                (("" (typepred "f")
                  (("" (expand "differentiableD?" -1)
                    (("" (inst -1 "p")
                      (("" (assert) (("" (inst -5 "v") nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((diff_imp_init_partial formula-decl nil init_partial_def nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n formal-const-decl "posnat" init_partial_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain_all_partial? const-decl "bool"
     derivative_domain_multi nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (differentiableD? const-decl "bool" differentiable_def nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (der_f_is_init_partial1 subtype "init_partial_def.p"
    "(init_partial_def.init_partial?(init_partial_def.v, init_partial_def.D, init_partial_def.f))")))
 (der_f_is_init_partial1_TCC3 0
  (der_f_is_init_partial1_TCC3-1 nil 3852037187
   ("" (skeep)
    (("" (typepred "D")
      (("" (expand "deriv_domain_all_partial?")
        (("" (inst -1 "v")
          (("" (assert)
            (("" (expand "deriv_domain_partial?")
              (("" (propax) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((deriv_domain_all_partial? const-decl "bool"
     derivative_domain_multi nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" init_partial_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (deriv_domain_partial? const-decl "bool" derivative_domain_multi
     nil)
    (deriv_domain_partial? const-decl "bool" derivative_domain_multi
     nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (der_f_is_init_partial1 subtype "init_partial_def.D"
    "(derivative_domain_multi[init_partial_def.n].deriv_domain_partial?(init_partial_def.v))")))
 (der_f_is_init_partial1 0
  (der_f_is_init_partial1-1 nil 3852042199
   ("" (lemma "der_f_is_init_partial")
    (("" (skeep)
      (("" (skeep)
        (("" (inst -1 "v" "D" "f" "p")
          (("" (case "NOT v= zero_vec(n)")
            (("1" (assert) nil nil)
             ("2" (replace -1 2)
              (("2" (lemma "dot_zero")
                (("2" (inst -1 "der_f(D)(f)(p)" "n")
                  (("1" (replace -1 2)
                    (("1" (expand "init_partial")
                      (("1" (expand "deriv" 2)
                        (("1"
                          (lemma "lim_fun_def[(analysis@derivatives_def
                             [(D_down(D, p, vector_arithmetic.zero_vec(n)))].A
                             (0))]")
                          (("1"
                            (inst -1
                             "NQ(restrict[real, (D_down(D, p, zero_vec(n))), real]
                                          (LAMBDA (Delta: real): f(p + Delta * zero_vec(n))),
                                      0)" "0" "0")
                            (("1" (assert)
                              (("1"
                                (hide 2 3)
                                (("1"
                                  (expand "convergence" 1)
                                  (("1"
                                    (expand "convergence" 1)
                                    (("1"
                                      (split)
                                      (("1"
                                        (expand "adh" 1)
                                        (("1"
                                          (skeep)
                                          (("1"
                                            (inst 1 "e/2")
                                            (("1"
                                              (expand "fullset" 1)
                                              (("1"
                                                (expand "abs" 1)
                                                (("1"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (expand "A" 1)
                                              (("2"
                                                (expand "D_down" 1)
                                                (("2"
                                                  (lemma "scal_zero")
                                                  (("2"
                                                    (inst -1 "e/2" "n")
                                                    (("2"
                                                      (typepred "p")
                                                      (("2"
                                                        (replace -4 1)
                                                        (("2"
                                                          (lemma
                                                           "zero_id")
                                                          (("2"
                                                            (inst
                                                             -1
                                                             "p")
                                                            (("2"
                                                              (replace
                                                               -3
                                                               -1)
                                                              (("2"
                                                                (replace
                                                                 -1
                                                                 1)
                                                                (("2"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (skeep)
                                        (("2"
                                          (inst 1 "1")
                                          (("2"
                                            (skeep)
                                            (("2"
                                              (expand "NQ" 1)
                                              (("2"
                                                (expand "restrict" 1)
                                                (("2"
                                                  (lemma "scal_zero")
                                                  (("2"
                                                    (inst -1 "x" "n")
                                                    (("2"
                                                      (lemma
                                                       "scal_zero")
                                                      (("2"
                                                        (inst
                                                         -1
                                                         "0"
                                                         "n")
                                                        (("2"
                                                          (replace
                                                           -1
                                                           1)
                                                          (("2"
                                                            (replace
                                                             -2
                                                             1)
                                                            (("2"
                                                              (lemma
                                                               "zero_id")
                                                              (("2"
                                                                (inst
                                                                 -1
                                                                 "p")
                                                                (("2"
                                                                  (typepred
                                                                   "p")
                                                                  (("2"
                                                                    (replace
                                                                     -2
                                                                     -4)
                                                                    (("2"
                                                                      (replace
                                                                       -4
                                                                       1)
                                                                      (("2"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide 2 3)
                              (("2"
                                (hide -1 -2)
                                (("2"
                                  (expand "not_one_element?")
                                  (("2"
                                    (skeep)
                                    (("2"
                                      (typepred "D")
                                      (("2"
                                        (expand
                                         "deriv_domain_all_partial?")
                                        (("2"
                                          (inst -1 "zero_vec(n)")
                                          (("2"
                                            (case "x=1")
                                            (("1"
                                              (inst 1 "2")
                                              (("1" (assert) nil nil)
                                               ("2"
                                                (expand "D_down" 1)
                                                (("2"
                                                  (lemma "scal_zero")
                                                  (("2"
                                                    (inst -1 "2" "n")
                                                    (("2"
                                                      (replace -1 1)
                                                      (("2"
                                                        (lemma
                                                         "zero_id")
                                                        (("2"
                                                          (inst -1 "p")
                                                          (("2"
                                                            (typepred
                                                             "p")
                                                            (("2"
                                                              (replace
                                                               -2
                                                               -4)
                                                              (("2"
                                                                (replace
                                                                 -4
                                                                 1)
                                                                (("2"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (inst 2 "1")
                                              (("1" (assert) nil nil)
                                               ("2"
                                                (expand "D_down")
                                                (("2"
                                                  (lemma "zero_id")
                                                  (("2"
                                                    (lemma "scal_zero")
                                                    (("2"
                                                      (inst -1 "1" "n")
                                                      (("2"
                                                        (replace -1 1)
                                                        (("2"
                                                          (inst -2 "p")
                                                          (("2"
                                                            (typepred
                                                             "p")
                                                            (("2"
                                                              (replace
                                                               -2
                                                               -5)
                                                              (("2"
                                                                (replace
                                                                 -5
                                                                 1)
                                                                (("2"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (typepred "D")
                              (("3"
                                (lemma "D_down_all_partial")
                                (("3"
                                  (inst -1 "zero_vec(n)" "D" "p")
                                  nil
                                  nil))
                                nil))
                              nil)
                             ("4" (skeep)
                              (("4"
                                (typepred
                                 "p + Delta * zero_vec(n)"
                                 "p"
                                 "Delta*zero_vec(n)"
                                 "zero_vec(n)")
                                (("4"
                                  (assert)
                                  (("4"
                                    (expand "max" -)
                                    (("4" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide -1 -2 2 3)
                            (("2" (expand "not_one_element?" 1)
                              (("2"
                                (skeep)
                                (("2"
                                  (typepred "x")
                                  (("2"
                                    (inst 1 "x+1")
                                    (("1" (assert) nil nil)
                                     ("2"
                                      (expand "D_down")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (lemma "scal_zero")
                                          (("2"
                                            (inst-cp -1 "x" "n")
                                            (("2"
                                              (inst -1 "1+x" "n")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (hide 2 3)
                            (("3" (lemma "D_down_all_partial")
                              (("3"
                                (inst -1 "zero_vec(n)" "D" "p")
                                nil
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (assert)
                    (("2" (typepred "der_f[n](D)(f)(p)")
                      (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n formal-const-decl "posnat" init_partial_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (/= const-decl "boolean" notequal nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain_partial? const-decl "bool" derivative_domain_multi
     nil)
    (deriv_domain_all_partial? const-decl "bool"
     derivative_domain_multi nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (differentiableD? const-decl "bool" differentiable_def nil)
    (v skolem-const-decl "VectorN(n)" init_partial_def nil)
    (p skolem-const-decl "(D)" init_partial_def nil)
    (f skolem-const-decl "(differentiableD?(D))" init_partial_def nil)
    (D skolem-const-decl "(deriv_domain_all_partial?)" init_partial_def
     nil)
    (der_f const-decl "{gg: [(D) -> VectorN(n)] |
   FORALL (p: (D)):
     convergence_zero?(NQ(D, p), NQ(f, gg(p), p), zero_vec(n))}"
     differentiable_def nil)
    (NQ const-decl "real" differentiable_def nil)
    (NQ const-decl "bool" differentiable_def nil)
    (convergence_zero? const-decl "bool" vector_sequences nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (init_partial const-decl "real" init_partial_def nil)
    (lim_fun_def formula-decl nil lim_of_functions analysis)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (D_down const-decl "bool" init_partial_def nil)
    (setof type-eq-decl nil defined_types nil)
    (A const-decl "setof[nzreal]" derivatives_def analysis)
    (deriv_domain? const-decl "bool" deriv_domain_def analysis)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (D_down_all_partial formula-decl nil init_partial_def nil)
    (convergence const-decl "bool" lim_of_functions analysis)
    (scal_zero formula-decl nil vector_arithmetic nil)
    (zero_id formula-decl nil vector_arithmetic nil)
    (fullset const-decl "set" sets nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (e skolem-const-decl "posreal" init_partial_def nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (adh const-decl "setof[real]" convergence_functions analysis)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (abs_0 formula-decl nil abs_lems reals)
    (convergence const-decl "bool" convergence_functions analysis)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (NQ const-decl "real" derivatives_def analysis)
    (restrict const-decl "R" restrict nil)
    (convergent? const-decl "bool" lim_of_functions analysis)
    (* const-decl "VectorN(length(v2))" matrices matrices)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (Vector type-eq-decl nil matrices matrices)
    (x skolem-const-decl
     "(D_down(D, p, vector_arithmetic.zero_vec(n)))" init_partial_def
     nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (deriv const-decl "real" derivatives_def analysis)
    (dot_zero formula-decl nil vector_arithmetic nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (der_f_is_init_partial formula-decl nil init_partial_def nil))
   shostak))
 (conv_NQ_is_init_partial1_TCC1 0
  (conv_NQ_is_init_partial1_TCC1-1 nil 3852728263
   ("" (skeep)
    (("" (lemma "diff_imp_init_partial")
      (("" (typepred "D")
        (("" (inst -2 "D" "f" "p")
          (("" (assert)
            (("" (split -2)
              (("1" (inst -1 "v") nil nil)
               ("2" (expand "differentiable?" 1)
                (("2" (inst 1 "dif") nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((diff_imp_init_partial formula-decl nil init_partial_def nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (differentiable? const-decl "bool" differentiable_def nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n formal-const-decl "posnat" init_partial_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain_all_partial? const-decl "bool"
     derivative_domain_multi nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (conv_NQ_is_init_partial1 subtype "init_partial_def.p"
    "(init_partial_def.init_partial?(init_partial_def.v, init_partial_def.D, init_partial_def.f))")))
 (conv_NQ_is_init_partial1_TCC2 0
  (conv_NQ_is_init_partial1_TCC2-1 nil 3852728263
   ("" (subtype-tcc) nil nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (deriv_domain_all_partial? const-decl "bool"
     derivative_domain_multi nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (deriv_domain_partial? const-decl "bool" derivative_domain_multi
     nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (norm_inf const-decl "(norm?(m))" norms nil)
    (sub const-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (norm_inf const-decl "[(cons?) -> nonneg_real]" norms nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (* const-decl "real" matrices matrices)
    (n formal-const-decl "posnat" init_partial_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (NQ const-decl "real" differentiable_def nil)
    (convergence_zero? const-decl "bool" vector_sequences nil)
    (deriv_domain_partial? const-decl "bool" derivative_domain_multi
     nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil))
   nil
   (conv_NQ_is_init_partial1 subtype "init_partial_def.D"
    "(derivative_domain_multi[init_partial_def.n].deriv_domain_partial?(init_partial_def.v))")))
 (conv_NQ_is_init_partial1 0
  (conv_NQ_is_init_partial1-1 nil 3852728431
   ("" (lemma "conv_NQ_is_init_partial")
    (("" (skeep)
      (("" (inst -1 "v" "D" "f" "p" "dif")
        (("1" (assert) nil nil)
         ("2" (case "NOT v= zero_vec(n)")
          (("1" (assert) nil nil)
           ("2" (replace -1 2)
            (("2" (lemma "dot_zero")
              (("2" (inst -1 "dif" "n")
                (("1" (replace -1 2)
                  (("1" (expand "init_partial")
                    (("1" (expand "deriv" 2)
                      (("1"
                        (lemma "lim_fun_def[(analysis@derivatives_def
                                                   [(D_down(D, p, vector_arithmetic.zero_vec(n)))].A
                                                   (0))]")
                        (("1"
                          (inst -1
                           "NQ(restrict[real, (D_down(D, p, zero_vec(n))), real]
                                                                      (LAMBDA (Delta: real): f(p + Delta * zero_vec(n))),
                                                                  0)"
                           "0" "0")
                          (("1" (assert)
                            (("1" (hide 2 3)
                              (("1"
                                (expand "convergence" 1)
                                (("1"
                                  (expand "convergence" 1)
                                  (("1"
                                    (split)
                                    (("1"
                                      (expand "adh" 1)
                                      (("1"
                                        (skeep)
                                        (("1"
                                          (inst 1 "e/2")
                                          (("1"
                                            (expand "fullset" 1)
                                            (("1"
                                              (expand "abs" 1)
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (expand "A" 1)
                                            (("2"
                                              (expand "D_down" 1)
                                              (("2"
                                                (lemma "scal_zero")
                                                (("2"
                                                  (inst -1 "e/2" "n")
                                                  (("2"
                                                    (typepred "p")
                                                    (("2"
                                                      (replace -4 1)
                                                      (("2"
                                                        (lemma
                                                         "zero_id")
                                                        (("2"
                                                          (inst -1 "p")
                                                          (("2"
                                                            (replace
                                                             -3
                                                             -1)
                                                            (("2"
                                                              (replace
                                                               -1
                                                               1)
                                                              (("2"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (skeep)
                                      (("2"
                                        (inst 1 "1")
                                        (("2"
                                          (skeep)
                                          (("2"
                                            (expand "NQ" 1)
                                            (("2"
                                              (expand "restrict" 1)
                                              (("2"
                                                (lemma "scal_zero")
                                                (("2"
                                                  (inst -1 "x" "n")
                                                  (("2"
                                                    (lemma "scal_zero")
                                                    (("2"
                                                      (inst -1 "0" "n")
                                                      (("2"
                                                        (replace -1 1)
                                                        (("2"
                                                          (replace
                                                           -2
                                                           1)
                                                          (("2"
                                                            (lemma
                                                             "zero_id")
                                                            (("2"
                                                              (inst
                                                               -1
                                                               "p")
                                                              (("2"
                                                                (typepred
                                                                 "p")
                                                                (("2"
                                                                  (replace
                                                                   -2
                                                                   -4)
                                                                  (("2"
                                                                    (replace
                                                                     -4
                                                                     1)
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide 2 3)
                            (("2" (hide -1 -2)
                              (("2"
                                (expand "not_one_element?")
                                (("2"
                                  (skeep)
                                  (("2"
                                    (typepred "D")
                                    (("2"
                                      (expand
                                       "deriv_domain_all_partial?")
                                      (("2"
                                        (inst -1 "zero_vec(n)")
                                        (("2"
                                          (case "x=1")
                                          (("1"
                                            (inst 1 "2")
                                            (("1" (assert) nil nil)
                                             ("2"
                                              (expand "D_down" 1)
                                              (("2"
                                                (lemma "scal_zero")
                                                (("2"
                                                  (inst -1 "2" "n")
                                                  (("2"
                                                    (replace -1 1)
                                                    (("2"
                                                      (lemma "zero_id")
                                                      (("2"
                                                        (inst -1 "p")
                                                        (("2"
                                                          (typepred
                                                           "p")
                                                          (("2"
                                                            (replace
                                                             -2
                                                             -4)
                                                            (("2"
                                                              (replace
                                                               -4
                                                               1)
                                                              (("2"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (inst 2 "1")
                                            (("1" (assert) nil nil)
                                             ("2"
                                              (expand "D_down")
                                              (("2"
                                                (lemma "zero_id")
                                                (("2"
                                                  (lemma "scal_zero")
                                                  (("2"
                                                    (inst -1 "1" "n")
                                                    (("2"
                                                      (replace -1 1)
                                                      (("2"
                                                        (inst -2 "p")
                                                        (("2"
                                                          (typepred
                                                           "p")
                                                          (("2"
                                                            (replace
                                                             -2
                                                             -5)
                                                            (("2"
                                                              (replace
                                                               -5
                                                               1)
                                                              (("2"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (typepred "D")
                            (("3" (lemma "D_down_all_partial")
                              (("3"
                                (inst -1 "zero_vec(n)" "D" "p")
                                nil
                                nil))
                              nil))
                            nil)
                           ("4" (skeep)
                            (("4"
                              (typepred "p + Delta * zero_vec(n)" "p"
                               "Delta*zero_vec(n)" "zero_vec(n)")
                              (("4"
                                (assert)
                                (("4"
                                  (expand "max" -)
                                  (("4" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide -1 -2 2 3)
                          (("2" (expand "not_one_element?" 1)
                            (("2" (skeep)
                              (("2"
                                (typepred "x")
                                (("2"
                                  (inst 1 "x+1")
                                  (("1" (assert) nil nil)
                                   ("2"
                                    (expand "D_down")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (lemma "scal_zero")
                                        (("2"
                                          (inst-cp -1 "x" "n")
                                          (("2"
                                            (inst -1 "1+x" "n")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (hide 2 3)
                          (("3" (lemma "D_down_all_partial")
                            (("3" (inst -1 "zero_vec(n)" "D" "p") nil
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert) (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (dot_zero formula-decl nil vector_arithmetic nil)
    (deriv const-decl "real" derivatives_def analysis)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (x skolem-const-decl
     "(D_down(D, p, vector_arithmetic.zero_vec(n)))" init_partial_def
     nil)
    (Vector type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (D skolem-const-decl "(deriv_domain_all_partial?)" init_partial_def
     nil)
    (p skolem-const-decl "(D)" init_partial_def nil)
    (* const-decl "VectorN(length(v2))" matrices matrices)
    (convergent? const-decl "bool" lim_of_functions analysis)
    (restrict const-decl "R" restrict nil)
    (NQ const-decl "real" derivatives_def analysis)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (convergence const-decl "bool" convergence_functions analysis)
    (abs_0 formula-decl nil abs_lems reals)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nonzero_abs_is_pos application-judgement "{y: posreal | y >= x}"
     real_defs nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (adh const-decl "setof[real]" convergence_functions analysis)
    (posreal_div_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (posreal nonempty-type-eq-decl nil real_types nil)
    (e skolem-const-decl "posreal" init_partial_def nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (fullset const-decl "set" sets nil)
    (zero_id formula-decl nil vector_arithmetic nil)
    (scal_zero formula-decl nil vector_arithmetic nil)
    (convergence const-decl "bool" lim_of_functions analysis)
    (D_down_all_partial formula-decl nil init_partial_def nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (not_one_element? const-decl "bool" deriv_domain_def analysis)
    (deriv_domain? const-decl "bool" deriv_domain_def analysis)
    (A const-decl "setof[nzreal]" derivatives_def analysis)
    (setof type-eq-decl nil defined_types nil)
    (D_down const-decl "bool" init_partial_def nil)
    (nzreal nonempty-type-eq-decl nil reals nil)
    (lim_fun_def formula-decl nil lim_of_functions analysis)
    (init_partial const-decl "real" init_partial_def nil)
    (dif skolem-const-decl "VectorN(n)" init_partial_def nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain_all_partial? const-decl "bool"
     derivative_domain_multi nil)
    (deriv_domain_partial? const-decl "bool" derivative_domain_multi
     nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (/= const-decl "boolean" notequal nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n formal-const-decl "posnat" init_partial_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (v skolem-const-decl "VectorN(n)" init_partial_def nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (conv_NQ_is_init_partial formula-decl nil init_partial_def nil))
   shostak))
 (conv_NQ_is_init_partial_v_TCC1 0
  (conv_NQ_is_init_partial_v_TCC1-1 nil 3853431248
   ("" (skeep)
    (("" (lemma "diff_imp_init_partial2")
      (("" (inst?)
        (("1" (assert)
          (("1" (expand "differentiable?" 1) (("1" (inst?) nil nil))
            nil))
          nil)
         ("2" (typepred "v")
          (("2" (lemma "init_partial_zero_derivable")
            (("2" (inst -1 "D" "f")
              (("2" (expand "init_partial?" -1)
                (("2" (inst -1 "p") (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((diff_imp_init_partial2 formula-decl nil init_partial_def nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (init_partial? const-decl "bool" init_partial_def nil)
    (init_partial_zero_derivable formula-decl nil init_partial_def nil)
    (differentiable? const-decl "bool" differentiable_def nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain_partial? const-decl "bool" derivative_domain_multi
     nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (/= const-decl "boolean" notequal nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n formal-const-decl "posnat" init_partial_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (v skolem-const-decl "VectorN(n)" init_partial_def nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (conv_NQ_is_init_partial_v subtype "init_partial_def.p"
    "(init_partial_def.init_partial?(init_partial_def.v, init_partial_def.D, init_partial_def.f))")))
 (conv_NQ_is_init_partial_v 0
  (conv_NQ_is_init_partial_v-1 nil 3853431681
   ("" (lemma "conv_NQ_is_init_partial")
    (("" (skeep)
      (("" (inst -1 "v" "D" "f" "p" "dif")
        (("1" (assert) nil nil)
         ("2" (case "NOT v= zero_vec(n)")
          (("1" (assert) nil nil)
           ("2" (replace -1 2)
            (("2" (lemma "dot_zero")
              (("2" (inst -1 "dif" "n")
                (("1" (replace -1 2)
                  (("1" (expand "init_partial")
                    (("1" (expand "deriv" 2)
                      (("1"
                        (lemma "lim_fun_def[(analysis@derivatives_def
                                                           [(D_down(D, p, vector_arithmetic.zero_vec(n)))].A
                                                           (0))]")
                        (("1"
                          (inst -1
                           "NQ(restrict[real, (D_down(D, p, zero_vec(n))), real]
                                                                                (LAMBDA (Delta: real): f(p + Delta * zero_vec(n))),
                                                                            0)"
                           "0" "0")
                          (("1" (assert)
                            (("1" (hide 2 3)
                              (("1"
                                (expand "convergence" 1)
                                (("1"
                                  (expand "convergence" 1)
                                  (("1"
                                    (split)
                                    (("1"
                                      (expand "adh" 1)
                                      (("1"
                                        (skeep)
                                        (("1"
                                          (inst 1 "e/2")
                                          (("1"
                                            (expand "fullset" 1)
                                            (("1"
                                              (expand "abs" 1)
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (expand "A" 1)
                                            (("2"
                                              (expand "D_down" 1)
                                              (("2"
                                                (lemma "scal_zero")
                                                (("2"
                                                  (inst -1 "e/2" "n")
                                                  (("2"
                                                    (typepred "p")
                                                    (("2"
                                                      (replace -4 1)
                                                      (("2"
                                                        (lemma
                                                         "zero_id")
                                                        (("2"
                                                          (inst -1 "p")
                                                          (("2"
                                                            (replace
                                                             -3
                                                             -1)
                                                            (("2"
                                                              (replace
                                                               -1
                                                               1)
                                                              (("2"
                                                                (propax)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (skeep)
                                      (("2"
                                        (inst 1 "1")
                                        (("2"
                                          (skeep)
                                          (("2"
                                            (expand "NQ" 1)
                                            (("2"
                                              (expand "restrict" 1)
                                              (("2"
                                                (lemma "scal_zero")
                                                (("2"
                                                  (inst -1 "x" "n")
                                                  (("2"
                                                    (lemma "scal_zero")
                                                    (("2"
                                                      (inst -1 "0" "n")
                                                      (("2"
                                                        (replace -1 1)
                                                        (("2"
                                                          (replace
                                                           -2
                                                           1)
                                                          (("2"
                                                            (lemma
                                                             "zero_id")
                                                            (("2"
                                                              (inst
                                                               -1
                                                               "p")
                                                              (("2"
                                                                (typepred
                                                                 "p")
                                                                (("2"
                                                                  (replace
                                                                   -2
                                                                   -4)
                                                                  (("2"
                                                                    (replace
                                                                     -4
                                                                     1)
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (hide 2 3)
                            (("2" (hide -1 -2)
                              (("2"
                                (expand "not_one_element?")
                                (("2"
                                  (skeep)
                                  (("2"
                                    (typepred "D")
                                    (("2"
                                      (case "x=1")
                                      (("1"
                                        (inst 1 "2")
                                        (("1" (assert) nil nil)
                                         ("2"
                                          (expand "D_down" 1)
                                          (("2"
                                            (lemma "scal_zero")
                                            (("2"
                                              (inst -1 "2" "n")
                                              (("2"
                                                (replace -1 1)
                                                (("2"
                                                  (lemma "zero_id")
                                                  (("2"
                                                    (inst -1 "p")
                                                    (("2"
                                                      (typepred "p")
                                                      (("2"
                                                        (replace -2 -4)
                                                        (("2"
                                                          (replace
                                                           -4
                                                           1)
                                                          (("2"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (inst 2 "1")
                                        (("1" (assert) nil nil)
                                         ("2"
                                          (expand "D_down")
                                          (("2"
                                            (lemma "zero_id")
                                            (("2"
                                              (lemma "scal_zero")
                                              (("2"
                                                (inst -1 "1" "n")
                                                (("2"
                                                  (replace -1 1)
                                                  (("2"
                                                    (inst -2 "p")
                                                    (("2"
                                                      (typepred "p")
                                                      (("2"
                                                        (replace -2 -5)
                                                        (("2"
                                                          (replace
                                                           -5
                                                           1)
                                                          (("2"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("3" (typepred "D")
                            (("3" (lemma "D_down_partial")
                              (("3"
                                (lemma "D_down_partial")
                                (("3"
                                  (inst?)
                                  (("3"
                                    (assert)
                                    (("3"
                                      (inst -1 "D" "p")
                                      (("3" (postpone) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("4" (postpone) nil nil))
                          nil)
                         ("2" (postpone) nil nil)
                         ("3" (postpone) nil nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (postpone) nil nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (conv_NQ_unique 0
  (conv_NQ_unique-1 nil 3852729431
   ("" (skeep)
    (("" (lemma "conv_NQ_is_init_partial1")
      (("" (lemma "list_extensionality[real]")
        (("" (inst -1 "dif1" "dif2")
          (("" (assert)
            (("" (hide 2)
              (("" (skeep)
                (("" (inst-cp -1 "e(n,n!1)" "D" "f" "p" "dif1")
                  (("" (inst-cp -1 "e(n,n!1)" "D" "f" "p" "dif2")
                    (("" (hide -1)
                      (("" (assert)
                        (("" (lemma "dot_prod_e")
                          (("" (inst-cp -1 "n" "n!1" "dif1")
                            (("" (inst-cp -1 "n" "n!1" "dif2")
                              (("" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((conv_NQ_is_init_partial1 formula-decl nil init_partial_def nil)
    (list type-decl nil list_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n formal-const-decl "posnat" init_partial_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (< const-decl "bool" reals nil)
    (e def-decl "VectorN(m)" vector_arithmetic nil)
    (below type-eq-decl nil naturalnumbers nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain_all_partial? const-decl "bool"
     derivative_domain_multi nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (dot_prod_e formula-decl nil vector_arithmetic nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (list_extensionality formula-decl nil more_list_props structures)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   shostak))
 (der_f_unique_TCC1 0
  (der_f_unique_TCC1-1 nil 3853433564
   ("" (skeep)
    (("" (lemma "dd_e_partial_implies_dd")
      (("" (inst?) (("" (assert) nil nil)) nil)) nil))
    nil)
   ((n formal-const-decl "posnat" init_partial_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (dd_e_partial_implies_dd formula-decl nil derivative_domain_multi
     nil)
    (deriv_domain_e_partial? const-decl "bool" derivative_domain_multi
     nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (der_f_unique subtype "init_partial_def.D"
    "(derivative_domain_multi[init_partial_def.n].deriv_domain?)")))
 (der_f_unique 0
  (der_f_unique-1 nil 3852729206
   ("" (skeep)
    (("" (lemma "list_extensionality[real]")
      (("" (inst?)
        (("" (assert)
          (("" (name "k" "length(dif)")
            ((""
              (case " FORALL (n: below(length(dif))): dif * e(k,n) = der_f(D,p)(f) * e(k,n)")
              (("1" (skeep)
                (("1" (inst -1 "n!1")
                  (("1" (lemma "dot_prod_e")
                    (("1" (inst?)
                      (("1" (replace -1)
                        (("1" (lemma "dot_prod_e")
                          (("1" (inst -1 "k" "n!1" "der_f(D,p)(f)")
                            (("1" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (hide 2)
                (("2" (lemma "conv_NQ_is_init_partial")
                  (("2" (lemma "der_f_is_init_partial")
                    (("2" (skeep)
                      (("2" (inst -2 "e(k,n!1)" "D" "f" "p" "dif")
                        (("1" (assert)
                          (("1" (replace -2)
                            (("1" (hide -1)
                              (("1"
                                (lemma "conv_NQ_is_init_partial")
                                (("1"
                                  (inst
                                   -1
                                   "e(k,n!1)"
                                   "D"
                                   "f"
                                   "p"
                                   "der_f(D,p)(f)")
                                  (("1" (assert) nil nil)
                                   ("2"
                                    (lemma "e_not_zero")
                                    (("2"
                                      (inst?)
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (hide -)
                          (("2" (typepred "D")
                            (("2" (expand "deriv_domain_e_partial?" -1)
                              (("2"
                                (inst -1 "n!1")
                                (("2"
                                  (assert)
                                  (("2"
                                    (reveal -)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("3" (assert)
                          (("3" (hide -)
                            (("3" (lemma "e_not_zero")
                              (("3"
                                (inst?)
                                (("3" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("3" (skeep) (("3" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list_extensionality formula-decl nil more_list_props structures)
    (e def-decl "VectorN(m)" vector_arithmetic nil)
    (* const-decl "real" matrices matrices)
    (Vector type-eq-decl nil matrices matrices)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (dot_prod_e formula-decl nil vector_arithmetic nil)
    (conv_NQ_is_init_partial formula-decl nil init_partial_def nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (e_not_zero formula-decl nil vector_arithmetic nil)
    (deriv_domain_partial? const-decl "bool" derivative_domain_multi
     nil)
    (D skolem-const-decl "(deriv_domain_e_partial?)" init_partial_def
     nil)
    (k skolem-const-decl "nat" init_partial_def nil)
    (dif skolem-const-decl "VectorN(n)" init_partial_def nil)
    (n!1 skolem-const-decl "below(length(dif))" init_partial_def nil)
    (/= const-decl "boolean" notequal nil)
    (der_f_is_init_partial formula-decl nil init_partial_def nil)
    (deriv_domain_e_partial? const-decl "bool" derivative_domain_multi
     nil)
    (der_f const-decl
     "{gg: VectorN(n) | convergence_zero?(NQ(D, p), NQ(f, gg, p), zero_vec(n))}"
     differentiable_def nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (NQ const-decl "real" differentiable_def nil)
    (NQ const-decl "bool" differentiable_def nil)
    (convergence_zero? const-decl "bool" vector_sequences nil)
    (differentiable? const-decl "bool" differentiable_def nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" init_partial_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   shostak))
 (init_partial_scalar_TCC1 0
  (init_partial_scalar_TCC1-1 nil 3852037187
   ("" (skeep)
    (("" (typepred "f")
      (("" (lemma "frech_diff_imp_init_partial")
        (("" (inst -1 "c*v" "D" "f" "p")
          (("" (assert)
            (("" (flatten)
              (("" (assert)
                (("" (expand "differentiableD?" -1)
                  (("" (inst -1 "p") nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (/= const-decl "boolean" notequal nil)
    (deriv_domain_partial? const-decl "bool" derivative_domain_multi
     nil)
    (differentiableD? const-decl "bool" differentiable_def nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" init_partial_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (* const-decl "VectorN(length(v2))" matrices matrices)
    (Vector type-eq-decl nil matrices matrices)
    (frech_diff_imp_init_partial formula-decl nil init_partial_def nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (init_partial_scalar subtype "init_partial_def.p"
    "(init_partial_def.init_partial?(matrices.*(init_partial_def.c, init_partial_def.v), init_partial_def.D, init_partial_def.f))")))
 (init_partial_scalar_TCC2 0
  (init_partial_scalar_TCC2-1 nil 3852037187 ("" (subtype-tcc) nil nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n formal-const-decl "posnat" init_partial_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (/= const-decl "boolean" notequal nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain_partial? const-decl "bool" derivative_domain_multi
     nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (differentiableD? const-decl "bool" differentiable_def nil)
    (norm_inf const-decl "(norm?(m))" norms nil)
    (sub const-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (norm_inf const-decl "[(cons?) -> nonneg_real]" norms nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (* const-decl "real" matrices matrices)
    (NQ const-decl "real" differentiable_def nil)
    (convergence_zero? const-decl "bool" vector_sequences nil)
    (differentiable? const-decl "bool" differentiable_def nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (* const-decl "VectorN(length(v2))" matrices matrices))
   nil
   (init_partial_scalar subtype
    "matrices.*(init_partial_def.c, init_partial_def.v)"
    "matrices.VectorN(init_partial_def.n)")))
 (init_partial_scalar_TCC3 0
  (init_partial_scalar_TCC3-1 nil 3852037187
   ("" (lemma "dd_partial_implies_scal_partial")
    (("" (skeep)
      (("" (inst -1 "D" "v" "c") (("" (assert) nil nil)) nil)) nil))
    nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (/= const-decl "boolean" notequal nil)
    (deriv_domain_partial? const-decl "bool" derivative_domain_multi
     nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (dd_partial_implies_scal_partial formula-decl nil
     derivative_domain_multi nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n formal-const-decl "posnat" init_partial_def nil))
   nil
   (init_partial_scalar subtype "init_partial_def.D"
    "(derivative_domain_multi[init_partial_def.n].deriv_domain_partial?(matrices.*(init_partial_def.c, init_partial_def.v)))")))
 (init_partial_scalar 0
  (init_partial_scalar-1 nil 3852042589
   ("" (skeep)
    (("" (case "v=zero_vec(n)")
      (("1" (replace -1 1)
        (("1" (lemma "init_partial_zero")
          (("1" (inst -1 "D" "f" "p")
            (("1" (lemma "scal_zero")
              (("1" (inst -1 "c" "n")
                (("1" (replace -1 1) (("1" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (lemma "der_f_is_init_partial")
        (("2" (inst-cp -1 "v" "D" "f" "p")
          (("2" (inst -1 "c*v" "D" "f" "p")
            (("1" (assert)
              (("1" (lemma "dot_scalar1")
                (("1" (inst -1 "der_f(D)(f)(p)" "v" "c")
                  (("1" (assert) nil nil)) nil))
                nil))
              nil)
             ("2" (case "c=0")
              (("1" (replace -1 1)
                (("1" (replace -1 3)
                  (("1" (assert)
                    (("1" (lemma "mult_zero")
                      (("1" (assert)
                        (("1"
                          (case "NOT 0 * init_partial(v, D, f)(p)=0")
                          (("1" (assert) nil nil)
                           ("2" (replace -1 3)
                            (("2" (inst -2 "v")
                              (("2"
                                (typepred "v")
                                (("2"
                                  (assert)
                                  (("2"
                                    (lemma "init_partial_zero")
                                    (("2"
                                      (inst -1 "D" "f" "p")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (assert)
                (("2" (lemma "zero_mult")
                  (("2" (inst -1 "c" "v") (("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (/= const-decl "boolean" notequal nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" init_partial_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (init_partial_zero formula-decl nil init_partial_def nil)
    (scal_zero formula-decl nil vector_arithmetic nil)
    (differentiableD? const-decl "bool" differentiable_def nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain_partial? const-decl "bool" derivative_domain_multi
     nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (mult_zero formula-decl nil vector_arithmetic nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (init_partial? const-decl "bool" init_partial_def nil)
    (init_partial const-decl "real" init_partial_def nil)
    (zero_mult formula-decl nil vector_arithmetic nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (der_f const-decl "{gg: [(D) -> VectorN(n)] |
   FORALL (p: (D)):
     convergence_zero?(NQ(D, p), NQ(f, gg(p), p), zero_vec(n))}"
     differentiable_def nil)
    (NQ const-decl "real" differentiable_def nil)
    (NQ const-decl "bool" differentiable_def nil)
    (convergence_zero? const-decl "bool" vector_sequences nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (dot_scalar1 formula-decl nil vector_arithmetic nil)
    (v skolem-const-decl "{vv: VectorN(n) | vv /= zero_vec(n)}"
     init_partial_def nil)
    (c skolem-const-decl "real" init_partial_def nil)
    (* const-decl "VectorN(length(v2))" matrices matrices)
    (Vector type-eq-decl nil matrices matrices)
    (der_f_is_init_partial formula-decl nil init_partial_def nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   shostak))
 (init_partial_additive_TCC1 0
  (init_partial_additive_TCC1-1 nil 3852043296
   ("" (skeep)
    (("" (typepred "v1+v2" "v1" "v2")
      (("" (assert)
        (("" (replace -4)
          (("" (replace -7)
            (("" (expand "max" -2 1) (("" (propax) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (/= const-decl "boolean" notequal nil)
    (n formal-const-decl "posnat" init_partial_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (VectorN type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vector type-eq-decl nil matrices matrices)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (init_partial_additive subtype
    "(matrices.+)(init_partial_def.v1, init_partial_def.v2)"
    "matrices.VectorN(init_partial_def.n)")))
 (init_partial_additive_TCC2 0
  (init_partial_additive_TCC2-1 nil 3852043296
   ("" (skeep)
    (("" (lemma "dd_partial_implies_dd")
      (("" (assert)
        (("" (typepred "D")
          (("" (typepred "v1")
            (("" (inst -7 "D" "v1") (("" (assert) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((n formal-const-decl "posnat" init_partial_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (dd_partial_implies_dd formula-decl nil derivative_domain_multi
     nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (Vector type-eq-decl nil matrices matrices)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (/= const-decl "boolean" notequal nil)
    (deriv_domain_partial? const-decl "bool" derivative_domain_multi
     nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (init_partial_additive subtype "init_partial_def.D"
    "(derivative_domain_multi[init_partial_def.n].deriv_domain?)")))
 (init_partial_additive_TCC3 0
  (init_partial_additive_TCC3-1 nil 3852043296
   ("" (lemma "frech_diff_imp_init_partial")
    (("" (skeep)
      (("" (inst -1 "v1+v2" "D" "f" "p")
        (("" (assert)
          (("" (flatten)
            (("" (assert)
              (("" (typepred "f")
                (("" (expand "differentiableD?" -1)
                  (("" (inst -1 "p") nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (differentiableD? const-decl "bool" differentiable_def nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain_partial? const-decl "bool" derivative_domain_multi
     nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (/= const-decl "boolean" notequal nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (Vector type-eq-decl nil matrices matrices)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" init_partial_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (frech_diff_imp_init_partial formula-decl nil init_partial_def
     nil))
   nil
   (init_partial_additive subtype "init_partial_def.p"
    "(init_partial_def.init_partial?((matrices.+)(init_partial_def.v1, init_partial_def.v2), init_partial_def.D, init_partial_def.f))")))
 (init_partial_additive_TCC4 0
  (init_partial_additive_TCC4-1 nil 3852043296
   ("" (skeep)
    (("" (typepred "v1+v2" "v1" "v2")
      (("" (replace -4)
        (("" (replace -7)
          (("" (assert)
            (("" (replace -2)
              (("" (expand "max" 1) (("" (propax) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (/= const-decl "boolean" notequal nil)
    (n formal-const-decl "posnat" init_partial_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (VectorN type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vector type-eq-decl nil matrices matrices)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (posint_max application-judgement "{k: posint | i <= k AND j <= k}"
     real_defs nil)
    (posrat_max application-judgement "{s: posrat | s >= q AND s >= r}"
     real_defs nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (init_partial_additive subtype
    "(matrices.+)(init_partial_def.v1, init_partial_def.v2)"
    "matrices.VectorN(init_partial_def.n)")))
 (init_partial_additive_TCC5 0
  (init_partial_additive_TCC5-1 nil 3852043296
   ("" (skeep)
    (("" (lemma "frech_diff_imp_init_partial")
      (("" (inst -1 "v1" "D" "f" "p")
        (("" (assert)
          (("" (typepred "f")
            (("" (expand "differentiableD?")
              (("" (inst -1 "p") nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((frech_diff_imp_init_partial formula-decl nil init_partial_def nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (differentiableD? const-decl "bool" differentiable_def nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (Vector type-eq-decl nil matrices matrices)
    (deriv_domain_partial? const-decl "bool" derivative_domain_multi
     nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (/= const-decl "boolean" notequal nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" init_partial_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (init_partial_additive subtype "init_partial_def.p"
    "(init_partial_def.init_partial?(init_partial_def.v1, init_partial_def.D, init_partial_def.f))")))
 (init_partial_additive_TCC6 0
  (init_partial_additive_TCC6-1 nil 3852043296
   ("" (skeep)
    (("" (lemma "frech_diff_imp_init_partial")
      (("" (inst -1 "v2" "D" "f" "p")
        (("" (assert)
          (("" (flatten)
            (("" (assert)
              (("" (typepred "f")
                (("" (expand "differentiableD?" -1)
                  (("" (inst -1 "p") nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((frech_diff_imp_init_partial formula-decl nil init_partial_def nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (differentiableD? const-decl "bool" differentiable_def nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (Vector type-eq-decl nil matrices matrices)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (/= const-decl "boolean" notequal nil)
    (deriv_domain_partial? const-decl "bool" derivative_domain_multi
     nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (n formal-const-decl "posnat" init_partial_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (init_partial_additive subtype "init_partial_def.p"
    "(init_partial_def.init_partial?(init_partial_def.v2, init_partial_def.D, init_partial_def.f))")))
 (init_partial_additive 0
  (init_partial_additive-1 nil 3852045361
   ("" (lemma "der_f_is_init_partial")
    (("" (skeep)
      (("" (case "v1=zero_vec(n)")
        (("1" (replace -1 1) (("1" (assert) nil nil)) nil)
         ("2" (case "v2=zero_vec(n)")
          (("1" (replace -1 2)
            (("1" (lemma "zero_id")
              (("1" (inst -1 "v1")
                (("1" (typepred "v1")
                  (("1" (hide -1)
                    (("1" (replace -1)
                      (("1" (replace -3)
                        (("1" (lemma "init_partial_zero")
                          (("1" (inst -1 "D" "f" "p")
                            (("1" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (assert)
            (("2" (case "v1+v2 = zero_vec(n)")
              (("1" (replace -1 3)
                (("1" (lemma "init_partial_zero")
                  (("1" (inst -1 "D" "f" "p")
                    (("1" (replace -1 3)
                      (("1" (lemma "add_zero_imp_eq")
                        (("1" (inst -1 "n" "v1" "v2")
                          (("1" (assert)
                            (("1" (replace -1 3)
                              (("1"
                                (lemma "init_partial_scalar")
                                (("1"
                                  (inst -1 "v2" "D" "f" "p" "-1")
                                  (("1" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (typepred "D")
                (("2" (expand "deriv_domain_partial?" -3)
                  (("2" (assert)
                    (("2" (hide -1 -2 -3)
                      (("2" (inst-cp -1 "v1+v2" "D" "f" "p")
                        (("2" (inst-cp -1 "v1" "D" "f" "p")
                          (("2" (inst -1 "v2" "D" "f" "p")
                            (("2" (replace -1 4 rl)
                              (("2"
                                (replace -2 4 rl)
                                (("2"
                                  (replace -3 4 rl)
                                  (("2"
                                    (lemma "dot_dist")
                                    (("2"
                                      (inst
                                       -1
                                       "der_f(D)(f)(p)"
                                       "v1"
                                       "v2")
                                      (("2"
                                        (assert)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (zero_id formula-decl nil vector_arithmetic nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (init_partial_zero formula-decl nil init_partial_def nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (differentiableD? const-decl "bool" differentiable_def nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (Vector type-eq-decl nil matrices matrices)
    (deriv_domain_partial? const-decl "bool" derivative_domain_multi
     nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (init_partial_scalar formula-decl nil init_partial_def nil)
    (add_zero_imp_eq formula-decl nil vector_arithmetic nil)
    (convergence_zero? const-decl "bool" vector_sequences nil)
    (NQ const-decl "bool" differentiable_def nil)
    (NQ const-decl "real" differentiable_def nil)
    (der_f const-decl "{gg: [(D) -> VectorN(n)] |
   FORALL (p: (D)):
     convergence_zero?(NQ(D, p), NQ(f, gg(p), p), zero_vec(n))}"
     differentiable_def nil)
    (p skolem-const-decl "(D)" init_partial_def nil)
    (f skolem-const-decl "(differentiableD?(D))" init_partial_def nil)
    (D skolem-const-decl "{DD: domain |
   (deriv_domain_partial?(v1)(DD) AND deriv_domain_partial?(v2)(DD)) AND
    deriv_domain_partial?(v1 + v2)(DD)}" init_partial_def nil)
    (v2 skolem-const-decl "VectorN(n)" init_partial_def nil)
    (v1 skolem-const-decl "{vv: VectorN(n) | vv /= zero_vec(n)}"
     init_partial_def nil)
    (dot_dist formula-decl nil vector_arithmetic nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n formal-const-decl "posnat" init_partial_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (/= const-decl "boolean" notequal nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (der_f_is_init_partial formula-decl nil init_partial_def nil))
   shostak))
 (init_partial_linear_TCC1 0
  (init_partial_linear_TCC1-1 nil 3852043296
   ("" (skeep)
    (("" (typepred "v1+c*v2" "v1" "c*v2" "v2")
      (("" (replace -7)
        (("" (replace -9)
          (("" (replace -4)
            (("" (expand "max" -2) (("" (propax) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((* const-decl "VectorN(length(v2))" matrices matrices)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (/= const-decl "boolean" notequal nil)
    (n formal-const-decl "posnat" init_partial_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (VectorN type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vector type-eq-decl nil matrices matrices)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (init_partial_linear subtype
    "(matrices.+)(init_partial_def.v1, matrices.*(init_partial_def.c, init_partial_def.v2))"
    "matrices.VectorN(init_partial_def.n)")))
 (init_partial_linear_TCC2 0
  (init_partial_linear_TCC2-1 nil 3852043296
   ("" (skeep)
    (("" (lemma "dd_partial_implies_dd")
      (("" (typepred "D")
        (("" (inst -4 "D" "v1") (("" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((n formal-const-decl "posnat" init_partial_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (dd_partial_implies_dd formula-decl nil derivative_domain_multi
     nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (VectorN type-eq-decl nil matrices matrices)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain_partial? const-decl "bool" derivative_domain_multi
     nil)
    (/= const-decl "boolean" notequal nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (Vector type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (* const-decl "VectorN(length(v2))" matrices matrices)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (init_partial_linear subtype "init_partial_def.D"
    "(derivative_domain_multi[init_partial_def.n].deriv_domain?)")))
 (init_partial_linear_TCC3 0
  (init_partial_linear_TCC3-1 nil 3852043296
   ("" (skeep)
    (("" (typepred "v1+c*v2" "v1" "c*v2" "v2")
      (("" (replace -7)
        (("" (replace -4)
          (("" (replace -9)
            (("" (expand "max " -2) (("" (propax) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((* const-decl "VectorN(length(v2))" matrices matrices)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (/= const-decl "boolean" notequal nil)
    (n formal-const-decl "posnat" init_partial_def nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (VectorN type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vector type-eq-decl nil matrices matrices)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (init_partial_linear subtype
    "(matrices.+)(init_partial_def.v1, matrices.*(init_partial_def.c, init_partial_def.v2))"
    "matrices.VectorN(init_partial_def.n)")))
 (init_partial_linear_TCC4 0
  (init_partial_linear_TCC5-1 nil 3852043296
   ("" (skeep)
    (("" (lemma "frech_diff_imp_init_partial")
      (("" (skeep)
        (("" (inst-cp -1 "v1" "D" "f" "x")
          (("" (inst -1 "v2" "D" "f" "x")
            (("" (assert)
              (("" (flatten)
                (("" (split 1)
                  (("1" (flatten)
                    (("1" (assert)
                      (("1" (typepred "f")
                        (("1" (expand "differentiableD?")
                          (("1" (inst -1 "x") nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (assert)
                      (("2" (assert)
                        (("2" (typepred "f")
                          (("2" (expand "differentiableD?")
                            (("2" (inst -1 "x") nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((frech_diff_imp_init_partial formula-decl nil init_partial_def nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n formal-const-decl "posnat" init_partial_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (/= const-decl "boolean" notequal nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain_partial? const-decl "bool" derivative_domain_multi
     nil)
    (Vector type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (* const-decl "VectorN(length(v2))" matrices matrices)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (differentiableD? const-decl "bool" differentiable_def nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (init_partial_linear subtype
    "real_fun_ops[(init_partial_def.init_partial?(init_partial_def.v2, init_partial_def.D, init_partial_def.f))].*(init_partial_def.c, init_partial_def.init_partial(init_partial_def.v2, init_partial_def.D, init_partial_def.f))"
    "[(init_partial_def.init_partial?(init_partial_def.v1, init_partial_def.D, init_partial_def.f)) -> real]")))
 (init_partial_linear_TCC5 0
  (init_partial_linear_TCC6-1 nil 3852043296
   ("" (skeep)
    (("" (lemma "frech_diff_imp_init_partial")
      (("" (skeep)
        (("" (inst-cp -1 "v1" "D" "f" "x")
          (("" (inst -1 "v1 + c*v2" "D" "f" "x")
            (("" (assert)
              (("" (flatten)
                (("" (split 1)
                  (("1" (flatten)
                    (("1" (assert)
                      (("1" (typepred "f")
                        (("1" (expand "differentiableD?")
                          (("1" (inst -1 "x") (("1" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (assert)
                      (("2" (typepred "f")
                        (("2" (expand "differentiableD?")
                          (("2" (inst -1 "x") nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((frech_diff_imp_init_partial formula-decl nil init_partial_def nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n formal-const-decl "posnat" init_partial_def nil)
    (VectorN type-eq-decl nil matrices matrices)
    (/= const-decl "boolean" notequal nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain_partial? const-decl "bool" derivative_domain_multi
     nil)
    (Vector type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (* const-decl "VectorN(length(v2))" matrices matrices)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (differentiableD? const-decl "bool" differentiable_def nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (init_partial_linear subtype
    "(real_fun_ops[(init_partial_def.init_partial?(init_partial_def.v1, init_partial_def.D, init_partial_def.f))].+)(init_partial_def.init_partial(init_partial_def.v1, init_partial_def.D, init_partial_def.f), real_fun_ops[(init_partial_def.init_partial?(init_partial_def.v2, init_partial_def.D, init_partial_def.f))].*(init_partial_def.c, init_partial_def.init_partial(init_partial_def.v2, init_partial_def.D, init_partial_def.f)))"
    "[(init_partial_def.init_partial?((matrices.+)(init_partial_def.v1, matrices.*(init_partial_def.c, init_partial_def.v2)), init_partial_def.D, init_partial_def.f)) -> real]")))
 (init_partial_linear 0
  (init_partial_linear-1 nil 3852046072
   ("" (skeep)
    (("" (lemma "init_partial_additive")
      (("" (inst -1 "v1" "c*v2" "D" "f" "_")
        (("1" (with-tccs (decompose-equality 1))
          (("1" (inst -1 "x!1")
            (("1" (lemma "init_partial_scalar")
              (("1" (inst -1 "v2" "D" "f" "x!1" "c")
                (("1" (assert)
                  (("1" (replace -2 1)
                    (("1" (replace -1 1 rl)
                      (("1" (assert)
                        (("1" (expand "+" 1 2)
                          (("1" (assert)
                            (("1" (expand "*" 1 2)
                              (("1" (propax) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (typepred "v2")
                  (("2" (lemma "init_partial_zero")
                    (("2" (inst -1 "D" "f" "_")
                      (("2" (inst -1 "x!1")
                        (("2" (case "NOT v2 = zero_vec(n)")
                          (("1" (assert) nil nil)
                           ("2" (replace -1)
                            (("2" (assert)
                              (("2"
                                (expand "*" 2 2)
                                (("2"
                                  (assert)
                                  (("2"
                                    (expand "+" 2 2)
                                    (("2"
                                      (replace -2 2)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (case
                                           "v1 + c * zero_vec(n) = v1")
                                          (("1" (assert) nil nil)
                                           ("2"
                                            (hide 3)
                                            (("2"
                                              (lemma "scal_zero")
                                              (("2"
                                                (inst -1 "c" "n")
                                                (("2"
                                                  (replace -1 1)
                                                  (("2"
                                                    (lemma "zero_id")
                                                    (("2"
                                                      (inst -1 "v1")
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (typepred "v2")
          (("2" (typepred "D")
            (("2" (typepred "c")
              (("2" (lemma "dd_partial_implies_scal_partial")
                (("2" (inst?) (("2" (assert) nil nil)) nil)) nil))
              nil))
            nil))
          nil)
         ("3" (typepred "c*v2" "v2")
          (("3" (hide -1 -3) (("3" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((init_partial_additive formula-decl nil init_partial_def nil)
    (dd_partial_implies_scal_partial formula-decl nil
     derivative_domain_multi nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (IFF const-decl "[bool, bool -> bool]" booleans nil)
    (init_partial? const-decl "bool" init_partial_def nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (init_partial const-decl "real" init_partial_def nil)
    (+ const-decl "[T -> real]" real_fun_ops reals)
    (* const-decl "[T -> real]" real_fun_ops reals)
    (init_partial_scalar formula-decl nil init_partial_def nil)
    (scal_zero formula-decl nil vector_arithmetic nil)
    (zero_id formula-decl nil vector_arithmetic nil)
    (init_partial_zero formula-decl nil init_partial_def nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (differentiableD? const-decl "bool" differentiable_def nil)
    (deriv_domain? const-decl "bool" derivative_domain_multi nil)
    (vec2real_f type-eq-decl nil domain_vec2real_def nil)
    (domain type-eq-decl nil domain_vec2real_def nil)
    (deriv_domain_partial? const-decl "bool" derivative_domain_multi
     nil)
    (/= const-decl "boolean" notequal nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (v1 skolem-const-decl "{vv: VectorN(n) | vv /= zero_vec(n)}"
     init_partial_def nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (D skolem-const-decl "{DD: domain |
   (deriv_domain_partial?(v1)(DD) AND deriv_domain_partial?(v2)(DD)) AND
    deriv_domain_partial?(v1 + c * v2)(DD)}" init_partial_def nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (list type-decl nil list_adt nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (Vector type-eq-decl nil matrices matrices)
    (VectorN type-eq-decl nil matrices matrices)
    (* const-decl "VectorN(length(v2))" matrices matrices)
    (c skolem-const-decl "real" init_partial_def nil)
    (nonneg_int nonempty-type-eq-decl nil integers nil)
    (> const-decl "bool" reals nil)
    (posnat nonempty-type-eq-decl nil integers nil)
    (n formal-const-decl "posnat" init_partial_def nil)
    (v2 skolem-const-decl "VectorN(n)" init_partial_def nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   shostak)))