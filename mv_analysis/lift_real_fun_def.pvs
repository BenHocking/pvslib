lift_real_fun_def  % HEY
		: THEORY

%	              Aug 2018 JTS
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%|   Life a real function to a   |%
%|   function from VectorN(1) to |%
%|   reals. Related concepts of  |%
%|   differentiability between   |%
%|   the two formulations        |%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%-----     %
  BEGIN
%     -----%

%--------------------------------------------
%% Importing chain_rule_multi to have the chain
%  rule
%% Importing convergence_vec2vec to have
%  derivative of function from Rn -> Rm
%--------------------------------------------

IMPORTING chain_rule_multi
IMPORTING convergence_vec2vec

%--------------------------------------------
%% Define real domain and the lifted domain
%--------------------------------------------

real_dom: TYPE = [real -> bool]
lift_rd(d:real_dom): domain[1] =
LAMBDA(x:VectorN(1)): d(car(x))

%--------------------------------------------
%% deriv domain in real is same as deriv
%  domain in VectorN(1)
%--------------------------------------------

dd_lift_dd: LEMMA
FORALL(d:real_dom):
deriv_domain?[(d)]
IFF
deriv_domain?[1](lift_rd(d))

%--------------------------------------------
%% Lift a function with real domain to
%  vector domain
%--------------------------------------------

lift_re(d:real_dom,f:[(d)->real]): vec2vec[1](1) = 
LAMBDA(v:VectorN(1)):
IF d(car(v)) THEN (: f(car(v)) :)
ELSE (: 0 :)
ENDIF

%--------------------------------------------
%% Equivalence of differentiability 
%--------------------------------------------

lift_diff: LEMMA
 FORALL(d:{dd:real_dom| deriv_domain?[(dd)]},
 x:(d), f:[(d)->real]):
   derivable?[(d)](f, x)
   IFF
   differentiable?[1](1, lift_rd(d), lift_re(d,f), (: x :) )

lift_der: LEMMA
 FORALL(d:{dd:real_dom| deriv_domain?[(dd)]},
 x:(d), f:[(d)->real]):
( derivable?[(d)](f,x)
  AND
  deriv_domain_e_partial?[1](lift_rd(d)))
 IMPLIES
 (: (: deriv(f,x) :) :)  =
 der_f[1](1,lift_rd(d), (: x :))( lift_re(d,f))

%--------------------------------------------
%% Lift a vector valued function with a real
%  domain to have a vector domain
%--------------------------------------------

liftl(k:nat,d:real_dom, f:[(d)->VectorN(k)]):
 vec2vec[1](k) =
 LAMBDA(v:VectorN(1)):
 IF d(car(v)) THEN  f(car(v)) 
 ELSE zero_vec(k)
 ENDIF
 
%--------------------------------------------
%% Lift a real valued function with vector
%  domain to vector to vector valued function
%--------------------------------------------

liftr(k:posnat, D:domain[k], f:[VectorN(k)->real]): vec2vec[k](1) =
LAMBDA(v:VectorN(k)):
IF D(v) THEN  (: f(v) :)
ELSE zero_vec(1)
ENDIF

%--------------------------------------------
%% Equivalence of differentiability
%--------------------------------------------

lift_diff_right: LEMMA
     FORALL(k:posnat,D:(deriv_domain?[k]),f:vec2real_f[k],p:(D)):
     differentiable?[k](D, f, p)
     IFF
     differentiable?[k](1,D,liftr(k,D,f),p)

lift_der_right: LEMMA
      FORALL(k:posnat,D:(deriv_domain_e_partial?[k]),f:vec2real_f[k],p:(D)):
      differentiable?[k](D,f,p) IMPLIES
      (: der_f[k](D,p)(f) :) = der_f[k](1,D,p)(liftr(k,D,f))

%--------------------------------------------
%% Two functions same on a domain
%  differentiability can be deduced
%--------------------------------------------


same_on_D_same_diff: LEMMA
     FORALL(k:posnat,D:(deriv_domain?[k]),p:(D),f,g:vec2vec[k](1)):
     ((FORALL(x:(D)): f(x) = g(x))
     AND
      differentiable?[k](1,D,f,p))
      IMPLIES
      differentiable?[k](1,D,g,p)

same_on_D_same_der: LEMMA
     FORALL(k:posnat,D:(deriv_domain_e_partial?[k]),p:(D),f,g:vec2vec[k](1)):
     ((FORALL(x:(D)): f(x) = g(x))
     AND
      differentiable?[k](1,D,f,p))
      IMPLIES
      der_f[k](1,D,p)(f) = der_f[k](1,D,p)(g)

  %~~~ The End     ~~~%
  END lift_real_fun_def
