(mat_vec_mult
 (MN_full 0
  (MN_full-1 nil 3797859363
   ("" (skeep)
    (("" (typepred "A")
      (("" (hide -1)
        (("" (case "m=0")
          (("1" (grind) nil nil)
           ("2" (skeep)
            (("2" (inst-cp -2 "i")
              (("2" (inst-cp -2 "j") (("2" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((MatrixMN type-eq-decl nil matrices matrices)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Matrix type-eq-decl nil matrices matrices)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil (MN_full subtype "mat_vec_mult.A" "FullMatrix")))
 (MN_rc 0
  (MN_rc-1 nil 3797860368
   ("" (skeep)
    (("" (typepred "A")
      (("" (expand "rows")
        (("" (assert)
          (("" (lemma "full_matrix_columns")
            (("" (inst -1 "A")
              (("1" (split -1)
                (("1" (flatten)
                  (("1" (assert)
                    (("1" (expand "length" 2) (("1" (propax) nil nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert)
                  (("2" (inst-cp -4 "0")
                    (("1" (expand "nth" -5 1) (("1" (assert) nil nil))
                      nil)
                     ("2" (assert)
                      (("2" (typepred "A")
                        (("2" (hide -1)
                          (("2" (case "null?(A)")
                            (("1" (assert)
                              (("1"
                                (with-tccs (typepred "length(car(A))"))
                                (("1"
                                  (with-tccs (typepred "car(A)"))
                                  (("1"
                                    (hide -1)
                                    (("1"
                                      (with-tccs (typepred "car(A)"))
                                      (("1"
                                        (hide -1)
                                        (("1" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (grind) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (flatten)
                (("2" (assert)
                  (("2" (skeep)
                    (("2" (inst-cp -3 "i")
                      (("2" (assert)
                        (("2" (inst -3 "j") (("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((MatrixMN type-eq-decl nil matrices matrices)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Matrix type-eq-decl nil matrices matrices)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (A skolem-const-decl "MatrixMN(m, n)" mat_vec_mult nil)
    (n skolem-const-decl "nat" mat_vec_mult nil)
    (m skolem-const-decl "nat" mat_vec_mult nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (FullMatrix type-eq-decl nil matrices matrices)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (columns def-decl "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}" matrices
     matrices)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (full_matrix_columns formula-decl nil matrices matrices)
    (rows const-decl "nat" matrices matrices))
   shostak))
 (entry_extensionality 0
  (entry_extensionality-1 nil 3797795522
   ("" (skeep)
    (("" (split 1)
      (("1" (flatten) (("1" (assert) nil nil)) nil)
       ("2" (flatten)
        (("2" (lemma "list_extensionality[list[real]]")
          (("2" (inst -1 "A" "B")
            (("2" (assert)
              (("2" (expand "rows" -2)
                (("2" (assert)
                  (("2" (skeep)
                    (("2" (lemma "list_extensionality[real]")
                      (("2" (inst -1 "nth(A,n)" "nth(B,n)")
                        (("2" (assert)
                          (("2" (split 1)
                            (("1" (typepred "A" "B")
                              (("1"
                                (lemma "full_matrix_columns")
                                (("1"
                                  (inst-cp -1 "A")
                                  (("1"
                                    (inst -1 "B")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (hide -3)
                                        (("1"
                                          (hide -4)
                                          (("1"
                                            (case "null?(A)")
                                            (("1"
                                              (assert)
                                              (("1" (grind) nil nil))
                                              nil)
                                             ("2"
                                              (case "null?(B)")
                                              (("1" (grind) nil nil)
                                               ("2"
                                                (assert)
                                                (("2"
                                                  (inst-cp -3 "0" "n")
                                                  (("2"
                                                    (inst-cp
                                                     -5
                                                     "0"
                                                     "n")
                                                    (("2"
                                                      (expand
                                                       "nth"
                                                       -6
                                                       1)
                                                      (("2"
                                                        (expand
                                                         "nth"
                                                         -4
                                                         1)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (skeep)
                              (("2"
                                (expand "entry" -3)
                                (("2"
                                  (inst -3 "n" "n_1")
                                  (("1"
                                    (expand "row" -3)
                                    (("1"
                                      (assert)
                                      (("1"
                                        (expand "access" -3)
                                        (("1"
                                          (typepred "n_1")
                                          (("1"
                                            (lemma
                                             "full_matrix_columns")
                                            (("1"
                                              (inst-cp -1 "A")
                                              (("1"
                                                (inst-cp -1 "B")
                                                (("1"
                                                  (hide -1)
                                                  (("1"
                                                    (typepred "A" "B")
                                                    (("1"
                                                      (case "null?(A)")
                                                      (("1"
                                                        (grind)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (case
                                                         "null?(B)")
                                                        (("1"
                                                          (grind)
                                                          nil
                                                          nil)
                                                         ("2"
                                                          (assert)
                                                          (("2"
                                                            (hide
                                                             -1
                                                             -3)
                                                            (("2"
                                                              (inst
                                                               -1
                                                               "0"
                                                               "n")
                                                              (("2"
                                                                (inst
                                                                 -2
                                                                 "0"
                                                                 "n")
                                                                (("2"
                                                                  (expand
                                                                   "nth"
                                                                   -1
                                                                   1)
                                                                  (("2"
                                                                    (expand
                                                                     "nth"
                                                                     -2
                                                                     1)
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (typepred "n_1")
                                    (("2"
                                      (typepred "A" "B")
                                      (("2"
                                        (lemma "full_matrix_columns")
                                        (("2"
                                          (inst-cp -1 "A")
                                          (("2"
                                            (inst-cp -1 "B")
                                            (("2"
                                              (hide -4 -6)
                                              (("2"
                                                (hide -1)
                                                (("2"
                                                  (case "null?(B)")
                                                  (("1"
                                                    (grind)
                                                    nil
                                                    nil)
                                                   ("2"
                                                    (case "null?(A)")
                                                    (("1"
                                                      (grind)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      (("2"
                                                        (inst-cp
                                                         -4
                                                         "0"
                                                         "n")
                                                        (("2"
                                                          (inst-cp
                                                           -3
                                                           "0"
                                                           "n")
                                                          (("2"
                                                            (hide
                                                             -3
                                                             -5)
                                                            (("2"
                                                              (expand
                                                               "nth"
                                                               -3
                                                               1)
                                                              (("2"
                                                                (expand
                                                                 "nth"
                                                                 -4
                                                                 1)
                                                                (("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (typepred "n")
                                    (("3"
                                      (expand "rows" 1)
                                      (("3" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (list_extensionality formula-decl nil more_list_props structures)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (A skolem-const-decl "FullMatrix" mat_vec_mult nil)
    (n skolem-const-decl "below(length(A))" mat_vec_mult nil)
    (B skolem-const-decl "FullMatrix" mat_vec_mult nil)
    (<= const-decl "bool" reals nil)
    (n_1 skolem-const-decl "below(length(nth(A, n)))" mat_vec_mult nil)
    (access const-decl "real" matrices matrices)
    (row const-decl "Vector" matrices matrices)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (entry const-decl "real" matrices matrices)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (columns def-decl "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}" matrices
     matrices)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (full_matrix_columns formula-decl nil matrices matrices)
    (rows const-decl "nat" matrices matrices)
    (FullMatrix type-eq-decl nil matrices matrices)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Matrix type-eq-decl nil matrices matrices))
   shostak))
 (row_extensionality 0
  (row_extensionality-1 nil 3797796244
   ("" (skeep)
    (("" (split 1)
      (("1" (flatten) (("1" (assert) nil nil)) nil)
       ("2" (flatten)
        (("2" (assert)
          (("2" (lemma "list_extensionality[list[real]]")
            (("2" (inst -1 "A" "B")
              (("2" (assert)
                (("2" (expand "rows")
                  (("2" (assert)
                    (("2" (skeep)
                      (("2" (inst -3 "n")
                        (("1" (expand "row") (("1" (propax) nil nil))
                          nil)
                         ("2" (assert)
                          (("2" (typepred "n")
                            (("2" (expand "rows")
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Matrix type-eq-decl nil matrices matrices)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (FullMatrix type-eq-decl nil matrices matrices)
    (rows const-decl "nat" matrices matrices)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (row const-decl "Vector" matrices matrices)
    (A skolem-const-decl "FullMatrix" mat_vec_mult nil)
    (n skolem-const-decl "below(length(A))" mat_vec_mult nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (B skolem-const-decl "FullMatrix" mat_vec_mult nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (list_extensionality formula-decl nil more_list_props structures)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil))
   shostak))
 (column_extensionality 0
  (column_extensionality-1 nil 3797796416
   ("" (skeep)
    (("" (split 1)
      (("1" (flatten) (("1" (assert) nil nil)) nil)
       ("2" (flatten)
        (("2" (lemma "entry_extensionality")
          (("2" (inst -1 "A" "B")
            (("2" (assert)
              (("2" (skeep)
                (("2" (expand "entry" 1)
                  (("2" (lemma " access_row")
                    (("2" (lemma "access_col")
                      (("2" (inst-cp -2 "A" "i" "j")
                        (("2" (inst-cp -2 "B" "i" "j")
                          (("2" (replace -3)
                            (("2" (replace -4)
                              (("2"
                                (inst-cp -1 "A" "i" "j")
                                (("2"
                                  (inst-cp -1 "B" "i" "j")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (replace -2 1 rl)
                                      (("2"
                                        (replace -3 1 rl)
                                        (("2"
                                          (inst -9 "j")
                                          (("2"
                                            (lemma
                                             "list_extensionality[real]")
                                            (("2"
                                              (inst
                                               -1
                                               "col(A)(j)"
                                               "col(B)(j)")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((entry_extensionality formula-decl nil mat_vec_mult nil)
    (entry const-decl "real" matrices matrices)
    (access_col formula-decl nil matrices matrices)
    (col def-decl "VectorN(rows(M))" matrices matrices)
    (VectorN type-eq-decl nil matrices matrices)
    (list_extensionality formula-decl nil more_list_props structures)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (columns def-decl "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}" matrices
     matrices)
    (<= const-decl "bool" reals nil)
    (rows const-decl "nat" matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (access_row formula-decl nil matrices matrices)
    (FullMatrix type-eq-decl nil matrices matrices)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (real nonempty-type-from-decl nil reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Matrix type-eq-decl nil matrices matrices)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (cdr_columns 0
  (cdr_columns-1 nil 3797716406
   ("" (skeep)
    (("" (lemma "full_matrix_columns")
      (("" (inst-cp -1 "A")
        (("" (inst -1 "cdr(A)")
          (("1" (typepred "A")
            (("1" (assert)
              (("1" (replace -5)
                (("1" (replace -6)
                  (("1" (inst -2 "0" "1")
                    (("1" (expand "nth" -2)
                      (("1" (assert)
                        (("1" (expand "nth" -2)
                          (("1" (propax) nil nil)) nil))
                        nil))
                      nil)
                     ("2" (assert)
                      (("2" (expand "length" 1)
                        (("2" (expand "length" 1)
                          (("2" (assert) nil nil)) nil))
                        nil))
                      nil)
                     ("3" (expand "length" 1)
                      (("3" (expand "length" 1)
                        (("3" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (skeep)
            (("2" (typepred "A")
              (("2" (typepred "A")
                (("2" (assert)
                  (("2" (hide -1)
                    (("2" (inst -1 "i+1" "j+1")
                      (("1" (expand "nth" -1) (("1" (propax) nil nil))
                        nil)
                       ("2" (expand "length" 1)
                        (("2" (assert) nil nil)) nil)
                       ("3" (expand "length" 1)
                        (("3" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((full_matrix_columns formula-decl nil matrices matrices)
    (A skolem-const-decl
     "{AA: FullMatrix | cons?(AA) AND cons?(cdr(AA))}" mat_vec_mult
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (i skolem-const-decl "below(length(cdr(A)))" mat_vec_mult nil)
    (j skolem-const-decl "below(length(cdr(A)))" mat_vec_mult nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (FullMatrix type-eq-decl nil matrices matrices)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (real nonempty-type-from-decl nil reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Matrix type-eq-decl nil matrices matrices)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil))
   shostak))
 (cdr_columns_full 0
  (cdr_columns_full-1 nil 3797717028
   ("" (skeep*)
    (("" (typepred "A")
      (("" (assert)
        (("" (inst -2 "i+1" "j+1")
          (("1" (assert)
            (("1" (expand "nth" -2) (("1" (propax) nil nil)) nil)) nil)
           ("2" (assert)
            (("2" (expand "length" 1) (("2" (assert) nil nil)) nil))
            nil)
           ("3" (expand "length" 1) (("3" (assert) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (FullMatrix type-eq-decl nil matrices matrices)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (real nonempty-type-from-decl nil reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Matrix type-eq-decl nil matrices matrices)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (i skolem-const-decl "below(length(cdr(A)))" mat_vec_mult nil)
    (A skolem-const-decl "{AA: FullMatrix | cons?(AA)}" mat_vec_mult
     nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (j skolem-const-decl "below(length(cdr(A)))" mat_vec_mult nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil))
   shostak))
 (matvec_TCC1 0
  (matvec_TCC1-1 nil 3795949763 ("" (subtype-tcc) nil nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Matrix type-eq-decl nil matrices matrices)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (MatrixMN type-eq-decl nil matrices matrices)
    (VectorN type-eq-decl nil matrices matrices)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil
   (matvec subtype "list_adt[real].null"
    "matrices.VectorN(mat_vec_mult.m)")))
 (matvec_TCC2 0
  (matvec_TCC2-1 nil 3795949763
   ("" (skeep) (("" (typepred "A") (("" (grind) nil nil)) nil)) nil)
   ((MatrixMN type-eq-decl nil matrices matrices)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Matrix type-eq-decl nil matrices matrices)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (matvec subtype "mat_vec_mult.A" "(list_adt[list[real]].cons?)")))
 (matvec_TCC3 0
  (matvec_TCC3-1 nil 3795949763 ("" (subtype-tcc) nil nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Matrix type-eq-decl nil matrices matrices)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (MatrixMN type-eq-decl nil matrices matrices)
    (VectorN type-eq-decl nil matrices matrices)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil))
   nil (matvec subtype "(number_fields.-)(mat_vec_mult.m, 1)" "nat")))
 (matvec_TCC4 0
  (matvec_TCC4-1 nil 3795949763
   ("" (skeep*)
    (("" (typepred "A")
      (("" (split 2)
        (("1" (expand "length" -2)
          (("1" (assert)
            (("1" (lift-if -2)
              (("1" (split -2)
                (("1" (flatten) (("1" (assert) nil nil)) nil)
                 ("2" (flatten) (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (skeep)
          (("2" (inst -3 "i+1")
            (("1" (assert)
              (("1" (expand "nth" -3) (("1" (propax) nil nil)) nil))
              nil)
             ("2" (assert)
              (("2" (typepred "i")
                (("2" (expand "length" 1 1)
                  (("2" (lift-if 1)
                    (("2" (split 1)
                      (("1" (expand "length" -3)
                        (("1" (flatten) (("1" (assert) nil nil)) nil))
                        nil)
                       ("2" (flatten) (("2" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((MatrixMN type-eq-decl nil matrices matrices)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Matrix type-eq-decl nil matrices matrices)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (m skolem-const-decl "nat" mat_vec_mult nil)
    (n skolem-const-decl "nat" mat_vec_mult nil)
    (A skolem-const-decl "MatrixMN(m, n)" mat_vec_mult nil)
    (i skolem-const-decl "below(length(cdr(A)))" mat_vec_mult nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (matvec subtype "list_adt[list[real]].cdr(mat_vec_mult.A)"
    "matrices.MatrixMN((number_fields.-)(mat_vec_mult.m, 1), mat_vec_mult.n)")))
 (matvec_TCC5 0
  (matvec_TCC5-1 nil 3797714275 ("" (termination-tcc) nil nil) nil nil
   (matvec termination
    "mat_vec_mult.matvec((number_fields.-)(mat_vec_mult.m, 1), mat_vec_mult.n, list_adt[list[real]].cdr(mat_vec_mult.A), mat_vec_mult.v)"
    "nil")))
 (matvec_TCC6 0
  (matvec_TCC6-1 nil 3797714275
   ("" (skeep) (("" (expand "length" 2 1) (("" (assert) nil nil)) nil))
    nil)
   ((length def-decl "nat" list_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (matvec subtype
    "list_adt[real].cons(matrices.*(list_adt[list[real]].car(mat_vec_mult.A), mat_vec_mult.v), mat_vec_mult.matvec((number_fields.-)(mat_vec_mult.m, 1), mat_vec_mult.n, list_adt[list[real]].cdr(mat_vec_mult.A), mat_vec_mult.v))"
    "matrices.VectorN(mat_vec_mult.m)")))
 (times_TCC1 0
  (times_TCC1-1 nil 3797714575
   ("" (skeep)
    (("" (expand "rows" 1)
      (("" (skeep)
        (("" (typepred "A")
          (("" (typepred "i")
            (("" (split -3)
              (("1" (expand "length" -2) (("1" (assert) nil nil)) nil)
               ("2" (lemma "full_matrix_columns")
                (("2" (inst -1 "A")
                  (("2" (assert)
                    (("2" (split -1)
                      (("1" (flatten)
                        (("1" (expand "length" -4)
                          (("1" (assert) nil nil)) nil))
                        nil)
                       ("2" (replace -1 1)
                        (("2" (inst -2 "0" "i")
                          (("2" (expand "nth" -2 1)
                            (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((rows const-decl "nat" matrices matrices)
    (FullMatrix type-eq-decl nil matrices matrices)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (real nonempty-type-from-decl nil reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Matrix type-eq-decl nil matrices matrices)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (full_matrix_columns formula-decl nil matrices matrices)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (times subtype "mat_vec_mult.A"
    "matrices.MatrixMN(matrices.rows(mat_vec_mult.A), matrices.columns(mat_vec_mult.A))")))
 (matv_test_TCC1 0
  (matv_test_TCC1-1 nil 3797845766
   ("" (split 1)
    (("1" (grind) nil nil)
     ("2" (skeep)
      (("2" (typepred "i")
        (("2" (case "i=0")
          (("1" (grind) nil nil)
           ("2" (case "i=1")
            (("1" (grind) nil nil)
             ("2" (case "i=2")
              (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((= const-decl "[T, T -> boolean]" equalities nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nth def-decl "T" list_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (matv_test subtype
    "(: list_adt[real].null, list_adt[real].null, list_adt[real].null :)"
    "matrices.MatrixMN(3, 0)")))
 (matv_test 0
  (matv_test-1 nil 3797846145 ("" (grind) nil nil)
   ((dot def-decl "real" matrices matrices)
    (* const-decl "real" matrices matrices)
    (matvec def-decl "VectorN(m)" mat_vec_mult nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   shostak))
 (matv_nth_TCC1 0
  (matv_nth_TCC1-1 nil 3797714857 ("" (subtype-tcc) nil nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (Matrix type-eq-decl nil matrices matrices)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (FullMatrix type-eq-decl nil matrices matrices)
    (<= const-decl "bool" reals nil)
    (columns def-decl "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}" matrices
     matrices)
    (VectorN type-eq-decl nil matrices matrices)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (rows const-decl "nat" matrices matrices)
    (* const-decl "VectorN(rows(A))" mat_vec_mult nil))
   nil
   (matv_nth subtype "mat_vec_mult.i" "below[length[real](A * v)]")))
 (matv_nth 0
  (matv_nth-1 nil 3797714956
   (""
    (case " FORALL (m:nat, A: FullMatrix, v: VectorN(columns(A)), i: below(rows(A))):
       length(A) = m IMPLIES  nth(A * v, i) = row(A)(i) * v")
    (("1" (skeep) (("1" (inst -1 "length(A)" "A" "v" "i") nil nil))
      nil)
     ("2" (hide 2)
      (("2" (induct "m")
        (("1" (skeep)
          (("1" (typepred "i")
            (("1" (expand "rows" -1) (("1" (assert) nil nil)) nil))
            nil))
          nil)
         ("2" (skeep)
          (("2" (skeep)
            (("2" (case "i=0")
              (("1" (expand "row" 1)
                (("1" (assert)
                  (("1" (expand "*" 1 1)
                    (("1" (expand "matvec" 1 1)
                      (("1" (expand "nth" 1 1)
                        (("1" (assert)
                          (("1" (expand "nth" 1)
                            (("1" (propax) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (expand "nth" 2)
                (("2" (expand "row" 2)
                  (("2" (assert)
                    (("2" (typepred "i")
                      (("2" (expand "rows" -1)
                        (("2" (assert)
                          (("2" (expand "nth" 2 2)
                            (("2" (inst -2 "cdr(A)" "v" "i-1")
                              (("1"
                                (assert)
                                (("1"
                                  (expand "length" -3)
                                  (("1"
                                    (lift-if -3)
                                    (("1"
                                      (split -3)
                                      (("1"
                                        (flatten)
                                        (("1" (assert) nil nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (expand "row" -3)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (expand "*" 3)
                                                (("2"
                                                  (expand "matvec" 3 1)
                                                  (("2"
                                                    (expand "*" -3)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (expand
                                                         "rows"
                                                         3
                                                         1)
                                                        (("2"
                                                          (expand
                                                           "rows"
                                                           -3
                                                           1)
                                                          (("2"
                                                            (expand
                                                             "length"
                                                             3
                                                             1)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (lemma
                                                                 "full_matrix_columns")
                                                                (("2"
                                                                  (inst-cp
                                                                   -1
                                                                   "A")
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (replace
                                                                       -2
                                                                       3)
                                                                      (("2"
                                                                        (inst
                                                                         -1
                                                                         "cdr(A)")
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (split
                                                                             -1)
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (expand
                                                                                 "length"
                                                                                 -5)
                                                                                (("1"
                                                                                  (expand
                                                                                   "length"
                                                                                   -5)
                                                                                  (("1"
                                                                                    (assert)
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (typepred
                                                                                 "A")
                                                                                (("2"
                                                                                  (split
                                                                                   -2)
                                                                                  (("1"
                                                                                    (propax)
                                                                                    nil
                                                                                    nil)
                                                                                   ("2"
                                                                                    (inst
                                                                                     -1
                                                                                     "0"
                                                                                     "1")
                                                                                    (("2"
                                                                                      (expand
                                                                                       "nth"
                                                                                       -1)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "nth"
                                                                                         -1)
                                                                                        (("2"
                                                                                          (assert)
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (flatten)
                                                                          (("2"
                                                                            (skeep)
                                                                            (("2"
                                                                              (typepred
                                                                               "A")
                                                                              (("2"
                                                                                (split
                                                                                 -2)
                                                                                (("1"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil)
                                                                                 ("2"
                                                                                  (inst
                                                                                   -1
                                                                                   "i!1+1"
                                                                                   "j!1+1")
                                                                                  (("2"
                                                                                    (expand
                                                                                     "nth"
                                                                                     -1)
                                                                                    (("2"
                                                                                      (propax)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (typepred "i")
                                (("2"
                                  (expand "rows")
                                  (("2"
                                    (expand "length " -1)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (lift-if -1)
                                        (("2"
                                          (split -1)
                                          (("1"
                                            (flatten)
                                            (("1"
                                              (expand "length" -3)
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (flatten)
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (typepred "i")
                                (("3"
                                  (expand "rows" -1)
                                  (("3"
                                    (assert)
                                    (("3"
                                      (typepred "v")
                                      (("3"
                                        (lemma "full_matrix_columns")
                                        (("3"
                                          (inst-cp -1 "A")
                                          (("3"
                                            (inst-cp -1 "cdr(A)")
                                            (("1"
                                              (hide -1)
                                              (("1"
                                                (split -2)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (expand "length")
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (split -2)
                                                  (("1"
                                                    (expand
                                                     "length"
                                                     -5)
                                                    (("1"
                                                      (lift-if)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (split -6)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (expand
                                                               "length"
                                                               -8)
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (flatten)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (expand
                                                                 "length"
                                                                 -1)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (typepred "A")
                                                    (("2"
                                                      (split -2)
                                                      (("1"
                                                        (grind)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (inst
                                                         -1
                                                         "0"
                                                         "1")
                                                        (("2"
                                                          (expand
                                                           "nth"
                                                           -1)
                                                          (("2"
                                                            (expand
                                                             "nth"
                                                             -1)
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (flatten)
                                              (("2"
                                                (skeep)
                                                (("2"
                                                  (typepred "A")
                                                  (("2"
                                                    (split -2)
                                                    (("1"
                                                      (expand
                                                       "length"
                                                       -6)
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (inst
                                                       -1
                                                       "i!1+1"
                                                       "j!1+1")
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (expand
                                                           "nth"
                                                           -1)
                                                          (("1"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (expand
                                                         "length"
                                                         1
                                                         1)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (lift-if 1)
                                                            (("2"
                                                              (split 1)
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (expand
                                                                   "length"
                                                                   -)
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (flatten)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (typepred
                                                         "i!1")
                                                        (("3"
                                                          (expand
                                                           "length"
                                                           1)
                                                          (("3"
                                                            (lift-if 1)
                                                            (("3"
                                                              (split 1)
                                                              (("1"
                                                                (flatten)
                                                                (("1"
                                                                  (expand
                                                                   "length"
                                                                   -7)
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (flatten)
                                                                (("2"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("4"
                                (flatten)
                                (("4"
                                  (skeep)
                                  (("4"
                                    (typepred "A")
                                    (("4"
                                      (case "null?(A)")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "length" -5)
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (assert)
                                        (("2"
                                          (inst -2 "i!1+1" "j!1+1")
                                          (("1"
                                            (expand "nth" -2)
                                            (("1" (propax) nil nil))
                                            nil)
                                           ("2"
                                            (expand "length" 1)
                                            (("2" (assert) nil nil))
                                            nil)
                                           ("3"
                                            (expand "length" 1)
                                            (("3" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (skeep) (("3" (assert) nil nil)) nil))
        nil))
      nil)
     ("3" (skeep) (("3" (assert) nil nil)) nil))
    nil)
   ((real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (matvec def-decl "VectorN(m)" mat_vec_mult nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (A skolem-const-decl "FullMatrix" mat_vec_mult nil)
    (v skolem-const-decl "VectorN(columns(A))" mat_vec_mult nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (i skolem-const-decl "below(rows(A))" mat_vec_mult nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (full_matrix_columns formula-decl nil matrices matrices)
    (i!1 skolem-const-decl "below(length(cdr(A)))" mat_vec_mult nil)
    (j!1 skolem-const-decl "below(length(cdr(A)))" mat_vec_mult nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (i!1 skolem-const-decl "below(length(cdr(A)))" mat_vec_mult nil)
    (j!1 skolem-const-decl "below(length(cdr(A)))" mat_vec_mult nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Matrix type-eq-decl nil matrices matrices)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (FullMatrix type-eq-decl nil matrices matrices)
    (<= const-decl "bool" reals nil)
    (columns def-decl "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}" matrices
     matrices)
    (VectorN type-eq-decl nil matrices matrices)
    (rows const-decl "nat" matrices matrices)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (* const-decl "VectorN(rows(A))" mat_vec_mult nil)
    (Vector type-eq-decl nil matrices matrices)
    (* const-decl "real" matrices matrices)
    (row const-decl "Vector" matrices matrices))
   shostak))
 (max_a_TCC1 0
  (max_a_TCC1-1 nil 3796040809
   ("" (skeep) (("" (typepred "A") (("" (grind) nil nil)) nil)) nil)
   ((FullMatrix type-eq-decl nil matrices matrices)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (real nonempty-type-from-decl nil reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Matrix type-eq-decl nil matrices matrices)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (rows const-decl "nat" matrices matrices))
   nil
   (max_a subtype "mat_vec_mult.A" "(list_adt[list[real]].cons?)")))
 (max_a_TCC2 0
  (max_a_TCC2-1 nil 3796040809
   ("" (skeep)
    (("" (grind)
      (("" (typepred "A")
        (("" (assert)
          (("" (split -2)
            (("1" (expand "length" 1) (("1" (assert) nil nil)) nil)
             ("2" (lemma "full_matrix_columns")
              (("2" (inst -1 "A") (("2" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((rows const-decl "nat" matrices matrices)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (full_matrix_columns formula-decl nil matrices matrices)
    (columns def-decl "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}" matrices
     matrices)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (Matrix type-eq-decl nil matrices matrices)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (FullMatrix type-eq-decl nil matrices matrices))
   nil
   (max_a subtype "list_adt[list[real]].car(mat_vec_mult.A)"
    "(list_adt[real].cons?)")))
 (max_a_TCC3 0
  (max_a_TCC3-1 nil 3796040809
   ("" (skeep)
    (("" (typepred "A")
      (("" (typepred "abs(car[list[real]](A))")
        (("" (hide -1)
          (("" (lemma "full_matrix_columns")
            (("" (inst -1 "A")
              (("" (assert) (("" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((FullMatrix type-eq-decl nil matrices matrices)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (real nonempty-type-from-decl nil reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Matrix type-eq-decl nil matrices matrices)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (full_matrix_columns formula-decl nil matrices matrices)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (abs def-decl "{l: list | length(l) = length(ll)}" norms nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil))
   nil
   (max_a subtype "norms.abs(list_adt[list[real]].car(mat_vec_mult.A))"
    "(list_adt[real].cons?)")))
 (max_a_TCC4 0
  (max_a_TCC9-1 nil 3796040809
   ("" (skeep)
    (("" (lemma "cdr_columns_full") (("" (inst?) nil nil)) nil)) nil)
   ((cdr_columns_full formula-decl nil mat_vec_mult nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (Matrix type-eq-decl nil matrices matrices)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (FullMatrix type-eq-decl nil matrices matrices)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil))
   nil
   (max_a subtype "list_adt[list[real]].cdr(mat_vec_mult.A)"
    "FullMatrix")))
 (max_a_TCC5 0
  (max_a_TCC9-1 nil 3797716360
   ("" (skeep)
    (("" (expand "rows")
      (("" (grind)
        (("" (expand "length" 3 2)
          (("" (lift-if 3)
            (("" (split 3)
              (("1" (flatten)
                (("1" (expand "length" 2) (("1" (assert) nil nil))
                  nil))
                nil)
               ("2" (flatten) (("2" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((rows const-decl "nat" matrices matrices)
    (length def-decl "nat" list_props nil)
    (columns def-decl "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}" matrices
     matrices)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (max_a termination
    "mat_vec_mult.max_a(list_adt[list[real]].cdr(mat_vec_mult.A))"
    "nil")))
 (max_a_TCC6 0
  (max_a_TCC10-1 nil 3797716360 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (Matrix type-eq-decl nil matrices matrices)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (FullMatrix type-eq-decl nil matrices matrices)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (rows const-decl "nat" matrices matrices))
   nil
   (max_a subtype
    "real_defs.max(norms.max(norms.abs(list_adt[list[real]].car(mat_vec_mult.A))), mat_vec_mult.max_a(list_adt[list[real]].cdr(mat_vec_mult.A)))"
    "nnreal")))
 (max_a_max_TCC1 0
  (max_a_max_TCC2-1 nil 3796040809 ("" (subtype-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (Matrix type-eq-decl nil matrices matrices)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (FullMatrix type-eq-decl nil matrices matrices)
    (<= const-decl "bool" reals nil)
    (columns def-decl "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}" matrices
     matrices)
    (rows const-decl "nat" matrices matrices)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (max_a_max subtype "mat_vec_mult.i"
    "below[length[list[real]](A)]")))
 (max_a_max_TCC2 0
  (max_a_max_TCC2-1 nil 3796041285
   ("" (skeep)
    (("" (typepred "j")
      (("" (lemma "full_matrix_columns")
        (("" (inst -1 "A")
          (("" (assert)
            (("" (typepred "A")
              (("" (split -2)
                (("1" (assert)
                  (("1" (typepred "i")
                    (("1" (expand "rows" -1)
                      (("1" (expand "length" -1)
                        (("1" (assert) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("2" (inst -1 "0" "i")
                  (("1" (expand "nth" -1 1) (("1" (assert) nil nil))
                    nil)
                   ("2" (typepred "i")
                    (("2" (hide -2 -3 -4) (("2" (grind) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((FullMatrix type-eq-decl nil matrices matrices)
    (columns def-decl "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}" matrices
     matrices)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (<= const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Matrix type-eq-decl nil matrices matrices)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (A skolem-const-decl "FullMatrix" mat_vec_mult nil)
    (rows const-decl "nat" matrices matrices)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (full_matrix_columns formula-decl nil matrices matrices))
   nil
   (max_a_max subtype "mat_vec_mult.j"
    "below[length[real](nth[list[real]](A, i))]")))
 (max_a_max 0
  (max_a_max-1 nil 3796041036
   (""
    (case "FORALL (m:nat, A: FullMatrix, j: below(columns(A)), i: below(rows(A))):
        length(A) = m IMPLIES  abs(nth(nth(A, i), j)) <= max_a(A)")
    (("1" (skeep) (("1" (inst -1 "length(A)" "A" "j" "i") nil nil))
      nil)
     ("2" (hide 2)
      (("2" (induct "m")
        (("1" (skeep)
          (("1" (typepred "i" "j")
            (("1" (assert)
              (("1" (expand "rows" -1) (("1" (assert) nil nil)) nil))
              nil))
            nil))
          nil)
         ("2" (skeep)
          (("2" (skeep)
            (("2" (case "i=0")
              (("1" (typepred "A")
                (("1" (split -2)
                  (("1" (typepred "i")
                    (("1" (expand "rows" -1)
                      (("1" (assert)
                        (("1" (expand "length" -1)
                          (("1" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("2" (expand "nth" 1 2)
                    (("2" (assert)
                      (("2" (lemma "norm_inf_nth_ineq")
                        (("2" (inst -1 "car(A)" "j")
                          (("1" (expand "norm_inf" -1)
                            (("1" (expand "max_a" 1)
                              (("1" (assert) nil nil)) nil))
                            nil)
                           ("2" (typepred "j")
                            (("2" (lemma "norm_inf_nth_ineq")
                              (("2"
                                (lemma "full_matrix_columns")
                                (("2"
                                  (inst -1 "A")
                                  (("2"
                                    (assert)
                                    (("2"
                                      (expand "length" -1)
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (expand "max_a" 2 1)
                (("2" (assert)
                  (("2" (expand "nth" 2 2)
                    (("2" (inst -1 "cdr(A)" "j" "i-1")
                      (("1" (typepred "j")
                        (("1" (typepred "j_1")
                          (("1" (assert)
                            (("1" (expand "length" -3)
                              (("1"
                                (lift-if -3)
                                (("1"
                                  (split -3)
                                  (("1" (assert) nil nil)
                                   ("2"
                                    (flatten)
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (typepred "i")
                        (("2" (expand "rows")
                          (("2" (expand "length" -1)
                            (("2" (lift-if -1)
                              (("2"
                                (split -1)
                                (("1"
                                  (flatten)
                                  (("1" (assert) nil nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("3" (typepred "j")
                        (("3" (lemma "full_matrix_columns")
                          (("3" (inst-cp -1 "A")
                            (("3" (inst-cp -1 "cdr(A)")
                              (("3"
                                (assert)
                                (("3"
                                  (hide -1)
                                  (("3"
                                    (split -1)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (typepred "i")
                                          (("1"
                                            (typepred "A")
                                            (("1"
                                              (expand "columns" -5)
                                              (("1"
                                                (expand "length" -8)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (typepred "j_1")
                                                    (("1"
                                                      (typepred "i")
                                                      (("1"
                                                        (expand
                                                         "rows"
                                                         -1)
                                                        (("1"
                                                          (expand
                                                           "length"
                                                           -1)
                                                          (("1"
                                                            (expand
                                                             "length"
                                                             -1)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (assert)
                                      (("2"
                                        (replace -1)
                                        (("2"
                                          (replace -2)
                                          (("2"
                                            (typepred "A")
                                            (("2"
                                              (split -2)
                                              (("1"
                                                (assert)
                                                (("1" (grind) nil nil))
                                                nil)
                                               ("2"
                                                (inst -1 "0" "1")
                                                (("1"
                                                  (expand "nth" -1)
                                                  (("1"
                                                    (expand "nth" -1)
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (expand "length" 1)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (lift-if 1)
                                                      (("2"
                                                        (split 1)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (flatten)
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (expand
                                                               "length"
                                                               2)
                                                              (("2"
                                                                (lift-if
                                                                 2)
                                                                (("2"
                                                                  (split
                                                                   2)
                                                                  (("1"
                                                                    (flatten)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (typepred
                                                                         "i")
                                                                        (("1"
                                                                          (expand
                                                                           "rows"
                                                                           -1)
                                                                          (("1"
                                                                            (expand
                                                                             "length"
                                                                             -1)
                                                                            (("1"
                                                                              (expand
                                                                               "length"
                                                                               -1)
                                                                              (("1"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (flatten)
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("3" (skeep)
          (("3" (typepred "j")
            (("3" (lemma "full_matrix_columns")
              (("3" (inst -1 "A")
                (("3" (typepred "A")
                  (("3" (split -2)
                    (("1" (grind) nil nil)
                     ("2" (inst -1 "i" "0")
                      (("1" (expand "nth" -1 2)
                        (("1" (assert) nil nil)) nil)
                       ("2" (expand "length" 1 1)
                        (("2" (lift-if 1)
                          (("2" (split 1)
                            (("1" (flatten) (("1" (grind) nil nil))
                              nil)
                             ("2" (flatten) (("2" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("4" (skeep)
          (("4" (typepred "i")
            (("4" (expand "rows" -1) (("4" (propax) nil nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (skeep)
      (("3" (assert)
        (("3" (typepred "j")
          (("3" (lemma "full_matrix_columns")
            (("3" (inst -1 "A")
              (("3" (assert)
                (("3" (typepred "A")
                  (("3" (assert)
                    (("3" (split -2)
                      (("1" (grind) nil nil)
                       ("2" (inst -1 "0" "i")
                        (("1" (expand "nth" -1 1)
                          (("1" (assert) nil nil)) nil)
                         ("2" (expand "length" 1)
                          (("2" (lift-if 1)
                            (("2" (split 1)
                              (("1"
                                (flatten)
                                (("1" (grind) nil nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (skeep)
      (("4" (typepred "i")
        (("4" (expand "rows") (("4" (propax) nil nil)) nil)) nil))
      nil))
    nil)
   ((A skolem-const-decl "FullMatrix" mat_vec_mult nil)
    (A skolem-const-decl "FullMatrix" mat_vec_mult nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (A skolem-const-decl "FullMatrix" mat_vec_mult nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (norm_inf const-decl "[(cons?) -> nonneg_real]" norms nil)
    (full_matrix_columns formula-decl nil matrices matrices)
    (norm_inf_nth_ineq formula-decl nil norms nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (j skolem-const-decl "below(columns(A))" mat_vec_mult nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (i skolem-const-decl "below(rows(A))" mat_vec_mult nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (odd_plus_even_is_odd application-judgement "odd_int" integers nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (pred type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Matrix type-eq-decl nil matrices matrices)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (FullMatrix type-eq-decl nil matrices matrices)
    (<= const-decl "bool" reals nil)
    (columns def-decl "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}" matrices
     matrices)
    (rows const-decl "nat" matrices matrices)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (nnreal type-eq-decl nil real_types nil)
    (max_a def-decl "nnreal" mat_vec_mult nil))
   shostak))
 (max_a_row_TCC1 0
  (max_a_row_TCC2-1 nil 3796041285
   ("" (skeep)
    (("" (typepred "A")
      (("" (typepred "v") (("" (assert) nil nil)) nil)) nil))
    nil)
   ((columns def-decl "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}" matrices
     matrices)
    (<= const-decl "bool" reals nil) (> const-decl "bool" reals nil)
    (FullMatrix type-eq-decl nil matrices matrices)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (real nonempty-type-from-decl nil reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Matrix type-eq-decl nil matrices matrices)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (VectorN type-eq-decl nil matrices matrices)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil (max_a_row subtype "mat_vec_mult.v" "(list_adt[real].cons?)")))
 (max_a_row_TCC2 0
  (max_a_row_TCC1-1 nil 3796041285 ("" (subtype-tcc) nil nil) nil nil
   (max_a_row subtype "matrices.columns(mat_vec_mult.A)" "posnat")))
 (max_a_row 0
  (max_a_row-1 nil 3796048002
   ("" (skeep)
    (("" (lemma "dot_max_ineq")
      (("" (inst -1 "v" "row(A)(i)")
        (("1" (split -1)
          (("1" (typepred "A")
            (("1" (split -2)
              (("1" (typepred "i")
                (("1" (expand "rows" -1)
                  (("1" (expand "length" -1) (("1" (assert) nil nil))
                    nil))
                  nil))
                nil)
               ("2" (case "null?(A)")
                (("1" (typepred "i")
                  (("1" (expand "rows" -1)
                    (("1" (expand "length" -1) (("1" (assert) nil nil))
                      nil))
                    nil))
                  nil)
                 ("2" (lemma "full_matrix_columns")
                  (("2" (inst -1 "A")
                    (("2" (assert)
                      (("2" (expand "row" -5 2)
                        (("2" (typepred "i")
                          (("2" (assert)
                            (("2" (expand "rows" -1)
                              (("2"
                                (assert)
                                (("2"
                                  (expand "row" -6)
                                  (("2"
                                    (expand "row" 2)
                                    (("2"
                                      (hide -4)
                                      (("2"
                                        (expand "norm_inf" 2)
                                        (("2"
                                          (lemma "norm_inf_nth")
                                          (("2"
                                            (inst -1 "nth(A,i)")
                                            (("2"
                                              (skeep)
                                              (("2"
                                                (lemma "max_a_max")
                                                (("2"
                                                  (inst
                                                   -1
                                                   "A"
                                                   "i_1"
                                                   "i")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (replace
                                                       -2
                                                       -1
                                                       rl)
                                                      (("1"
                                                        (inst
                                                         -5
                                                         "i"
                                                         "0")
                                                        (("1"
                                                          (expand
                                                           "nth"
                                                           -5
                                                           2)
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (replace
                                                               -5
                                                               -7)
                                                              (("1"
                                                                (replace
                                                                 -4
                                                                 -7
                                                                 rl)
                                                                (("1"
                                                                  (mult-by
                                                                   -1
                                                                   "norm_inf(v)")
                                                                  (("1"
                                                                    (mult-by
                                                                     -1
                                                                     "columns(A)")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (typepred "i_1")
                                                    (("2"
                                                      (inst -5 "0" "i")
                                                      (("2"
                                                        (expand
                                                         "nth"
                                                         -5
                                                         1)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (typepred "v")
            (("2" (expand "row" 1)
              (("2" (typepred "i")
                (("2" (assert)
                  (("2" (expand "rows" -1)
                    (("2" (assert)
                      (("2" (lemma "full_matrix_columns")
                        (("2" (inst -1 "A")
                          (("2" (typepred "A")
                            (("2" (split -2)
                              (("1"
                                (typepred "i")
                                (("1"
                                  (expand "rows" -1)
                                  (("1"
                                    (expand "length" -1)
                                    (("1" (assert) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (inst -1 "0" "i")
                                (("2"
                                  (expand "nth" -1 1)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (typepred "A")
          (("2" (expand "row" 1 1)
            (("2" (typepred "i")
              (("2" (assert)
                (("2" (expand "rows" -1)
                  (("2" (assert)
                    (("2" (split -3)
                      (("1" (typepred "i")
                        (("1" (expand "rows" -1)
                          (("1" (expand "length" -1)
                            (("1" (assert) nil nil)) nil))
                          nil))
                        nil)
                       ("2" (inst -1 "0" "i")
                        (("2" (expand "nth" -1 1)
                          (("2" (assert)
                            (("2" (expand "length" -1)
                              (("2"
                                (lemma "full_matrix_columns")
                                (("2"
                                  (inst -1 "A")
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((dot_max_ineq formula-decl nil norms nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (full_matrix_columns formula-decl nil matrices matrices)
    (norm_inf_nth formula-decl nil norms nil)
    (i_1 skolem-const-decl "below(length(nth(A, i)))" mat_vec_mult nil)
    (both_sides_times_pos_le1_imp formula-decl nil extra_real_props
     nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (norm_inf const-decl "[(cons?) -> nonneg_real]" norms nil)
    (nnreal type-eq-decl nil real_types nil)
    (max_a def-decl "nnreal" mat_vec_mult nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (max_a_max formula-decl nil mat_vec_mult nil)
    (norm_inf const-decl "(norm?(m))" norms nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (VectorN type-eq-decl nil matrices matrices)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (Matrix type-eq-decl nil matrices matrices)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Vector type-eq-decl nil matrices matrices)
    (row const-decl "Vector" matrices matrices)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (FullMatrix type-eq-decl nil matrices matrices)
    (> const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (columns def-decl "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}" matrices
     matrices)
    (A skolem-const-decl "{AA: FullMatrix | columns(AA) > 0}"
     mat_vec_mult nil)
    (rows const-decl "nat" matrices matrices)
    (i skolem-const-decl "below(rows(A))" mat_vec_mult nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   shostak))
 (matv_norm_inf_TCC1 0
  (matv_norm_inf_TCC1-1 nil 3797763155
   ("" (skeep)
    (("" (typepred "A")
      (("" (expand "columns" -3)
        (("" (lift-if -3)
          (("" (split -3)
            (("1" (flatten) (("1" (assert) nil nil)) nil)
             ("2" (flatten)
              (("2" (assert)
                (("2" (typepred "A*v") (("2" (grind) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((columns def-decl "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}" matrices
     matrices)
    (<= const-decl "bool" reals nil) (> const-decl "bool" reals nil)
    (FullMatrix type-eq-decl nil matrices matrices)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (real nonempty-type-from-decl nil reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Matrix type-eq-decl nil matrices matrices)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (VectorN type-eq-decl nil matrices matrices)
    (rows const-decl "nat" matrices matrices)
    (* const-decl "VectorN(rows(A))" mat_vec_mult nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (matvec def-decl "VectorN(m)" mat_vec_mult nil)
    (* const-decl "real" matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (matv_norm_inf subtype
    "mat_vec_mult.*(mat_vec_mult.A, mat_vec_mult.v)"
    "(list_adt[real].cons?)")))
 (matv_norm_inf_TCC2 0
  (matv_norm_inf_TCC2-2 nil 3797763343
   ("" (skeep)
    (("" (typepred "A")
      (("" (expand "columns" -3)
        (("" (expand "rows" 1)
          (("" (lift-if -3)
            (("" (split -3)
              (("1" (flatten) (("1" (assert) nil nil)) nil)
               ("2" (flatten)
                (("2" (assert)
                  (("2" (expand "length" 2) (("2" (assert) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((columns def-decl "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}" matrices
     matrices)
    (<= const-decl "bool" reals nil) (> const-decl "bool" reals nil)
    (FullMatrix type-eq-decl nil matrices matrices)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (real nonempty-type-from-decl nil reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Matrix type-eq-decl nil matrices matrices)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (rows const-decl "nat" matrices matrices)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (matv_norm_inf subtype "matrices.rows(mat_vec_mult.A)" "posnat"))
  (matv_norm_inf_TCC2-1 nil 3797763155 ("" (subtype-tcc) nil nil) nil
   nil
   (matv_norm_inf subtype "matrices.rows(mat_vec_mult.A)" "posnat")))
 (matv_norm_inf_TCC3 0
  (matv_norm_inf_TCC3-1 nil 3797763155 ("" (subtype-tcc) nil nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (Matrix type-eq-decl nil matrices matrices)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (FullMatrix type-eq-decl nil matrices matrices)
    (> const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (columns def-decl "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}" matrices
     matrices)
    (VectorN type-eq-decl nil matrices matrices)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (matv_norm_inf subtype "mat_vec_mult.v" "(list_adt[real].cons?)")))
 (matv_norm_inf_TCC4 0
  (matv_norm_inf_TCC4-1 nil 3797763155 ("" (subtype-tcc) nil nil) nil
   nil
   (matv_norm_inf subtype "matrices.columns(mat_vec_mult.A)"
    "posnat")))
 (matv_norm_inf 0
  (matv_norm_inf-1 nil 3797763112
   ("" (skeep)
    (("" (lemma "norm_inf_nth")
      (("" (inst -1 "A*v")
        (("" (skeep)
          (("" (expand "norm_inf" 1 1)
            (("" (replace -1 1)
              (("" (lemma "matv_nth")
                (("" (inst -1 "A" "v" "i")
                  (("1" (replace -1 1)
                    (("1" (lemma "max_a_row")
                      (("1" (inst?)
                        (("1" (assert) nil nil)
                         ("2" (typepred "i") (("2" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (typepred "i") (("2" (assert) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((norm_inf_nth formula-decl nil norms nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (A skolem-const-decl "{AA: FullMatrix | columns(AA) > 0}"
     mat_vec_mult nil)
    (v skolem-const-decl "VectorN(columns(A))" mat_vec_mult nil)
    (i skolem-const-decl "below(length(A * v))" mat_vec_mult nil)
    (max_a_row formula-decl nil mat_vec_mult nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (matv_nth formula-decl nil mat_vec_mult nil)
    (norm_inf const-decl "(norm?(m))" norms nil)
    (> const-decl "bool" reals nil)
    (* const-decl "VectorN(rows(A))" mat_vec_mult nil)
    (rows const-decl "nat" matrices matrices)
    (VectorN type-eq-decl nil matrices matrices)
    (columns def-decl "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}" matrices
     matrices)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (<= const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (Matrix type-eq-decl nil matrices matrices)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (FullMatrix type-eq-decl nil matrices matrices)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil))
 (vec2mat_TCC1 0
  (vec2mat_TCC1-1 nil 3797769949
   ("" (skeep) (("" (grind) nil nil)) nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (below type-eq-decl nil naturalnumbers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (length def-decl "nat" list_props nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (vec2mat subtype "list_adt[list[real]].null"
    "matrices.MatrixMN(list_props[real].length(mat_vec_mult.v), real_defs.min(list_props[real].length(mat_vec_mult.v), 1))")))
 (vec2mat_TCC2 0
  (vec2mat_TCC2-1 nil 3797769949 ("" (subtype-tcc) nil nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (Vector type-eq-decl nil matrices matrices))
   nil (vec2mat subtype "mat_vec_mult.v" "(list_adt[real].cons?)")))
 (vec2mat_TCC3 0
  (vec2mat_TCC3-1 nil 3797769949 ("" (termination-tcc) nil nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (Vector type-eq-decl nil matrices matrices)
    (length def-decl "nat" list_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil
   (vec2mat termination
    "mat_vec_mult.vec2mat(list_adt[real].cdr(mat_vec_mult.v))" "nil")))
 (vec2mat_TCC4 0
  (vec2mat_TCC4-1 nil 3797769949
   ("" (skeep)
    (("" (assert)
      (("" (split 2)
        (("1" (expand "length" 1) (("1" (assert) nil nil)) nil)
         ("2" (skeep)
          (("2" (case "i=0")
            (("1" (expand "nth" 1)
              (("1" (assert)
                (("1" (expand "min" 1) (("1" (grind) nil nil)) nil))
                nil))
              nil)
             ("2" (typepred "v1(cdr[real](v))")
              (("2" (inst -3 "i-1")
                (("1" (expand "nth" 2)
                  (("1" (assert)
                    (("1" (replace -3 2)
                      (("1" (typepred "v")
                        (("1" (hide -1)
                          (("1" (typepred "i")
                            (("1" (expand "length" -1)
                              (("1"
                                (assert)
                                (("1"
                                  (replace -3 -1)
                                  (("1"
                                    (expand "min" 2 1)
                                    (("1"
                                      (lift-if 2)
                                      (("1"
                                        (split 2)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (expand "min" 1)
                                              (("1" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (flatten)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (case
                                               "length(cdr[real](v)) =1")
                                              (("1" (grind) nil nil)
                                               ("2"
                                                (case
                                                 "length(cdr[real](v))=0")
                                                (("1" (grind) nil nil)
                                                 ("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert)
                  (("2" (typepred "i")
                    (("2" (expand "length" -1) (("2" (assert) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((NOT const-decl "[bool -> bool]" booleans nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (v skolem-const-decl "Vector" mat_vec_mult nil)
    (v1 skolem-const-decl "[v1: {z: Vector | length(z) < length(v)} ->
   MatrixMN(length(v1), min(length(v1), 1))]" mat_vec_mult nil)
    (i skolem-const-decl
       "below(length(cons((: car(v) :), v1(cdr(v)))))" mat_vec_mult
       nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (length_singleton formula-decl nil more_list_props structures)
    (nat_min application-judgement "{k: nat | k <= i AND k <= j}"
     real_defs nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil) (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (Vector type-eq-decl nil matrices matrices)
    (Matrix type-eq-decl nil matrices matrices)
    (below type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil) (<= const-decl "bool" reals nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (MatrixMN type-eq-decl nil matrices matrices)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (length def-decl "nat" list_props nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (vec2mat subtype
    "list_adt[list[real]].cons((: list_adt[real].car(mat_vec_mult.v) :), mat_vec_mult.vec2mat(list_adt[real].cdr(mat_vec_mult.v)))"
    "matrices.MatrixMN(list_props[real].length(mat_vec_mult.v), real_defs.min(list_props[real].length(mat_vec_mult.v), 1))")))
 (vec2mat_id 0
  (vec2mat_id-1 nil 3797775529
   ("" (induct "v")
    (("1" (grind) nil nil)
     ("2" (skeep)
      (("2" (expand "vec2mat" 1 1)
        (("2" (expand "col" 1 1)
          (("2" (expand "access")
            (("2" (decompose-equality 1) (("2" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (length_singleton formula-decl nil more_list_props structures)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (list_cons_extensionality formula-decl nil list_adt nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (access const-decl "real" matrices matrices)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (list_induction formula-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (vec2mat def-decl "MatrixMN(length(v), min(length(v), 1))"
     mat_vec_mult nil)
    (MatrixMN type-eq-decl nil matrices matrices)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (<= const-decl "bool" reals nil) (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (col def-decl "VectorN(rows(M))" matrices matrices)
    (VectorN type-eq-decl nil matrices matrices)
    (rows const-decl "nat" matrices matrices)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (Matrix type-eq-decl nil matrices matrices)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Vector type-eq-decl nil matrices matrices)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (list type-decl nil list_adt nil))
   shostak))
 (matv_matmat 0
  (matv_matmat-1 nil 3797774601
   ("" (skeep)
    (("" (case "columns(A)=0")
      (("1" (typepred "v")
        (("1" (replace -3 -2)
          (("1" (expand "length" -2)
            (("1" (lift-if -2)
              (("1" (split -2)
                (("1" (expand "*" 1 1)
                  (("1" (expand "vec2mat" 1 1)
                    (("1" (assert)
                      (("1" (lemma "mult_null_right")
                        (("1" (inst -1 "A")
                          (("1" (assert)
                            (("1" (flatten)
                              (("1"
                                (lemma "access_col")
                                (("1"
                                  (lemma "list_extensionality[real]")
                                  (("1"
                                    (inst
                                     -1
                                     "  matvec(rows(A), columns(A), A, v)"
                                     "col(A * null[list[real]])(0)")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (hide 2)
                                        (("1"
                                          (split 1)
                                          (("1"
                                            (typepred
                                             "(matvec(rows(A), columns(A), A, v))"
                                             "col(A * null[list[real]])(0)")
                                            (("1"
                                              (hide -1 -3)
                                              (("1" (grind) nil nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (skeep)
                                            (("2"
                                              (inst
                                               -1
                                               "A * null[list[real]]"
                                               "n"
                                               "0")
                                              (("2"
                                                (expand "access" -1)
                                                (("2"
                                                  (typepred "n")
                                                  (("2"
                                                    (lift-if -2)
                                                    (("2"
                                                      (split -2)
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (replace
                                                           -2
                                                           1)
                                                          (("1"
                                                            (lemma
                                                             "matv_nth")
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "A"
                                                               "v"
                                                               "n")
                                                              (("1"
                                                                (expand
                                                                 "*"
                                                                 -1
                                                                 1)
                                                                (("1"
                                                                  (replace
                                                                   -1
                                                                   1)
                                                                  (("1"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (flatten)
                                                        (("2"
                                                          (assert)
                                                          (("2"
                                                            (typepred
                                                             "col(A * null[list[real]])(0)"
                                                             "matvec(rows(A), columns(A), A, v)")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (hide
                                                                 -1
                                                                 -3)
                                                                (("2"
                                                                  (expand
                                                                   "rows"
                                                                   -)
                                                                  (("2"
                                                                    (expand
                                                                     "*"
                                                                     -1
                                                                     2)
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (flatten) (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (label "cA" 1)
        (("2" (hide "cA")
          (("2" (expand "*" 1)
            (("2" (lemma "list_extensionality[real]")
              (("2"
                (inst -1 "matvec(rows(A), columns(A), A, v)"
                 "col(mult(A, vec2mat(v)))(0)")
                (("2" (assert)
                  (("2" (split 1)
                    (("1" (assert)
                      (("1"
                        (typepred "matvec(rows(A), columns(A), A, v)"
                         "(col(mult(A, vec2mat(v)))(0))")
                        (("1" (hide -1 -3)
                          (("1" (expand "rows")
                            (("1" (typepred "(mult(A, vec2mat(v)))")
                              (("1" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (skeep)
                      (("2" (lemma "matv_nth")
                        (("2" (inst -1 "A" "v" "n")
                          (("2" (expand "*" -1 1)
                            (("2" (replace -1 1)
                              (("2"
                                (lemma "access_col")
                                (("2"
                                  (inst
                                   -1
                                   "(mult(A, vec2mat(v)))"
                                   "n"
                                   "0")
                                  (("2"
                                    (expand "access" -1)
                                    (("2"
                                      (typepred "n")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (lift-if -2)
                                          (("2"
                                            (split -2)
                                            (("1"
                                              (flatten)
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (replace -2 1)
                                                  (("1"
                                                    (lemma
                                                     "entry_mult")
                                                    (("1"
                                                      (inst
                                                       -1
                                                       "A"
                                                       "vec2mat(v)"
                                                       "n"
                                                       "0")
                                                      (("1"
                                                        (lift-if -1)
                                                        (("1"
                                                          (split -1)
                                                          (("1"
                                                            (flatten)
                                                            (("1"
                                                              (expand
                                                               "*"
                                                               -3
                                                               1)
                                                              (("1"
                                                                (replace
                                                                 -3
                                                                 1)
                                                                (("1"
                                                                  (lemma
                                                                   "vec2mat_id")
                                                                  (("1"
                                                                    (inst
                                                                     -1
                                                                     "v")
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (flatten)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (typepred
                                                                 "v")
                                                                (("2"
                                                                  (hide
                                                                   -1)
                                                                  (("2"
                                                                    (typepred
                                                                     "A")
                                                                    (("2"
                                                                      (hide
                                                                       -1)
                                                                      (("2"
                                                                        (split
                                                                         -1)
                                                                        (("1"
                                                                          (grind)
                                                                          nil
                                                                          nil)
                                                                         ("2"
                                                                          (lemma
                                                                           "full_matrix_columns")
                                                                          (("2"
                                                                            (reveal
                                                                             "cA")
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (inst
                                                                                 -1
                                                                                 "vec2mat(v)")
                                                                                (("1"
                                                                                  (assert)
                                                                                  (("1"
                                                                                    (typepred
                                                                                     "vec2mat(v)")
                                                                                    (("1"
                                                                                      (typepred
                                                                                       "v")
                                                                                      (("1"
                                                                                        (hide
                                                                                         -1)
                                                                                        (("1"
                                                                                          (hide
                                                                                           -2)
                                                                                          (("1"
                                                                                            (split
                                                                                             -4)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "length"
                                                                                               -3)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (inst
                                                                                               -4
                                                                                               "0")
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "min"
                                                                                                 -4)
                                                                                                (("2"
                                                                                                  (lift-if
                                                                                                   -4)
                                                                                                  (("2"
                                                                                                    (assert)
                                                                                                    (("2"
                                                                                                      (split
                                                                                                       -4)
                                                                                                      (("1"
                                                                                                        (flatten)
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (expand
                                                                                                             "nth"
                                                                                                             -2)
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil)
                                                                                                       ("2"
                                                                                                        (flatten)
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          (("2"
                                                                                                            (typepred
                                                                                                             "v")
                                                                                                            (("2"
                                                                                                              (hide
                                                                                                               -1)
                                                                                                              (("2"
                                                                                                                (hide
                                                                                                                 -6
                                                                                                                 -7
                                                                                                                 -8
                                                                                                                 -9
                                                                                                                 -10
                                                                                                                 -11
                                                                                                                 -12)
                                                                                                                (("2"
                                                                                                                  (replace
                                                                                                                   -1
                                                                                                                   1)
                                                                                                                  (("2"
                                                                                                                    (replace
                                                                                                                     -1
                                                                                                                     1
                                                                                                                     rl)
                                                                                                                    (("2"
                                                                                                                      (replace
                                                                                                                       -1
                                                                                                                       2
                                                                                                                       rl)
                                                                                                                      (("2"
                                                                                                                        (hide
                                                                                                                         3
                                                                                                                         4
                                                                                                                         5)
                                                                                                                        (("2"
                                                                                                                          (expand
                                                                                                                           "length"
                                                                                                                           2)
                                                                                                                          (("2"
                                                                                                                            (assert)
                                                                                                                            (("2"
                                                                                                                              (expand
                                                                                                                               "length"
                                                                                                                               1)
                                                                                                                              (("2"
                                                                                                                                (assert)
                                                                                                                                (("2"
                                                                                                                                  (expand
                                                                                                                                   "nth"
                                                                                                                                   -2
                                                                                                                                   1)
                                                                                                                                  (("2"
                                                                                                                                    (grind)
                                                                                                                                    (("2"
                                                                                                                                      (reveal
                                                                                                                                       +)
                                                                                                                                      (("2"
                                                                                                                                        (grind)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (flatten)
                                                                                  (("2"
                                                                                    (typepred
                                                                                     "vec2mat(v)")
                                                                                    (("2"
                                                                                      (hide
                                                                                       -1)
                                                                                      (("2"
                                                                                        (skeep
                                                                                         2)
                                                                                        (("2"
                                                                                          (inst-cp
                                                                                           -2
                                                                                           "i")
                                                                                          (("2"
                                                                                            (inst-cp
                                                                                             -2
                                                                                             "j")
                                                                                            (("2"
                                                                                              (assert)
                                                                                              nil
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (flatten)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (typepred
                                                   "col((mult(A, vec2mat(v))))(0)"
                                                   "matvec(rows(A), columns(A), A, v)")
                                                  (("2"
                                                    (hide -1 -3)
                                                    (("2"
                                                      (expand "rows")
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((FullMatrix type-eq-decl nil matrices matrices)
    (columns def-decl "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}" matrices
     matrices)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (<= const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil) (< const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (Matrix type-eq-decl nil matrices matrices)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (* const-decl "VectorN(rows(A))" mat_vec_mult nil)
    (mult_full application-judgement "FullMatrix" matrices matrices)
    (list_extensionality formula-decl nil more_list_props structures)
    (form_matrix_square application-judgement "FullMatrix" matrices
     matrices)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (mult const-decl "{A: MatrixMN(rows(M), columns(N)) |
   FORALL (i, j): entry(A)(i, j) = row(M)(i) * col(N)(j)}" matrices
     matrices)
    (form_matrix const-decl "{M: MatrixMN(m, n) |
   FORALL (i: below(m), j: below(n)): nth(row(M)(i), j) = F(i, j)}"
     matrices matrices)
    (array2list const-decl
     "{l: listn(n) | FORALL (i: below(n)): a(i) = nth(l, i)}"
     array2list structures)
    (array2list_it def-decl
     "{l: listn(n - i) | FORALL (j: subrange(i, n - 1)): a(j) = nth(l, j - i)}"
     array2list structures)
    (dot def-decl "real" matrices matrices)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (matv_nth formula-decl nil mat_vec_mult nil)
    (access const-decl "real" matrices matrices)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (* const-decl "{A: MatrixMN(rows(M), columns(N)) |
   FORALL (i, j): entry(A)(i, j) = row(M)(i) * col(N)(j)}" matrices
       matrices)
    (row const-decl "Vector" matrices matrices)
    (* const-decl "real" matrices matrices)
    (Vector type-eq-decl nil matrices matrices)
    (entry const-decl "real" matrices matrices)
    (col def-decl "VectorN(rows(M))" matrices matrices)
    (rows const-decl "nat" matrices matrices)
    (matvec def-decl "VectorN(m)" mat_vec_mult nil)
    (MatrixMN type-eq-decl nil matrices matrices)
    (access_col formula-decl nil matrices matrices)
    (mult_null_right formula-decl nil matrices matrices)
    (vec2mat def-decl "MatrixMN(length(v), min(length(v), 1))"
     mat_vec_mult nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (VectorN type-eq-decl nil matrices matrices)
    (vec2mat_id formula-decl nil mat_vec_mult nil)
    (full_matrix_columns formula-decl nil matrices matrices)
    (nat_min application-judgement "{k: nat | k <= i AND k <= j}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (v skolem-const-decl "VectorN(columns(A))" mat_vec_mult nil)
    (A skolem-const-decl "FullMatrix" mat_vec_mult nil)
    (entry_mult formula-decl nil matrices matrices)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   shostak))
 (vec2mat_mult 0
  (vec2mat_mult-1 nil 3797846472
   ("" (skeep)
    (("" (lemma "column_extensionality")
      (("" (inst -1 "vec2mat(A * v)" " A * vec2mat(v)")
        (("1" (assert)
          (("1" (split 1)
            (("1" (case "v=null")
              (("1" (typepred "v") (("1" (assert) nil nil)) nil)
               ("2" (lemma "full_matrix_columns")
                (("2" (inst-cp -1 "vec2mat(A * v)")
                  (("1" (inst-cp -1 "A * vec2mat(v)")
                    (("1" (assert)
                      (("1" (hide -1)
                        (("1" (typepred "A * vec2mat(v)")
                          (("1" (assert)
                            (("1" (hide -1)
                              (("1"
                                (expand "rows" -1)
                                (("1"
                                  (case "A=null")
                                  (("1" (grind) nil nil)
                                   ("2"
                                    (assert)
                                    (("2"
                                      (case "A * vec2mat(v)=null")
                                      (("1"
                                        (expand "length" -2)
                                        (("1" (assert) nil nil))
                                        nil)
                                       ("2"
                                        (assert)
                                        (("2"
                                          (typepred "vec2mat(A * v)")
                                          (("2"
                                            (typepred "A*v")
                                            (("2"
                                              (hide -3 -1)
                                              (("2"
                                                (expand "rows" -1)
                                                (("2"
                                                  (case
                                                   "vec2mat(A * v)=null")
                                                  (("1"
                                                    (expand
                                                     "length"
                                                     -3)
                                                    (("1"
                                                      (expand
                                                       "length"
                                                       -2)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (lift-if -3)
                                                          (("1"
                                                            (split -3)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil)
                                                             ("2"
                                                              (flatten)
                                                              (("2"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    (("2"
                                                      (replace -8)
                                                      (("2"
                                                        (replace -9)
                                                        (("2"
                                                          (inst-cp
                                                           -3
                                                           "0")
                                                          (("1"
                                                            (expand
                                                             "nth"
                                                             -4
                                                             1)
                                                            (("1"
                                                              (typepred
                                                               "A*v")
                                                              (("1"
                                                                (hide
                                                                 -1)
                                                                (("1"
                                                                  (case
                                                                   "length(A*v)=0")
                                                                  (("1"
                                                                    (hide
                                                                     -5
                                                                     -6
                                                                     -7
                                                                     -8
                                                                     -9
                                                                     -10
                                                                     -11
                                                                     -12
                                                                     -13)
                                                                    (("1"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (expand
                                                                       "min"
                                                                       -5
                                                                       1)
                                                                      (("2"
                                                                        (lift-if
                                                                         -5)
                                                                        (("2"
                                                                          (split
                                                                           -5)
                                                                          (("1"
                                                                            (flatten)
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (replace
                                                                                 -2)
                                                                                (("1"
                                                                                  (inst
                                                                                   -8
                                                                                   "0")
                                                                                  (("1"
                                                                                    (expand
                                                                                     "nth"
                                                                                     -8)
                                                                                    (("1"
                                                                                      (lemma
                                                                                       "full_matrix_columns")
                                                                                      (("1"
                                                                                        (inst
                                                                                         -1
                                                                                         "vec2mat(v)")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (typepred
                                                                                             "vec2mat(v)")
                                                                                            (("1"
                                                                                              (hide
                                                                                               -1)
                                                                                              (("1"
                                                                                                (typepred
                                                                                                 "v")
                                                                                                (("1"
                                                                                                  (hide
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (split
                                                                                                     -4)
                                                                                                    (("1"
                                                                                                      (flatten)
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "length"
                                                                                                           -3
                                                                                                           1)
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "length"
                                                                                                               -4)
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (inst
                                                                                                       -4
                                                                                                       "0")
                                                                                                      (("2"
                                                                                                        (expand
                                                                                                         "nth"
                                                                                                         -4)
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          (("2"
                                                                                                            (expand
                                                                                                             "min"
                                                                                                             -4)
                                                                                                            (("2"
                                                                                                              (lift-if
                                                                                                               -4)
                                                                                                              (("2"
                                                                                                                (split
                                                                                                                 -4)
                                                                                                                (("1"
                                                                                                                  (flatten)
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (flatten)
                                                                                                                  (("2"
                                                                                                                    (assert)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (flatten)
                                                                                          (("2"
                                                                                            (assert)
                                                                                            (("2"
                                                                                              (skeep)
                                                                                              (("2"
                                                                                                (typepred
                                                                                                 "vec2mat(v)")
                                                                                                (("2"
                                                                                                  (inst-cp
                                                                                                   -3
                                                                                                   "i")
                                                                                                  (("2"
                                                                                                    (inst-cp
                                                                                                     -3
                                                                                                     "j")
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (assert)
                                                                              (("2"
                                                                                (case
                                                                                 "NOT length(A*v)=1")
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil)
                                                                                 ("2"
                                                                                  (replace
                                                                                   -1)
                                                                                  (("2"
                                                                                    (replace
                                                                                     -2)
                                                                                    (("2"
                                                                                      (inst
                                                                                       -6
                                                                                       "0")
                                                                                      (("2"
                                                                                        (expand
                                                                                         "nth"
                                                                                         -6)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "min"
                                                                                           -6)
                                                                                          (("2"
                                                                                            (typepred
                                                                                             "(A * vec2mat(v))")
                                                                                            (("2"
                                                                                              (inst
                                                                                               -3
                                                                                               "0")
                                                                                              (("2"
                                                                                                (expand
                                                                                                 "nth"
                                                                                                 -3)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  (("2"
                                                                                                    (hide
                                                                                                     -13)
                                                                                                    (("2"
                                                                                                      (hide
                                                                                                       -1)
                                                                                                      (("2"
                                                                                                        (lemma
                                                                                                         "full_matrix_columns")
                                                                                                        (("2"
                                                                                                          (inst
                                                                                                           -1
                                                                                                           "vec2mat(v)")
                                                                                                          (("1"
                                                                                                            (split
                                                                                                             -1)
                                                                                                            (("1"
                                                                                                              (flatten)
                                                                                                              (("1"
                                                                                                                (typepred
                                                                                                                 "vec2mat(v)")
                                                                                                                (("1"
                                                                                                                  (grind)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (assert)
                                                                                                              (("2"
                                                                                                                (typepred
                                                                                                                 "vec2mat(v)")
                                                                                                                (("2"
                                                                                                                  (inst
                                                                                                                   -3
                                                                                                                   "0")
                                                                                                                  (("2"
                                                                                                                    (expand
                                                                                                                     "nth"
                                                                                                                     -3)
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      (("2"
                                                                                                                        (replace
                                                                                                                         -3)
                                                                                                                        (("2"
                                                                                                                          (replace
                                                                                                                           -6)
                                                                                                                          (("2"
                                                                                                                            (replace
                                                                                                                             -4)
                                                                                                                            (("2"
                                                                                                                              (expand
                                                                                                                               "min"
                                                                                                                               7)
                                                                                                                              (("2"
                                                                                                                                (propax)
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (flatten)
                                                                                                            (("2"
                                                                                                              (typepred
                                                                                                               "vec2mat(v)")
                                                                                                              (("2"
                                                                                                                (skeep
                                                                                                                 2)
                                                                                                                (("2"
                                                                                                                  (inst-cp
                                                                                                                   -3
                                                                                                                   "i")
                                                                                                                  (("2"
                                                                                                                    (inst-cp
                                                                                                                     -3
                                                                                                                     "j")
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (expand
                                                             "length"
                                                             1)
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (typepred "vec2mat(A*v)")
                      (("2" (assert)
                        (("2" (skeep 2)
                          (("2" (inst-cp -3 "i")
                            (("2" (inst-cp -3 "j")
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (expand "rows" 1) (("2" (assert) nil nil)) nil)
             ("3" (skeep)
              (("3" (typepred "i")
                (("3" (lemma "full_matrix_columns")
                  (("3" (inst-cp -1 "vec2mat(A * v)")
                    (("1" (inst -1 "A * vec2mat(v)")
                      (("1" (assert)
                        (("1"
                          (typepred "A * vec2mat(v)" "vec2mat(A * v)"
                           "A*v" "A" "v")
                          (("1" (hide -11 -6 -1)
                            (("1" (expand "row" -)
                              (("1"
                                (case "A=null")
                                (("1" (grind) nil nil)
                                 ("2"
                                  (expand "rows")
                                  (("2"
                                    (split -12)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (expand "length" -3)
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (split -10)
                                      (("1" (assert) nil nil)
                                       ("2"
                                        (split -13)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (replace -12 -9)
                                            (("1"
                                              (expand "length" -9)
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (assert)
                                          (("2"
                                            (expand "vec2mat" -1 2)
                                            (("2"
                                              (lift-if -1)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (case "A*v=null")
                                                  (("1"
                                                    (expand
                                                     "length"
                                                     -12)
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (assert)
                                                    (("2"
                                                      (typepred "i")
                                                      (("2"
                                                        (replace -2)
                                                        (("2"
                                                          (hide -3)
                                                          (("2"
                                                            (inst
                                                             -5
                                                             "0")
                                                            (("1"
                                                              (expand
                                                               "nth"
                                                               -5)
                                                              (("1"
                                                                (replace
                                                                 -5
                                                                 -3)
                                                                (("1"
                                                                  (replace
                                                                   -3
                                                                   -1)
                                                                  (("1"
                                                                    (replace
                                                                     -5
                                                                     -1
                                                                     rl)
                                                                    (("1"
                                                                      (lemma
                                                                       "columns_mult")
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         "A"
                                                                         "vec2mat(v)")
                                                                        (("1"
                                                                          (split
                                                                           -1)
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (lemma
                                                                               "full_matrix_columns")
                                                                              (("1"
                                                                                (inst
                                                                                 -1
                                                                                 "vec2mat(v)")
                                                                                (("1"
                                                                                  (split
                                                                                   -1)
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (typepred
                                                                                       "vec2mat(v)")
                                                                                      (("1"
                                                                                        (typepred
                                                                                         "v")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "length"
                                                                                             -2)
                                                                                            (("1"
                                                                                              (expand
                                                                                               "length"
                                                                                               -4)
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (expand
                                                                                     "vec2mat"
                                                                                     -1)
                                                                                    (("2"
                                                                                      (expand
                                                                                       "length"
                                                                                       -1)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "length"
                                                                                         -1)
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (replace
                                                                                             -7
                                                                                             -3)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "vec2mat"
                                                                                               -3)
                                                                                              (("2"
                                                                                                (assert)
                                                                                                (("2"
                                                                                                  (replace
                                                                                                   -1
                                                                                                   -3)
                                                                                                  (("2"
                                                                                                    (expand
                                                                                                     "max"
                                                                                                     -3)
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (case
                                                                                                         "NOT i=0")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (replace
                                                                                                           -1)
                                                                                                          (("2"
                                                                                                            (lemma
                                                                                                             "vec2mat_id")
                                                                                                            (("2"
                                                                                                              (inst
                                                                                                               -1
                                                                                                               "A*v")
                                                                                                              (("2"
                                                                                                                (replace
                                                                                                                 -1
                                                                                                                 3)
                                                                                                                (("2"
                                                                                                                  (lemma
                                                                                                                   "matv_matmat")
                                                                                                                  (("2"
                                                                                                                    (inst
                                                                                                                     -1
                                                                                                                     "A"
                                                                                                                     "v")
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (flatten)
                                                                                  (("2"
                                                                                    (typepred
                                                                                     "vec2mat(v)")
                                                                                    (("2"
                                                                                      (skeep
                                                                                       2)
                                                                                      (("2"
                                                                                        (inst-cp
                                                                                         -3
                                                                                         "i!1")
                                                                                        (("2"
                                                                                          (inst-cp
                                                                                           -3
                                                                                           "j")
                                                                                          (("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (lemma
                                                               "rows_mult")
                                                              (("2"
                                                                (inst
                                                                 -1
                                                                 "A"
                                                                 "vec2mat(v)")
                                                                (("2"
                                                                  (expand
                                                                   "rows"
                                                                   -1)
                                                                  (("2"
                                                                    (expand
                                                                     "length"
                                                                     -1)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (lift-if
                                                                         -1)
                                                                        (("2"
                                                                          (split
                                                                           -1)
                                                                          (("1"
                                                                            (flatten)
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (flatten)
                                                                            (("2"
                                                                              (expand
                                                                               "length"
                                                                               2)
                                                                              (("2"
                                                                                (assert)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten)
                      (("2" (typepred "vec2mat(A*v)")
                        (("2" (skeep 2)
                          (("2" (inst-cp -3 "i!1")
                            (("2" (inst -3 "j")
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil)
         ("2" (flatten)
          (("2" (typepred "vec2mat(A*v)")
            (("2" (skeep 2)
              (("2" (inst-cp -3 "i")
                (("2" (inst -3 "j") (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((column_extensionality formula-decl nil mat_vec_mult nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (rows_mult formula-decl nil matrices matrices)
    (columns_mult formula-decl nil matrices matrices)
    (matv_matmat formula-decl nil mat_vec_mult nil)
    (vec2mat_id formula-decl nil mat_vec_mult nil)
    (length_singleton formula-decl nil more_list_props structures)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (access const-decl "real" matrices matrices)
    (dot def-decl "real" matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (array2list const-decl
     "{l: listn(n) | FORALL (i: below(n)): a(i) = nth(l, i)}"
     array2list structures)
    (array2list_it def-decl
     "{l: listn(n - i) | FORALL (j: subrange(i, n - 1)): a(j) = nth(l, j - i)}"
     array2list structures)
    (form_matrix const-decl "{M: MatrixMN(m, n) |
   FORALL (i: below(m), j: below(n)): nth(row(M)(i), j) = F(i, j)}"
     matrices matrices)
    (mult const-decl "{A: MatrixMN(rows(M), columns(N)) |
   FORALL (i, j): entry(A)(i, j) = row(M)(i) * col(N)(j)}" matrices
     matrices)
    (matvec def-decl "VectorN(m)" mat_vec_mult nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (form_matrix_square application-judgement "FullMatrix" matrices
     matrices)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nat_min application-judgement "{k: nat | k <= i AND k <= j}"
     real_defs nil)
    (full_matrix_columns formula-decl nil matrices matrices)
    (* const-decl "{A: MatrixMN(rows(M), columns(N)) |
   FORALL (i, j): entry(A)(i, j) = row(M)(i) * col(N)(j)}" matrices
       matrices)
    (col def-decl "VectorN(rows(M))" matrices matrices)
    (row const-decl "Vector" matrices matrices)
    (* const-decl "real" matrices matrices)
    (entry const-decl "real" matrices matrices)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (Vector type-eq-decl nil matrices matrices)
    (Matrix type-eq-decl nil matrices matrices)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil) (<= const-decl "bool" reals nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (MatrixMN type-eq-decl nil matrices matrices)
    (vec2mat def-decl "MatrixMN(length(v), min(length(v), 1))"
     mat_vec_mult nil)
    (FullMatrix type-eq-decl nil matrices matrices)
    (columns def-decl "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}" matrices
     matrices)
    (VectorN type-eq-decl nil matrices matrices)
    (rows const-decl "nat" matrices matrices)
    (* const-decl "VectorN(rows(A))" mat_vec_mult nil)
    (A skolem-const-decl "FullMatrix" mat_vec_mult nil)
    (v skolem-const-decl "VectorN(columns(A))" mat_vec_mult nil)
    (mult_full application-judgement "FullMatrix" matrices matrices)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   shostak))
 (matv_dist_sum_TCC1 0
  (matv_dist_sum_TCC1-1 nil 3797763934
   ("" (skeep)
    (("" (typepred "v1+v2" "v1" "v2")
      (("" (replace -4)
        (("" (replace -6)
          (("" (expand "max" -2) (("" (propax) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((FullMatrix type-eq-decl nil matrices matrices)
    (columns def-decl "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}" matrices
     matrices)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (<= const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (Matrix type-eq-decl nil matrices matrices)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (VectorN type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vector type-eq-decl nil matrices matrices)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (matv_dist_sum subtype
    "((matrices.+)(mat_vec_mult.v1, mat_vec_mult.v2))"
    "matrices.VectorN(matrices.columns(mat_vec_mult.A))")))
 (matv_dist_sum 0
  (matv_dist_sum-1 nil 3797763993
   (""
    (case "FORALL (m:nat, A: FullMatrix, v1, v2: VectorN(columns(A))):
        length(A) = m IMPLIES A * (v1 + v2) = A * v1 + A * v2")
    (("1" (skeep) (("1" (inst -1 "length(A)" "A" "v1" "v2") nil nil))
      nil)
     ("2" (assert)
      (("2" (hide 2)
        (("2" (induct "m")
          (("1" (skeep)
            (("1" (assert)
              (("1" (expand "length" -1)
                (("1" (lift-if -1)
                  (("1" (split -1)
                    (("1" (expand "*" 1 1)
                      (("1" (expand "matvec" 1)
                        (("1" (assert)
                          (("1" (expand "rows" 1)
                            (("1" (expand "*" 1)
                              (("1"
                                (expand "matvec" 1)
                                (("1"
                                  (expand "rows")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "+" 1)
                                      (("1"
                                        (expand "add" 1)
                                        (("1" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (flatten) (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (skeep)
            (("2" (skeep)
              (("2" (expand "*" 1)
                (("2" (expand "rows" 1)
                  (("2" (expand "matvec" 1)
                    (("2" (assert)
                      (("2" (expand "+" 1)
                        (("2" (expand "add" 1)
                          (("2" (decompose-equality 1)
                            (("1" (typepred "v1" "v2")
                              (("1"
                                (hide -1 -3)
                                (("1"
                                  (lift-if 1)
                                  (("1"
                                    (split 1)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (expand "length" -2)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "length" -3)
                                            (("1"
                                              (lift-if -3)
                                              (("1"
                                                (split -3)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (flatten)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (flatten)
                                      (("2"
                                        (split 2)
                                        (("1"
                                          (flatten)
                                          (("1"
                                            (expand "length" -)
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (flatten)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (lemma "dot_dist")
                                              (("2"
                                                (inst
                                                 -1
                                                 "car(A)"
                                                 "v1"
                                                 "v2")
                                                (("1"
                                                  (replace -1 2 rl)
                                                  (("1"
                                                    (expand "+" 2 2)
                                                    (("1"
                                                      (expand
                                                       "add"
                                                       2
                                                       2)
                                                      (("1"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (typepred "car(A)")
                                                  (("2"
                                                    (hide -1)
                                                    (("2"
                                                      (typepred "A")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (split -2)
                                                          (("1"
                                                            (expand
                                                             "length"
                                                             -6)
                                                            (("1"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide -2)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (lemma
                                                                 "full_matrix_columns")
                                                                (("2"
                                                                  (inst
                                                                   -1
                                                                   "A")
                                                                  (("2"
                                                                    (split
                                                                     -1)
                                                                    (("1"
                                                                      (flatten)
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (expand
                                                                           "length"
                                                                           -7)
                                                                          (("1"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (expand
                                                                         "length"
                                                                         -3)
                                                                        (("2"
                                                                          (assert)
                                                                          (("2"
                                                                            (expand
                                                                             "length"
                                                                             -1)
                                                                            (("2"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (inst -1 "cdr(A)" "v1" "v2")
                              (("1"
                                (assert)
                                (("1"
                                  (expand "length" -2)
                                  (("1"
                                    (lift-if -2)
                                    (("1"
                                      (split -2)
                                      (("1"
                                        (flatten)
                                        (("1" (assert) nil nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (assert)
                                          (("2"
                                            (expand "*" -2)
                                            (("2"
                                              (expand "+" -2 2)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (expand "rows" -2 1)
                                                  (("2"
                                                    (expand
                                                     "length"
                                                     2
                                                     1)
                                                    (("2"
                                                      (case "j=0")
                                                      (("1"
                                                        (grind)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (lemma
                                                         "cdr_columns")
                                                        (("2"
                                                          (inst -1 "A")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (replace
                                                               -1
                                                               3)
                                                              (("1"
                                                                (expand
                                                                 "+"
                                                                 -3
                                                                 1)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (expand
                                                                     "add"
                                                                     -3
                                                                     1)
                                                                    (("1"
                                                                      (replace
                                                                       -3
                                                                       3
                                                                       lr)
                                                                      (("1"
                                                                        (expand
                                                                         "rows"
                                                                         3)
                                                                        (("1"
                                                                          (expand
                                                                           "length"
                                                                           3
                                                                           3)
                                                                          (("1"
                                                                            (expand
                                                                             "length"
                                                                             3
                                                                             4)
                                                                            (("1"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide
                                                             -2
                                                             3
                                                             4)
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (hide 2)
                                (("2"
                                  (typepred "v2")
                                  (("2"
                                    (hide -1)
                                    (("2"
                                      (case "j=0")
                                      (("1"
                                        (reveal +)
                                        (("1" (grind) nil nil))
                                        nil)
                                       ("2"
                                        (lemma "cdr_columns")
                                        (("2"
                                          (inst -1 "A")
                                          (("1" (assert) nil nil)
                                           ("2"
                                            (expand "length" -2)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (lift-if -2)
                                                (("2"
                                                  (split -2)
                                                  (("1"
                                                    (flatten)
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (flatten)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (expand
                                                         "length"
                                                         -1)
                                                        (("2"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (case "j=0")
                                (("1" (grind) nil nil)
                                 ("2"
                                  (lemma "cdr_columns")
                                  (("2"
                                    (inst -1 "A")
                                    (("1" (assert) nil nil)
                                     ("2"
                                      (expand "length" -1)
                                      (("2"
                                        (lift-if -1)
                                        (("2"
                                          (split -1)
                                          (("1"
                                            (flatten)
                                            (("1" (assert) nil nil))
                                            nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (expand "length" -1)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("4"
                                (flatten)
                                (("4"
                                  (assert)
                                  (("4"
                                    (case "j=0")
                                    (("1" (grind) nil nil)
                                     ("2"
                                      (skeep)
                                      (("2"
                                        (lemma "cdr_columns_full")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (inst -1 "A" "_" "_")
                                            (("2" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (flatten)
                              (("3"
                                (assert)
                                (("3"
                                  (expand "length" 3)
                                  (("3"
                                    (assert)
                                    (("3"
                                      (typepred "A" "v1" "v2")
                                      (("3"
                                        (hide -1)
                                        (("3"
                                          (typepred
                                           "add(cdr[real](v1), cdr[real](v2))")
                                          (("3"
                                            (hide -1)
                                            (("3"
                                              (expand "length" -4)
                                              (("3"
                                                (expand "length" -6)
                                                (("3"
                                                  (assert)
                                                  (("3"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("4" (flatten) (("4" (assert) nil nil))
                              nil)
                             ("5" (flatten) (("5" (assert) nil nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (hide 2)
            (("3" (skeep)
              (("3" (typepred "v1+v2" "v1" "v2")
                (("3" (assert) (("3" (grind) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2)
      (("3" (skeep)
        (("3" (typepred "v1+v2" "v1" "v2") (("3" (grind) nil nil))
          nil))
        nil))
      nil))
    nil)
   ((pred type-eq-decl nil defined_types nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (add def-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (matvec def-decl "VectorN(m)" mat_vec_mult nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (cdr_columns formula-decl nil mat_vec_mult nil)
    (cdr_columns_full formula-decl nil mat_vec_mult nil)
    (dot_dist formula-decl nil vector_arithmetic nil)
    (full_matrix_columns formula-decl nil matrices matrices)
    (dot def-decl "real" matrices matrices)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (list_cons_extensionality formula-decl nil list_adt nil)
    (* const-decl "real" matrices matrices)
    (IF const-decl "[boolean, T, T -> T]" if_def nil)
    (MatrixMN type-eq-decl nil matrices matrices)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (v1 skolem-const-decl "VectorN(columns(A))" mat_vec_mult nil)
    (v2 skolem-const-decl "VectorN(columns(A))" mat_vec_mult nil)
    (A skolem-const-decl "FullMatrix" mat_vec_mult nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Matrix type-eq-decl nil matrices matrices)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (FullMatrix type-eq-decl nil matrices matrices)
    (<= const-decl "bool" reals nil)
    (columns def-decl "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}" matrices
     matrices)
    (VectorN type-eq-decl nil matrices matrices)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (rows const-decl "nat" matrices matrices)
    (* const-decl "VectorN(rows(A))" mat_vec_mult nil)
    (Vector type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices))
   shostak))
 (matv_dist_scal_TCC1 0
  (matv_dist_scal_TCC1-1 nil 3797763934 ("" (subtype-tcc) nil nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (Matrix type-eq-decl nil matrices matrices)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (FullMatrix type-eq-decl nil matrices matrices)
    (<= const-decl "bool" reals nil)
    (columns def-decl "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}" matrices
     matrices)
    (VectorN type-eq-decl nil matrices matrices)
    (* const-decl "VectorN(length(v2))" matrices matrices))
   nil
   (matv_dist_scal subtype
    "(matrices.*(mat_vec_mult.c, mat_vec_mult.v))"
    "matrices.VectorN(matrices.columns(mat_vec_mult.A))")))
 (matv_dist_scal 0
  (matv_dist_scal-1 nil 3797766117
   (""
    (case "FORALL (m:nat, A: FullMatrix, v: VectorN(columns(A)), c: real):
       length(A)=m IMPLIES  A * (c * v) = c * (A * v)")
    (("1" (skeep)
      (("1" (assert) (("1" (inst -1 "length(A)" "A" "v" "c") nil nil))
        nil))
      nil)
     ("2" (assert)
      (("2" (hide 2)
        (("2" (induct "m")
          (("1" (skeep) (("1" (grind) nil nil)) nil)
           ("2" (skeep)
            (("2" (skeep)
              (("2" (case "j=0")
                (("1" (case "null?(A)")
                  (("1" (expand "length" -4) (("1" (assert) nil nil))
                    nil)
                   ("2" (expand "*" 2)
                    (("2" (grind)
                      (("2" (decompose-equality 2)
                        (("2" (lemma "dot_scalar1")
                          (("2" (case "columns(A)=0")
                            (("1" (lemma "full_matrix_columns")
                              (("1"
                                (inst -1 "A")
                                (("1"
                                  (split -1)
                                  (("1" (assert) nil nil)
                                   ("2"
                                    (replace -2 -1)
                                    (("2"
                                      (typepred "v")
                                      (("2"
                                        (replace -4)
                                        (("2"
                                          (expand "length" -2)
                                          (("2"
                                            (lift-if -2)
                                            (("2"
                                              (split -2)
                                              (("1"
                                                (expand "length" -3)
                                                (("1"
                                                  (lift-if -3)
                                                  (("1"
                                                    (split -3)
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil)
                                                     ("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (flatten)
                                                (("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (inst -1 "car(A)" "v" "c")
                              (("1" (assert) nil nil)
                               ("2"
                                (typepred "v")
                                (("2" (grind) nil nil))
                                nil)
                               ("3"
                                (lemma "full_matrix_columns")
                                (("3"
                                  (inst -1 "A")
                                  (("3" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (assert)
                  (("2" (expand "*" 2)
                    (("2" (expand "matvec" 2)
                      (("2" (expand "rows" 2)
                        (("2" (assert)
                          (("2" (expand "scal" 2 3)
                            (("2" (decompose-equality 2)
                              (("1"
                                (lemma "dot_scalar1")
                                (("1"
                                  (inst -1 "car(A)" "v" "c")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (expand "*" -1)
                                      (("1"
                                        (expand "*" 1)
                                        (("1" (propax) nil nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (typepred "v")
                                    (("2" (grind) nil nil))
                                    nil)
                                   ("3" (grind) nil nil))
                                  nil))
                                nil)
                               ("2"
                                (inst -1 "cdr(A)" "v" "c")
                                (("1"
                                  (assert)
                                  (("1"
                                    (expand "length" -2)
                                    (("1"
                                      (lift-if -2)
                                      (("1"
                                        (case "null?(A)")
                                        (("1" (assert) nil nil)
                                         ("2"
                                          (assert)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (expand "*" -1)
                                              (("2"
                                                (expand "rows" -1)
                                                (("2"
                                                  (expand "length" 2 1)
                                                  (("2"
                                                    (lemma
                                                     "cdr_columns")
                                                    (("2"
                                                      (inst -1 "A")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil)
                                                       ("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (assert)
                                  (("2"
                                    (typepred "v")
                                    (("2"
                                      (lemma "cdr_columns")
                                      (("2"
                                        (inst -1 "A")
                                        (("1" (assert) nil nil)
                                         ("2"
                                          (assert)
                                          (("2"
                                            (expand "length" -3)
                                            (("2"
                                              (lift-if -3)
                                              (("2"
                                                (split -3)
                                                (("1"
                                                  (flatten)
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (flatten)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (expand
                                                       "length"
                                                       -1)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (flatten)
                                  (("3"
                                    (assert)
                                    (("3"
                                      (expand "length" -1)
                                      (("3"
                                        (lift-if -1)
                                        (("3"
                                          (split -1)
                                          (("1"
                                            (flatten)
                                            (("1" (assert) nil nil))
                                            nil)
                                           ("2"
                                            (flatten)
                                            (("2"
                                              (expand "length" -1)
                                              (("2"
                                                (assert)
                                                (("2"
                                                  (typepred "A")
                                                  (("2"
                                                    (lemma
                                                     "cdr_columns_full")
                                                    (("2"
                                                      (inst
                                                       -1
                                                       "A"
                                                       "_"
                                                       "_")
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("3" (hide 2)
            (("3" (skeep)
              (("3" (typepred "c*v")
                (("3" (typepred "v") (("3" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (hide 2)
      (("3" (skeep)
        (("3" (typepred "c*v" "v") (("3" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((pred type-eq-decl nil defined_types nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (matvec def-decl "VectorN(m)" mat_vec_mult nil)
    (scal def-decl "VectorN(length(v2))" matrices matrices)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (MatrixMN type-eq-decl nil matrices matrices)
    (cdr_columns_full formula-decl nil mat_vec_mult nil)
    (cdr_columns formula-decl nil mat_vec_mult nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (* const-decl "real" matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (dot_scalar1 formula-decl nil vector_arithmetic nil)
    (A skolem-const-decl "FullMatrix" mat_vec_mult nil)
    (v skolem-const-decl "VectorN(columns(A))" mat_vec_mult nil)
    (full_matrix_columns formula-decl nil matrices matrices)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (list_cons_extensionality formula-decl nil list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (dot def-decl "real" matrices matrices)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (null adt-constructor-decl "(null?)" list_adt nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Matrix type-eq-decl nil matrices matrices)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (FullMatrix type-eq-decl nil matrices matrices)
    (<= const-decl "bool" reals nil)
    (columns def-decl "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}" matrices
     matrices)
    (VectorN type-eq-decl nil matrices matrices)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (rows const-decl "nat" matrices matrices)
    (* const-decl "VectorN(rows(A))" mat_vec_mult nil)
    (Vector type-eq-decl nil matrices matrices)
    (* const-decl "VectorN(length(v2))" matrices matrices))
   shostak))
 (matv_dist_sub_TCC1 0
  (matv_dist_sub_TCC1-1 nil 3797763934
   ("" (skeep)
    (("" (typepred "v1-v2" "v1" "v2") (("" (grind) nil nil)) nil)) nil)
   ((FullMatrix type-eq-decl nil matrices matrices)
    (columns def-decl "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}" matrices
     matrices)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (<= const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (Matrix type-eq-decl nil matrices matrices)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (VectorN type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (real nonempty-type-from-decl nil reals nil)
    (Vector type-eq-decl nil matrices matrices)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (sub const-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (matv_dist_sub subtype
    "((matrices.-)(mat_vec_mult.v1, mat_vec_mult.v2))"
    "matrices.VectorN(matrices.columns(mat_vec_mult.A))")))
 (matv_dist_sub 0
  (matv_dist_sub-1 nil 3797765974
   ("" (skeep)
    (("" (expand "-" 1)
      (("" (expand "sub" 1)
        (("" (lemma "matv_dist_sum")
          (("" (lemma "matv_dist_scal")
            (("" (inst -1 "A" "v2" "-1")
              (("" (inst -2 "A" "v1" "scal(-1,v2)")
                (("1" (expand "+" -2)
                  (("1" (assert)
                    (("1" (replace -2 1)
                      (("1" (expand "*" -1 2)
                        (("1" (expand "*" -1 2)
                          (("1" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (typepred "scal(-1,v2)" "v2" "columns(A)")
                  (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (matv_dist_sum formula-decl nil mat_vec_mult nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (Matrix type-eq-decl nil matrices matrices)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (FullMatrix type-eq-decl nil matrices matrices)
    (<= const-decl "bool" reals nil)
    (columns def-decl "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}" matrices
     matrices)
    (VectorN type-eq-decl nil matrices matrices)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (* const-decl "VectorN(length(v2))" matrices matrices)
    (v2 skolem-const-decl "VectorN(columns(A))" mat_vec_mult nil)
    (A skolem-const-decl "FullMatrix" mat_vec_mult nil)
    (scal def-decl "VectorN(length(v2))" matrices matrices)
    (Vector type-eq-decl nil matrices matrices)
    (matv_dist_scal formula-decl nil mat_vec_mult nil)
    (sub const-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   shostak))
 (matv_asso_TCC1 0
  (matv_asso_TCC1-1 nil 3797763934 ("" (subtype-tcc) nil nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (list type-decl nil list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" list_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (Matrix type-eq-decl nil matrices matrices)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (length def-decl "nat" list_props nil)
    (below type-eq-decl nil naturalnumbers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil nat_types nil)
    (nth def-decl "T" list_props nil)
    (FullMatrix type-eq-decl nil matrices matrices)
    (> const-decl "bool" reals nil) (<= const-decl "bool" reals nil)
    (columns def-decl "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}" matrices
     matrices)
    (VectorN type-eq-decl nil matrices matrices)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (rows const-decl "nat" matrices matrices)
    (* const-decl "VectorN(rows(A))" mat_vec_mult nil))
   nil
   (matv_asso subtype
    "(mat_vec_mult.*(mat_vec_mult.B, mat_vec_mult.v))"
    "matrices.VectorN(matrices.columns(mat_vec_mult.A))")))
 (matv_asso_TCC2 0
  (matv_asso_TCC2-1 nil 3797763934
   ("" (skeep)
    (("" (typepred "B")
      (("" (typepred "v")
        (("" (lemma "columns_mult")
          (("" (inst -1 "A" "B")
            (("" (assert)
              (("" (typepred "v")
                (("" (expand "*" 1)
                  (("" (expand "columns" -8)
                    (("" (assert)
                      (("" (expand "rows" -8)
                        (("" (assert)
                          (("" (expand "length" -8)
                            (("" (lift-if -8)
                              ((""
                                (split -8)
                                (("1"
                                  (split -8)
                                  (("1"
                                    (expand "columns" -7)
                                    (("1"
                                      (assert)
                                      (("1" (grind) nil nil))
                                      nil))
                                    nil)
                                   ("2" (grind) nil nil))
                                  nil)
                                 ("2"
                                  (flatten)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((> const-decl "bool" reals nil)
    (columns def-decl "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}" matrices
     matrices)
    (<= const-decl "bool" reals nil)
    (rows const-decl "nat" matrices matrices)
    (FullMatrix type-eq-decl nil matrices matrices)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (real nonempty-type-from-decl nil reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Matrix type-eq-decl nil matrices matrices)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (columns_mult formula-decl nil matrices matrices)
    (mult_full application-judgement "FullMatrix" matrices matrices)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (* const-decl "{A: MatrixMN(rows(M), columns(N)) |
   FORALL (i, j): entry(A)(i, j) = row(M)(i) * col(N)(j)}" matrices
       matrices)
    (VectorN type-eq-decl nil matrices matrices)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (matv_asso subtype "mat_vec_mult.v"
    "matrices.VectorN(matrices.columns((matrices.*(mat_vec_mult.A, mat_vec_mult.B))))")))
 (matv_asso 0
  (matv_asso-1 nil 3797768780
   ("" (lemma "matv_matmat")
    (("" (skeep)
      (("" (inst-cp -1 "A" "B*v")
        (("" (inst -1 "A*B" "v")
          (("" (replace -1 1)
            (("" (lemma "matv_matmat")
              (("" (inst -1 "B" "v")
                (("" (replace -1 1)
                  (("" (lemma "vec2mat_mult")
                    (("" (lemma "vec2mat_mult")
                      (("" (inst-cp -1 "B" "v")
                        (("" (split -2)
                          (("1" (replace -1)
                            (("1" (assert)
                              (("1"
                                (lemma "matrix_mult_assoc")
                                (("1"
                                  (inst -1 "vec2mat(v)" "A" "B")
                                  (("1"
                                    (assert)
                                    (("1"
                                      (typepred "B")
                                      (("1"
                                        (expand "rows" -3)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (expand "length" -3)
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (typepred "B") (("2" (propax) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (mult_full application-judgement "FullMatrix" matrices matrices)
    (MatrixMN type-eq-decl nil matrices matrices)
    (entry const-decl "real" matrices matrices)
    (Vector type-eq-decl nil matrices matrices)
    (* const-decl "real" matrices matrices)
    (row const-decl "Vector" matrices matrices)
    (col def-decl "VectorN(rows(M))" matrices matrices)
    (* const-decl "{A: MatrixMN(rows(M), columns(N)) |
   FORALL (i, j): entry(A)(i, j) = row(M)(i) * col(N)(j)}" matrices
       matrices)
    (vec2mat def-decl "MatrixMN(length(v), min(length(v), 1))"
     mat_vec_mult nil)
    (min const-decl "{p: real | p <= m AND p <= n}" real_defs nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (matrix_mult_assoc formula-decl nil matrices matrices)
    (vec2mat_mult formula-decl nil mat_vec_mult nil)
    (* const-decl "VectorN(rows(A))" mat_vec_mult nil)
    (rows const-decl "nat" matrices matrices)
    (VectorN type-eq-decl nil matrices matrices)
    (columns def-decl "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}" matrices
     matrices)
    (<= const-decl "bool" reals nil) (> const-decl "bool" reals nil)
    (FullMatrix type-eq-decl nil matrices matrices)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (real nonempty-type-from-decl nil reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Matrix type-eq-decl nil matrices matrices)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (matv_matmat formula-decl nil mat_vec_mult nil))
   shostak))
 (matv_add_zero_TCC1 0
  (matv_add_zero_TCC1-1 nil 3798068688
   ("" (skeep)
    (("" (typepred "B")
      (("" (typepred "y3 - B * y2")
        (("" (typepred "y2" "B*y2")
          (("" (expand "rows")
            (("" (assert)
              (("" (hide -1 -3 -5 -7)
                (("" (hide -1)
                  (("" (typepred "y3")
                    (("" (assert)
                      (("" (hide -1)
                        (("" (replace -1)
                          (("" (replace -5)
                            (("" (replace -2)
                              ((""
                                (expand "max" -3)
                                (("" (propax) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((> const-decl "bool" reals nil)
    (columns def-decl "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}" matrices
     matrices)
    (<= const-decl "bool" reals nil)
    (rows const-decl "nat" matrices matrices)
    (FullMatrix type-eq-decl nil matrices matrices)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (real nonempty-type-from-decl nil reals nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Matrix type-eq-decl nil matrices matrices)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (Vector type-eq-decl nil matrices matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (VectorN type-eq-decl nil matrices matrices)
    (- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (* const-decl "VectorN(rows(A))" mat_vec_mult nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   nil
   (matv_add_zero subtype
    "((matrices.-)(mat_vec_mult.y3, mat_vec_mult.*(mat_vec_mult.B, mat_vec_mult.y2)))"
    "matrices.VectorN(matrices.columns(mat_vec_mult.A))")))
 (matv_add_zero 0
  (matv_add_zero-1 nil 3798068792
   ("" (skeep)
    (("" (case " (A * B * y2) = (A * y3) - A * (y3 - B * y2)")
      (("1" (assert)
        (("1" (replace -1 1)
          (("1" (lemma "neg_1")
            (("1" (inst -1 "(A * y3)" " A * (y3 - B * y2)")
              (("1" (expand "-" 1 1)
                (("1" (expand "sub" 1 1)
                  (("1" (expand "*" -1 1)
                    (("1" (replace -1 1)
                      (("1" (expand "-" 1 3)
                        (("1" (expand "sub" 1 1)
                          (("1" (expand "-" 1 2)
                            (("1" (expand "sub" 1 1)
                              (("1"
                                (expand "+" 1)
                                (("1"
                                  (lemma "add_commute")
                                  (("1"
                                    (inst
                                     -1
                                     "A * (y3 - B * y2)"
                                     "scal(-1, (A * y3))")
                                    (("1"
                                      (expand "+" -1 1)
                                      (("1"
                                        (replace -1 1)
                                        (("1"
                                          (lemma "asso_add")
                                          (("1"
                                            (inst
                                             -1
                                             "y1"
                                             "scal(-1, (A * y3))"
                                             "A * (y3 - B * y2)")
                                            (("1"
                                              (assert)
                                              (("1"
                                                (expand "+" -1 1)
                                                (("1"
                                                  (expand "+" -1 2)
                                                  (("1"
                                                    (expand "+" -1 2)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (expand "+" -1)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (replace
                                                             -1
                                                             1)
                                                            (("1"
                                                              (hide
                                                               -2
                                                               -3
                                                               -4)
                                                              (("1"
                                                                (expand
                                                                 "+"
                                                                 1)
                                                                (("1"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (typepred
                                               "A * (y3 - B * y2)")
                                              (("2"
                                                (hide -1)
                                                (("2"
                                                  (expand "rows" -1)
                                                  (("2"
                                                    (typepred "A")
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (assert)
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil)
       ("2" (hide 2)
        (("2" (assert)
          (("2" (lemma "matv_dist_sub")
            (("2" (inst -1 "A" "y3" "B*y2")
              (("2" (replace -1 1)
                (("2" (assert)
                  (("2" (lemma "sub_idx")
                    (("2" (inst -1 "A*y3" "A*(B*y2)")
                      (("2" (replace -1 1)
                        (("2" (expand "-" 1 1)
                          (("2" (expand "sub" 1 1)
                            (("2" (lemma "dist")
                              (("2"
                                (inst
                                 -1
                                 "-1"
                                 " A * y3"
                                 "(-1 * (A * (B * y2)))")
                                (("1"
                                  (expand "*" -1 1)
                                  (("1"
                                    (replace -1 1)
                                    (("1"
                                      (lemma "asso_v")
                                      (("1"
                                        (inst -1 "-1" "-1" "A*(B*y2)")
                                        (("1"
                                          (replace -1 1)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (case "NOT -1 * -1 = 1")
                                              (("1" (assert) nil nil)
                                               ("2"
                                                (replace -1 1)
                                                (("2"
                                                  (lemma "one_idx")
                                                  (("2"
                                                    (inst
                                                     -1
                                                     "A*(B*y2)")
                                                    (("2"
                                                      (replace -1 1)
                                                      (("2"
                                                        (expand "+" 1)
                                                        (("2"
                                                          (lemma
                                                           "asso_add")
                                                          (("2"
                                                            (inst
                                                             -1
                                                             "A * y3"
                                                             "-1 * (A * y3)"
                                                             " A * (B * y2)")
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (expand
                                                                 "+"
                                                                 -1
                                                                 3)
                                                                (("2"
                                                                  (expand
                                                                   "+"
                                                                   -1
                                                                   3)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (replace
                                                                       -1
                                                                       1
                                                                       rl)
                                                                      (("2"
                                                                        (expand
                                                                         "+"
                                                                         1)
                                                                        (("2"
                                                                          (lemma
                                                                           "sub_self")
                                                                          (("2"
                                                                            (inst
                                                                             -1
                                                                             "A*y3")
                                                                            (("2"
                                                                              (expand
                                                                               "-"
                                                                               -1)
                                                                              (("2"
                                                                                (expand
                                                                                 "sub"
                                                                                 -1)
                                                                                (("2"
                                                                                  (expand
                                                                                   "*"
                                                                                   1
                                                                                   4)
                                                                                  (("2"
                                                                                    (replace
                                                                                     -1
                                                                                     1)
                                                                                    (("2"
                                                                                      (lemma
                                                                                       "zero_id")
                                                                                      (("2"
                                                                                        (lemma
                                                                                         "add_commute")
                                                                                        (("2"
                                                                                          (inst
                                                                                           -1
                                                                                           "zero_vec(length(A * y3))"
                                                                                           "A * (B * y2)")
                                                                                          (("1"
                                                                                            (expand
                                                                                             "+"
                                                                                             -1
                                                                                             1)
                                                                                            (("1"
                                                                                              (replace
                                                                                               -1
                                                                                               1)
                                                                                              (("1"
                                                                                                (inst
                                                                                                 -2
                                                                                                 "A*(B*y2)")
                                                                                                (("1"
                                                                                                  (case
                                                                                                   "length(A * (B * y2)) = (length(A * y3))")
                                                                                                  (("1"
                                                                                                    (replace
                                                                                                     -1
                                                                                                     -3)
                                                                                                    (("1"
                                                                                                      (replace
                                                                                                       -3
                                                                                                       1)
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (lemma
                                                                                                           "matv_asso")
                                                                                                          (("1"
                                                                                                            (inst
                                                                                                             -1
                                                                                                             "A"
                                                                                                             "B"
                                                                                                             "y2")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (assert)
                                  (("2"
                                    (hide 2)
                                    (("2"
                                      (typepred
                                       "(-1 * (A * (B * y2)))")
                                      (("2"
                                        (hide -1)
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((- const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (> const-decl "bool" reals nil)
    (* const-decl "{A: MatrixMN(rows(M), columns(N)) |
   FORALL (i, j): entry(A)(i, j) = row(M)(i) * col(N)(j)}" matrices
       matrices)
    (col def-decl "VectorN(rows(M))" matrices matrices)
    (row const-decl "Vector" matrices matrices)
    (* const-decl "real" matrices matrices)
    (Vector type-eq-decl nil matrices matrices)
    (entry const-decl "real" matrices matrices)
    (MatrixMN type-eq-decl nil matrices matrices)
    (* const-decl "VectorN(rows(A))" mat_vec_mult nil)
    (rows const-decl "nat" matrices matrices)
    (VectorN type-eq-decl nil matrices matrices)
    (columns def-decl "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}" matrices
     matrices)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (<= const-decl "bool" reals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" reals nil)
    (Matrix type-eq-decl nil matrices matrices)
    (length def-decl "nat" list_props nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (FullMatrix type-eq-decl nil matrices matrices)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (boolean nonempty-type-decl nil booleans nil)
    (list type-decl nil list_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (mult_full application-judgement "FullMatrix" matrices matrices)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (sub const-decl "VectorN(max(length(v1), length(v2)))" matrices
     matrices)
    (add_commute formula-decl nil vector_arithmetic nil)
    (asso_add formula-decl nil vector_arithmetic nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (y3 skolem-const-decl "VectorN(columns(A))" mat_vec_mult nil)
    (A skolem-const-decl
     "{AA: FullMatrix | columns(AA) > 0 AND rows(AA) > 0}" mat_vec_mult
     nil)
    (scal def-decl "VectorN(length(v2))" matrices matrices)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (+ const-decl "VectorN(max(length(v1), length(v2)))" matrices
       matrices)
    (* const-decl "VectorN(length(v2))" matrices matrices)
    (neg_1 formula-decl nil vector_arithmetic nil)
    (dist formula-decl nil vector_arithmetic nil)
    (asso_v formula-decl nil vector_arithmetic nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (one_idx formula-decl nil vector_arithmetic nil)
    (sub_self formula-decl nil vector_arithmetic nil)
    (zero_id formula-decl nil vector_arithmetic nil)
    (zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (matv_asso formula-decl nil mat_vec_mult nil)
    (odd_times_odd_is_odd application-judgement "odd_int" integers nil)
    (y2 skolem-const-decl "VectorN(columns(B))" mat_vec_mult nil)
    (B skolem-const-decl
     "{BB: FullMatrix | rows(BB) = columns(A) AND columns(BB) > 0}"
     mat_vec_mult nil)
    (sub_idx formula-decl nil vector_arithmetic nil)
    (matv_dist_sub formula-decl nil mat_vec_mult nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil))
   shostak))
 (matv_zerovec 0
  (matv_zerovec-1 nil 3798132882
   (""
    (case "FORALL (m:nat,A: FullMatrix): length(A)=m IMPLIES A * zero_vec(columns(A)) = zero_vec(rows(A))")
    (("1" (skeep) (("1" (inst -1 "length(A)" "A") nil nil)) nil)
     ("2" (hide 2)
      (("2" (induct "m")
        (("1" (skeep) (("1" (grind) nil nil)) nil)
         ("2" (skeep)
          (("2" (skeep)
            (("2" (assert)
              (("2" (expand "*" 1 1)
                (("2" (expand "matvec" 1 1)
                  (("2" (assert)
                    (("2" (lift-if 1)
                      (("2" (split 1)
                        (("1" (flatten) (("1" (grind) nil nil)) nil)
                         ("2" (flatten)
                          (("2" (inst -1 "cdr(A)")
                            (("1" (assert)
                              (("1"
                                (expand "length" -2)
                                (("1"
                                  (expand "rows" 1)
                                  (("1"
                                    (expand "length" 1)
                                    (("1"
                                      (lift-if 1)
                                      (("1"
                                        (split 1)
                                        (("1" (propax) nil nil)
                                         ("2"
                                          (flatten)
                                          (("2"
                                            (assert)
                                            (("2"
                                              (assert)
                                              (("2"
                                                (expand "zero_vec" 3 3)
                                                (("2"
                                                  (decompose-equality
                                                   3)
                                                  (("1"
                                                    (lemma "dot_zero")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (inst
                                                         -1
                                                         "car(A)"
                                                         "columns(A)")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (lemma
                                                             "cdr_columns")
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "A")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (replace
                                                                   -1)
                                                                  (("1"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (expand "*" -1 1)
                                                    (("2"
                                                      (expand "rows" 1)
                                                      (("2"
                                                        (expand
                                                         "length"
                                                         1
                                                         1)
                                                        (("2"
                                                          (expand
                                                           "rows"
                                                           -1)
                                                          (("2"
                                                            (lemma
                                                             "cdr_columns")
                                                            (("2"
                                                              (inst
                                                               -1
                                                               "A")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil)
                                                               ("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (lemma "cdr_columns_full")
                              (("2"
                                (assert)
                                (("2"
                                  (flatten)
                                  (("2"
                                    (skeep)
                                    (("2"
                                      (inst -1 "A" "i" "j!1")
                                      nil
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((zero_vec def-decl "VectorN(m)" vector_arithmetic nil)
    (* const-decl "VectorN(rows(A))" mat_vec_mult nil)
    (rows const-decl "nat" matrices matrices)
    (VectorN type-eq-decl nil matrices matrices)
    (columns def-decl "{c: nat |
   (FORALL (i: below(length(M))): length(nth(M, i)) <= c) AND
    (null?(M) AND c = 0 OR
      EXISTS (i: below(length(M))): length(nth(M, i)) = c)}" matrices
     matrices)
    (<= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (FullMatrix type-eq-decl nil matrices matrices)
    (nth def-decl "T" list_props nil)
    (below type-eq-decl nil nat_types nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (below type-eq-decl nil naturalnumbers nil)
    (length def-decl "nat" list_props nil)
    (< const-decl "bool" reals nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (Matrix type-eq-decl nil matrices matrices)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" list_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (list type-decl nil list_adt nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (pred type-eq-decl nil defined_types nil)
    (nat_induction formula-decl nil naturalnumbers nil)
    (matvec def-decl "VectorN(m)" mat_vec_mult nil)
    (listn_0 name-judgement "listn[real](0)" vector_arithmetic nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (cdr adt-accessor-decl "[(cons?) -> list]" list_adt nil)
    (A skolem-const-decl "FullMatrix" mat_vec_mult nil)
    (dot_zero formula-decl nil vector_arithmetic nil)
    (cdr_columns formula-decl nil mat_vec_mult nil)
    (max const-decl "{p: real | p >= m AND p >= n}" real_defs nil)
    (dot def-decl "real" matrices matrices)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (nonneg_rat_max application-judgement
     "{s: nonneg_rat | s >= q AND s >= r}" real_defs nil)
    (nat_max application-judgement "{k: nat | i <= k AND j <= k}"
     real_defs nil)
    (list_cons_extensionality formula-decl nil list_adt nil)
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (Vector type-eq-decl nil matrices matrices)
    (* const-decl "real" matrices matrices)
    (car adt-accessor-decl "[(cons?) -> T]" list_adt nil)
    (MatrixMN type-eq-decl nil matrices matrices)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (cdr_columns_full formula-decl nil mat_vec_mult nil)
    (nnint_plus_posint_is_posint application-judgement "posint"
     integers nil))
   nil)))