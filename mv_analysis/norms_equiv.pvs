norms_equiv   [ n:posnat ] %Goeie dag
%n - showing norms are equivalent on Rn
		: THEORY

%	              Aug 2018 JTS
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%|    show all norms on Rn       |%
%|        are equivalent         |%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%-----     %
  BEGIN
%     -----%

%--------------------------------------------
%% Importing sum_vecs[n] to have the standard sum
%  identity 

%% Importing norm_1_extreme_value_theorem[n]
%  to have analysis tools for proof
%--------------------------------------------

  IMPORTING sum_vecs[ n ]
  IMPORTING norm_1_extreme_value_theorem[ n ]
  
%--------------------------------------------
%% Define equivalence of norms 
%--------------------------------------------c

equiv?( n1, n2 :( norm?( n ) ) ):
     bool = 
     EXISTS( c1, c2 :posreal ):
     FORALL( x :VectorN( n ) ):
     c1 * n1( x ) <= n2( x )
     AND
     n2( x ) <= c2 * ( n1( x ) ) ;

equiv_m?( m :posnat, n1, n2 :( norm?( m ) ) ):
     bool = 
     EXISTS( c1, c2 :posreal ):
     FORALL( x :VectorN( m ) ):
     c1 * n1( x ) <= n2( x )
     AND
     n2( x ) <= c2 * ( n1( x ) ) ;

%--------------------------------------------
%% Equivalence of norms is reflexive
%--------------------------------------------
equiv_trans: LEMMA
     FORALL( n1, n2 :( norm?( n ) ) ) :
     equiv?( n1, n2 )
     IFF
     equiv?( n2, n1 ) ;

%--------------------------------------------
%%If every norm is equivalent to the 1-norm,
% then all norms are equivalent
%--------------------------------------------

equiv_1norm_imp_equiv: LEMMA
     ( FORALL( norm :( norm?( n ) ) ):
     equiv?( norm,norm_1( n ) ) )
     IMPLIES
     FORALL( n1, n2 :( norm?( n ) ) ):
     equiv?( n1, n2 ) ;
     
%--------------------------------------------
%%If every norm is equiv to the 1-norm
% for vectors of unit length,
% then they are all eqiuvalent
%--------------------------------------------

norm1_div: LEMMA
     FORALL( x :{ xx :VectorN( n ) | norm_1( n )( xx ) /= 0 } ):
     norm_1( n )( (1 / norm_1( n )( x ) ) * x  ) = 1

equiv_unit_imp_equiv: LEMMA
     FORALL( norm :( norm?( n ) ) ):
     ( ( EXISTS( c1, c2 :posreal ):
     FORALL( x :{xx :VectorN( n ) |
     norm_1( n )( xx ) = 1 } ):
     c1 * norm_1( n )( x ) <= norm( x )
     AND
     norm( x ) <= c2 * norm_1( n )( x ) )
     IMPLIES
     equiv?( norm_1( n ), norm ) ) ;
     
%--------------------------------------------
%% using standard sum to bound norm of vector
%--------------------------------------------

standard_norm: LEMMA FORALL(m:posnat, v:VectorN(m),
     nn:(norm?(m))):
     FORALL(i:below(m)):
     nn(Standard_sum(v,i)) <=
     sigma(0,i,(LAMBDA(j:nat):
     IF j<m
     THEN abs(nth(v,j))*nn(e(length(v),j))
     ELSE 0
     ENDIF )) ;

max_e_exists: LEMMA FORALL(m:posnat,nn:(norm?(m))):
     FORALL(i:below(m)):
     EXISTS(j:upto(i)):
     FORALL(k:upto(i)):
     nn(e(m,k)) <= nn(e(m,j)) ;
     
max_e(m:posnat,nn:(norm?(m))):
     {c:posreal |FORALL(i:below(m)):
     nn(e(m,i)) <= c AND EXISTS(i:below(m)): c=nn(e(m,i))}
     = choose[posreal]({c:posreal |FORALL(i:below(m)):
     nn(e(m,i)) <= c AND EXISTS(i:below(m)): c=nn(e(m,i))}) ;
     
 standard_norm_ineq: LEMMA FORALL(m:posnat, v:VectorN(m), nn:(norm?(m))):
     FORALL(i:below(m)):
     nn(Standard_sum(v,i)) <=
     max_e(m,nn)
     *(sigma(0,i,(LAMBDA(j:nat):
     IF j<m
     THEN abs(nth(v,j))
     ELSE 0
     ENDIF ))) ;

one_norm_sum: LEMMA FORALL( ll: (cons?)):
     (sigma(0,length(ll)-1,(LAMBDA(j:nat):
     IF j<length(ll)
     THEN abs(nth(ll,j))
     ELSE 0
     ENDIF ))) = norm_1(ll) ;

%--------------------------------------------
%% Using standard sum to compare every norm
%  with 1-norm
%--------------------------------------------

standard_max_e_one_norm:
     LEMMA FORALL(m:posnat, v:VectorN(m), nn:(norm?(m))):
     nn(Standard_sum(v,m-1)) <=
     max_e(m,nn)
     *norm_1(m)(v) ;

norm_to_max_e_one_norm:
     LEMMA FORALL(m:posnat, v:VectorN(m), nn:(norm?(m))):
     nn(v) <=
     max_e(m,nn)
     *norm_1(m)(v) ;
     
%--------------------------------------------
%% Define unit sphere for 1-norm 
%--------------------------------------------

unit_sphere_norm_1: domain = {v:VectorN(n) | norm_1(n)(v)=1} 

%--------------------------------------------
%% unit sphere for 1-norm is closed and bounded
%--------------------------------------------

unit_sphere_norm_1_closed_bounded: LEMMA
     norm_1_closed?(unit_sphere_norm_1)
     AND norm_1_bounded?(unit_sphere_norm_1) ;
     
%--------------------------------------------
%% any norm achieves a max and min
%  on unit sphere for 1-norm
%--------------------------------------------

norm_achieve_max_usn1: LEMMA FORALL(nn:(norm?(n))):
     EXISTS(p:(unit_sphere_norm_1),c:real):
     (is_glob_maximizer?(LAMBDA(v:VectorN(n)):nn(v),unit_sphere_norm_1)(p)
     AND
     is_glob_max?(LAMBDA(v:VectorN(n)):nn(v),unit_sphere_norm_1)(c))
     AND
     nn(p)=c ;

norm_achieve_min_usn1: LEMMA FORALL(nn:(norm?(n))):
     EXISTS(p:(unit_sphere_norm_1),c:real):
     (is_glob_minimizer?(LAMBDA(v:VectorN(n)):nn(v),unit_sphere_norm_1)(p)
     AND
     is_glob_min?(LAMBDA(v:VectorN(n)):nn(v),unit_sphere_norm_1)(c))
     AND
     nn(p)=c

%--------------------------------------------
%% All norms on Rn are equivalent
%--------------------------------------------

equiv_norm: LEMMA
     FORALL(n1,n2 :(norm?(n))):
     equiv?(n1,n2)


%________________________________________________________
 % "A good picture is equivalent to a good deed"
 %      	    	                -Vincent Van Gogh  

  %  ~The End~  %
  END norms_equiv
