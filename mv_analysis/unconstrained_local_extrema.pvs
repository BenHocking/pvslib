unconstrained_local_extrema   [n:posnat ] % Hello There
%%n - local extrema of f: D - R where D is a subset of Rn
		: THEORY
		
%	              Aug 2018 JTS
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%|    define local extrema       |%
%|for unconstrained optimization |%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%-----     %
  BEGIN
%     -----%

%--------------------------------------------
%% Importing domain_vec2real_def[n]
%  to have domains

%% Importing norms_equiv to help define local
%  extreme
%--------------------------------------------

  IMPORTING domain_vec2real_def[n]
  IMPORTING norms_equiv

%--------------------------------------------
%Define local max/min
%in terms of the all norms
%--------------------------------------------

is_loc_minimizer?(
     f: vec2real_f, D: domain )( v: (D)): bool =
     FORALL (nn:(norm?(n))):
     (EXISTS ( epsilon: posreal ):
     FORALL ( v2: VectorN( n ) ):
     ( D( v2 )
     AND nn( v-v2 )< epsilon )
     IMPLIES f( v )<= f( v2 ))  ;
	
is_loc_min?(f: vec2real_f, D:domain)
     ( c: real): bool =
     FORALL (nn:(norm?(n))):
     (EXISTS ( epsilon: posreal, v: (D) ):
     f( v ) = c
     AND FORALL ( v2: VectorN( n ) ):
     ( D( v2 )
     AND nn( v - v2 ) < epsilon )
     IMPLIES f( v ) <= f( v2 )) ;

is_loc_maximizer?(f: vec2real_f, D:domain )
     ( v: (D)): bool =
     FORALL (nn:(norm?(n))):
     (EXISTS ( epsilon: posreal ):
     FORALL ( v2: VectorN( n ) ):
     ( D( v2 )
     AND nn( v - v2 ) < epsilon )
     IMPLIES f( v2 ) <= f( v )) ;
	
is_loc_max?(f: vec2real_f, D: domain )
      (c: real):
      bool =
      (FORALL (nn:(norm?(n))):
      EXISTS ( epsilon: real, v: (D) ):
	f( v ) = c
	AND FORALL ( v2: VectorN( n ) ):
	( D( v2 ) AND nn( v-v2 )<epsilon )
	IMPLIES f( v2 ) <= f( v )) ;

%--------------------------------------------
%Define local max/min
%in terms of specific norms
%--------------------------------------------

is_loc_minimizer?(nn:(norm?(n)))
     (f: vec2real_f, D: domain )( v: (D)): bool =
     EXISTS ( epsilon: posreal ):
     FORALL ( v2: VectorN( n ) ):
     ( D( v2 )
     AND nn( v-v2 )< epsilon )
     IMPLIES f( v )<= f( v2 )  ;
	
is_loc_min?(nn:(norm?(n)))(f: vec2real_f, D:domain)
     ( c: real): bool =
     EXISTS ( epsilon: posreal, v: (D) ):
     f( v ) = c
     AND FORALL ( v2: VectorN( n ) ):
     ( D( v2 )
     AND nn( v - v2 ) < epsilon )
     IMPLIES f( v ) <= f( v2 ) ;

is_loc_maximizer?(nn:(norm?(n)))(f: vec2real_f, D:domain )
     ( v: (D)): bool =
     EXISTS ( epsilon: posreal ):
     FORALL ( v2: VectorN( n ) ):
     ( D( v2 )
     AND nn( v - v2 ) < epsilon )
     IMPLIES f( v2 ) <= f( v ) ;
	
is_loc_max?(nn:(norm?(n)))(f: vec2real_f, D: domain )
      (c: real):
      bool =
      EXISTS ( epsilon: real, v: (D)):
      f( v ) = c
      AND FORALL ( v2: VectorN( n ) ):
      ( D( v2 ) AND nn( v-v2 )<epsilon )
      IMPLIES f( v2 ) <= f( v ) ;

	
%--------------------------------------------
% Doesn't matter what norm you use
%--------------------------------------------

loc_minimizer_equiv: LEMMA FORALL(f:vec2real_f, D:domain, v:(D)):
     (EXISTS (nn:(norm?(n))):
     is_loc_minimizer?(nn)(f,D)(v))
     IFF
     is_loc_minimizer?(f,D)(v) ;

loc_min_equiv: LEMMA FORALL(f:vec2real_f, D:domain, c:real):
     (EXISTS (nn:(norm?(n))):
     is_loc_min?(nn)(f,D)(c))
     IFF
     is_loc_min?(f,D)(c)


loc_maximizer_equiv: LEMMA FORALL(f:vec2real_f, D:domain, v:(D)):
     (EXISTS (nn:(norm?(n))):
     is_loc_maximizer?(nn)(f,D)(v))
     IFF
     is_loc_maximizer?(f,D)(v) ;

loc_max_equiv: LEMMA FORALL(f:vec2real_f, D:domain, c:real):
     (EXISTS (nn:(norm?(n))):
     is_loc_max?(nn)(f,D)(c))
     IFF
     is_loc_max?(f,D)(c)
	
%--------------------------------------------
%Test lemma
%--------------------------------------------

%(5) zero is a local minimizer of x^2
zero_loc_5: LEMMA  (n=1) IMPLIES  
		  is_loc_minimizer?(norm_inf(n))(
		  LAMBDA(v: VectorN(1)): nth(v,0) * nth(v,0),
		  (LAMBDA(v: VectorN(1)): TRUE))((: 0 :))

%________________________________________________________
 % "The way to change the world is through
 %     individual responsibility and taking
 %     local action in your own community.
 %      	    	                   -Jeff Bridges 

  %---       ~The End~      ---%
  END unconstrained_local_extrema
