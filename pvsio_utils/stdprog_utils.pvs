stdprog_utils[T:TYPE+] : THEORY
BEGIN

  IMPORTING stdlang_utils

  to_lisp_(t:T) : Lisp_

  reset(v:Mutable[T]) : void

  undefined?(v:Mutable[T]) : MACRO bool =
    undef(v)

  defined?(v:Mutable[T]) : MACRO bool =
    NOT undef(v)

  %% Mutable variables can be used as stacks, where val is the top of the stack.
  %% Stack is empty when undef is true
  
  push_lisp(v:(defined?),t:T) : void

  % Pushes value to the top of the mutable variable and skips
  push(v:Mutable[T],t:T) : MACRO void =
    IF undef(v) THEN set(v,t)
    ELSE push_lisp(v,t)
    ENDIF

  pop_lisp(v:(defined?)) : void

  % Pops value of the mutable variable and fails silently when mutable variable is undefined
  pop(v:Mutable[T]) : MACRO void =
    IF undef(v) THEN fail
    ELSE pop_lisp(v)
    ENDIF

  unwind_protect_lift(ft:[Dummy->T],fs:[Dummy->void]) : T

  % Evaluate the t, returning its value. The cleanup code will be evaluated if control leaves t.
  unwind_protect(t:T,cleanup:void) : MACRO T =
    unwind_protect_lift(LAMBDA(d:Dummy):t,LAMBDA(d:Dummy):cleanup)

END stdprog_utils
