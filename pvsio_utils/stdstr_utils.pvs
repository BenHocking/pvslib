stdstr_utils: THEORY
BEGIN

  IMPORTING stdmath_utils

  %% Boolean Exception Tag
  NotABoolean : ExceptionTag[string] ="NotABoolean"

  %% May throw NotABoolean                              
  str2boolean(s:string): bool =
    IF str2bool(s,"TRUE")  THEN TRUE
    ELSIF str2bool(s,"FALSE") THEN FALSE
    ELSE throw(NotABoolean,s)
    ENDIF

  StringChar : TYPE = {str:string | length(str) = 1}

  %% Index of rightmost occurrence of s1 in s2 or -1 if s1 doesn't occur in s2
  strfind_from_end(s1,s2:string): {i:int | i <= length(s2)-length(s1)}

  %% If i <= j returns substring S[i..j]. Otherwise, returns substring
  %% S[j..i]. Empty if indices are out of range    
  %% NOTE: Name changed in PVS-8.0 from substr to substring to avoid clash
  %% with charstring.substr. stdstr.substr is still available but requires full
  %% qualification
  substring(s:string,i,j:int) : string

  %% NOTE: Name changed in PVS-8.0 from strcmp to strcompare to avoid clash
  %% with charstring.strcmp. The function stdstr.strcmp is still available but
  %% requires full qualification
  strcompare(s1,s2:string): int = 
    strcmp(s1,s2,TRUE)

  %% Reverse string
  strreverse(s:string) : string =
    IF length(s) = 0 THEN s
    ELSE 
      substring(s,length(s)-1,0)
    ENDIF

  %% Returns a new string in which all the occurences of part in s 
  %% is replaced with replacement."
  strreplace(s,part,replacement:string): string

  %% Split str using separator
  strsplit(str: string, separator: StringChar): list[string]

  %% String concatenation
  %% This function replaces concat in PVSio@stdstr. It will be included in PVS-8.0.   
  strconcat(s1:string,s2:string):{ str:string | length(str)=length(s1)+length(s2) } =
    s1 o s2

  %% Converts real number to string decimal representation using given precision, i.e., natural
  %% number n denoting 10^(-n), rounding mode, i.e, TowardsZero,TowardsInfnty,TowardsNegInfnty,
  %% TowardsPosInfnty. Displays trailing zeros when zeros is set to TRUE
  rat2decstr_with_zeros(r:rat,precision:nat,rounding:RoundingMode,zeros:bool) : string

  rat2decstr(r:rat,precision:nat,rounding:RoundingMode) : string =
    rat2decstr_with_zeros(r,precision,rounding,FALSE)

  rat2decstr(r:rat) : string =
    rat2decstr(r,val(PRECISION))

  %% Converts rational number to string. The rational is printed in decimal representation if the
  %% representation is finite. Otherwise, it prints its rational form.
  %% NOTE: This function replaces rat2str in PVSio@stdstr. It will be included PVS-8.0. 
  rat2str(r:rat) : string =
    LET (finp,infp) = decimal_precision(r,0) IN
    IF infp = 0 THEN
      rat2decstr(r,finp,Truncate)
    ELSE
      format("~a",r)
    ENDIF

  %% Pretty prints decimal using overline to indicate repeating digits. Finp is the number of 
  %% non-repeating digits. Truncated indicates that the infinite representation was truncated.
  pp_decstr(str:string,finp:nat,truncated:bool) : string 

  %% Pretty prints rational numbers upto precision using overline to indicate repeating digits
  %% and ellipsis when decimal expansion is truncated.
  pp_rat(r:rat) : string =
    LET  precision = val(PRECISION),
         (finp,infp) = decimal_precision(r,precision),
	 str = rat2decstr_with_zeros(r,min(precision,finp+infp),Truncate,TRUE) IN
    pp_decstr(str,finp,finp+infp > precision)

  %% Return path name as a list of directories
  pathname_path(name:string) : list[string]

  %% Split filename given a seprator
  split_filename(name:string,separator:StringChar) : [string,string] =
    LET pos = strfind_from_end(separator,name) IN
      IF pos < 0 THEN
        (name,"")
      ELSIF pos = 0 THEN
        ("",substr(name,2,length(name)-1))
      ELSE
        (substr(name,0,pos-1),substr(name,pos+1,length(name)-1))
      ENDIF

  %% Filename without extension
  filename_without_extension(name:string) : string =
    split_filename(name,".")`1

  %% Extension of filename
  filename_extension(name:string) : string =
    split_filename(name,".")`2

  n : VAR nat

  charcode_ax : AXIOM
    length(charcode(n)) = 1

  charcode_j : JUDGEMENT
    charcode(n) HAS_TYPE StringChar

  doublequote_j : JUDGEMENT
    doublequote HAS_TYPE StringChar

  singlequote_j : JUDGEMENT
    singlequote HAS_TYPE StringChar

  backquote_j : JUDGEMENT
    backquote HAS_TYPE StringChar

  %% Returns TRUE if T1 is a subtype of T2 (types are represented using strings).
  %% Uses subtype judgements, but otherwise it's essentially syntactic
  subtypeof?(T1,T2:string) : bool

END stdstr_utils
